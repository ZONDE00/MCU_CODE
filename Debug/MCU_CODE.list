
MCU_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004934  08004934  00014934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a10  08004a10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a18  08004a18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000000c  08004a2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08004a2c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001735d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002917  00000000  00000000  00037391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  00039ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1c3  00000000  00000000  0003c550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186ff  00000000  00000000  00056713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac1cd  00000000  00000000  0006ee12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011afdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d50  00000000  00000000  0011b030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800491c 	.word	0x0800491c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800491c 	.word	0x0800491c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fe0e 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f813 	bl	800064e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fac2 	bl	8000bb0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800062c:	f000 f904 	bl	8000838 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000630:	f000 fa3c 	bl	8000aac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000634:	f000 f854 	bl	80006e0 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000638:	f000 f8be 	bl	80007b8 <MX_I2C2_Init>
  MX_TIM2_Init();
 800063c:	f000 f93a 	bl	80008b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000640:	f000 f998 	bl	8000974 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000644:	f000 fa0c 	bl	8000a60 <MX_TIM14_Init>
  MX_USART4_UART_Init();
 8000648:	f000 fa7e 	bl	8000b48 <MX_USART4_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0x30>

0800064e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064e:	b590      	push	{r4, r7, lr}
 8000650:	b093      	sub	sp, #76	; 0x4c
 8000652:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000654:	2410      	movs	r4, #16
 8000656:	193b      	adds	r3, r7, r4
 8000658:	0018      	movs	r0, r3
 800065a:	2338      	movs	r3, #56	; 0x38
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f004 f954 	bl	800490c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	003b      	movs	r3, r7
 8000666:	0018      	movs	r0, r3
 8000668:	2310      	movs	r3, #16
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f004 f94d 	bl	800490c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	0018      	movs	r0, r3
 8000678:	f001 fe4a 	bl	8002310 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 fe82 	bl	80023a8 <HAL_RCC_OscConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a8:	f000 faf0 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	003b      	movs	r3, r7
 80006ae:	2207      	movs	r2, #7
 80006b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	003b      	movs	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	003b      	movs	r3, r7
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f002 f987 	bl	80029dc <HAL_RCC_ClockConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006d2:	f000 fadb 	bl	8000c8c <Error_Handler>
  }
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b013      	add	sp, #76	; 0x4c
 80006dc:	bd90      	pop	{r4, r7, pc}
	...

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	0018      	movs	r0, r3
 80006ea:	230c      	movs	r3, #12
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f004 f90c 	bl	800490c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_ADC1_Init+0xcc>)
 80006f6:	4a2e      	ldr	r2, [pc, #184]	; (80007b0 <MX_ADC1_Init+0xd0>)
 80006f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006fa:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <MX_ADC1_Init+0xcc>)
 80006fc:	2280      	movs	r2, #128	; 0x80
 80006fe:	05d2      	lsls	r2, r2, #23
 8000700:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000702:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <MX_ADC1_Init+0xcc>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000716:	2204      	movs	r2, #4
 8000718:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_ADC1_Init+0xcc>)
 800071c:	2200      	movs	r2, #0
 800071e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000722:	2200      	movs	r2, #0
 8000724:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000728:	2200      	movs	r2, #0
 800072a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ADC1_Init+0xcc>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000734:	2220      	movs	r2, #32
 8000736:	2100      	movs	r1, #0
 8000738:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_ADC1_Init+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000748:	222c      	movs	r2, #44	; 0x2c
 800074a:	2100      	movs	r1, #0
 800074c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000756:	2200      	movs	r2, #0
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ADC1_Init+0xcc>)
 800075c:	2200      	movs	r2, #0
 800075e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000762:	223c      	movs	r2, #60	; 0x3c
 8000764:	2100      	movs	r1, #0
 8000766:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000768:	4b10      	ldr	r3, [pc, #64]	; (80007ac <MX_ADC1_Init+0xcc>)
 800076a:	2200      	movs	r2, #0
 800076c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fee9 	bl	8001548 <HAL_ADC_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800077a:	f000 fa87 	bl	8000c8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <MX_ADC1_Init+0xd4>)
 8000782:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	1d3a      	adds	r2, r7, #4
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_ADC1_Init+0xcc>)
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f001 f87e 	bl	8001898 <HAL_ADC_ConfigChannel>
 800079c:	1e03      	subs	r3, r0, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80007a0:	f000 fa74 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b004      	add	sp, #16
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000028 	.word	0x20000028
 80007b0:	40012400 	.word	0x40012400
 80007b4:	b0001000 	.word	0xb0001000

080007b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_I2C2_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_I2C2_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_I2C2_Init+0x74>)
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <MX_I2C2_Init+0x7c>)
 80007c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_I2C2_Init+0x74>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C2_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2C2_Init+0x74>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 fc5d 	bl	80020b4 <HAL_I2C_Init>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007fe:	f000 fa45 	bl	8000c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_I2C2_Init+0x74>)
 8000804:	2100      	movs	r1, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f001 fcea 	bl	80021e0 <HAL_I2CEx_ConfigAnalogFilter>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000810:	f000 fa3c 	bl	8000c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <MX_I2C2_Init+0x74>)
 8000816:	2100      	movs	r1, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f001 fd2d 	bl	8002278 <HAL_I2CEx_ConfigDigitalFilter>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000822:	f000 fa33 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000008c 	.word	0x2000008c
 8000830:	40005800 	.word	0x40005800
 8000834:	00303d5b 	.word	0x00303d5b

08000838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_SPI1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_SPI1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_SPI1_Init+0x74>)
 8000844:	2282      	movs	r2, #130	; 0x82
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_SPI1_Init+0x74>)
 8000852:	22c0      	movs	r2, #192	; 0xc0
 8000854:	0092      	lsls	r2, r2, #2
 8000856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI1_Init+0x74>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	0092      	lsls	r2, r2, #2
 800086a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI1_Init+0x74>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI1_Init+0x74>)
 8000892:	2208      	movs	r2, #8
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <MX_SPI1_Init+0x74>)
 8000898:	0018      	movs	r0, r3
 800089a:	f002 fc01 	bl	80030a0 <HAL_SPI_Init>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f000 f9f3 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000e0 	.word	0x200000e0
 80008b0:	40013000 	.word	0x40013000

080008b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	231c      	movs	r3, #28
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	0018      	movs	r0, r3
 80008c0:	230c      	movs	r3, #12
 80008c2:	001a      	movs	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	f004 f821 	bl	800490c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ca:	003b      	movs	r3, r7
 80008cc:	0018      	movs	r0, r3
 80008ce:	231c      	movs	r3, #28
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f004 f81a 	bl	800490c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_TIM2_Init+0xbc>)
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	05d2      	lsls	r2, r2, #23
 80008de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_TIM2_Init+0xbc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_TIM2_Init+0xbc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_TIM2_Init+0xbc>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	4252      	negs	r2, r2
 80008f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_TIM2_Init+0xbc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM2_Init+0xbc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_TIM2_Init+0xbc>)
 8000902:	0018      	movs	r0, r3
 8000904:	f002 fcdc 	bl	80032c0 <HAL_TIM_PWM_Init>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800090c:	f000 f9be 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	211c      	movs	r1, #28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091e:	187a      	adds	r2, r7, r1
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_TIM2_Init+0xbc>)
 8000922:	0011      	movs	r1, r2
 8000924:	0018      	movs	r0, r3
 8000926:	f003 f967 	bl	8003bf8 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800092e:	f000 f9ad 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000932:	003b      	movs	r3, r7
 8000934:	2260      	movs	r2, #96	; 0x60
 8000936:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000938:	003b      	movs	r3, r7
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093e:	003b      	movs	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	003b      	movs	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800094a:	0039      	movs	r1, r7
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_TIM2_Init+0xbc>)
 800094e:	2208      	movs	r2, #8
 8000950:	0018      	movs	r0, r3
 8000952:	f002 fd0d 	bl	8003370 <HAL_TIM_PWM_ConfigChannel>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800095a:	f000 f997 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800095e:	4b04      	ldr	r3, [pc, #16]	; (8000970 <MX_TIM2_Init+0xbc>)
 8000960:	0018      	movs	r0, r3
 8000962:	f000 fb01 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b00a      	add	sp, #40	; 0x28
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	20000144 	.word	0x20000144

08000974 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	231c      	movs	r3, #28
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	230c      	movs	r3, #12
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f003 ffc1 	bl	800490c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	003b      	movs	r3, r7
 800098c:	0018      	movs	r0, r3
 800098e:	231c      	movs	r3, #28
 8000990:	001a      	movs	r2, r3
 8000992:	2100      	movs	r1, #0
 8000994:	f003 ffba 	bl	800490c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <MX_TIM3_Init+0xe0>)
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <MX_TIM3_Init+0xe4>)
 800099c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009ac:	4a2b      	ldr	r2, [pc, #172]	; (8000a5c <MX_TIM3_Init+0xe8>)
 80009ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b0:	4b28      	ldr	r3, [pc, #160]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b6:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009bc:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 fc7e 	bl	80032c0 <HAL_TIM_PWM_Init>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 f960 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009cc:	211c      	movs	r1, #28
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009da:	187a      	adds	r2, r7, r1
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_TIM3_Init+0xe0>)
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f003 f909 	bl	8003bf8 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80009ea:	f000 f94f 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	003b      	movs	r3, r7
 80009f0:	2260      	movs	r2, #96	; 0x60
 80009f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009f4:	003b      	movs	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	003b      	movs	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a00:	003b      	movs	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a06:	0039      	movs	r1, r7
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_TIM3_Init+0xe0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f002 fcaf 	bl	8003370 <HAL_TIM_PWM_ConfigChannel>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000a16:	f000 f939 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a1a:	0039      	movs	r1, r7
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_TIM3_Init+0xe0>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fca5 	bl	8003370 <HAL_TIM_PWM_ConfigChannel>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000a2a:	f000 f92f 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a2e:	0039      	movs	r1, r7
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_TIM3_Init+0xe0>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	0018      	movs	r0, r3
 8000a36:	f002 fc9b 	bl	8003370 <HAL_TIM_PWM_ConfigChannel>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8000a3e:	f000 f925 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <MX_TIM3_Init+0xe0>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fa8f 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b00a      	add	sp, #40	; 0x28
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	20000190 	.word	0x20000190
 8000a58:	40000400 	.word	0x40000400
 8000a5c:	0000ffff 	.word	0x0000ffff

08000a60 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <MX_TIM14_Init+0x44>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a78:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <MX_TIM14_Init+0x48>)
 8000a7a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <MX_TIM14_Init+0x40>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 fbc0 	bl	8003210 <HAL_TIM_Base_Init>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000a94:	f000 f8fa 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	200001dc 	.word	0x200001dc
 8000aa4:	40002000 	.word	0x40002000
 8000aa8:	0000ffff 	.word	0x0000ffff

08000aac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ab0:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <MX_USART1_UART_Init+0x98>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ab8:	22e1      	movs	r2, #225	; 0xe1
 8000aba:	0252      	lsls	r2, r2, #9
 8000abc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f003 f8ec 	bl	8003cd4 <HAL_UART_Init>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 f8c4 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000b06:	2100      	movs	r1, #0
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f003 fdfb 	bl	8004704 <HAL_UARTEx_SetTxFifoThreshold>
 8000b0e:	1e03      	subs	r3, r0, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 f8bb 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 fe32 	bl	8004784 <HAL_UARTEx_SetRxFifoThreshold>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 f8b2 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <MX_USART1_UART_Init+0x94>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f003 fdb0 	bl	8004690 <HAL_UARTEx_DisableFifoMode>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 f8aa 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	20000228 	.word	0x20000228
 8000b44:	40013800 	.word	0x40013800

08000b48 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <MX_USART4_UART_Init+0x64>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b54:	22e1      	movs	r2, #225	; 0xe1
 8000b56:	0252      	lsls	r2, r2, #9
 8000b58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <MX_USART4_UART_Init+0x60>)
 8000b92:	0018      	movs	r0, r3
 8000b94:	f003 f89e 	bl	8003cd4 <HAL_UART_Init>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 f876 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	200002bc 	.word	0x200002bc
 8000bac:	40004c00 	.word	0x40004c00

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	240c      	movs	r4, #12
 8000bb8:	193b      	adds	r3, r7, r4
 8000bba:	0018      	movs	r0, r3
 8000bbc:	2314      	movs	r3, #20
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	f003 fea3 	bl	800490c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000bcc:	2104      	movs	r1, #4
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000be2:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
 8000bea:	4b25      	ldr	r3, [pc, #148]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <MX_GPIO_Init+0xd0>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	2202      	movs	r2, #2
 8000c08:	4013      	ands	r3, r2
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROPE_CUT_Pin|SO2_Pin|SO0_Pin, GPIO_PIN_RESET);
 8000c0e:	491d      	ldr	r1, [pc, #116]	; (8000c84 <MX_GPIO_Init+0xd4>)
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2200      	movs	r2, #0
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fa2e 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_EN_Pin|SO1_Pin, GPIO_PIN_RESET);
 8000c1c:	2381      	movs	r3, #129	; 0x81
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4819      	ldr	r0, [pc, #100]	; (8000c88 <MX_GPIO_Init+0xd8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	0019      	movs	r1, r3
 8000c26:	f001 fa27 	bl	8002078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ROPE_CUT_Pin SO2_Pin SO0_Pin */
  GPIO_InitStruct.Pin = ROPE_CUT_Pin|SO2_Pin|SO0_Pin;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <MX_GPIO_Init+0xd4>)
 8000c2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2201      	movs	r2, #1
 8000c34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	193a      	adds	r2, r7, r4
 8000c44:	23a0      	movs	r3, #160	; 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 f8b0 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX_EN_Pin SO1_Pin */
  GPIO_InitStruct.Pin = MUX_EN_Pin|SO1_Pin;
 8000c50:	0021      	movs	r1, r4
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2281      	movs	r2, #129	; 0x81
 8000c56:	0052      	lsls	r2, r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <MX_GPIO_Init+0xd8>)
 8000c70:	0019      	movs	r1, r3
 8000c72:	0010      	movs	r0, r2
 8000c74:	f001 f89c 	bl	8001db0 <HAL_GPIO_Init>

}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b009      	add	sp, #36	; 0x24
 8000c7e:	bd90      	pop	{r4, r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	00008120 	.word	0x00008120
 8000c88:	50000400 	.word	0x50000400

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cba:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	0549      	lsls	r1, r1, #21
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	055b      	lsls	r3, r3, #21
 8000ccc:	4013      	ands	r3, r2
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b097      	sub	sp, #92	; 0x5c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	2344      	movs	r3, #68	; 0x44
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f003 fe0a 	bl	800490c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	2410      	movs	r4, #16
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	2334      	movs	r3, #52	; 0x34
 8000d00:	001a      	movs	r2, r3
 8000d02:	2100      	movs	r1, #0
 8000d04:	f003 fe02 	bl	800490c <memset>
  if(hadc->Instance==ADC1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a20      	ldr	r2, [pc, #128]	; (8000d90 <HAL_ADC_MspInit+0xb0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d139      	bne.n	8000d86 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	01d2      	lsls	r2, r2, #7
 8000d18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 f804 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d2c:	f7ff ffae 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_ADC_MspInit+0xb4>)
 8000d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_ADC_MspInit+0xb4>)
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	0349      	lsls	r1, r1, #13
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <HAL_ADC_MspInit+0xb4>)
 8000d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	035b      	lsls	r3, r3, #13
 8000d46:	4013      	ands	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <HAL_ADC_MspInit+0xb4>)
 8000d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_ADC_MspInit+0xb4>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	430a      	orrs	r2, r1
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_ADC_MspInit+0xb4>)
 8000d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000d64:	2144      	movs	r1, #68	; 0x44
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	221c      	movs	r2, #28
 8000d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	187a      	adds	r2, r7, r1
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f001 f815 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b017      	add	sp, #92	; 0x5c
 8000d8c:	bd90      	pop	{r4, r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	40012400 	.word	0x40012400
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b08b      	sub	sp, #44	; 0x2c
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	2414      	movs	r4, #20
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	0018      	movs	r0, r3
 8000da6:	2314      	movs	r3, #20
 8000da8:	001a      	movs	r2, r3
 8000daa:	2100      	movs	r1, #0
 8000dac:	f003 fdae 	bl	800490c <memset>
  if(hi2c->Instance==I2C2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <HAL_I2C_MspInit+0x90>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d131      	bne.n	8000e1e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <HAL_I2C_MspInit+0x94>)
 8000dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_I2C_MspInit+0x94>)
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <HAL_I2C_MspInit+0x94>)
 8000dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	22c0      	movs	r2, #192	; 0xc0
 8000dd6:	0152      	lsls	r2, r2, #5
 8000dd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dda:	0021      	movs	r1, r4
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2212      	movs	r2, #18
 8000de0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2200      	movs	r2, #0
 8000dec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2206      	movs	r2, #6
 8000df2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	187a      	adds	r2, r7, r1
 8000df6:	23a0      	movs	r3, #160	; 0xa0
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	0011      	movs	r1, r2
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 ffd7 	bl	8001db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_I2C_MspInit+0x94>)
 8000e04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_I2C_MspInit+0x94>)
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	03c9      	lsls	r1, r1, #15
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_I2C_MspInit+0x94>)
 8000e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	03db      	lsls	r3, r3, #15
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b00b      	add	sp, #44	; 0x2c
 8000e24:	bd90      	pop	{r4, r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40005800 	.word	0x40005800
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b08b      	sub	sp, #44	; 0x2c
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	2414      	movs	r4, #20
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	2314      	movs	r3, #20
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f003 fd62 	bl	800490c <memset>
  if(hspi->Instance==SPI1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_SPI_MspInit+0x8c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12f      	bne.n	8000eb2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e58:	2180      	movs	r1, #128	; 0x80
 8000e5a:	0149      	lsls	r1, r1, #5
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	015b      	lsls	r3, r3, #5
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e74:	2102      	movs	r1, #2
 8000e76:	430a      	orrs	r2, r1
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_SPI_MspInit+0x90>)
 8000e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7e:	2202      	movs	r2, #2
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000e86:	0021      	movs	r1, r4
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2238      	movs	r2, #56	; 0x38
 8000e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2202      	movs	r2, #2
 8000e92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_SPI_MspInit+0x94>)
 8000eaa:	0019      	movs	r1, r3
 8000eac:	0010      	movs	r0, r2
 8000eae:	f000 ff7f 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00b      	add	sp, #44	; 0x2c
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	50000400 	.word	0x50000400

08000ec8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d10c      	bne.n	8000ef6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_TIM_PWM_MspInit+0x58>)
 8000ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_TIM_PWM_MspInit+0x58>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_TIM_PWM_MspInit+0x58>)
 8000eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eec:	2201      	movs	r2, #1
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ef4:	e010      	b.n	8000f18 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_TIM_PWM_MspInit+0x5c>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d10b      	bne.n	8000f18 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <HAL_TIM_PWM_MspInit+0x58>)
 8000f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_TIM_PWM_MspInit+0x58>)
 8000f06:	2102      	movs	r1, #2
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <HAL_TIM_PWM_MspInit+0x58>)
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f10:	2202      	movs	r2, #2
 8000f12:	4013      	ands	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b004      	add	sp, #16
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40000400 	.word	0x40000400

08000f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_TIM_Base_MspInit+0x38>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d10d      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_TIM_Base_MspInit+0x3c>)
 8000f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <HAL_TIM_Base_MspInit+0x3c>)
 8000f40:	2180      	movs	r1, #128	; 0x80
 8000f42:	0209      	lsls	r1, r1, #8
 8000f44:	430a      	orrs	r2, r1
 8000f46:	641a      	str	r2, [r3, #64]	; 0x40
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_TIM_Base_MspInit+0x3c>)
 8000f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	021b      	lsls	r3, r3, #8
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b004      	add	sp, #16
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	40002000 	.word	0x40002000
 8000f64:	40021000 	.word	0x40021000

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b08b      	sub	sp, #44	; 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	2414      	movs	r4, #20
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0018      	movs	r0, r3
 8000f76:	2314      	movs	r3, #20
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f003 fcc6 	bl	800490c <memset>
  if(htim->Instance==TIM2)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d122      	bne.n	8000fd2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8c:	4b38      	ldr	r3, [pc, #224]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f90:	4b37      	ldr	r3, [pc, #220]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000f92:	2104      	movs	r1, #4
 8000f94:	430a      	orrs	r2, r1
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
 8000f98:	4b35      	ldr	r3, [pc, #212]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PC6     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8000fa4:	0021      	movs	r1, r4
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2240      	movs	r2, #64	; 0x40
 8000faa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2202      	movs	r2, #2
 8000fb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <HAL_TIM_MspPostInit+0x10c>)
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0010      	movs	r0, r2
 8000fcc:	f000 fef0 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fd0:	e049      	b.n	8001066 <HAL_TIM_MspPostInit+0xfe>
  else if(htim->Instance==TIM3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a28      	ldr	r2, [pc, #160]	; (8001078 <HAL_TIM_MspPostInit+0x110>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d144      	bne.n	8001066 <HAL_TIM_MspPostInit+0xfe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fec:	2201      	movs	r2, #1
 8000fee:	4013      	ands	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
 8001000:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_TIM_MspPostInit+0x108>)
 8001002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001004:	2202      	movs	r2, #2
 8001006:	4013      	ands	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin;
 800100c:	2414      	movs	r4, #20
 800100e:	193b      	adds	r3, r7, r4
 8001010:	22c0      	movs	r2, #192	; 0xc0
 8001012:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	193b      	adds	r3, r7, r4
 8001016:	2202      	movs	r2, #2
 8001018:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	193b      	adds	r3, r7, r4
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001026:	193b      	adds	r3, r7, r4
 8001028:	2201      	movs	r2, #1
 800102a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	193a      	adds	r2, r7, r4
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	0011      	movs	r1, r2
 8001034:	0018      	movs	r0, r3
 8001036:	f000 febb 	bl	8001db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLUE_Pin;
 800103a:	0021      	movs	r1, r4
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2202      	movs	r2, #2
 8001046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2201      	movs	r2, #1
 8001058:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 800105a:	187b      	adds	r3, r7, r1
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_TIM_MspPostInit+0x114>)
 800105e:	0019      	movs	r1, r3
 8001060:	0010      	movs	r0, r2
 8001062:	f000 fea5 	bl	8001db0 <HAL_GPIO_Init>
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b00b      	add	sp, #44	; 0x2c
 800106c:	bd90      	pop	{r4, r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40021000 	.word	0x40021000
 8001074:	50000800 	.word	0x50000800
 8001078:	40000400 	.word	0x40000400
 800107c:	50000400 	.word	0x50000400

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b099      	sub	sp, #100	; 0x64
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	234c      	movs	r3, #76	; 0x4c
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	0018      	movs	r0, r3
 800108e:	2314      	movs	r3, #20
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	f003 fc3a 	bl	800490c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	2418      	movs	r4, #24
 800109a:	193b      	adds	r3, r7, r4
 800109c:	0018      	movs	r0, r3
 800109e:	2334      	movs	r3, #52	; 0x34
 80010a0:	001a      	movs	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f003 fc32 	bl	800490c <memset>
  if(huart->Instance==USART1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a3d      	ldr	r2, [pc, #244]	; (80011a4 <HAL_UART_MspInit+0x124>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d13e      	bne.n	8001130 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	2201      	movs	r2, #1
 80010b6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	0018      	movs	r0, r3
 80010c2:	f001 fe35 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	1e03      	subs	r3, r0, #0
 80010c8:	d001      	beq.n	80010ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010ca:	f7ff fddf 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010ce:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_UART_MspInit+0x128>)
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <HAL_UART_MspInit+0x128>)
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	01c9      	lsls	r1, r1, #7
 80010d8:	430a      	orrs	r2, r1
 80010da:	641a      	str	r2, [r3, #64]	; 0x40
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <HAL_UART_MspInit+0x128>)
 80010de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	4013      	ands	r3, r2
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <HAL_UART_MspInit+0x128>)
 80010ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_UART_MspInit+0x128>)
 80010f0:	2102      	movs	r1, #2
 80010f2:	430a      	orrs	r2, r1
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_UART_MspInit+0x128>)
 80010f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8001102:	214c      	movs	r1, #76	; 0x4c
 8001104:	187b      	adds	r3, r7, r1
 8001106:	22c0      	movs	r2, #192	; 0xc0
 8001108:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2202      	movs	r2, #2
 800110e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	187b      	adds	r3, r7, r1
 8001124:	4a21      	ldr	r2, [pc, #132]	; (80011ac <HAL_UART_MspInit+0x12c>)
 8001126:	0019      	movs	r1, r3
 8001128:	0010      	movs	r0, r2
 800112a:	f000 fe41 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800112e:	e035      	b.n	800119c <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART4)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <HAL_UART_MspInit+0x130>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d130      	bne.n	800119c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART4_CLK_ENABLE();
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_UART_MspInit+0x128>)
 800113c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113e:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_UART_MspInit+0x128>)
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0309      	lsls	r1, r1, #12
 8001144:	430a      	orrs	r2, r1
 8001146:	63da      	str	r2, [r3, #60]	; 0x3c
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_UART_MspInit+0x128>)
 800114a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	031b      	lsls	r3, r3, #12
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_UART_MspInit+0x128>)
 8001158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_UART_MspInit+0x128>)
 800115c:	2101      	movs	r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_UART_MspInit+0x128>)
 8001164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001166:	2201      	movs	r2, #1
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = COM_TX_Pin|COM_RX_Pin;
 800116e:	214c      	movs	r1, #76	; 0x4c
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2203      	movs	r2, #3
 8001174:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2202      	movs	r2, #2
 800117a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2204      	movs	r2, #4
 800118c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	187a      	adds	r2, r7, r1
 8001190:	23a0      	movs	r3, #160	; 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	0011      	movs	r1, r2
 8001196:	0018      	movs	r0, r3
 8001198:	f000 fe0a 	bl	8001db0 <HAL_GPIO_Init>
}
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b019      	add	sp, #100	; 0x64
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	40013800 	.word	0x40013800
 80011a8:	40021000 	.word	0x40021000
 80011ac:	50000400 	.word	0x50000400
 80011b0:	40004c00 	.word	0x40004c00

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d8:	f000 f89c 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f0:	f7ff fff7 	bl	80011e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	; (800122c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800121a:	f003 fb53 	bl	80048c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800121e:	f7ff f9fd 	bl	800061c <main>

08001222 <LoopForever>:

LoopForever:
  b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   r0, =_estack
 8001224:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001230:	08004a20 	.word	0x08004a20
  ldr r2, =_sbss
 8001234:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001238:	20000354 	.word	0x20000354

0800123c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_COMP_IRQHandler>
	...

08001240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <HAL_Init+0x3c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Init+0x3c>)
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	0049      	lsls	r1, r1, #1
 8001256:	430a      	orrs	r2, r1
 8001258:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	2003      	movs	r0, #3
 800125c:	f000 f810 	bl	8001280 <HAL_InitTick>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d003      	beq.n	800126c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
 800126a:	e001      	b.n	8001270 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff fd14 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	781b      	ldrb	r3, [r3, #0]
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	230f      	movs	r3, #15
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_InitTick+0x88>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d02b      	beq.n	80012f0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_InitTick+0x8c>)
 800129a:	681c      	ldr	r4, [r3, #0]
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_InitTick+0x88>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	0019      	movs	r1, r3
 80012a2:	23fa      	movs	r3, #250	; 0xfa
 80012a4:	0098      	lsls	r0, r3, #2
 80012a6:	f7fe ff2d 	bl	8000104 <__udivsi3>
 80012aa:	0003      	movs	r3, r0
 80012ac:	0019      	movs	r1, r3
 80012ae:	0020      	movs	r0, r4
 80012b0:	f7fe ff28 	bl	8000104 <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f000 fd6d 	bl	8001d96 <HAL_SYSTICK_Config>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d112      	bne.n	80012e6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d80a      	bhi.n	80012dc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	2301      	movs	r3, #1
 80012ca:	425b      	negs	r3, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 fd4c 	bl	8001d6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <HAL_InitTick+0x90>)
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e00d      	b.n	80012f8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012dc:	230f      	movs	r3, #15
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e008      	b.n	80012f8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e6:	230f      	movs	r3, #15
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e003      	b.n	80012f8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012f0:	230f      	movs	r3, #15
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012f8:	230f      	movs	r3, #15
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	781b      	ldrb	r3, [r3, #0]
}
 80012fe:	0018      	movs	r0, r3
 8001300:	46bd      	mov	sp, r7
 8001302:	b005      	add	sp, #20
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	20000008 	.word	0x20000008
 800130c:	20000000 	.word	0x20000000
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	001a      	movs	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	18d2      	adds	r2, r2, r3
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_IncTick+0x20>)
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	20000008 	.word	0x20000008
 8001334:	20000350 	.word	0x20000350

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	20000350 	.word	0x20000350

0800134c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800135c:	401a      	ands	r2, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	601a      	str	r2, [r3, #0]
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	fe3fffff 	.word	0xfe3fffff

08001374 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	23e0      	movs	r3, #224	; 0xe0
 8001382:	045b      	lsls	r3, r3, #17
 8001384:	4013      	ands	r3, r2
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b002      	add	sp, #8
 800138c:	bd80      	pop	{r7, pc}

0800138e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	2104      	movs	r1, #4
 80013a2:	400a      	ands	r2, r1
 80013a4:	2107      	movs	r1, #7
 80013a6:	4091      	lsls	r1, r2
 80013a8:	000a      	movs	r2, r1
 80013aa:	43d2      	mvns	r2, r2
 80013ac:	401a      	ands	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	2104      	movs	r1, #4
 80013b2:	400b      	ands	r3, r1
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4099      	lsls	r1, r3
 80013b8:	000b      	movs	r3, r1
 80013ba:	431a      	orrs	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b004      	add	sp, #16
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	2104      	movs	r1, #4
 80013da:	400a      	ands	r2, r1
 80013dc:	2107      	movs	r1, #7
 80013de:	4091      	lsls	r1, r2
 80013e0:	000a      	movs	r2, r1
 80013e2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2104      	movs	r1, #4
 80013e8:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80013ea:	40da      	lsrs	r2, r3
 80013ec:	0013      	movs	r3, r2
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	211f      	movs	r1, #31
 800140a:	400a      	ands	r2, r1
 800140c:	210f      	movs	r1, #15
 800140e:	4091      	lsls	r1, r2
 8001410:	000a      	movs	r2, r1
 8001412:	43d2      	mvns	r2, r2
 8001414:	401a      	ands	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	0e9b      	lsrs	r3, r3, #26
 800141a:	210f      	movs	r1, #15
 800141c:	4019      	ands	r1, r3
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	201f      	movs	r0, #31
 8001422:	4003      	ands	r3, r0
 8001424:	4099      	lsls	r1, r3
 8001426:	000b      	movs	r3, r1
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}

08001436 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	035b      	lsls	r3, r3, #13
 8001448:	0b5b      	lsrs	r3, r3, #13
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}

08001458 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	0352      	lsls	r2, r2, #13
 800146a:	0b52      	lsrs	r2, r2, #13
 800146c:	43d2      	mvns	r2, r2
 800146e:	401a      	ands	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001474:	46c0      	nop			; (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	b002      	add	sp, #8
 800147a:	bd80      	pop	{r7, pc}

0800147c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	68ba      	ldr	r2, [r7, #8]
 800148e:	0212      	lsls	r2, r2, #8
 8001490:	43d2      	mvns	r2, r2
 8001492:	401a      	ands	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	400b      	ands	r3, r1
 800149c:	4904      	ldr	r1, [pc, #16]	; (80014b0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800149e:	400b      	ands	r3, r1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b004      	add	sp, #16
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	07ffff00 	.word	0x07ffff00

080014b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	0552      	lsls	r2, r2, #21
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	6fffffe8 	.word	0x6fffffe8

080014dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	055b      	lsls	r3, r3, #21
 80014ec:	401a      	ands	r2, r3
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	055b      	lsls	r3, r3, #21
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d101      	bne.n	80014fa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	b002      	add	sp, #8
 8001502:	bd80      	pop	{r7, pc}

08001504 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2201      	movs	r2, #1
 8001512:	4013      	ands	r3, r2
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <LL_ADC_IsEnabled+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_IsEnabled+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}

08001526 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2204      	movs	r2, #4
 8001534:	4013      	ands	r3, r2
 8001536:	2b04      	cmp	r3, #4
 8001538:	d101      	bne.n	800153e <LL_ADC_REG_IsConversionOngoing+0x18>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b002      	add	sp, #8
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001550:	231f      	movs	r3, #31
 8001552:	18fb      	adds	r3, r7, r3
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001558:	2300      	movs	r3, #0
 800155a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e17f      	b.n	800186e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10a      	bne.n	800158c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff fbb1 	bl	8000ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2254      	movs	r2, #84	; 0x54
 8001588:	2100      	movs	r1, #0
 800158a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ffa3 	bl	80014dc <LL_ADC_IsInternalRegulatorEnabled>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d115      	bne.n	80015c6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff ff88 	bl	80014b4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015a4:	4bb4      	ldr	r3, [pc, #720]	; (8001878 <HAL_ADC_Init+0x330>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	49b4      	ldr	r1, [pc, #720]	; (800187c <HAL_ADC_Init+0x334>)
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7fe fdaa 	bl	8000104 <__udivsi3>
 80015b0:	0003      	movs	r3, r0
 80015b2:	3301      	adds	r3, #1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015b8:	e002      	b.n	80015c0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f9      	bne.n	80015ba <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff ff86 	bl	80014dc <LL_ADC_IsInternalRegulatorEnabled>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d10f      	bne.n	80015f4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	2210      	movs	r2, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	2201      	movs	r2, #1
 80015e6:	431a      	orrs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015ec:	231f      	movs	r3, #31
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff ff94 	bl	8001526 <LL_ADC_REG_IsConversionOngoing>
 80015fe:	0003      	movs	r3, r0
 8001600:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	2210      	movs	r2, #16
 8001608:	4013      	ands	r3, r2
 800160a:	d000      	beq.n	800160e <HAL_ADC_Init+0xc6>
 800160c:	e122      	b.n	8001854 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d000      	beq.n	8001616 <HAL_ADC_Init+0xce>
 8001614:	e11e      	b.n	8001854 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	4a99      	ldr	r2, [pc, #612]	; (8001880 <HAL_ADC_Init+0x338>)
 800161c:	4013      	ands	r3, r2
 800161e:	2202      	movs	r2, #2
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	0018      	movs	r0, r3
 800162c:	f7ff ff6a 	bl	8001504 <LL_ADC_IsEnabled>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d000      	beq.n	8001636 <HAL_ADC_Init+0xee>
 8001634:	e0ad      	b.n	8001792 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e1b      	ldrb	r3, [r3, #24]
 800163e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001640:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7e5b      	ldrb	r3, [r3, #25]
 8001646:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001648:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7e9b      	ldrb	r3, [r3, #26]
 800164e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001650:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <HAL_ADC_Init+0x118>
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	e000      	b.n	8001662 <HAL_ADC_Init+0x11a>
 8001660:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001662:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001668:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	da04      	bge.n	800167c <HAL_ADC_Init+0x134>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	085b      	lsrs	r3, r3, #1
 800167a:	e001      	b.n	8001680 <HAL_ADC_Init+0x138>
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001680:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	212c      	movs	r1, #44	; 0x2c
 8001686:	5c5b      	ldrb	r3, [r3, r1]
 8001688:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800168a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2220      	movs	r2, #32
 8001696:	5c9b      	ldrb	r3, [r3, r2]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d115      	bne.n	80016c8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7e9b      	ldrb	r3, [r3, #26]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	0252      	lsls	r2, r2, #9
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	e00b      	b.n	80016c8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b4:	2220      	movs	r2, #32
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c0:	2201      	movs	r2, #1
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00a      	beq.n	80016e6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d4:	23e0      	movs	r3, #224	; 0xe0
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016de:	4313      	orrs	r3, r2
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_ADC_Init+0x33c>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	0019      	movs	r1, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	0f9b      	lsrs	r3, r3, #30
 8001702:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001708:	4313      	orrs	r3, r2
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	223c      	movs	r2, #60	; 0x3c
 8001714:	5c9b      	ldrb	r3, [r3, r2]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d111      	bne.n	800173e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	0f9b      	lsrs	r3, r3, #30
 8001720:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001726:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800172c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001732:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	4313      	orrs	r3, r2
 8001738:	2201      	movs	r2, #1
 800173a:	4313      	orrs	r3, r2
 800173c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	4a50      	ldr	r2, [pc, #320]	; (8001888 <HAL_ADC_Init+0x340>)
 8001746:	4013      	ands	r3, r2
 8001748:	0019      	movs	r1, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	430a      	orrs	r2, r1
 8001752:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	23c0      	movs	r3, #192	; 0xc0
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	429a      	cmp	r2, r3
 800175e:	d018      	beq.n	8001792 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	05db      	lsls	r3, r3, #23
 8001768:	429a      	cmp	r2, r3
 800176a:	d012      	beq.n	8001792 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	061b      	lsls	r3, r3, #24
 8001774:	429a      	cmp	r2, r3
 8001776:	d00c      	beq.n	8001792 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001778:	4b44      	ldr	r3, [pc, #272]	; (800188c <HAL_ADC_Init+0x344>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a44      	ldr	r2, [pc, #272]	; (8001890 <HAL_ADC_Init+0x348>)
 800177e:	4013      	ands	r3, r2
 8001780:	0019      	movs	r1, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	23f0      	movs	r3, #240	; 0xf0
 8001788:	039b      	lsls	r3, r3, #14
 800178a:	401a      	ands	r2, r3
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_ADC_Init+0x344>)
 800178e:	430a      	orrs	r2, r1
 8001790:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800179a:	001a      	movs	r2, r3
 800179c:	2100      	movs	r1, #0
 800179e:	f7ff fdf6 	bl	800138e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	493a      	ldr	r1, [pc, #232]	; (8001894 <HAL_ADC_Init+0x34c>)
 80017ac:	001a      	movs	r2, r3
 80017ae:	f7ff fdee 	bl	800138e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2110      	movs	r1, #16
 80017c6:	4249      	negs	r1, r1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
 80017cc:	e018      	b.n	8001800 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	039b      	lsls	r3, r3, #14
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d112      	bne.n	8001800 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	3b01      	subs	r3, #1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	221c      	movs	r2, #28
 80017ea:	4013      	ands	r3, r2
 80017ec:	2210      	movs	r2, #16
 80017ee:	4252      	negs	r2, r2
 80017f0:	409a      	lsls	r2, r3
 80017f2:	0011      	movs	r1, r2
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2100      	movs	r1, #0
 8001806:	0018      	movs	r0, r3
 8001808:	f7ff fdde 	bl	80013c8 <LL_ADC_GetSamplingTimeCommonChannels>
 800180c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001812:	429a      	cmp	r2, r3
 8001814:	d10b      	bne.n	800182e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	2203      	movs	r2, #3
 8001822:	4393      	bics	r3, r2
 8001824:	2201      	movs	r2, #1
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800182c:	e01c      	b.n	8001868 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	2212      	movs	r2, #18
 8001834:	4393      	bics	r3, r2
 8001836:	2210      	movs	r2, #16
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2201      	movs	r2, #1
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800184a:	231f      	movs	r3, #31
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001852:	e009      	b.n	8001868 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	2210      	movs	r2, #16
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001860:	231f      	movs	r3, #31
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001868:	231f      	movs	r3, #31
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b008      	add	sp, #32
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	20000000 	.word	0x20000000
 800187c:	00030d40 	.word	0x00030d40
 8001880:	fffffefd 	.word	0xfffffefd
 8001884:	fffe0201 	.word	0xfffe0201
 8001888:	1ffffc02 	.word	0x1ffffc02
 800188c:	40012708 	.word	0x40012708
 8001890:	ffc3ffff 	.word	0xffc3ffff
 8001894:	07ffff04 	.word	0x07ffff04

08001898 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a2:	2317      	movs	r3, #23
 80018a4:	18fb      	adds	r3, r7, r3
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2254      	movs	r2, #84	; 0x54
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_ConfigChannel+0x24>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e1c0      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x3a6>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2254      	movs	r2, #84	; 0x54
 80018c0:	2101      	movs	r1, #1
 80018c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fe2c 	bl	8001526 <LL_ADC_REG_IsConversionOngoing>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d000      	beq.n	80018d4 <HAL_ADC_ConfigChannel+0x3c>
 80018d2:	e1a3      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d100      	bne.n	80018de <HAL_ADC_ConfigChannel+0x46>
 80018dc:	e143      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d004      	beq.n	80018f4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018ee:	4ac1      	ldr	r2, [pc, #772]	; (8001bf4 <HAL_ADC_ConfigChannel+0x35c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d108      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0019      	movs	r1, r3
 80018fe:	0010      	movs	r0, r2
 8001900:	f7ff fd99 	bl	8001436 <LL_ADC_REG_SetSequencerChAdd>
 8001904:	e0c9      	b.n	8001a9a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	211f      	movs	r1, #31
 8001910:	400b      	ands	r3, r1
 8001912:	210f      	movs	r1, #15
 8001914:	4099      	lsls	r1, r3
 8001916:	000b      	movs	r3, r1
 8001918:	43db      	mvns	r3, r3
 800191a:	4013      	ands	r3, r2
 800191c:	0019      	movs	r1, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	035b      	lsls	r3, r3, #13
 8001924:	0b5b      	lsrs	r3, r3, #13
 8001926:	d105      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x9c>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	221f      	movs	r2, #31
 8001930:	4013      	ands	r3, r2
 8001932:	e098      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	4013      	ands	r3, r2
 800193c:	d000      	beq.n	8001940 <HAL_ADC_ConfigChannel+0xa8>
 800193e:	e091      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x1cc>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d000      	beq.n	800194c <HAL_ADC_ConfigChannel+0xb4>
 800194a:	e089      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x1c8>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2204      	movs	r2, #4
 8001952:	4013      	ands	r3, r2
 8001954:	d000      	beq.n	8001958 <HAL_ADC_ConfigChannel+0xc0>
 8001956:	e081      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x1c4>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2208      	movs	r2, #8
 800195e:	4013      	ands	r3, r2
 8001960:	d000      	beq.n	8001964 <HAL_ADC_ConfigChannel+0xcc>
 8001962:	e079      	b.n	8001a58 <HAL_ADC_ConfigChannel+0x1c0>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2210      	movs	r2, #16
 800196a:	4013      	ands	r3, r2
 800196c:	d000      	beq.n	8001970 <HAL_ADC_ConfigChannel+0xd8>
 800196e:	e071      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x1bc>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2220      	movs	r2, #32
 8001976:	4013      	ands	r3, r2
 8001978:	d000      	beq.n	800197c <HAL_ADC_ConfigChannel+0xe4>
 800197a:	e069      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x1b8>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2240      	movs	r2, #64	; 0x40
 8001982:	4013      	ands	r3, r2
 8001984:	d000      	beq.n	8001988 <HAL_ADC_ConfigChannel+0xf0>
 8001986:	e061      	b.n	8001a4c <HAL_ADC_ConfigChannel+0x1b4>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	4013      	ands	r3, r2
 8001990:	d000      	beq.n	8001994 <HAL_ADC_ConfigChannel+0xfc>
 8001992:	e059      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x1b0>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d151      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1ac>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d149      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1a8>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4013      	ands	r3, r2
 80019b6:	d141      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1a4>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4013      	ands	r3, r2
 80019c2:	d139      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1a0>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	015b      	lsls	r3, r3, #5
 80019cc:	4013      	ands	r3, r2
 80019ce:	d131      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x19c>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	019b      	lsls	r3, r3, #6
 80019d8:	4013      	ands	r3, r2
 80019da:	d129      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x198>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4013      	ands	r3, r2
 80019e6:	d121      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x194>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4013      	ands	r3, r2
 80019f2:	d119      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x190>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	4013      	ands	r3, r2
 80019fe:	d111      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x18c>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d109      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x188>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	02db      	lsls	r3, r3, #11
 8001a14:	4013      	ands	r3, r2
 8001a16:	d001      	beq.n	8001a1c <HAL_ADC_ConfigChannel+0x184>
 8001a18:	2312      	movs	r3, #18
 8001a1a:	e024      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e022      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a20:	2311      	movs	r3, #17
 8001a22:	e020      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a24:	2310      	movs	r3, #16
 8001a26:	e01e      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a28:	230f      	movs	r3, #15
 8001a2a:	e01c      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a2c:	230e      	movs	r3, #14
 8001a2e:	e01a      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a30:	230d      	movs	r3, #13
 8001a32:	e018      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a34:	230c      	movs	r3, #12
 8001a36:	e016      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a38:	230b      	movs	r3, #11
 8001a3a:	e014      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	e012      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a40:	2309      	movs	r3, #9
 8001a42:	e010      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a44:	2308      	movs	r3, #8
 8001a46:	e00e      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a48:	2307      	movs	r3, #7
 8001a4a:	e00c      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	e00a      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a50:	2305      	movs	r3, #5
 8001a52:	e008      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a54:	2304      	movs	r3, #4
 8001a56:	e006      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e004      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e002      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x1ce>
 8001a64:	2300      	movs	r3, #0
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	6852      	ldr	r2, [r2, #4]
 8001a6a:	201f      	movs	r0, #31
 8001a6c:	4002      	ands	r2, r0
 8001a6e:	4093      	lsls	r3, r2
 8001a70:	000a      	movs	r2, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d808      	bhi.n	8001a9a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6818      	ldr	r0, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6859      	ldr	r1, [r3, #4]
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	001a      	movs	r2, r3
 8001a96:	f7ff fcae 	bl	80013f6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	001a      	movs	r2, r3
 8001aa8:	f7ff fce8 	bl	800147c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db00      	blt.n	8001ab6 <HAL_ADC_ConfigChannel+0x21e>
 8001ab4:	e0bc      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ab6:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff fc5b 	bl	8001374 <LL_ADC_GetCommonPathInternalCh>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a4d      	ldr	r2, [pc, #308]	; (8001bfc <HAL_ADC_ConfigChannel+0x364>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d122      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ad4:	d11d      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	0412      	lsls	r2, r2, #16
 8001adc:	4313      	orrs	r3, r2
 8001ade:	4a46      	ldr	r2, [pc, #280]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	0010      	movs	r0, r2
 8001ae4:	f7ff fc32 	bl	800134c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ae8:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <HAL_ADC_ConfigChannel+0x368>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4945      	ldr	r1, [pc, #276]	; (8001c04 <HAL_ADC_ConfigChannel+0x36c>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fb08 	bl	8000104 <__udivsi3>
 8001af4:	0003      	movs	r3, r0
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	0013      	movs	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	189b      	adds	r3, r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b02:	e002      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f9      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b10:	e08e      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a3c      	ldr	r2, [pc, #240]	; (8001c08 <HAL_ADC_ConfigChannel+0x370>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d10e      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	045b      	lsls	r3, r3, #17
 8001b22:	4013      	ands	r3, r2
 8001b24:	d109      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0452      	lsls	r2, r2, #17
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	4a32      	ldr	r2, [pc, #200]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001b30:	0019      	movs	r1, r3
 8001b32:	0010      	movs	r0, r2
 8001b34:	f7ff fc0a 	bl	800134c <LL_ADC_SetCommonPathInternalCh>
 8001b38:	e07a      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a33      	ldr	r2, [pc, #204]	; (8001c0c <HAL_ADC_ConfigChannel+0x374>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d000      	beq.n	8001b46 <HAL_ADC_ConfigChannel+0x2ae>
 8001b44:	e074      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	03db      	lsls	r3, r3, #15
 8001b4c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b4e:	d000      	beq.n	8001b52 <HAL_ADC_ConfigChannel+0x2ba>
 8001b50:	e06e      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2280      	movs	r2, #128	; 0x80
 8001b56:	03d2      	lsls	r2, r2, #15
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	0010      	movs	r0, r2
 8001b60:	f7ff fbf4 	bl	800134c <LL_ADC_SetCommonPathInternalCh>
 8001b64:	e064      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d004      	beq.n	8001b7c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b76:	4a1f      	ldr	r2, [pc, #124]	; (8001bf4 <HAL_ADC_ConfigChannel+0x35c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d107      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	0019      	movs	r1, r3
 8001b86:	0010      	movs	r0, r2
 8001b88:	f7ff fc66 	bl	8001458 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da4d      	bge.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff fbec 	bl	8001374 <LL_ADC_GetCommonPathInternalCh>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <HAL_ADC_ConfigChannel+0x364>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4a18      	ldr	r2, [pc, #96]	; (8001c10 <HAL_ADC_ConfigChannel+0x378>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	4a11      	ldr	r2, [pc, #68]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	0010      	movs	r0, r2
 8001bb6:	f7ff fbc9 	bl	800134c <LL_ADC_SetCommonPathInternalCh>
 8001bba:	e039      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a11      	ldr	r2, [pc, #68]	; (8001c08 <HAL_ADC_ConfigChannel+0x370>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d108      	bne.n	8001bd8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <HAL_ADC_ConfigChannel+0x37c>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001bce:	0019      	movs	r1, r3
 8001bd0:	0010      	movs	r0, r2
 8001bd2:	f7ff fbbb 	bl	800134c <LL_ADC_SetCommonPathInternalCh>
 8001bd6:	e02b      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <HAL_ADC_ConfigChannel+0x374>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d126      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <HAL_ADC_ConfigChannel+0x380>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_ADC_ConfigChannel+0x360>)
 8001bea:	0019      	movs	r1, r3
 8001bec:	0010      	movs	r0, r2
 8001bee:	f7ff fbad 	bl	800134c <LL_ADC_SetCommonPathInternalCh>
 8001bf2:	e01d      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x398>
 8001bf4:	80000004 	.word	0x80000004
 8001bf8:	40012708 	.word	0x40012708
 8001bfc:	b0001000 	.word	0xb0001000
 8001c00:	20000000 	.word	0x20000000
 8001c04:	00030d40 	.word	0x00030d40
 8001c08:	b8004000 	.word	0xb8004000
 8001c0c:	b4002000 	.word	0xb4002000
 8001c10:	ff7fffff 	.word	0xff7fffff
 8001c14:	feffffff 	.word	0xfeffffff
 8001c18:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	2220      	movs	r2, #32
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c28:	2317      	movs	r3, #23
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2254      	movs	r2, #84	; 0x54
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001c38:	2317      	movs	r3, #23
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	781b      	ldrb	r3, [r3, #0]
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b006      	add	sp, #24
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	0002      	movs	r2, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c5c:	d828      	bhi.n	8001cb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c5e:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <__NVIC_SetPriority+0xd4>)
 8001c60:	1dfb      	adds	r3, r7, #7
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	33c0      	adds	r3, #192	; 0xc0
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	589b      	ldr	r3, [r3, r2]
 8001c6e:	1dfa      	adds	r2, r7, #7
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	0011      	movs	r1, r2
 8001c74:	2203      	movs	r2, #3
 8001c76:	400a      	ands	r2, r1
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	21ff      	movs	r1, #255	; 0xff
 8001c7c:	4091      	lsls	r1, r2
 8001c7e:	000a      	movs	r2, r1
 8001c80:	43d2      	mvns	r2, r2
 8001c82:	401a      	ands	r2, r3
 8001c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	0018      	movs	r0, r3
 8001c94:	2303      	movs	r3, #3
 8001c96:	4003      	ands	r3, r0
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9c:	481f      	ldr	r0, [pc, #124]	; (8001d1c <__NVIC_SetPriority+0xd4>)
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	33c0      	adds	r3, #192	; 0xc0
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cae:	e031      	b.n	8001d14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <__NVIC_SetPriority+0xd8>)
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	230f      	movs	r3, #15
 8001cba:	400b      	ands	r3, r1
 8001cbc:	3b08      	subs	r3, #8
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3306      	adds	r3, #6
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	18d3      	adds	r3, r2, r3
 8001cc6:	3304      	adds	r3, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	1dfa      	adds	r2, r7, #7
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	0011      	movs	r1, r2
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	00d2      	lsls	r2, r2, #3
 8001cd6:	21ff      	movs	r1, #255	; 0xff
 8001cd8:	4091      	lsls	r1, r2
 8001cda:	000a      	movs	r2, r1
 8001cdc:	43d2      	mvns	r2, r2
 8001cde:	401a      	ands	r2, r3
 8001ce0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	22ff      	movs	r2, #255	; 0xff
 8001ce8:	401a      	ands	r2, r3
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	0018      	movs	r0, r3
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	4003      	ands	r3, r0
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <__NVIC_SetPriority+0xd8>)
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	001c      	movs	r4, r3
 8001d00:	230f      	movs	r3, #15
 8001d02:	4023      	ands	r3, r4
 8001d04:	3b08      	subs	r3, #8
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	3306      	adds	r3, #6
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	18c3      	adds	r3, r0, r3
 8001d10:	3304      	adds	r3, #4
 8001d12:	601a      	str	r2, [r3, #0]
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b003      	add	sp, #12
 8001d1a:	bd90      	pop	{r4, r7, pc}
 8001d1c:	e000e100 	.word	0xe000e100
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	1e5a      	subs	r2, r3, #1
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	045b      	lsls	r3, r3, #17
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d301      	bcc.n	8001d3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e010      	b.n	8001d5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <SysTick_Config+0x44>)
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	3a01      	subs	r2, #1
 8001d42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d44:	2301      	movs	r3, #1
 8001d46:	425b      	negs	r3, r3
 8001d48:	2103      	movs	r1, #3
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f7ff ff7c 	bl	8001c48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <SysTick_Config+0x44>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <SysTick_Config+0x44>)
 8001d58:	2207      	movs	r2, #7
 8001d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b002      	add	sp, #8
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	e000e010 	.word	0xe000e010

08001d6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	210f      	movs	r1, #15
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	1c02      	adds	r2, r0, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b25b      	sxtb	r3, r3
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff ff5d 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff ffbf 	bl	8001d24 <SysTick_Config>
 8001da6:	0003      	movs	r3, r0
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b002      	add	sp, #8
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dbe:	e147      	b.n	8002050 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4091      	lsls	r1, r2
 8001dca:	000a      	movs	r2, r1
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d100      	bne.n	8001dd8 <HAL_GPIO_Init+0x28>
 8001dd6:	e138      	b.n	800204a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d005      	beq.n	8001df0 <HAL_GPIO_Init+0x40>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2203      	movs	r2, #3
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d130      	bne.n	8001e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	0013      	movs	r3, r2
 8001e00:	43da      	mvns	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	409a      	lsls	r2, r3
 8001e12:	0013      	movs	r3, r2
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e26:	2201      	movs	r2, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2203      	movs	r2, #3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d017      	beq.n	8001e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2203      	movs	r2, #3
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d123      	bne.n	8001ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	08da      	lsrs	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3208      	adds	r2, #8
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	58d3      	ldr	r3, [r2, r3]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2207      	movs	r2, #7
 8001eac:	4013      	ands	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	220f      	movs	r2, #15
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	0013      	movs	r3, r2
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2107      	movs	r1, #7
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	6939      	ldr	r1, [r7, #16]
 8001ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	2203      	movs	r2, #3
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2203      	movs	r2, #3
 8001f00:	401a      	ands	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	409a      	lsls	r2, r3
 8001f08:	0013      	movs	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	029b      	lsls	r3, r3, #10
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d100      	bne.n	8001f24 <HAL_GPIO_Init+0x174>
 8001f22:	e092      	b.n	800204a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f24:	4a50      	ldr	r2, [pc, #320]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3318      	adds	r3, #24
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	589b      	ldr	r3, [r3, r2]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2203      	movs	r2, #3
 8001f36:	4013      	ands	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	0013      	movs	r3, r2
 8001f40:	43da      	mvns	r2, r3
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	23a0      	movs	r3, #160	; 0xa0
 8001f4c:	05db      	lsls	r3, r3, #23
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x1ca>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x1c6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a44      	ldr	r2, [pc, #272]	; (8002070 <HAL_GPIO_Init+0x2c0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x1c2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a43      	ldr	r2, [pc, #268]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x1be>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e006      	b.n	8001f7c <HAL_GPIO_Init+0x1cc>
 8001f6e:	2305      	movs	r3, #5
 8001f70:	e004      	b.n	8001f7c <HAL_GPIO_Init+0x1cc>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e002      	b.n	8001f7c <HAL_GPIO_Init+0x1cc>
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x1cc>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	2103      	movs	r1, #3
 8001f80:	400a      	ands	r2, r1
 8001f82:	00d2      	lsls	r2, r2, #3
 8001f84:	4093      	lsls	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f8c:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3318      	adds	r3, #24
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f9a:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	035b      	lsls	r3, r3, #13
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	039b      	lsls	r3, r3, #14
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001ff0:	2384      	movs	r3, #132	; 0x84
 8001ff2:	58d3      	ldr	r3, [r2, r3]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43da      	mvns	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	4013      	ands	r3, r2
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002014:	4914      	ldr	r1, [pc, #80]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8002016:	2284      	movs	r2, #132	; 0x84
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800201c:	4a12      	ldr	r2, [pc, #72]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	58d3      	ldr	r3, [r2, r3]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43da      	mvns	r2, r3
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	4013      	ands	r3, r2
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002042:	4909      	ldr	r1, [pc, #36]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	40da      	lsrs	r2, r3
 8002058:	1e13      	subs	r3, r2, #0
 800205a:	d000      	beq.n	800205e <HAL_GPIO_Init+0x2ae>
 800205c:	e6b0      	b.n	8001dc0 <HAL_GPIO_Init+0x10>
  }
}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b006      	add	sp, #24
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021800 	.word	0x40021800
 800206c:	50000400 	.word	0x50000400
 8002070:	50000800 	.word	0x50000800
 8002074:	50000c00 	.word	0x50000c00

08002078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	0008      	movs	r0, r1
 8002082:	0011      	movs	r1, r2
 8002084:	1cbb      	adds	r3, r7, #2
 8002086:	1c02      	adds	r2, r0, #0
 8002088:	801a      	strh	r2, [r3, #0]
 800208a:	1c7b      	adds	r3, r7, #1
 800208c:	1c0a      	adds	r2, r1, #0
 800208e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002090:	1c7b      	adds	r3, r7, #1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d004      	beq.n	80020a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002098:	1cbb      	adds	r3, r7, #2
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a2:	1cbb      	adds	r3, r7, #2
 80020a4:	881a      	ldrh	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b002      	add	sp, #8
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e082      	b.n	80021cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	; 0x41
 80020ca:	5c9b      	ldrb	r3, [r3, r2]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2240      	movs	r2, #64	; 0x40
 80020d6:	2100      	movs	r1, #0
 80020d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	0018      	movs	r0, r3
 80020de:	f7fe fe5b 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2241      	movs	r2, #65	; 0x41
 80020e6:	2124      	movs	r1, #36	; 0x24
 80020e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2101      	movs	r1, #1
 80020f6:	438a      	bics	r2, r1
 80020f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4934      	ldr	r1, [pc, #208]	; (80021d4 <HAL_I2C_Init+0x120>)
 8002104:	400a      	ands	r2, r1
 8002106:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4931      	ldr	r1, [pc, #196]	; (80021d8 <HAL_I2C_Init+0x124>)
 8002114:	400a      	ands	r2, r1
 8002116:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2180      	movs	r1, #128	; 0x80
 800212a:	0209      	lsls	r1, r1, #8
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	e007      	b.n	8002142 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2184      	movs	r1, #132	; 0x84
 800213c:	0209      	lsls	r1, r1, #8
 800213e:	430a      	orrs	r2, r1
 8002140:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d104      	bne.n	8002154 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	491f      	ldr	r1, [pc, #124]	; (80021dc <HAL_I2C_Init+0x128>)
 8002160:	430a      	orrs	r2, r1
 8002162:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	491a      	ldr	r1, [pc, #104]	; (80021d8 <HAL_I2C_Init+0x124>)
 8002170:	400a      	ands	r2, r1
 8002172:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	431a      	orrs	r2, r3
 800217e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69d9      	ldr	r1, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1a      	ldr	r2, [r3, #32]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2241      	movs	r2, #65	; 0x41
 80021b8:	2120      	movs	r1, #32
 80021ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2242      	movs	r2, #66	; 0x42
 80021c6:	2100      	movs	r1, #0
 80021c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	0018      	movs	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	f0ffffff 	.word	0xf0ffffff
 80021d8:	ffff7fff 	.word	0xffff7fff
 80021dc:	02008000 	.word	0x02008000

080021e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2241      	movs	r2, #65	; 0x41
 80021ee:	5c9b      	ldrb	r3, [r3, r2]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d138      	bne.n	8002268 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2240      	movs	r2, #64	; 0x40
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002200:	2302      	movs	r3, #2
 8002202:	e032      	b.n	800226a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2241      	movs	r2, #65	; 0x41
 8002210:	2124      	movs	r1, #36	; 0x24
 8002212:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	438a      	bics	r2, r1
 8002222:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4911      	ldr	r1, [pc, #68]	; (8002274 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2101      	movs	r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2241      	movs	r2, #65	; 0x41
 8002258:	2120      	movs	r1, #32
 800225a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	e000      	b.n	800226a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002268:	2302      	movs	r3, #2
  }
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b002      	add	sp, #8
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	ffffefff 	.word	0xffffefff

08002278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2241      	movs	r2, #65	; 0x41
 8002286:	5c9b      	ldrb	r3, [r3, r2]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	d139      	bne.n	8002302 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	5c9b      	ldrb	r3, [r3, r2]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002298:	2302      	movs	r3, #2
 800229a:	e033      	b.n	8002304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	2101      	movs	r1, #1
 80022a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2241      	movs	r2, #65	; 0x41
 80022a8:	2124      	movs	r1, #36	; 0x24
 80022aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2101      	movs	r1, #1
 80022b8:	438a      	bics	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4a11      	ldr	r2, [pc, #68]	; (800230c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2241      	movs	r2, #65	; 0x41
 80022f2:	2120      	movs	r1, #32
 80022f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	2100      	movs	r1, #0
 80022fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
  }
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b004      	add	sp, #16
 800230a:	bd80      	pop	{r7, pc}
 800230c:	fffff0ff 	.word	0xfffff0ff

08002310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a19      	ldr	r2, [pc, #100]	; (8002384 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800231e:	4013      	ands	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	429a      	cmp	r2, r3
 8002332:	d11f      	bne.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	0013      	movs	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	189b      	adds	r3, r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4912      	ldr	r1, [pc, #72]	; (800238c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002342:	0018      	movs	r0, r3
 8002344:	f7fd fede 	bl	8000104 <__udivsi3>
 8002348:	0003      	movs	r3, r0
 800234a:	3301      	adds	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800234e:	e008      	b.n	8002362 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3b01      	subs	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e001      	b.n	8002362 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e009      	b.n	8002376 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	401a      	ands	r2, r3
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	429a      	cmp	r2, r3
 8002372:	d0ed      	beq.n	8002350 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b004      	add	sp, #16
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40007000 	.word	0x40007000
 8002384:	fffff9ff 	.word	0xfffff9ff
 8002388:	20000000 	.word	0x20000000
 800238c:	000f4240 	.word	0x000f4240

08002390 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	23e0      	movs	r3, #224	; 0xe0
 800239a:	01db      	lsls	r3, r3, #7
 800239c:	4013      	ands	r3, r2
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e2fe      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	d100      	bne.n	80023c6 <HAL_RCC_OscConfig+0x1e>
 80023c4:	e07c      	b.n	80024c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c6:	4bc3      	ldr	r3, [pc, #780]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2238      	movs	r2, #56	; 0x38
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d0:	4bc0      	ldr	r3, [pc, #768]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3e>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d10b      	bne.n	8002404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	4bb9      	ldr	r3, [pc, #740]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	029b      	lsls	r3, r3, #10
 80023f4:	4013      	ands	r3, r2
 80023f6:	d062      	beq.n	80024be <HAL_RCC_OscConfig+0x116>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d15e      	bne.n	80024be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e2d9      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	025b      	lsls	r3, r3, #9
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x78>
 8002410:	4bb0      	ldr	r3, [pc, #704]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4baf      	ldr	r3, [pc, #700]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	0249      	lsls	r1, r1, #9
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	e020      	b.n	8002462 <HAL_RCC_OscConfig+0xba>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	23a0      	movs	r3, #160	; 0xa0
 8002426:	02db      	lsls	r3, r3, #11
 8002428:	429a      	cmp	r2, r3
 800242a:	d10e      	bne.n	800244a <HAL_RCC_OscConfig+0xa2>
 800242c:	4ba9      	ldr	r3, [pc, #676]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4ba8      	ldr	r3, [pc, #672]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	02c9      	lsls	r1, r1, #11
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	4ba6      	ldr	r3, [pc, #664]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4ba5      	ldr	r3, [pc, #660]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	0249      	lsls	r1, r1, #9
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e00b      	b.n	8002462 <HAL_RCC_OscConfig+0xba>
 800244a:	4ba2      	ldr	r3, [pc, #648]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4ba1      	ldr	r3, [pc, #644]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002450:	49a1      	ldr	r1, [pc, #644]	; (80026d8 <HAL_RCC_OscConfig+0x330>)
 8002452:	400a      	ands	r2, r1
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	4b9f      	ldr	r3, [pc, #636]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b9e      	ldr	r3, [pc, #632]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800245c:	499f      	ldr	r1, [pc, #636]	; (80026dc <HAL_RCC_OscConfig+0x334>)
 800245e:	400a      	ands	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe ff65 	bl	8001338 <HAL_GetTick>
 800246e:	0003      	movs	r3, r0
 8002470:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe ff60 	bl	8001338 <HAL_GetTick>
 8002478:	0002      	movs	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e298      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4b93      	ldr	r3, [pc, #588]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4013      	ands	r3, r2
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0xcc>
 8002492:	e015      	b.n	80024c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe ff50 	bl	8001338 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249e:	f7fe ff4b 	bl	8001338 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	; 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e283      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b0:	4b88      	ldr	r3, [pc, #544]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	4013      	ands	r3, r2
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0xf6>
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2202      	movs	r2, #2
 80024c6:	4013      	ands	r3, r2
 80024c8:	d100      	bne.n	80024cc <HAL_RCC_OscConfig+0x124>
 80024ca:	e099      	b.n	8002600 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024cc:	4b81      	ldr	r3, [pc, #516]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2238      	movs	r2, #56	; 0x38
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2203      	movs	r2, #3
 80024dc:	4013      	ands	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d102      	bne.n	80024ec <HAL_RCC_OscConfig+0x144>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d002      	beq.n	80024f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d135      	bne.n	800255e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024f2:	4b78      	ldr	r3, [pc, #480]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4013      	ands	r3, r2
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x162>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e256      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b72      	ldr	r3, [pc, #456]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a74      	ldr	r2, [pc, #464]	; (80026e0 <HAL_RCC_OscConfig+0x338>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	021a      	lsls	r2, r3, #8
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800251c:	430a      	orrs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d112      	bne.n	800254c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002526:	4b6b      	ldr	r3, [pc, #428]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a6e      	ldr	r2, [pc, #440]	; (80026e4 <HAL_RCC_OscConfig+0x33c>)
 800252c:	4013      	ands	r3, r2
 800252e:	0019      	movs	r1, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800253a:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0adb      	lsrs	r3, r3, #11
 8002540:	2207      	movs	r2, #7
 8002542:	4013      	ands	r3, r2
 8002544:	4a68      	ldr	r2, [pc, #416]	; (80026e8 <HAL_RCC_OscConfig+0x340>)
 8002546:	40da      	lsrs	r2, r3
 8002548:	4b68      	ldr	r3, [pc, #416]	; (80026ec <HAL_RCC_OscConfig+0x344>)
 800254a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <HAL_RCC_OscConfig+0x348>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	0018      	movs	r0, r3
 8002552:	f7fe fe95 	bl	8001280 <HAL_InitTick>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d051      	beq.n	80025fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e22c      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d030      	beq.n	80025c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a5e      	ldr	r2, [pc, #376]	; (80026e4 <HAL_RCC_OscConfig+0x33c>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800257a:	4b56      	ldr	r3, [pc, #344]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b55      	ldr	r3, [pc, #340]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	0049      	lsls	r1, r1, #1
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fed6 	bl	8001338 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7fe fed1 	bl	8001338 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e209      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a4:	4b4b      	ldr	r3, [pc, #300]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4013      	ands	r3, r2
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b48      	ldr	r3, [pc, #288]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_RCC_OscConfig+0x338>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	021a      	lsls	r2, r3, #8
 80025c0:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	e01b      	b.n	8002600 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80025c8:	4b42      	ldr	r3, [pc, #264]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b41      	ldr	r3, [pc, #260]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80025ce:	4949      	ldr	r1, [pc, #292]	; (80026f4 <HAL_RCC_OscConfig+0x34c>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe feb0 	bl	8001338 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025de:	f7fe feab 	bl	8001338 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1e3      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f0:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4013      	ands	r3, r2
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x236>
 80025fc:	e000      	b.n	8002600 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2208      	movs	r2, #8
 8002606:	4013      	ands	r3, r2
 8002608:	d047      	beq.n	800269a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800260a:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2238      	movs	r2, #56	; 0x38
 8002610:	4013      	ands	r3, r2
 8002612:	2b18      	cmp	r3, #24
 8002614:	d10a      	bne.n	800262c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
 800261e:	d03c      	beq.n	800269a <HAL_RCC_OscConfig+0x2f2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d138      	bne.n	800269a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e1c5      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d019      	beq.n	8002668 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002636:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002638:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800263a:	2101      	movs	r1, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fe7a 	bl	8001338 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264a:	f7fe fe75 	bl	8001338 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1ad      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800265e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002660:	2202      	movs	r2, #2
 8002662:	4013      	ands	r3, r2
 8002664:	d0f1      	beq.n	800264a <HAL_RCC_OscConfig+0x2a2>
 8002666:	e018      	b.n	800269a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002668:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800266a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 800266e:	2101      	movs	r1, #1
 8002670:	438a      	bics	r2, r1
 8002672:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe fe60 	bl	8001338 <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267e:	f7fe fe5b 	bl	8001338 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e193      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 8002692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002694:	2202      	movs	r2, #2
 8002696:	4013      	ands	r3, r2
 8002698:	d1f1      	bne.n	800267e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2204      	movs	r2, #4
 80026a0:	4013      	ands	r3, r2
 80026a2:	d100      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2fe>
 80026a4:	e0c6      	b.n	8002834 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	231f      	movs	r3, #31
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2238      	movs	r2, #56	; 0x38
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d11e      	bne.n	80026f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_OscConfig+0x32c>)
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d100      	bne.n	80026c6 <HAL_RCC_OscConfig+0x31e>
 80026c4:	e0b6      	b.n	8002834 <HAL_RCC_OscConfig+0x48c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d000      	beq.n	80026d0 <HAL_RCC_OscConfig+0x328>
 80026ce:	e0b1      	b.n	8002834 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e171      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	fffeffff 	.word	0xfffeffff
 80026dc:	fffbffff 	.word	0xfffbffff
 80026e0:	ffff80ff 	.word	0xffff80ff
 80026e4:	ffffc7ff 	.word	0xffffc7ff
 80026e8:	00f42400 	.word	0x00f42400
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004
 80026f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026f8:	4bb1      	ldr	r3, [pc, #708]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80026fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	055b      	lsls	r3, r3, #21
 8002700:	4013      	ands	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_RCC_OscConfig+0x360>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_RCC_OscConfig+0x362>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d011      	beq.n	8002732 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	4bac      	ldr	r3, [pc, #688]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002712:	4bab      	ldr	r3, [pc, #684]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0549      	lsls	r1, r1, #21
 8002718:	430a      	orrs	r2, r1
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
 800271c:	4ba8      	ldr	r3, [pc, #672]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800271e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800272a:	231f      	movs	r3, #31
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002732:	4ba4      	ldr	r3, [pc, #656]	; (80029c4 <HAL_RCC_OscConfig+0x61c>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4013      	ands	r3, r2
 800273c:	d11a      	bne.n	8002774 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800273e:	4ba1      	ldr	r3, [pc, #644]	; (80029c4 <HAL_RCC_OscConfig+0x61c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <HAL_RCC_OscConfig+0x61c>)
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	0049      	lsls	r1, r1, #1
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800274c:	f7fe fdf4 	bl	8001338 <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7fe fdef 	bl	8001338 <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e127      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002768:	4b96      	ldr	r3, [pc, #600]	; (80029c4 <HAL_RCC_OscConfig+0x61c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4013      	ands	r3, r2
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x3e2>
 800277c:	4b90      	ldr	r3, [pc, #576]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800277e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002780:	4b8f      	ldr	r3, [pc, #572]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002782:	2101      	movs	r1, #1
 8002784:	430a      	orrs	r2, r1
 8002786:	65da      	str	r2, [r3, #92]	; 0x5c
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x41c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x404>
 8002792:	4b8b      	ldr	r3, [pc, #556]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002794:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002796:	4b8a      	ldr	r3, [pc, #552]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002798:	2104      	movs	r1, #4
 800279a:	430a      	orrs	r2, r1
 800279c:	65da      	str	r2, [r3, #92]	; 0x5c
 800279e:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80027a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027a2:	4b87      	ldr	r3, [pc, #540]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80027a4:	2101      	movs	r1, #1
 80027a6:	430a      	orrs	r2, r1
 80027a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0x41c>
 80027ac:	4b84      	ldr	r3, [pc, #528]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80027ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027b0:	4b83      	ldr	r3, [pc, #524]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	438a      	bics	r2, r1
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80027b8:	4b81      	ldr	r3, [pc, #516]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80027ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80027bc:	4b80      	ldr	r3, [pc, #512]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80027be:	2104      	movs	r1, #4
 80027c0:	438a      	bics	r2, r1
 80027c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d014      	beq.n	80027f6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fdb4 	bl	8001338 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d4:	e009      	b.n	80027ea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fdaf 	bl	8001338 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	4a79      	ldr	r2, [pc, #484]	; (80029c8 <HAL_RCC_OscConfig+0x620>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0e6      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ea:	4b75      	ldr	r3, [pc, #468]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	2202      	movs	r2, #2
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x42e>
 80027f4:	e013      	b.n	800281e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7fe fd9f 	bl	8001338 <HAL_GetTick>
 80027fa:	0003      	movs	r3, r0
 80027fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027fe:	e009      	b.n	8002814 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7fe fd9a 	bl	8001338 <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	4a6f      	ldr	r2, [pc, #444]	; (80029c8 <HAL_RCC_OscConfig+0x620>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0d1      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002814:	4b6a      	ldr	r3, [pc, #424]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800282a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800282c:	4b64      	ldr	r3, [pc, #400]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800282e:	4967      	ldr	r1, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x624>)
 8002830:	400a      	ands	r2, r1
 8002832:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d100      	bne.n	800283e <HAL_RCC_OscConfig+0x496>
 800283c:	e0bb      	b.n	80029b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800283e:	4b60      	ldr	r3, [pc, #384]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2238      	movs	r2, #56	; 0x38
 8002844:	4013      	ands	r3, r2
 8002846:	2b10      	cmp	r3, #16
 8002848:	d100      	bne.n	800284c <HAL_RCC_OscConfig+0x4a4>
 800284a:	e07b      	b.n	8002944 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d156      	bne.n	8002902 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b5a      	ldr	r3, [pc, #360]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800285a:	495d      	ldr	r1, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x628>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fd6a 	bl	8001338 <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fd65 	bl	8001338 <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e09d      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	049b      	lsls	r3, r3, #18
 8002884:	4013      	ands	r3, r2
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002888:	4b4d      	ldr	r3, [pc, #308]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a51      	ldr	r2, [pc, #324]	; (80029d4 <HAL_RCC_OscConfig+0x62c>)
 800288e:	4013      	ands	r3, r2
 8002890:	0019      	movs	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	431a      	orrs	r2, r3
 80028b6:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b40      	ldr	r3, [pc, #256]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	0449      	lsls	r1, r1, #17
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	4b3c      	ldr	r3, [pc, #240]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0549      	lsls	r1, r1, #21
 80028d4:	430a      	orrs	r2, r1
 80028d6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fd2e 	bl	8001338 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fe fd29 	bl	8001338 <HAL_GetTick>
 80028e6:	0002      	movs	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e061      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	049b      	lsls	r3, r3, #18
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x53a>
 8002900:	e059      	b.n	80029b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002902:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002908:	4931      	ldr	r1, [pc, #196]	; (80029d0 <HAL_RCC_OscConfig+0x628>)
 800290a:	400a      	ands	r2, r1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fd13 	bl	8001338 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fd0e 	bl	8001338 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e046      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	049b      	lsls	r3, r3, #18
 8002932:	4013      	ands	r3, r2
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002936:	4b22      	ldr	r3, [pc, #136]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 800293c:	4926      	ldr	r1, [pc, #152]	; (80029d8 <HAL_RCC_OscConfig+0x630>)
 800293e:	400a      	ands	r2, r1
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	e038      	b.n	80029b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e033      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_OscConfig+0x618>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2203      	movs	r2, #3
 800295a:	401a      	ands	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	429a      	cmp	r2, r3
 8002962:	d126      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2270      	movs	r2, #112	; 0x70
 8002968:	401a      	ands	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d11f      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	23fe      	movs	r3, #254	; 0xfe
 8002976:	01db      	lsls	r3, r3, #7
 8002978:	401a      	ands	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d116      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	23f8      	movs	r3, #248	; 0xf8
 8002988:	039b      	lsls	r3, r3, #14
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d10e      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	23e0      	movs	r3, #224	; 0xe0
 8002998:	051b      	lsls	r3, r3, #20
 800299a:	401a      	ands	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	0f5b      	lsrs	r3, r3, #29
 80029a8:	075a      	lsls	r2, r3, #29
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d001      	beq.n	80029b6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b008      	add	sp, #32
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	00001388 	.word	0x00001388
 80029cc:	efffffff 	.word	0xefffffff
 80029d0:	feffffff 	.word	0xfeffffff
 80029d4:	11c1808c 	.word	0x11c1808c
 80029d8:	eefefffc 	.word	0xeefefffc

080029dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0e9      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f0:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2207      	movs	r2, #7
 80029f6:	4013      	ands	r3, r2
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d91e      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b73      	ldr	r3, [pc, #460]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2207      	movs	r2, #7
 8002a04:	4393      	bics	r3, r2
 8002a06:	0019      	movs	r1, r3
 8002a08:	4b70      	ldr	r3, [pc, #448]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fc92 	bl	8001338 <HAL_GetTick>
 8002a14:	0003      	movs	r3, r0
 8002a16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a18:	e009      	b.n	8002a2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1a:	f7fe fc8d 	bl	8001338 <HAL_GetTick>
 8002a1e:	0002      	movs	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	4a6a      	ldr	r2, [pc, #424]	; (8002bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0ca      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a2e:	4b67      	ldr	r3, [pc, #412]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2207      	movs	r2, #7
 8002a34:	4013      	ands	r3, r2
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2202      	movs	r2, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	d015      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2204      	movs	r2, #4
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d006      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a50:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b5f      	ldr	r3, [pc, #380]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a56:	21e0      	movs	r1, #224	; 0xe0
 8002a58:	01c9      	lsls	r1, r1, #7
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4a5d      	ldr	r2, [pc, #372]	; (8002bd8 <HAL_RCC_ClockConfig+0x1fc>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	0019      	movs	r1, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d057      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	2380      	movs	r3, #128	; 0x80
 8002a8a:	029b      	lsls	r3, r3, #10
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	d12b      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e097      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9c:	4b4d      	ldr	r3, [pc, #308]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	049b      	lsls	r3, r3, #18
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d11f      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e08b      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	4013      	ands	r3, r2
 8002abe:	d113      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e07f      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002acc:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e074      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e06d      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ae8:	4b3a      	ldr	r3, [pc, #232]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2207      	movs	r2, #7
 8002aee:	4393      	bics	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002afc:	f7fe fc1c 	bl	8001338 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b04:	e009      	b.n	8002b1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b06:	f7fe fc17 	bl	8001338 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e054      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2238      	movs	r2, #56	; 0x38
 8002b20:	401a      	ands	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d1ec      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b27      	ldr	r3, [pc, #156]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2207      	movs	r2, #7
 8002b32:	4013      	ands	r3, r2
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d21e      	bcs.n	8002b78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2207      	movs	r2, #7
 8002b40:	4393      	bics	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fbf4 	bl	8001338 <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b56:	f7fe fbef 	bl	8001338 <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e02c      	b.n	8002bc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2207      	movs	r2, #7
 8002b70:	4013      	ands	r3, r2
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1ee      	bne.n	8002b56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	4a15      	ldr	r2, [pc, #84]	; (8002bdc <HAL_RCC_ClockConfig+0x200>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002b96:	f000 f829 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002b9a:	0001      	movs	r1, r0
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	0a1b      	lsrs	r3, r3, #8
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_RCC_ClockConfig+0x204>)
 8002ba8:	0092      	lsls	r2, r2, #2
 8002baa:	58d3      	ldr	r3, [r2, r3]
 8002bac:	221f      	movs	r2, #31
 8002bae:	4013      	ands	r3, r2
 8002bb0:	000a      	movs	r2, r1
 8002bb2:	40da      	lsrs	r2, r3
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x208>)
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_ClockConfig+0x20c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fe fb5f 	bl	8001280 <HAL_InitTick>
 8002bc2:	0003      	movs	r3, r0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	00001388 	.word	0x00001388
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	fffff0ff 	.word	0xfffff0ff
 8002bdc:	ffff8fff 	.word	0xffff8fff
 8002be0:	08004934 	.word	0x08004934
 8002be4:	20000000 	.word	0x20000000
 8002be8:	20000004 	.word	0x20000004

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bf2:	4b3c      	ldr	r3, [pc, #240]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2238      	movs	r2, #56	; 0x38
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d10f      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0adb      	lsrs	r3, r3, #11
 8002c02:	2207      	movs	r2, #7
 8002c04:	4013      	ands	r3, r2
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	0013      	movs	r3, r2
 8002c0c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c0e:	6839      	ldr	r1, [r7, #0]
 8002c10:	4835      	ldr	r0, [pc, #212]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c12:	f7fd fa77 	bl	8000104 <__udivsi3>
 8002c16:	0003      	movs	r3, r0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	e05d      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c1c:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2238      	movs	r2, #56	; 0x38
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCC_GetSysClockFreq+0x100>)
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	e054      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c2e:	4b2d      	ldr	r3, [pc, #180]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2238      	movs	r2, #56	; 0x38
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d138      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c44:	4b27      	ldr	r3, [pc, #156]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4824      	ldr	r0, [pc, #144]	; (8002cec <HAL_RCC_GetSysClockFreq+0x100>)
 8002c5c:	f7fd fa52 	bl	8000104 <__udivsi3>
 8002c60:	0003      	movs	r3, r0
 8002c62:	0019      	movs	r1, r3
 8002c64:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	0a1b      	lsrs	r3, r3, #8
 8002c6a:	227f      	movs	r2, #127	; 0x7f
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	434b      	muls	r3, r1
 8002c70:	617b      	str	r3, [r7, #20]
        break;
 8002c72:	e00d      	b.n	8002c90 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	481c      	ldr	r0, [pc, #112]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c78:	f7fd fa44 	bl	8000104 <__udivsi3>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	0019      	movs	r1, r3
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	227f      	movs	r2, #127	; 0x7f
 8002c88:	4013      	ands	r3, r2
 8002c8a:	434b      	muls	r3, r1
 8002c8c:	617b      	str	r3, [r7, #20]
        break;
 8002c8e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	0f5b      	lsrs	r3, r3, #29
 8002c96:	2207      	movs	r2, #7
 8002c98:	4013      	ands	r3, r2
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	6978      	ldr	r0, [r7, #20]
 8002ca2:	f7fd fa2f 	bl	8000104 <__udivsi3>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e015      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	2238      	movs	r2, #56	; 0x38
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d103      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2238      	movs	r2, #56	; 0x38
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b18      	cmp	r3, #24
 8002cca:	d103      	bne.n	8002cd4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ccc:	23fa      	movs	r3, #250	; 0xfa
 8002cce:	01db      	lsls	r3, r3, #7
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	e001      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cd8:	693b      	ldr	r3, [r7, #16]
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b006      	add	sp, #24
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	007a1200 	.word	0x007a1200

08002cf0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	20000000 	.word	0x20000000

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d08:	f7ff fff2 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d0c:	0004      	movs	r4, r0
 8002d0e:	f7ff fb3f 	bl	8002390 <LL_RCC_GetAPB1Prescaler>
 8002d12:	0003      	movs	r3, r0
 8002d14:	0b1a      	lsrs	r2, r3, #12
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d18:	0092      	lsls	r2, r2, #2
 8002d1a:	58d3      	ldr	r3, [r2, r3]
 8002d1c:	221f      	movs	r2, #31
 8002d1e:	4013      	ands	r3, r2
 8002d20:	40dc      	lsrs	r4, r3
 8002d22:	0023      	movs	r3, r4
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	08004974 	.word	0x08004974

08002d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d38:	2313      	movs	r3, #19
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d40:	2312      	movs	r3, #18
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	4013      	ands	r3, r2
 8002d52:	d100      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d54:	e0a3      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2011      	movs	r0, #17
 8002d58:	183b      	adds	r3, r7, r0
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4bc3      	ldr	r3, [pc, #780]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	055b      	lsls	r3, r3, #21
 8002d66:	4013      	ands	r3, r2
 8002d68:	d110      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	4bc0      	ldr	r3, [pc, #768]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d6e:	4bbf      	ldr	r3, [pc, #764]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d70:	2180      	movs	r1, #128	; 0x80
 8002d72:	0549      	lsls	r1, r1, #21
 8002d74:	430a      	orrs	r2, r1
 8002d76:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d78:	4bbc      	ldr	r3, [pc, #752]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	055b      	lsls	r3, r3, #21
 8002d80:	4013      	ands	r3, r2
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	183b      	adds	r3, r7, r0
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4bb8      	ldr	r3, [pc, #736]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4bb7      	ldr	r3, [pc, #732]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	0049      	lsls	r1, r1, #1
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d9a:	f7fe facd 	bl	8001338 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002da2:	e00b      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe fac8 	bl	8001338 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d904      	bls.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002db2:	2313      	movs	r3, #19
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2203      	movs	r2, #3
 8002db8:	701a      	strb	r2, [r3, #0]
        break;
 8002dba:	e005      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dbc:	4bac      	ldr	r3, [pc, #688]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d0ed      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002dc8:	2313      	movs	r3, #19
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d154      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dd2:	4ba6      	ldr	r3, [pc, #664]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dd6:	23c0      	movs	r3, #192	; 0xc0
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4013      	ands	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d019      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d014      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dee:	4b9f      	ldr	r3, [pc, #636]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	4aa0      	ldr	r2, [pc, #640]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002df8:	4b9c      	ldr	r3, [pc, #624]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dfc:	4b9b      	ldr	r3, [pc, #620]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	0249      	lsls	r1, r1, #9
 8002e02:	430a      	orrs	r2, r1
 8002e04:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e06:	4b99      	ldr	r3, [pc, #612]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e0a:	4b98      	ldr	r3, [pc, #608]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0c:	499a      	ldr	r1, [pc, #616]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e12:	4b96      	ldr	r3, [pc, #600]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d016      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fa8a 	bl	8001338 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e28:	e00c      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2a:	f7fe fa85 	bl	8001338 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	4a91      	ldr	r2, [pc, #580]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d904      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002e3a:	2313      	movs	r3, #19
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2203      	movs	r2, #3
 8002e40:	701a      	strb	r2, [r3, #0]
            break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e44:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2202      	movs	r2, #2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d0ed      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002e4e:	2313      	movs	r3, #19
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10a      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e58:	4b84      	ldr	r3, [pc, #528]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	4a85      	ldr	r2, [pc, #532]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e66:	4b81      	ldr	r3, [pc, #516]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e6c:	e00c      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e6e:	2312      	movs	r3, #18
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2213      	movs	r2, #19
 8002e74:	18ba      	adds	r2, r7, r2
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e005      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	2312      	movs	r3, #18
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2213      	movs	r2, #19
 8002e82:	18ba      	adds	r2, r7, r2
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e88:	2311      	movs	r3, #17
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b76      	ldr	r3, [pc, #472]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e96:	4b75      	ldr	r3, [pc, #468]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e98:	4979      	ldr	r1, [pc, #484]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002e9a:	400a      	ands	r2, r1
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	2203      	movs	r2, #3
 8002eae:	4393      	bics	r3, r2
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	4b6d      	ldr	r3, [pc, #436]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ec6:	4b69      	ldr	r3, [pc, #420]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	220c      	movs	r2, #12
 8002ecc:	4393      	bics	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2210      	movs	r2, #16
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ee4:	4b61      	ldr	r3, [pc, #388]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	4a66      	ldr	r2, [pc, #408]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4013      	ands	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f04:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	4a5f      	ldr	r2, [pc, #380]	; (8003088 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4013      	ands	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f24:	4b51      	ldr	r3, [pc, #324]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f28:	4a58      	ldr	r2, [pc, #352]	; (800308c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69da      	ldr	r2, [r3, #28]
 8002f32:	4b4e      	ldr	r3, [pc, #312]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d009      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f42:	4b4a      	ldr	r3, [pc, #296]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	0019      	movs	r1, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	01db      	lsls	r3, r3, #7
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d015      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f62:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	0899      	lsrs	r1, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f70:	430a      	orrs	r2, r1
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1a      	ldr	r2, [r3, #32]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	05db      	lsls	r3, r3, #23
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f86:	2180      	movs	r1, #128	; 0x80
 8002f88:	0249      	lsls	r1, r1, #9
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	031b      	lsls	r3, r3, #12
 8002f96:	4013      	ands	r3, r2
 8002f98:	d009      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa8:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002faa:	430a      	orrs	r2, r1
 8002fac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	039b      	lsls	r3, r3, #14
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d016      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc8:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	03db      	lsls	r3, r3, #15
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d106      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	0449      	lsls	r1, r1, #17
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	03db      	lsls	r3, r3, #15
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d016      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	4a27      	ldr	r2, [pc, #156]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003004:	430a      	orrs	r2, r1
 8003006:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	045b      	lsls	r3, r3, #17
 8003010:	429a      	cmp	r2, r3
 8003012:	d106      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	0449      	lsls	r1, r1, #17
 800301e:	430a      	orrs	r2, r1
 8003020:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	4013      	ands	r3, r2
 800302c:	d016      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	4a1a      	ldr	r2, [pc, #104]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003034:	4013      	ands	r3, r2
 8003036:	0019      	movs	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800303e:	430a      	orrs	r2, r1
 8003040:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	01db      	lsls	r3, r3, #7
 800304a:	429a      	cmp	r2, r3
 800304c:	d106      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003054:	2180      	movs	r1, #128	; 0x80
 8003056:	0249      	lsls	r1, r1, #9
 8003058:	430a      	orrs	r2, r1
 800305a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800305c:	2312      	movs	r3, #18
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	781b      	ldrb	r3, [r3, #0]
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b006      	add	sp, #24
 8003068:	bd80      	pop	{r7, pc}
 800306a:	46c0      	nop			; (mov r8, r8)
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
 8003074:	fffffcff 	.word	0xfffffcff
 8003078:	fffeffff 	.word	0xfffeffff
 800307c:	00001388 	.word	0x00001388
 8003080:	efffffff 	.word	0xefffffff
 8003084:	fffff3ff 	.word	0xfffff3ff
 8003088:	fff3ffff 	.word	0xfff3ffff
 800308c:	ffcfffff 	.word	0xffcfffff
 8003090:	ffffcfff 	.word	0xffffcfff
 8003094:	ffbfffff 	.word	0xffbfffff
 8003098:	feffffff 	.word	0xfeffffff
 800309c:	ffff3fff 	.word	0xffff3fff

080030a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e0a8      	b.n	8003204 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	2382      	movs	r3, #130	; 0x82
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d009      	beq.n	80030da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	61da      	str	r2, [r3, #28]
 80030cc:	e005      	b.n	80030da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	225d      	movs	r2, #93	; 0x5d
 80030e4:	5c9b      	ldrb	r3, [r3, r2]
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	225c      	movs	r2, #92	; 0x5c
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f7fd fe9a 	bl	8000e30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	225d      	movs	r2, #93	; 0x5d
 8003100:	2102      	movs	r1, #2
 8003102:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2140      	movs	r1, #64	; 0x40
 8003110:	438a      	bics	r2, r1
 8003112:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68da      	ldr	r2, [r3, #12]
 8003118:	23e0      	movs	r3, #224	; 0xe0
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	429a      	cmp	r2, r3
 800311e:	d902      	bls.n	8003126 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	e002      	b.n	800312c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003126:	2380      	movs	r3, #128	; 0x80
 8003128:	015b      	lsls	r3, r3, #5
 800312a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	23f0      	movs	r3, #240	; 0xf0
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	429a      	cmp	r2, r3
 8003136:	d008      	beq.n	800314a <HAL_SPI_Init+0xaa>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	23e0      	movs	r3, #224	; 0xe0
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	429a      	cmp	r2, r3
 8003142:	d002      	beq.n	800314a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	2382      	movs	r3, #130	; 0x82
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	401a      	ands	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	2384      	movs	r3, #132	; 0x84
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	400b      	ands	r3, r1
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2102      	movs	r1, #2
 8003166:	400b      	ands	r3, r1
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2101      	movs	r1, #1
 8003170:	400b      	ands	r3, r1
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6999      	ldr	r1, [r3, #24]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	400b      	ands	r3, r1
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2138      	movs	r1, #56	; 0x38
 8003186:	400b      	ands	r3, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	400b      	ands	r3, r1
 8003192:	431a      	orrs	r2, r3
 8003194:	0011      	movs	r1, r2
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	401a      	ands	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	2204      	movs	r2, #4
 80031b0:	401a      	ands	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	2110      	movs	r1, #16
 80031b8:	400b      	ands	r3, r1
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	2108      	movs	r1, #8
 80031c2:	400b      	ands	r3, r1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68d9      	ldr	r1, [r3, #12]
 80031ca:	23f0      	movs	r3, #240	; 0xf0
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	400b      	ands	r3, r1
 80031d0:	431a      	orrs	r2, r3
 80031d2:	0011      	movs	r1, r2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	2380      	movs	r3, #128	; 0x80
 80031d8:	015b      	lsls	r3, r3, #5
 80031da:	401a      	ands	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69da      	ldr	r2, [r3, #28]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4907      	ldr	r1, [pc, #28]	; (800320c <HAL_SPI_Init+0x16c>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	225d      	movs	r2, #93	; 0x5d
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b004      	add	sp, #16
 800320a:	bd80      	pop	{r7, pc}
 800320c:	fffff7ff 	.word	0xfffff7ff

08003210 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e04a      	b.n	80032b8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223d      	movs	r2, #61	; 0x3d
 8003226:	5c9b      	ldrb	r3, [r3, r2]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	223c      	movs	r2, #60	; 0x3c
 8003232:	2100      	movs	r1, #0
 8003234:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f7fd fe75 	bl	8000f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	223d      	movs	r2, #61	; 0x3d
 8003242:	2102      	movs	r1, #2
 8003244:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	0019      	movs	r1, r3
 8003250:	0010      	movs	r0, r2
 8003252:	f000 f98d 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2248      	movs	r2, #72	; 0x48
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	223e      	movs	r2, #62	; 0x3e
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	223f      	movs	r2, #63	; 0x3f
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2241      	movs	r2, #65	; 0x41
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2242      	movs	r2, #66	; 0x42
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2243      	movs	r2, #67	; 0x43
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2244      	movs	r2, #68	; 0x44
 8003292:	2101      	movs	r1, #1
 8003294:	5499      	strb	r1, [r3, r2]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2245      	movs	r2, #69	; 0x45
 800329a:	2101      	movs	r1, #1
 800329c:	5499      	strb	r1, [r3, r2]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2246      	movs	r2, #70	; 0x46
 80032a2:	2101      	movs	r1, #1
 80032a4:	5499      	strb	r1, [r3, r2]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2247      	movs	r2, #71	; 0x47
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	223d      	movs	r2, #61	; 0x3d
 80032b2:	2101      	movs	r1, #1
 80032b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e04a      	b.n	8003368 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	223d      	movs	r2, #61	; 0x3d
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223c      	movs	r2, #60	; 0x3c
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7fd fded 	bl	8000ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	223d      	movs	r2, #61	; 0x3d
 80032f2:	2102      	movs	r1, #2
 80032f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	0019      	movs	r1, r3
 8003300:	0010      	movs	r0, r2
 8003302:	f000 f935 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2248      	movs	r2, #72	; 0x48
 800330a:	2101      	movs	r1, #1
 800330c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	223e      	movs	r2, #62	; 0x3e
 8003312:	2101      	movs	r1, #1
 8003314:	5499      	strb	r1, [r3, r2]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	223f      	movs	r2, #63	; 0x3f
 800331a:	2101      	movs	r1, #1
 800331c:	5499      	strb	r1, [r3, r2]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	2101      	movs	r1, #1
 8003324:	5499      	strb	r1, [r3, r2]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2241      	movs	r2, #65	; 0x41
 800332a:	2101      	movs	r1, #1
 800332c:	5499      	strb	r1, [r3, r2]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2242      	movs	r2, #66	; 0x42
 8003332:	2101      	movs	r1, #1
 8003334:	5499      	strb	r1, [r3, r2]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2243      	movs	r2, #67	; 0x43
 800333a:	2101      	movs	r1, #1
 800333c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2244      	movs	r2, #68	; 0x44
 8003342:	2101      	movs	r1, #1
 8003344:	5499      	strb	r1, [r3, r2]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2245      	movs	r2, #69	; 0x45
 800334a:	2101      	movs	r1, #1
 800334c:	5499      	strb	r1, [r3, r2]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2246      	movs	r2, #70	; 0x46
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2247      	movs	r2, #71	; 0x47
 800335a:	2101      	movs	r1, #1
 800335c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	223d      	movs	r2, #61	; 0x3d
 8003362:	2101      	movs	r1, #1
 8003364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337c:	2317      	movs	r3, #23
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	223c      	movs	r2, #60	; 0x3c
 8003388:	5c9b      	ldrb	r3, [r3, r2]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_TIM_PWM_ConfigChannel+0x22>
 800338e:	2302      	movs	r3, #2
 8003390:	e0e5      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	223c      	movs	r2, #60	; 0x3c
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b14      	cmp	r3, #20
 800339e:	d900      	bls.n	80033a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80033a0:	e0d1      	b.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	009a      	lsls	r2, r3, #2
 80033a6:	4b70      	ldr	r3, [pc, #448]	; (8003568 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80033a8:	18d3      	adds	r3, r2, r3
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	0011      	movs	r1, r2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f95a 	bl	8003670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2108      	movs	r1, #8
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2104      	movs	r1, #4
 80033d8:	438a      	bics	r2, r1
 80033da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6999      	ldr	r1, [r3, #24]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	619a      	str	r2, [r3, #24]
      break;
 80033ee:	e0af      	b.n	8003550 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f9c3 	bl	8003784 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0109      	lsls	r1, r1, #4
 800340c:	430a      	orrs	r2, r1
 800340e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4954      	ldr	r1, [pc, #336]	; (800356c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800341c:	400a      	ands	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6999      	ldr	r1, [r3, #24]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	021a      	lsls	r2, r3, #8
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	619a      	str	r2, [r3, #24]
      break;
 8003434:	e08c      	b.n	8003550 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	0011      	movs	r1, r2
 800343e:	0018      	movs	r0, r3
 8003440:	f000 fa24 	bl	800388c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2108      	movs	r1, #8
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69da      	ldr	r2, [r3, #28]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2104      	movs	r1, #4
 8003460:	438a      	bics	r2, r1
 8003462:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69d9      	ldr	r1, [r3, #28]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	61da      	str	r2, [r3, #28]
      break;
 8003476:	e06b      	b.n	8003550 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	0011      	movs	r1, r2
 8003480:	0018      	movs	r0, r3
 8003482:	f000 fa8b 	bl	800399c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2180      	movs	r1, #128	; 0x80
 8003492:	0109      	lsls	r1, r1, #4
 8003494:	430a      	orrs	r2, r1
 8003496:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4932      	ldr	r1, [pc, #200]	; (800356c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80034a4:	400a      	ands	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69d9      	ldr	r1, [r3, #28]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	021a      	lsls	r2, r3, #8
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	61da      	str	r2, [r3, #28]
      break;
 80034bc:	e048      	b.n	8003550 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	0011      	movs	r1, r2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f000 fad2 	bl	8003a70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2108      	movs	r1, #8
 80034d8:	430a      	orrs	r2, r1
 80034da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2104      	movs	r1, #4
 80034e8:	438a      	bics	r2, r1
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034fe:	e027      	b.n	8003550 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f000 fb11 	bl	8003b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	0109      	lsls	r1, r1, #4
 800351c:	430a      	orrs	r2, r1
 800351e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4910      	ldr	r1, [pc, #64]	; (800356c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800352c:	400a      	ands	r2, r1
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	021a      	lsls	r2, r3, #8
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003544:	e004      	b.n	8003550 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003546:	2317      	movs	r3, #23
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
      break;
 800354e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	223c      	movs	r2, #60	; 0x3c
 8003554:	2100      	movs	r1, #0
 8003556:	5499      	strb	r1, [r3, r2]

  return status;
 8003558:	2317      	movs	r3, #23
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781b      	ldrb	r3, [r3, #0]
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b006      	add	sp, #24
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	08004994 	.word	0x08004994
 800356c:	fffffbff 	.word	0xfffffbff

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a34      	ldr	r2, [pc, #208]	; (8003654 <TIM_Base_SetConfig+0xe4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d008      	beq.n	800359a <TIM_Base_SetConfig+0x2a>
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	05db      	lsls	r3, r3, #23
 800358e:	429a      	cmp	r2, r3
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x2a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a30      	ldr	r2, [pc, #192]	; (8003658 <TIM_Base_SetConfig+0xe8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2270      	movs	r2, #112	; 0x70
 800359e:	4393      	bics	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a29      	ldr	r2, [pc, #164]	; (8003654 <TIM_Base_SetConfig+0xe4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <TIM_Base_SetConfig+0x76>
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	05db      	lsls	r3, r3, #23
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d013      	beq.n	80035e6 <TIM_Base_SetConfig+0x76>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <TIM_Base_SetConfig+0xe8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <TIM_Base_SetConfig+0x76>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <TIM_Base_SetConfig+0xec>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0x76>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <TIM_Base_SetConfig+0xf0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0x76>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <TIM_Base_SetConfig+0xf4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0x76>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <TIM_Base_SetConfig+0xf8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a20      	ldr	r2, [pc, #128]	; (800366c <TIM_Base_SetConfig+0xfc>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	4393      	bics	r3, r2
 80035fe:	001a      	movs	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <TIM_Base_SetConfig+0xe4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0xce>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <TIM_Base_SetConfig+0xf0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0xce>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <TIM_Base_SetConfig+0xf4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0xce>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <TIM_Base_SetConfig+0xf8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	615a      	str	r2, [r3, #20]
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b004      	add	sp, #16
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40000400 	.word	0x40000400
 800365c:	40002000 	.word	0x40002000
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800
 800366c:	fffffcff 	.word	0xfffffcff

08003670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	2201      	movs	r2, #1
 8003680:	4393      	bics	r3, r2
 8003682:	001a      	movs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a32      	ldr	r2, [pc, #200]	; (8003768 <TIM_OC1_SetConfig+0xf8>)
 800369e:	4013      	ands	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2203      	movs	r2, #3
 80036a6:	4393      	bics	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2202      	movs	r2, #2
 80036b8:	4393      	bics	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a28      	ldr	r2, [pc, #160]	; (800376c <TIM_OC1_SetConfig+0xfc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00b      	beq.n	80036e6 <TIM_OC1_SetConfig+0x76>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a27      	ldr	r2, [pc, #156]	; (8003770 <TIM_OC1_SetConfig+0x100>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <TIM_OC1_SetConfig+0x76>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <TIM_OC1_SetConfig+0x104>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d003      	beq.n	80036e6 <TIM_OC1_SetConfig+0x76>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <TIM_OC1_SetConfig+0x108>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10c      	bne.n	8003700 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2208      	movs	r2, #8
 80036ea:	4393      	bics	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2204      	movs	r2, #4
 80036fc:	4393      	bics	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a1a      	ldr	r2, [pc, #104]	; (800376c <TIM_OC1_SetConfig+0xfc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00b      	beq.n	8003720 <TIM_OC1_SetConfig+0xb0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a19      	ldr	r2, [pc, #100]	; (8003770 <TIM_OC1_SetConfig+0x100>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d007      	beq.n	8003720 <TIM_OC1_SetConfig+0xb0>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a18      	ldr	r2, [pc, #96]	; (8003774 <TIM_OC1_SetConfig+0x104>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d003      	beq.n	8003720 <TIM_OC1_SetConfig+0xb0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a17      	ldr	r2, [pc, #92]	; (8003778 <TIM_OC1_SetConfig+0x108>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d111      	bne.n	8003744 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <TIM_OC1_SetConfig+0x10c>)
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <TIM_OC1_SetConfig+0x110>)
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4313      	orrs	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b006      	add	sp, #24
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	fffeff8f 	.word	0xfffeff8f
 800376c:	40012c00 	.word	0x40012c00
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800
 800377c:	fffffeff 	.word	0xfffffeff
 8003780:	fffffdff 	.word	0xfffffdff

08003784 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	2210      	movs	r2, #16
 8003794:	4393      	bics	r3, r2
 8003796:	001a      	movs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a2e      	ldr	r2, [pc, #184]	; (800386c <TIM_OC2_SetConfig+0xe8>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	; (8003870 <TIM_OC2_SetConfig+0xec>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2220      	movs	r2, #32
 80037ce:	4393      	bics	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <TIM_OC2_SetConfig+0xf0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10d      	bne.n	8003802 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	4393      	bics	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	4393      	bics	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <TIM_OC2_SetConfig+0xf0>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00b      	beq.n	8003822 <TIM_OC2_SetConfig+0x9e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <TIM_OC2_SetConfig+0xf4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d007      	beq.n	8003822 <TIM_OC2_SetConfig+0x9e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a19      	ldr	r2, [pc, #100]	; (800387c <TIM_OC2_SetConfig+0xf8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d003      	beq.n	8003822 <TIM_OC2_SetConfig+0x9e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a18      	ldr	r2, [pc, #96]	; (8003880 <TIM_OC2_SetConfig+0xfc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d113      	bne.n	800384a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4a17      	ldr	r2, [pc, #92]	; (8003884 <TIM_OC2_SetConfig+0x100>)
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4a16      	ldr	r2, [pc, #88]	; (8003888 <TIM_OC2_SetConfig+0x104>)
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	621a      	str	r2, [r3, #32]
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b006      	add	sp, #24
 800386a:	bd80      	pop	{r7, pc}
 800386c:	feff8fff 	.word	0xfeff8fff
 8003870:	fffffcff 	.word	0xfffffcff
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400
 8003880:	40014800 	.word	0x40014800
 8003884:	fffffbff 	.word	0xfffffbff
 8003888:	fffff7ff 	.word	0xfffff7ff

0800388c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a35      	ldr	r2, [pc, #212]	; (8003970 <TIM_OC3_SetConfig+0xe4>)
 800389c:	401a      	ands	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <TIM_OC3_SetConfig+0xe8>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2203      	movs	r2, #3
 80038c0:	4393      	bics	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	4a29      	ldr	r2, [pc, #164]	; (8003978 <TIM_OC3_SetConfig+0xec>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <TIM_OC3_SetConfig+0xf0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d10d      	bne.n	8003906 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4a24      	ldr	r2, [pc, #144]	; (8003980 <TIM_OC3_SetConfig+0xf4>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	021b      	lsls	r3, r3, #8
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	4a20      	ldr	r2, [pc, #128]	; (8003984 <TIM_OC3_SetConfig+0xf8>)
 8003902:	4013      	ands	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1c      	ldr	r2, [pc, #112]	; (800397c <TIM_OC3_SetConfig+0xf0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00b      	beq.n	8003926 <TIM_OC3_SetConfig+0x9a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <TIM_OC3_SetConfig+0xfc>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d007      	beq.n	8003926 <TIM_OC3_SetConfig+0x9a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <TIM_OC3_SetConfig+0x100>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d003      	beq.n	8003926 <TIM_OC3_SetConfig+0x9a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <TIM_OC3_SetConfig+0x104>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d113      	bne.n	800394e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4a1a      	ldr	r2, [pc, #104]	; (8003994 <TIM_OC3_SetConfig+0x108>)
 800392a:	4013      	ands	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	4a19      	ldr	r2, [pc, #100]	; (8003998 <TIM_OC3_SetConfig+0x10c>)
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4313      	orrs	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	621a      	str	r2, [r3, #32]
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b006      	add	sp, #24
 800396e:	bd80      	pop	{r7, pc}
 8003970:	fffffeff 	.word	0xfffffeff
 8003974:	fffeff8f 	.word	0xfffeff8f
 8003978:	fffffdff 	.word	0xfffffdff
 800397c:	40012c00 	.word	0x40012c00
 8003980:	fffff7ff 	.word	0xfffff7ff
 8003984:	fffffbff 	.word	0xfffffbff
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800
 8003994:	ffffefff 	.word	0xffffefff
 8003998:	ffffdfff 	.word	0xffffdfff

0800399c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a28      	ldr	r2, [pc, #160]	; (8003a4c <TIM_OC4_SetConfig+0xb0>)
 80039ac:	401a      	ands	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <TIM_OC4_SetConfig+0xb4>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a21      	ldr	r2, [pc, #132]	; (8003a54 <TIM_OC4_SetConfig+0xb8>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <TIM_OC4_SetConfig+0xbc>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	031b      	lsls	r3, r3, #12
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <TIM_OC4_SetConfig+0xc0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <TIM_OC4_SetConfig+0x78>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <TIM_OC4_SetConfig+0xc4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d007      	beq.n	8003a14 <TIM_OC4_SetConfig+0x78>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <TIM_OC4_SetConfig+0xc8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_OC4_SetConfig+0x78>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <TIM_OC4_SetConfig+0xcc>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d109      	bne.n	8003a28 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <TIM_OC4_SetConfig+0xd0>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b006      	add	sp, #24
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	ffffefff 	.word	0xffffefff
 8003a50:	feff8fff 	.word	0xfeff8fff
 8003a54:	fffffcff 	.word	0xfffffcff
 8003a58:	ffffdfff 	.word	0xffffdfff
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800
 8003a6c:	ffffbfff 	.word	0xffffbfff

08003a70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <TIM_OC5_SetConfig+0xa4>)
 8003a80:	401a      	ands	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <TIM_OC5_SetConfig+0xa8>)
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <TIM_OC5_SetConfig+0xac>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	041b      	lsls	r3, r3, #16
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <TIM_OC5_SetConfig+0xb0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_OC5_SetConfig+0x6e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <TIM_OC5_SetConfig+0xb4>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_OC5_SetConfig+0x6e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <TIM_OC5_SetConfig+0xb8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_OC5_SetConfig+0x6e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <TIM_OC5_SetConfig+0xbc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d109      	bne.n	8003af2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <TIM_OC5_SetConfig+0xa4>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b006      	add	sp, #24
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	fffeffff 	.word	0xfffeffff
 8003b18:	fffeff8f 	.word	0xfffeff8f
 8003b1c:	fffdffff 	.word	0xfffdffff
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40014400 	.word	0x40014400
 8003b2c:	40014800 	.word	0x40014800

08003b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	4a26      	ldr	r2, [pc, #152]	; (8003bd8 <TIM_OC6_SetConfig+0xa8>)
 8003b40:	401a      	ands	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a20      	ldr	r2, [pc, #128]	; (8003bdc <TIM_OC6_SetConfig+0xac>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <TIM_OC6_SetConfig+0xb0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	051b      	lsls	r3, r3, #20
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <TIM_OC6_SetConfig+0xb4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_OC6_SetConfig+0x70>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a17      	ldr	r2, [pc, #92]	; (8003be8 <TIM_OC6_SetConfig+0xb8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_OC6_SetConfig+0x70>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a16      	ldr	r2, [pc, #88]	; (8003bec <TIM_OC6_SetConfig+0xbc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC6_SetConfig+0x70>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <TIM_OC6_SetConfig+0xc0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4a14      	ldr	r2, [pc, #80]	; (8003bf4 <TIM_OC6_SetConfig+0xc4>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b006      	add	sp, #24
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	ffefffff 	.word	0xffefffff
 8003bdc:	feff8fff 	.word	0xfeff8fff
 8003be0:	ffdfffff 	.word	0xffdfffff
 8003be4:	40012c00 	.word	0x40012c00
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800
 8003bf4:	fffbffff 	.word	0xfffbffff

08003bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	223c      	movs	r2, #60	; 0x3c
 8003c06:	5c9b      	ldrb	r3, [r3, r2]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e055      	b.n	8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	223c      	movs	r2, #60	; 0x3c
 8003c14:	2101      	movs	r1, #1
 8003c16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	223d      	movs	r2, #61	; 0x3d
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a22      	ldr	r2, [pc, #136]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2270      	movs	r2, #112	; 0x70
 8003c50:	4393      	bics	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00f      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	05db      	lsls	r3, r3, #23
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d009      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d10c      	bne.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	4393      	bics	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	223d      	movs	r2, #61	; 0x3d
 8003cae:	2101      	movs	r1, #1
 8003cb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	223c      	movs	r2, #60	; 0x3c
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	ff0fffff 	.word	0xff0fffff
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40014000 	.word	0x40014000

08003cd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e046      	b.n	8003d74 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2288      	movs	r2, #136	; 0x88
 8003cea:	589b      	ldr	r3, [r3, r2]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2284      	movs	r2, #132	; 0x84
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7fd f9c0 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2288      	movs	r2, #136	; 0x88
 8003d04:	2124      	movs	r1, #36	; 0x24
 8003d06:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2101      	movs	r1, #1
 8003d14:	438a      	bics	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f000 f830 	bl	8003d80 <UART_SetConfig>
 8003d20:	0003      	movs	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e024      	b.n	8003d74 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f000 fae1 	bl	80042fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	490d      	ldr	r1, [pc, #52]	; (8003d7c <HAL_UART_Init+0xa8>)
 8003d46:	400a      	ands	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	212a      	movs	r1, #42	; 0x2a
 8003d56:	438a      	bics	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2101      	movs	r1, #1
 8003d66:	430a      	orrs	r2, r1
 8003d68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f000 fb79 	bl	8004464 <UART_CheckIdleState>
 8003d72:	0003      	movs	r3, r0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	ffffb7ff 	.word	0xffffb7ff

08003d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d80:	b5b0      	push	{r4, r5, r7, lr}
 8003d82:	b090      	sub	sp, #64	; 0x40
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d88:	231a      	movs	r3, #26
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	189b      	adds	r3, r3, r2
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4aaf      	ldr	r2, [pc, #700]	; (8004070 <UART_SetConfig+0x2f0>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	0019      	movs	r1, r3
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4aaa      	ldr	r2, [pc, #680]	; (8004074 <UART_SetConfig+0x2f4>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	0018      	movs	r0, r3
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	68d9      	ldr	r1, [r3, #12]
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	430b      	orrs	r3, r1
 8003dda:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4aa4      	ldr	r2, [pc, #656]	; (8004078 <UART_SetConfig+0x2f8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003df2:	4313      	orrs	r3, r2
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a9f      	ldr	r2, [pc, #636]	; (800407c <UART_SetConfig+0x2fc>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	220f      	movs	r2, #15
 8003e14:	4393      	bics	r3, r2
 8003e16:	0018      	movs	r0, r3
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	0003      	movs	r3, r0
 8003e22:	430b      	orrs	r3, r1
 8003e24:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a95      	ldr	r2, [pc, #596]	; (8004080 <UART_SetConfig+0x300>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d131      	bne.n	8003e94 <UART_SetConfig+0x114>
 8003e30:	4b94      	ldr	r3, [pc, #592]	; (8004084 <UART_SetConfig+0x304>)
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	2203      	movs	r2, #3
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d01d      	beq.n	8003e78 <UART_SetConfig+0xf8>
 8003e3c:	d823      	bhi.n	8003e86 <UART_SetConfig+0x106>
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d00c      	beq.n	8003e5c <UART_SetConfig+0xdc>
 8003e42:	d820      	bhi.n	8003e86 <UART_SetConfig+0x106>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <UART_SetConfig+0xce>
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d00e      	beq.n	8003e6a <UART_SetConfig+0xea>
 8003e4c:	e01b      	b.n	8003e86 <UART_SetConfig+0x106>
 8003e4e:	231b      	movs	r3, #27
 8003e50:	2220      	movs	r2, #32
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	19db      	adds	r3, r3, r7
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e0b4      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003e5c:	231b      	movs	r3, #27
 8003e5e:	2220      	movs	r2, #32
 8003e60:	189b      	adds	r3, r3, r2
 8003e62:	19db      	adds	r3, r3, r7
 8003e64:	2202      	movs	r2, #2
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e0ad      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003e6a:	231b      	movs	r3, #27
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	189b      	adds	r3, r3, r2
 8003e70:	19db      	adds	r3, r3, r7
 8003e72:	2204      	movs	r2, #4
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e0a6      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003e78:	231b      	movs	r3, #27
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	19db      	adds	r3, r3, r7
 8003e80:	2208      	movs	r2, #8
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e09f      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003e86:	231b      	movs	r3, #27
 8003e88:	2220      	movs	r2, #32
 8003e8a:	189b      	adds	r3, r3, r2
 8003e8c:	19db      	adds	r3, r3, r7
 8003e8e:	2210      	movs	r2, #16
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e098      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a7b      	ldr	r2, [pc, #492]	; (8004088 <UART_SetConfig+0x308>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d131      	bne.n	8003f02 <UART_SetConfig+0x182>
 8003e9e:	4b79      	ldr	r3, [pc, #484]	; (8004084 <UART_SetConfig+0x304>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea2:	220c      	movs	r2, #12
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d01d      	beq.n	8003ee6 <UART_SetConfig+0x166>
 8003eaa:	d823      	bhi.n	8003ef4 <UART_SetConfig+0x174>
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d00c      	beq.n	8003eca <UART_SetConfig+0x14a>
 8003eb0:	d820      	bhi.n	8003ef4 <UART_SetConfig+0x174>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <UART_SetConfig+0x13c>
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d00e      	beq.n	8003ed8 <UART_SetConfig+0x158>
 8003eba:	e01b      	b.n	8003ef4 <UART_SetConfig+0x174>
 8003ebc:	231b      	movs	r3, #27
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e07d      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003eca:	231b      	movs	r3, #27
 8003ecc:	2220      	movs	r2, #32
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	19db      	adds	r3, r3, r7
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e076      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003ed8:	231b      	movs	r3, #27
 8003eda:	2220      	movs	r2, #32
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	e06f      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003ee6:	231b      	movs	r3, #27
 8003ee8:	2220      	movs	r2, #32
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	2208      	movs	r2, #8
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e068      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003ef4:	231b      	movs	r3, #27
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	189b      	adds	r3, r3, r2
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	2210      	movs	r2, #16
 8003efe:	701a      	strb	r2, [r3, #0]
 8003f00:	e061      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a61      	ldr	r2, [pc, #388]	; (800408c <UART_SetConfig+0x30c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d106      	bne.n	8003f1a <UART_SetConfig+0x19a>
 8003f0c:	231b      	movs	r3, #27
 8003f0e:	2220      	movs	r2, #32
 8003f10:	189b      	adds	r3, r3, r2
 8003f12:	19db      	adds	r3, r3, r7
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	e055      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a5c      	ldr	r2, [pc, #368]	; (8004090 <UART_SetConfig+0x310>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d106      	bne.n	8003f32 <UART_SetConfig+0x1b2>
 8003f24:	231b      	movs	r3, #27
 8003f26:	2220      	movs	r2, #32
 8003f28:	189b      	adds	r3, r3, r2
 8003f2a:	19db      	adds	r3, r3, r7
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	e049      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a50      	ldr	r2, [pc, #320]	; (8004078 <UART_SetConfig+0x2f8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d13e      	bne.n	8003fba <UART_SetConfig+0x23a>
 8003f3c:	4b51      	ldr	r3, [pc, #324]	; (8004084 <UART_SetConfig+0x304>)
 8003f3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f40:	23c0      	movs	r3, #192	; 0xc0
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	4013      	ands	r3, r2
 8003f46:	22c0      	movs	r2, #192	; 0xc0
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d027      	beq.n	8003f9e <UART_SetConfig+0x21e>
 8003f4e:	22c0      	movs	r2, #192	; 0xc0
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d82a      	bhi.n	8003fac <UART_SetConfig+0x22c>
 8003f56:	2280      	movs	r2, #128	; 0x80
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d011      	beq.n	8003f82 <UART_SetConfig+0x202>
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	0112      	lsls	r2, r2, #4
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d822      	bhi.n	8003fac <UART_SetConfig+0x22c>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <UART_SetConfig+0x1f4>
 8003f6a:	2280      	movs	r2, #128	; 0x80
 8003f6c:	00d2      	lsls	r2, r2, #3
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00e      	beq.n	8003f90 <UART_SetConfig+0x210>
 8003f72:	e01b      	b.n	8003fac <UART_SetConfig+0x22c>
 8003f74:	231b      	movs	r3, #27
 8003f76:	2220      	movs	r2, #32
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	19db      	adds	r3, r3, r7
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	e021      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003f82:	231b      	movs	r3, #27
 8003f84:	2220      	movs	r2, #32
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e01a      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003f90:	231b      	movs	r3, #27
 8003f92:	2220      	movs	r2, #32
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	19db      	adds	r3, r3, r7
 8003f98:	2204      	movs	r2, #4
 8003f9a:	701a      	strb	r2, [r3, #0]
 8003f9c:	e013      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003f9e:	231b      	movs	r3, #27
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	189b      	adds	r3, r3, r2
 8003fa4:	19db      	adds	r3, r3, r7
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e00c      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003fac:	231b      	movs	r3, #27
 8003fae:	2220      	movs	r2, #32
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	701a      	strb	r2, [r3, #0]
 8003fb8:	e005      	b.n	8003fc6 <UART_SetConfig+0x246>
 8003fba:	231b      	movs	r3, #27
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	19db      	adds	r3, r3, r7
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <UART_SetConfig+0x2f8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d000      	beq.n	8003fd2 <UART_SetConfig+0x252>
 8003fd0:	e0a9      	b.n	8004126 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fd2:	231b      	movs	r3, #27
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	189b      	adds	r3, r3, r2
 8003fd8:	19db      	adds	r3, r3, r7
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d015      	beq.n	800400c <UART_SetConfig+0x28c>
 8003fe0:	dc18      	bgt.n	8004014 <UART_SetConfig+0x294>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d00d      	beq.n	8004002 <UART_SetConfig+0x282>
 8003fe6:	dc15      	bgt.n	8004014 <UART_SetConfig+0x294>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <UART_SetConfig+0x272>
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d005      	beq.n	8003ffc <UART_SetConfig+0x27c>
 8003ff0:	e010      	b.n	8004014 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff2:	f7fe fe87 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ffa:	e014      	b.n	8004026 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ffc:	4b25      	ldr	r3, [pc, #148]	; (8004094 <UART_SetConfig+0x314>)
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004000:	e011      	b.n	8004026 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004002:	f7fe fdf3 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8004006:	0003      	movs	r3, r0
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800400a:	e00c      	b.n	8004026 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004012:	e008      	b.n	8004026 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004018:	231a      	movs	r3, #26
 800401a:	2220      	movs	r2, #32
 800401c:	189b      	adds	r3, r3, r2
 800401e:	19db      	adds	r3, r3, r7
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
        break;
 8004024:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004028:	2b00      	cmp	r3, #0
 800402a:	d100      	bne.n	800402e <UART_SetConfig+0x2ae>
 800402c:	e14b      	b.n	80042c6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004032:	4b19      	ldr	r3, [pc, #100]	; (8004098 <UART_SetConfig+0x318>)
 8004034:	0052      	lsls	r2, r2, #1
 8004036:	5ad3      	ldrh	r3, [r2, r3]
 8004038:	0019      	movs	r1, r3
 800403a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800403c:	f7fc f862 	bl	8000104 <__udivsi3>
 8004040:	0003      	movs	r3, r0
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	0013      	movs	r3, r2
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	189b      	adds	r3, r3, r2
 800404e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004050:	429a      	cmp	r2, r3
 8004052:	d305      	bcc.n	8004060 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800405a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405c:	429a      	cmp	r2, r3
 800405e:	d91d      	bls.n	800409c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004060:	231a      	movs	r3, #26
 8004062:	2220      	movs	r2, #32
 8004064:	189b      	adds	r3, r3, r2
 8004066:	19db      	adds	r3, r3, r7
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e12b      	b.n	80042c6 <UART_SetConfig+0x546>
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	cfff69f3 	.word	0xcfff69f3
 8004074:	ffffcfff 	.word	0xffffcfff
 8004078:	40008000 	.word	0x40008000
 800407c:	11fff4ff 	.word	0x11fff4ff
 8004080:	40013800 	.word	0x40013800
 8004084:	40021000 	.word	0x40021000
 8004088:	40004400 	.word	0x40004400
 800408c:	40004800 	.word	0x40004800
 8004090:	40004c00 	.word	0x40004c00
 8004094:	00f42400 	.word	0x00f42400
 8004098:	080049e8 	.word	0x080049e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040a8:	4b92      	ldr	r3, [pc, #584]	; (80042f4 <UART_SetConfig+0x574>)
 80040aa:	0052      	lsls	r2, r2, #1
 80040ac:	5ad3      	ldrh	r3, [r2, r3]
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	69b8      	ldr	r0, [r7, #24]
 80040ba:	69f9      	ldr	r1, [r7, #28]
 80040bc:	f7fc f998 	bl	80003f0 <__aeabi_uldivmod>
 80040c0:	0002      	movs	r2, r0
 80040c2:	000b      	movs	r3, r1
 80040c4:	0e11      	lsrs	r1, r2, #24
 80040c6:	021d      	lsls	r5, r3, #8
 80040c8:	430d      	orrs	r5, r1
 80040ca:	0214      	lsls	r4, r2, #8
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	1900      	adds	r0, r0, r4
 80040de:	4169      	adcs	r1, r5
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	603b      	str	r3, [r7, #0]
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f7fc f97f 	bl	80003f0 <__aeabi_uldivmod>
 80040f2:	0002      	movs	r2, r0
 80040f4:	000b      	movs	r3, r1
 80040f6:	0013      	movs	r3, r2
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040fc:	23c0      	movs	r3, #192	; 0xc0
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	429a      	cmp	r2, r3
 8004102:	d309      	bcc.n	8004118 <UART_SetConfig+0x398>
 8004104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	035b      	lsls	r3, r3, #13
 800410a:	429a      	cmp	r2, r3
 800410c:	d204      	bcs.n	8004118 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	e0d6      	b.n	80042c6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004118:	231a      	movs	r3, #26
 800411a:	2220      	movs	r2, #32
 800411c:	189b      	adds	r3, r3, r2
 800411e:	19db      	adds	r3, r3, r7
 8004120:	2201      	movs	r2, #1
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e0cf      	b.n	80042c6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	2380      	movs	r3, #128	; 0x80
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	429a      	cmp	r2, r3
 8004130:	d000      	beq.n	8004134 <UART_SetConfig+0x3b4>
 8004132:	e070      	b.n	8004216 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004134:	231b      	movs	r3, #27
 8004136:	2220      	movs	r2, #32
 8004138:	189b      	adds	r3, r3, r2
 800413a:	19db      	adds	r3, r3, r7
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b08      	cmp	r3, #8
 8004140:	d015      	beq.n	800416e <UART_SetConfig+0x3ee>
 8004142:	dc18      	bgt.n	8004176 <UART_SetConfig+0x3f6>
 8004144:	2b04      	cmp	r3, #4
 8004146:	d00d      	beq.n	8004164 <UART_SetConfig+0x3e4>
 8004148:	dc15      	bgt.n	8004176 <UART_SetConfig+0x3f6>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <UART_SetConfig+0x3d4>
 800414e:	2b02      	cmp	r3, #2
 8004150:	d005      	beq.n	800415e <UART_SetConfig+0x3de>
 8004152:	e010      	b.n	8004176 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004154:	f7fe fdd6 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8004158:	0003      	movs	r3, r0
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800415c:	e014      	b.n	8004188 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800415e:	4b66      	ldr	r3, [pc, #408]	; (80042f8 <UART_SetConfig+0x578>)
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004162:	e011      	b.n	8004188 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004164:	f7fe fd42 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8004168:	0003      	movs	r3, r0
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800416c:	e00c      	b.n	8004188 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004174:	e008      	b.n	8004188 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800417a:	231a      	movs	r3, #26
 800417c:	2220      	movs	r2, #32
 800417e:	189b      	adds	r3, r3, r2
 8004180:	19db      	adds	r3, r3, r7
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
        break;
 8004186:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418a:	2b00      	cmp	r3, #0
 800418c:	d100      	bne.n	8004190 <UART_SetConfig+0x410>
 800418e:	e09a      	b.n	80042c6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004194:	4b57      	ldr	r3, [pc, #348]	; (80042f4 <UART_SetConfig+0x574>)
 8004196:	0052      	lsls	r2, r2, #1
 8004198:	5ad3      	ldrh	r3, [r2, r3]
 800419a:	0019      	movs	r1, r3
 800419c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800419e:	f7fb ffb1 	bl	8000104 <__udivsi3>
 80041a2:	0003      	movs	r3, r0
 80041a4:	005a      	lsls	r2, r3, #1
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	18d2      	adds	r2, r2, r3
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	0019      	movs	r1, r3
 80041b4:	0010      	movs	r0, r2
 80041b6:	f7fb ffa5 	bl	8000104 <__udivsi3>
 80041ba:	0003      	movs	r3, r0
 80041bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	2b0f      	cmp	r3, #15
 80041c2:	d921      	bls.n	8004208 <UART_SetConfig+0x488>
 80041c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	025b      	lsls	r3, r3, #9
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d21c      	bcs.n	8004208 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	200e      	movs	r0, #14
 80041d4:	2420      	movs	r4, #32
 80041d6:	1903      	adds	r3, r0, r4
 80041d8:	19db      	adds	r3, r3, r7
 80041da:	210f      	movs	r1, #15
 80041dc:	438a      	bics	r2, r1
 80041de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2207      	movs	r2, #7
 80041e8:	4013      	ands	r3, r2
 80041ea:	b299      	uxth	r1, r3
 80041ec:	1903      	adds	r3, r0, r4
 80041ee:	19db      	adds	r3, r3, r7
 80041f0:	1902      	adds	r2, r0, r4
 80041f2:	19d2      	adds	r2, r2, r7
 80041f4:	8812      	ldrh	r2, [r2, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1902      	adds	r2, r0, r4
 8004200:	19d2      	adds	r2, r2, r7
 8004202:	8812      	ldrh	r2, [r2, #0]
 8004204:	60da      	str	r2, [r3, #12]
 8004206:	e05e      	b.n	80042c6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004208:	231a      	movs	r3, #26
 800420a:	2220      	movs	r2, #32
 800420c:	189b      	adds	r3, r3, r2
 800420e:	19db      	adds	r3, r3, r7
 8004210:	2201      	movs	r2, #1
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	e057      	b.n	80042c6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004216:	231b      	movs	r3, #27
 8004218:	2220      	movs	r2, #32
 800421a:	189b      	adds	r3, r3, r2
 800421c:	19db      	adds	r3, r3, r7
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d015      	beq.n	8004250 <UART_SetConfig+0x4d0>
 8004224:	dc18      	bgt.n	8004258 <UART_SetConfig+0x4d8>
 8004226:	2b04      	cmp	r3, #4
 8004228:	d00d      	beq.n	8004246 <UART_SetConfig+0x4c6>
 800422a:	dc15      	bgt.n	8004258 <UART_SetConfig+0x4d8>
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <UART_SetConfig+0x4b6>
 8004230:	2b02      	cmp	r3, #2
 8004232:	d005      	beq.n	8004240 <UART_SetConfig+0x4c0>
 8004234:	e010      	b.n	8004258 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004236:	f7fe fd65 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 800423a:	0003      	movs	r3, r0
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800423e:	e014      	b.n	800426a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004240:	4b2d      	ldr	r3, [pc, #180]	; (80042f8 <UART_SetConfig+0x578>)
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004244:	e011      	b.n	800426a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004246:	f7fe fcd1 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 800424a:	0003      	movs	r3, r0
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800424e:	e00c      	b.n	800426a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004256:	e008      	b.n	800426a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800425c:	231a      	movs	r3, #26
 800425e:	2220      	movs	r2, #32
 8004260:	189b      	adds	r3, r3, r2
 8004262:	19db      	adds	r3, r3, r7
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
        break;
 8004268:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	2b00      	cmp	r3, #0
 800426e:	d02a      	beq.n	80042c6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004274:	4b1f      	ldr	r3, [pc, #124]	; (80042f4 <UART_SetConfig+0x574>)
 8004276:	0052      	lsls	r2, r2, #1
 8004278:	5ad3      	ldrh	r3, [r2, r3]
 800427a:	0019      	movs	r1, r3
 800427c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800427e:	f7fb ff41 	bl	8000104 <__udivsi3>
 8004282:	0003      	movs	r3, r0
 8004284:	001a      	movs	r2, r3
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	18d2      	adds	r2, r2, r3
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	0019      	movs	r1, r3
 8004294:	0010      	movs	r0, r2
 8004296:	f7fb ff35 	bl	8000104 <__udivsi3>
 800429a:	0003      	movs	r3, r0
 800429c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d90a      	bls.n	80042ba <UART_SetConfig+0x53a>
 80042a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	025b      	lsls	r3, r3, #9
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d205      	bcs.n	80042ba <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60da      	str	r2, [r3, #12]
 80042b8:	e005      	b.n	80042c6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80042ba:	231a      	movs	r3, #26
 80042bc:	2220      	movs	r2, #32
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	226a      	movs	r2, #106	; 0x6a
 80042ca:	2101      	movs	r1, #1
 80042cc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	2268      	movs	r2, #104	; 0x68
 80042d2:	2101      	movs	r1, #1
 80042d4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	2200      	movs	r2, #0
 80042da:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2200      	movs	r2, #0
 80042e0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042e2:	231a      	movs	r3, #26
 80042e4:	2220      	movs	r2, #32
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	19db      	adds	r3, r3, r7
 80042ea:	781b      	ldrb	r3, [r3, #0]
}
 80042ec:	0018      	movs	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b010      	add	sp, #64	; 0x40
 80042f2:	bdb0      	pop	{r4, r5, r7, pc}
 80042f4:	080049e8 	.word	0x080049e8
 80042f8:	00f42400 	.word	0x00f42400

080042fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	2201      	movs	r2, #1
 800430a:	4013      	ands	r3, r2
 800430c:	d00b      	beq.n	8004326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a4a      	ldr	r2, [pc, #296]	; (8004440 <UART_AdvFeatureConfig+0x144>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	2202      	movs	r2, #2
 800432c:	4013      	ands	r3, r2
 800432e:	d00b      	beq.n	8004348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4a43      	ldr	r2, [pc, #268]	; (8004444 <UART_AdvFeatureConfig+0x148>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	2204      	movs	r2, #4
 800434e:	4013      	ands	r3, r2
 8004350:	d00b      	beq.n	800436a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <UART_AdvFeatureConfig+0x14c>)
 800435a:	4013      	ands	r3, r2
 800435c:	0019      	movs	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	2208      	movs	r2, #8
 8004370:	4013      	ands	r3, r2
 8004372:	d00b      	beq.n	800438c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4a34      	ldr	r2, [pc, #208]	; (800444c <UART_AdvFeatureConfig+0x150>)
 800437c:	4013      	ands	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	2210      	movs	r2, #16
 8004392:	4013      	ands	r3, r2
 8004394:	d00b      	beq.n	80043ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a2c      	ldr	r2, [pc, #176]	; (8004450 <UART_AdvFeatureConfig+0x154>)
 800439e:	4013      	ands	r3, r2
 80043a0:	0019      	movs	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b2:	2220      	movs	r2, #32
 80043b4:	4013      	ands	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4a25      	ldr	r2, [pc, #148]	; (8004454 <UART_AdvFeatureConfig+0x158>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d4:	2240      	movs	r2, #64	; 0x40
 80043d6:	4013      	ands	r3, r2
 80043d8:	d01d      	beq.n	8004416 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <UART_AdvFeatureConfig+0x15c>)
 80043e2:	4013      	ands	r3, r2
 80043e4:	0019      	movs	r1, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	035b      	lsls	r3, r3, #13
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d10b      	bne.n	8004416 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <UART_AdvFeatureConfig+0x160>)
 8004406:	4013      	ands	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	2280      	movs	r2, #128	; 0x80
 800441c:	4013      	ands	r3, r2
 800441e:	d00b      	beq.n	8004438 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <UART_AdvFeatureConfig+0x164>)
 8004428:	4013      	ands	r3, r2
 800442a:	0019      	movs	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}
 8004440:	fffdffff 	.word	0xfffdffff
 8004444:	fffeffff 	.word	0xfffeffff
 8004448:	fffbffff 	.word	0xfffbffff
 800444c:	ffff7fff 	.word	0xffff7fff
 8004450:	ffffefff 	.word	0xffffefff
 8004454:	ffffdfff 	.word	0xffffdfff
 8004458:	ffefffff 	.word	0xffefffff
 800445c:	ff9fffff 	.word	0xff9fffff
 8004460:	fff7ffff 	.word	0xfff7ffff

08004464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af02      	add	r7, sp, #8
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2290      	movs	r2, #144	; 0x90
 8004470:	2100      	movs	r1, #0
 8004472:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004474:	f7fc ff60 	bl	8001338 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2208      	movs	r2, #8
 8004484:	4013      	ands	r3, r2
 8004486:	2b08      	cmp	r3, #8
 8004488:	d10c      	bne.n	80044a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2280      	movs	r2, #128	; 0x80
 800448e:	0391      	lsls	r1, r2, #14
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4a1a      	ldr	r2, [pc, #104]	; (80044fc <UART_CheckIdleState+0x98>)
 8004494:	9200      	str	r2, [sp, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	f000 f832 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d001      	beq.n	80044a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e026      	b.n	80044f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2204      	movs	r2, #4
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d10c      	bne.n	80044cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2280      	movs	r2, #128	; 0x80
 80044b6:	03d1      	lsls	r1, r2, #15
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4a10      	ldr	r2, [pc, #64]	; (80044fc <UART_CheckIdleState+0x98>)
 80044bc:	9200      	str	r2, [sp, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	f000 f81e 	bl	8004500 <UART_WaitOnFlagUntilTimeout>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d001      	beq.n	80044cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e012      	b.n	80044f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2288      	movs	r2, #136	; 0x88
 80044d0:	2120      	movs	r1, #32
 80044d2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	228c      	movs	r2, #140	; 0x8c
 80044d8:	2120      	movs	r1, #32
 80044da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2284      	movs	r2, #132	; 0x84
 80044ec:	2100      	movs	r1, #0
 80044ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	0018      	movs	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	b004      	add	sp, #16
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	01ffffff 	.word	0x01ffffff

08004500 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b094      	sub	sp, #80	; 0x50
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	e0a7      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004514:	3301      	adds	r3, #1
 8004516:	d100      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004518:	e0a3      	b.n	8004662 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800451a:	f7fc ff0d 	bl	8001338 <HAL_GetTick>
 800451e:	0002      	movs	r2, r0
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004526:	429a      	cmp	r2, r3
 8004528:	d302      	bcc.n	8004530 <UART_WaitOnFlagUntilTimeout+0x30>
 800452a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800452c:	2b00      	cmp	r3, #0
 800452e:	d13f      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004530:	f3ef 8310 	mrs	r3, PRIMASK
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004538:	647b      	str	r3, [r7, #68]	; 0x44
 800453a:	2301      	movs	r3, #1
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	f383 8810 	msr	PRIMASK, r3
}
 8004544:	46c0      	nop			; (mov r8, r8)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	494e      	ldr	r1, [pc, #312]	; (800468c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004552:	400a      	ands	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	f383 8810 	msr	PRIMASK, r3
}
 8004560:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004562:	f3ef 8310 	mrs	r3, PRIMASK
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456a:	643b      	str	r3, [r7, #64]	; 0x40
 800456c:	2301      	movs	r3, #1
 800456e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	f383 8810 	msr	PRIMASK, r3
}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2101      	movs	r1, #1
 8004584:	438a      	bics	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2288      	movs	r2, #136	; 0x88
 8004598:	2120      	movs	r1, #32
 800459a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	228c      	movs	r2, #140	; 0x8c
 80045a0:	2120      	movs	r1, #32
 80045a2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2284      	movs	r2, #132	; 0x84
 80045a8:	2100      	movs	r1, #0
 80045aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e069      	b.n	8004684 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2204      	movs	r2, #4
 80045b8:	4013      	ands	r3, r2
 80045ba:	d052      	beq.n	8004662 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69da      	ldr	r2, [r3, #28]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	401a      	ands	r2, r3
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d148      	bne.n	8004662 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2280      	movs	r2, #128	; 0x80
 80045d6:	0112      	lsls	r2, r2, #4
 80045d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045da:	f3ef 8310 	mrs	r3, PRIMASK
 80045de:	613b      	str	r3, [r7, #16]
  return(result);
 80045e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e4:	2301      	movs	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f383 8810 	msr	PRIMASK, r3
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4924      	ldr	r1, [pc, #144]	; (800468c <UART_WaitOnFlagUntilTimeout+0x18c>)
 80045fc:	400a      	ands	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004602:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f383 8810 	msr	PRIMASK, r3
}
 800460a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460c:	f3ef 8310 	mrs	r3, PRIMASK
 8004610:	61fb      	str	r3, [r7, #28]
  return(result);
 8004612:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004614:	64bb      	str	r3, [r7, #72]	; 0x48
 8004616:	2301      	movs	r3, #1
 8004618:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	f383 8810 	msr	PRIMASK, r3
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2101      	movs	r1, #1
 800462e:	438a      	bics	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
 8004632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	f383 8810 	msr	PRIMASK, r3
}
 800463c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2288      	movs	r2, #136	; 0x88
 8004642:	2120      	movs	r1, #32
 8004644:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	228c      	movs	r2, #140	; 0x8c
 800464a:	2120      	movs	r1, #32
 800464c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2290      	movs	r2, #144	; 0x90
 8004652:	2120      	movs	r1, #32
 8004654:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2284      	movs	r2, #132	; 0x84
 800465a:	2100      	movs	r1, #0
 800465c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e010      	b.n	8004684 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	425a      	negs	r2, r3
 8004672:	4153      	adcs	r3, r2
 8004674:	b2db      	uxtb	r3, r3
 8004676:	001a      	movs	r2, r3
 8004678:	1dfb      	adds	r3, r7, #7
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d100      	bne.n	8004682 <UART_WaitOnFlagUntilTimeout+0x182>
 8004680:	e747      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	0018      	movs	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	b014      	add	sp, #80	; 0x50
 800468a:	bd80      	pop	{r7, pc}
 800468c:	fffffe5f 	.word	0xfffffe5f

08004690 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2284      	movs	r2, #132	; 0x84
 800469c:	5c9b      	ldrb	r3, [r3, r2]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e027      	b.n	80046f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2284      	movs	r2, #132	; 0x84
 80046aa:	2101      	movs	r1, #1
 80046ac:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2288      	movs	r2, #136	; 0x88
 80046b2:	2124      	movs	r1, #36	; 0x24
 80046b4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2101      	movs	r1, #1
 80046ca:	438a      	bics	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <HAL_UARTEx_DisableFifoMode+0x70>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2288      	movs	r2, #136	; 0x88
 80046e8:	2120      	movs	r1, #32
 80046ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2284      	movs	r2, #132	; 0x84
 80046f0:	2100      	movs	r1, #0
 80046f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b004      	add	sp, #16
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	dfffffff 	.word	0xdfffffff

08004704 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2284      	movs	r2, #132	; 0x84
 8004712:	5c9b      	ldrb	r3, [r3, r2]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004718:	2302      	movs	r3, #2
 800471a:	e02e      	b.n	800477a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2284      	movs	r2, #132	; 0x84
 8004720:	2101      	movs	r1, #1
 8004722:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2288      	movs	r2, #136	; 0x88
 8004728:	2124      	movs	r1, #36	; 0x24
 800472a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2101      	movs	r1, #1
 8004740:	438a      	bics	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	08d9      	lsrs	r1, r3, #3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f854 	bl	8004808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2288      	movs	r2, #136	; 0x88
 800476c:	2120      	movs	r1, #32
 800476e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2284      	movs	r2, #132	; 0x84
 8004774:	2100      	movs	r1, #0
 8004776:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b004      	add	sp, #16
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2284      	movs	r2, #132	; 0x84
 8004792:	5c9b      	ldrb	r3, [r3, r2]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004798:	2302      	movs	r3, #2
 800479a:	e02f      	b.n	80047fc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2284      	movs	r2, #132	; 0x84
 80047a0:	2101      	movs	r1, #1
 80047a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2288      	movs	r2, #136	; 0x88
 80047a8:	2124      	movs	r1, #36	; 0x24
 80047aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2101      	movs	r1, #1
 80047c0:	438a      	bics	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	0019      	movs	r1, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0018      	movs	r0, r3
 80047de:	f000 f813 	bl	8004808 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2288      	movs	r2, #136	; 0x88
 80047ee:	2120      	movs	r1, #32
 80047f0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2284      	movs	r2, #132	; 0x84
 80047f6:	2100      	movs	r1, #0
 80047f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	0018      	movs	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	b004      	add	sp, #16
 8004802:	bd80      	pop	{r7, pc}
 8004804:	f1ffffff 	.word	0xf1ffffff

08004808 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004814:	2b00      	cmp	r3, #0
 8004816:	d108      	bne.n	800482a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	226a      	movs	r2, #106	; 0x6a
 800481c:	2101      	movs	r1, #1
 800481e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2268      	movs	r2, #104	; 0x68
 8004824:	2101      	movs	r1, #1
 8004826:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004828:	e043      	b.n	80048b2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800482a:	260f      	movs	r6, #15
 800482c:	19bb      	adds	r3, r7, r6
 800482e:	2208      	movs	r2, #8
 8004830:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004832:	200e      	movs	r0, #14
 8004834:	183b      	adds	r3, r7, r0
 8004836:	2208      	movs	r2, #8
 8004838:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	0e5b      	lsrs	r3, r3, #25
 8004842:	b2da      	uxtb	r2, r3
 8004844:	240d      	movs	r4, #13
 8004846:	193b      	adds	r3, r7, r4
 8004848:	2107      	movs	r1, #7
 800484a:	400a      	ands	r2, r1
 800484c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	0f5b      	lsrs	r3, r3, #29
 8004856:	b2da      	uxtb	r2, r3
 8004858:	250c      	movs	r5, #12
 800485a:	197b      	adds	r3, r7, r5
 800485c:	2107      	movs	r1, #7
 800485e:	400a      	ands	r2, r1
 8004860:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004862:	183b      	adds	r3, r7, r0
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	197a      	adds	r2, r7, r5
 8004868:	7812      	ldrb	r2, [r2, #0]
 800486a:	4914      	ldr	r1, [pc, #80]	; (80048bc <UARTEx_SetNbDataToProcess+0xb4>)
 800486c:	5c8a      	ldrb	r2, [r1, r2]
 800486e:	435a      	muls	r2, r3
 8004870:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004872:	197b      	adds	r3, r7, r5
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <UARTEx_SetNbDataToProcess+0xb8>)
 8004878:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800487a:	0019      	movs	r1, r3
 800487c:	f7fb fccc 	bl	8000218 <__divsi3>
 8004880:	0003      	movs	r3, r0
 8004882:	b299      	uxth	r1, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	226a      	movs	r2, #106	; 0x6a
 8004888:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800488a:	19bb      	adds	r3, r7, r6
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	193a      	adds	r2, r7, r4
 8004890:	7812      	ldrb	r2, [r2, #0]
 8004892:	490a      	ldr	r1, [pc, #40]	; (80048bc <UARTEx_SetNbDataToProcess+0xb4>)
 8004894:	5c8a      	ldrb	r2, [r1, r2]
 8004896:	435a      	muls	r2, r3
 8004898:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800489a:	193b      	adds	r3, r7, r4
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	4a08      	ldr	r2, [pc, #32]	; (80048c0 <UARTEx_SetNbDataToProcess+0xb8>)
 80048a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048a2:	0019      	movs	r1, r3
 80048a4:	f7fb fcb8 	bl	8000218 <__divsi3>
 80048a8:	0003      	movs	r3, r0
 80048aa:	b299      	uxth	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2268      	movs	r2, #104	; 0x68
 80048b0:	5299      	strh	r1, [r3, r2]
}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b005      	add	sp, #20
 80048b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	08004a00 	.word	0x08004a00
 80048c0:	08004a08 	.word	0x08004a08

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	2600      	movs	r6, #0
 80048c8:	4d0c      	ldr	r5, [pc, #48]	; (80048fc <__libc_init_array+0x38>)
 80048ca:	4c0d      	ldr	r4, [pc, #52]	; (8004900 <__libc_init_array+0x3c>)
 80048cc:	1b64      	subs	r4, r4, r5
 80048ce:	10a4      	asrs	r4, r4, #2
 80048d0:	42a6      	cmp	r6, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	2600      	movs	r6, #0
 80048d6:	f000 f821 	bl	800491c <_init>
 80048da:	4d0a      	ldr	r5, [pc, #40]	; (8004904 <__libc_init_array+0x40>)
 80048dc:	4c0a      	ldr	r4, [pc, #40]	; (8004908 <__libc_init_array+0x44>)
 80048de:	1b64      	subs	r4, r4, r5
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	42a6      	cmp	r6, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	00b3      	lsls	r3, r6, #2
 80048ea:	58eb      	ldr	r3, [r5, r3]
 80048ec:	4798      	blx	r3
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	00b3      	lsls	r3, r6, #2
 80048f4:	58eb      	ldr	r3, [r5, r3]
 80048f6:	4798      	blx	r3
 80048f8:	3601      	adds	r6, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	08004a18 	.word	0x08004a18
 8004900:	08004a18 	.word	0x08004a18
 8004904:	08004a18 	.word	0x08004a18
 8004908:	08004a1c 	.word	0x08004a1c

0800490c <memset>:
 800490c:	0003      	movs	r3, r0
 800490e:	1882      	adds	r2, r0, r2
 8004910:	4293      	cmp	r3, r2
 8004912:	d100      	bne.n	8004916 <memset+0xa>
 8004914:	4770      	bx	lr
 8004916:	7019      	strb	r1, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	e7f9      	b.n	8004910 <memset+0x4>

0800491c <_init>:
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004922:	bc08      	pop	{r3}
 8004924:	469e      	mov	lr, r3
 8004926:	4770      	bx	lr

08004928 <_fini>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr
