
MCU_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f70  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  08009030  08009030  00019030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009724  08009724  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009724  08009724  00019724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800972c  0800972c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009730  08009730  00019730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  200001f4  08009928  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08009928  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec94  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a10  00000000  00000000  0003eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001501d  00000000  00000000  000428c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d8  00000000  00000000  000578e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e0  00000000  00000000  00058cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f9d  00000000  00000000  0005a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020ad6  00000000  00000000  0005f035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0a96  00000000  00000000  0007fb0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001305a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000466c  00000000  00000000  001305f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f4 	.word	0x200001f4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009014 	.word	0x08009014

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f8 	.word	0x200001f8
 8000100:	08009014 	.word	0x08009014

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 fe13 	bl	8002064 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fd63 	bl	8001f14 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fe05 	bl	8002064 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fdfb 	bl	8002064 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fd8b 	bl	8001f98 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd81 	bl	8001f98 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f002 fd20 	bl	8002f48 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f002 fd1b 	bl	8002f48 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	46c6      	mov	lr, r8
 8000680:	0243      	lsls	r3, r0, #9
 8000682:	0a5b      	lsrs	r3, r3, #9
 8000684:	024e      	lsls	r6, r1, #9
 8000686:	0045      	lsls	r5, r0, #1
 8000688:	004f      	lsls	r7, r1, #1
 800068a:	00da      	lsls	r2, r3, #3
 800068c:	0fc4      	lsrs	r4, r0, #31
 800068e:	469c      	mov	ip, r3
 8000690:	0a70      	lsrs	r0, r6, #9
 8000692:	4690      	mov	r8, r2
 8000694:	b500      	push	{lr}
 8000696:	0e2d      	lsrs	r5, r5, #24
 8000698:	0e3f      	lsrs	r7, r7, #24
 800069a:	0fc9      	lsrs	r1, r1, #31
 800069c:	09b6      	lsrs	r6, r6, #6
 800069e:	428c      	cmp	r4, r1
 80006a0:	d04b      	beq.n	800073a <__aeabi_fadd+0xbe>
 80006a2:	1bea      	subs	r2, r5, r7
 80006a4:	2a00      	cmp	r2, #0
 80006a6:	dd36      	ble.n	8000716 <__aeabi_fadd+0x9a>
 80006a8:	2f00      	cmp	r7, #0
 80006aa:	d061      	beq.n	8000770 <__aeabi_fadd+0xf4>
 80006ac:	2dff      	cmp	r5, #255	; 0xff
 80006ae:	d100      	bne.n	80006b2 <__aeabi_fadd+0x36>
 80006b0:	e0ad      	b.n	800080e <__aeabi_fadd+0x192>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	04db      	lsls	r3, r3, #19
 80006b6:	431e      	orrs	r6, r3
 80006b8:	2a1b      	cmp	r2, #27
 80006ba:	dc00      	bgt.n	80006be <__aeabi_fadd+0x42>
 80006bc:	e0d3      	b.n	8000866 <__aeabi_fadd+0x1ea>
 80006be:	2001      	movs	r0, #1
 80006c0:	4643      	mov	r3, r8
 80006c2:	1a18      	subs	r0, r3, r0
 80006c4:	0143      	lsls	r3, r0, #5
 80006c6:	d400      	bmi.n	80006ca <__aeabi_fadd+0x4e>
 80006c8:	e08c      	b.n	80007e4 <__aeabi_fadd+0x168>
 80006ca:	0180      	lsls	r0, r0, #6
 80006cc:	0987      	lsrs	r7, r0, #6
 80006ce:	0038      	movs	r0, r7
 80006d0:	f002 fc1c 	bl	8002f0c <__clzsi2>
 80006d4:	3805      	subs	r0, #5
 80006d6:	4087      	lsls	r7, r0
 80006d8:	4285      	cmp	r5, r0
 80006da:	dc00      	bgt.n	80006de <__aeabi_fadd+0x62>
 80006dc:	e0b6      	b.n	800084c <__aeabi_fadd+0x1d0>
 80006de:	1a2d      	subs	r5, r5, r0
 80006e0:	48b3      	ldr	r0, [pc, #716]	; (80009b0 <__aeabi_fadd+0x334>)
 80006e2:	4038      	ands	r0, r7
 80006e4:	0743      	lsls	r3, r0, #29
 80006e6:	d004      	beq.n	80006f2 <__aeabi_fadd+0x76>
 80006e8:	230f      	movs	r3, #15
 80006ea:	4003      	ands	r3, r0
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d000      	beq.n	80006f2 <__aeabi_fadd+0x76>
 80006f0:	3004      	adds	r0, #4
 80006f2:	0143      	lsls	r3, r0, #5
 80006f4:	d400      	bmi.n	80006f8 <__aeabi_fadd+0x7c>
 80006f6:	e078      	b.n	80007ea <__aeabi_fadd+0x16e>
 80006f8:	1c6a      	adds	r2, r5, #1
 80006fa:	2dfe      	cmp	r5, #254	; 0xfe
 80006fc:	d065      	beq.n	80007ca <__aeabi_fadd+0x14e>
 80006fe:	0180      	lsls	r0, r0, #6
 8000700:	0a43      	lsrs	r3, r0, #9
 8000702:	469c      	mov	ip, r3
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	4663      	mov	r3, ip
 8000708:	05d0      	lsls	r0, r2, #23
 800070a:	4318      	orrs	r0, r3
 800070c:	07e4      	lsls	r4, r4, #31
 800070e:	4320      	orrs	r0, r4
 8000710:	bc80      	pop	{r7}
 8000712:	46b8      	mov	r8, r7
 8000714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000716:	2a00      	cmp	r2, #0
 8000718:	d035      	beq.n	8000786 <__aeabi_fadd+0x10a>
 800071a:	1b7a      	subs	r2, r7, r5
 800071c:	2d00      	cmp	r5, #0
 800071e:	d000      	beq.n	8000722 <__aeabi_fadd+0xa6>
 8000720:	e0af      	b.n	8000882 <__aeabi_fadd+0x206>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d100      	bne.n	800072a <__aeabi_fadd+0xae>
 8000728:	e0a7      	b.n	800087a <__aeabi_fadd+0x1fe>
 800072a:	1e53      	subs	r3, r2, #1
 800072c:	2a01      	cmp	r2, #1
 800072e:	d100      	bne.n	8000732 <__aeabi_fadd+0xb6>
 8000730:	e12f      	b.n	8000992 <__aeabi_fadd+0x316>
 8000732:	2aff      	cmp	r2, #255	; 0xff
 8000734:	d069      	beq.n	800080a <__aeabi_fadd+0x18e>
 8000736:	001a      	movs	r2, r3
 8000738:	e0aa      	b.n	8000890 <__aeabi_fadd+0x214>
 800073a:	1be9      	subs	r1, r5, r7
 800073c:	2900      	cmp	r1, #0
 800073e:	dd70      	ble.n	8000822 <__aeabi_fadd+0x1a6>
 8000740:	2f00      	cmp	r7, #0
 8000742:	d037      	beq.n	80007b4 <__aeabi_fadd+0x138>
 8000744:	2dff      	cmp	r5, #255	; 0xff
 8000746:	d062      	beq.n	800080e <__aeabi_fadd+0x192>
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431e      	orrs	r6, r3
 800074e:	291b      	cmp	r1, #27
 8000750:	dc00      	bgt.n	8000754 <__aeabi_fadd+0xd8>
 8000752:	e0b0      	b.n	80008b6 <__aeabi_fadd+0x23a>
 8000754:	2001      	movs	r0, #1
 8000756:	4440      	add	r0, r8
 8000758:	0143      	lsls	r3, r0, #5
 800075a:	d543      	bpl.n	80007e4 <__aeabi_fadd+0x168>
 800075c:	3501      	adds	r5, #1
 800075e:	2dff      	cmp	r5, #255	; 0xff
 8000760:	d033      	beq.n	80007ca <__aeabi_fadd+0x14e>
 8000762:	2301      	movs	r3, #1
 8000764:	4a93      	ldr	r2, [pc, #588]	; (80009b4 <__aeabi_fadd+0x338>)
 8000766:	4003      	ands	r3, r0
 8000768:	0840      	lsrs	r0, r0, #1
 800076a:	4010      	ands	r0, r2
 800076c:	4318      	orrs	r0, r3
 800076e:	e7b9      	b.n	80006e4 <__aeabi_fadd+0x68>
 8000770:	2e00      	cmp	r6, #0
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0xfa>
 8000774:	e083      	b.n	800087e <__aeabi_fadd+0x202>
 8000776:	1e51      	subs	r1, r2, #1
 8000778:	2a01      	cmp	r2, #1
 800077a:	d100      	bne.n	800077e <__aeabi_fadd+0x102>
 800077c:	e0d8      	b.n	8000930 <__aeabi_fadd+0x2b4>
 800077e:	2aff      	cmp	r2, #255	; 0xff
 8000780:	d045      	beq.n	800080e <__aeabi_fadd+0x192>
 8000782:	000a      	movs	r2, r1
 8000784:	e798      	b.n	80006b8 <__aeabi_fadd+0x3c>
 8000786:	27fe      	movs	r7, #254	; 0xfe
 8000788:	1c6a      	adds	r2, r5, #1
 800078a:	4217      	tst	r7, r2
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x114>
 800078e:	e086      	b.n	800089e <__aeabi_fadd+0x222>
 8000790:	2d00      	cmp	r5, #0
 8000792:	d000      	beq.n	8000796 <__aeabi_fadd+0x11a>
 8000794:	e0b7      	b.n	8000906 <__aeabi_fadd+0x28a>
 8000796:	4643      	mov	r3, r8
 8000798:	2b00      	cmp	r3, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x122>
 800079c:	e0f3      	b.n	8000986 <__aeabi_fadd+0x30a>
 800079e:	2200      	movs	r2, #0
 80007a0:	2e00      	cmp	r6, #0
 80007a2:	d0b0      	beq.n	8000706 <__aeabi_fadd+0x8a>
 80007a4:	1b98      	subs	r0, r3, r6
 80007a6:	0143      	lsls	r3, r0, #5
 80007a8:	d400      	bmi.n	80007ac <__aeabi_fadd+0x130>
 80007aa:	e0fa      	b.n	80009a2 <__aeabi_fadd+0x326>
 80007ac:	4643      	mov	r3, r8
 80007ae:	000c      	movs	r4, r1
 80007b0:	1af0      	subs	r0, r6, r3
 80007b2:	e797      	b.n	80006e4 <__aeabi_fadd+0x68>
 80007b4:	2e00      	cmp	r6, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x13e>
 80007b8:	e0c8      	b.n	800094c <__aeabi_fadd+0x2d0>
 80007ba:	1e4a      	subs	r2, r1, #1
 80007bc:	2901      	cmp	r1, #1
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0x146>
 80007c0:	e0ae      	b.n	8000920 <__aeabi_fadd+0x2a4>
 80007c2:	29ff      	cmp	r1, #255	; 0xff
 80007c4:	d023      	beq.n	800080e <__aeabi_fadd+0x192>
 80007c6:	0011      	movs	r1, r2
 80007c8:	e7c1      	b.n	800074e <__aeabi_fadd+0xd2>
 80007ca:	2300      	movs	r3, #0
 80007cc:	22ff      	movs	r2, #255	; 0xff
 80007ce:	469c      	mov	ip, r3
 80007d0:	e799      	b.n	8000706 <__aeabi_fadd+0x8a>
 80007d2:	21fe      	movs	r1, #254	; 0xfe
 80007d4:	1c6a      	adds	r2, r5, #1
 80007d6:	4211      	tst	r1, r2
 80007d8:	d077      	beq.n	80008ca <__aeabi_fadd+0x24e>
 80007da:	2aff      	cmp	r2, #255	; 0xff
 80007dc:	d0f5      	beq.n	80007ca <__aeabi_fadd+0x14e>
 80007de:	0015      	movs	r5, r2
 80007e0:	4446      	add	r6, r8
 80007e2:	0870      	lsrs	r0, r6, #1
 80007e4:	0743      	lsls	r3, r0, #29
 80007e6:	d000      	beq.n	80007ea <__aeabi_fadd+0x16e>
 80007e8:	e77e      	b.n	80006e8 <__aeabi_fadd+0x6c>
 80007ea:	08c3      	lsrs	r3, r0, #3
 80007ec:	2dff      	cmp	r5, #255	; 0xff
 80007ee:	d00e      	beq.n	800080e <__aeabi_fadd+0x192>
 80007f0:	025b      	lsls	r3, r3, #9
 80007f2:	0a5b      	lsrs	r3, r3, #9
 80007f4:	469c      	mov	ip, r3
 80007f6:	b2ea      	uxtb	r2, r5
 80007f8:	e785      	b.n	8000706 <__aeabi_fadd+0x8a>
 80007fa:	2e00      	cmp	r6, #0
 80007fc:	d007      	beq.n	800080e <__aeabi_fadd+0x192>
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	03d2      	lsls	r2, r2, #15
 8000802:	4213      	tst	r3, r2
 8000804:	d003      	beq.n	800080e <__aeabi_fadd+0x192>
 8000806:	4210      	tst	r0, r2
 8000808:	d101      	bne.n	800080e <__aeabi_fadd+0x192>
 800080a:	000c      	movs	r4, r1
 800080c:	0003      	movs	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0db      	beq.n	80007ca <__aeabi_fadd+0x14e>
 8000812:	2080      	movs	r0, #128	; 0x80
 8000814:	03c0      	lsls	r0, r0, #15
 8000816:	4318      	orrs	r0, r3
 8000818:	0240      	lsls	r0, r0, #9
 800081a:	0a43      	lsrs	r3, r0, #9
 800081c:	469c      	mov	ip, r3
 800081e:	22ff      	movs	r2, #255	; 0xff
 8000820:	e771      	b.n	8000706 <__aeabi_fadd+0x8a>
 8000822:	2900      	cmp	r1, #0
 8000824:	d0d5      	beq.n	80007d2 <__aeabi_fadd+0x156>
 8000826:	1b7a      	subs	r2, r7, r5
 8000828:	2d00      	cmp	r5, #0
 800082a:	d160      	bne.n	80008ee <__aeabi_fadd+0x272>
 800082c:	4643      	mov	r3, r8
 800082e:	2b00      	cmp	r3, #0
 8000830:	d024      	beq.n	800087c <__aeabi_fadd+0x200>
 8000832:	1e53      	subs	r3, r2, #1
 8000834:	2a01      	cmp	r2, #1
 8000836:	d073      	beq.n	8000920 <__aeabi_fadd+0x2a4>
 8000838:	2aff      	cmp	r2, #255	; 0xff
 800083a:	d0e7      	beq.n	800080c <__aeabi_fadd+0x190>
 800083c:	001a      	movs	r2, r3
 800083e:	2a1b      	cmp	r2, #27
 8000840:	dc00      	bgt.n	8000844 <__aeabi_fadd+0x1c8>
 8000842:	e085      	b.n	8000950 <__aeabi_fadd+0x2d4>
 8000844:	2001      	movs	r0, #1
 8000846:	003d      	movs	r5, r7
 8000848:	1980      	adds	r0, r0, r6
 800084a:	e785      	b.n	8000758 <__aeabi_fadd+0xdc>
 800084c:	2320      	movs	r3, #32
 800084e:	003a      	movs	r2, r7
 8000850:	1b45      	subs	r5, r0, r5
 8000852:	0038      	movs	r0, r7
 8000854:	3501      	adds	r5, #1
 8000856:	40ea      	lsrs	r2, r5
 8000858:	1b5d      	subs	r5, r3, r5
 800085a:	40a8      	lsls	r0, r5
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	2500      	movs	r5, #0
 8000862:	4310      	orrs	r0, r2
 8000864:	e73e      	b.n	80006e4 <__aeabi_fadd+0x68>
 8000866:	2320      	movs	r3, #32
 8000868:	0030      	movs	r0, r6
 800086a:	1a9b      	subs	r3, r3, r2
 800086c:	0031      	movs	r1, r6
 800086e:	4098      	lsls	r0, r3
 8000870:	40d1      	lsrs	r1, r2
 8000872:	1e43      	subs	r3, r0, #1
 8000874:	4198      	sbcs	r0, r3
 8000876:	4308      	orrs	r0, r1
 8000878:	e722      	b.n	80006c0 <__aeabi_fadd+0x44>
 800087a:	000c      	movs	r4, r1
 800087c:	0003      	movs	r3, r0
 800087e:	0015      	movs	r5, r2
 8000880:	e7b4      	b.n	80007ec <__aeabi_fadd+0x170>
 8000882:	2fff      	cmp	r7, #255	; 0xff
 8000884:	d0c1      	beq.n	800080a <__aeabi_fadd+0x18e>
 8000886:	2380      	movs	r3, #128	; 0x80
 8000888:	4640      	mov	r0, r8
 800088a:	04db      	lsls	r3, r3, #19
 800088c:	4318      	orrs	r0, r3
 800088e:	4680      	mov	r8, r0
 8000890:	2a1b      	cmp	r2, #27
 8000892:	dd51      	ble.n	8000938 <__aeabi_fadd+0x2bc>
 8000894:	2001      	movs	r0, #1
 8000896:	000c      	movs	r4, r1
 8000898:	003d      	movs	r5, r7
 800089a:	1a30      	subs	r0, r6, r0
 800089c:	e712      	b.n	80006c4 <__aeabi_fadd+0x48>
 800089e:	4643      	mov	r3, r8
 80008a0:	1b9f      	subs	r7, r3, r6
 80008a2:	017b      	lsls	r3, r7, #5
 80008a4:	d42b      	bmi.n	80008fe <__aeabi_fadd+0x282>
 80008a6:	2f00      	cmp	r7, #0
 80008a8:	d000      	beq.n	80008ac <__aeabi_fadd+0x230>
 80008aa:	e710      	b.n	80006ce <__aeabi_fadd+0x52>
 80008ac:	2300      	movs	r3, #0
 80008ae:	2400      	movs	r4, #0
 80008b0:	2200      	movs	r2, #0
 80008b2:	469c      	mov	ip, r3
 80008b4:	e727      	b.n	8000706 <__aeabi_fadd+0x8a>
 80008b6:	2320      	movs	r3, #32
 80008b8:	0032      	movs	r2, r6
 80008ba:	0030      	movs	r0, r6
 80008bc:	40ca      	lsrs	r2, r1
 80008be:	1a59      	subs	r1, r3, r1
 80008c0:	4088      	lsls	r0, r1
 80008c2:	1e43      	subs	r3, r0, #1
 80008c4:	4198      	sbcs	r0, r3
 80008c6:	4310      	orrs	r0, r2
 80008c8:	e745      	b.n	8000756 <__aeabi_fadd+0xda>
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	d14a      	bne.n	8000964 <__aeabi_fadd+0x2e8>
 80008ce:	4643      	mov	r3, r8
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d063      	beq.n	800099c <__aeabi_fadd+0x320>
 80008d4:	2200      	movs	r2, #0
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x260>
 80008da:	e714      	b.n	8000706 <__aeabi_fadd+0x8a>
 80008dc:	0030      	movs	r0, r6
 80008de:	4440      	add	r0, r8
 80008e0:	0143      	lsls	r3, r0, #5
 80008e2:	d400      	bmi.n	80008e6 <__aeabi_fadd+0x26a>
 80008e4:	e77e      	b.n	80007e4 <__aeabi_fadd+0x168>
 80008e6:	4b32      	ldr	r3, [pc, #200]	; (80009b0 <__aeabi_fadd+0x334>)
 80008e8:	3501      	adds	r5, #1
 80008ea:	4018      	ands	r0, r3
 80008ec:	e77a      	b.n	80007e4 <__aeabi_fadd+0x168>
 80008ee:	2fff      	cmp	r7, #255	; 0xff
 80008f0:	d08c      	beq.n	800080c <__aeabi_fadd+0x190>
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	4641      	mov	r1, r8
 80008f6:	04db      	lsls	r3, r3, #19
 80008f8:	4319      	orrs	r1, r3
 80008fa:	4688      	mov	r8, r1
 80008fc:	e79f      	b.n	800083e <__aeabi_fadd+0x1c2>
 80008fe:	4643      	mov	r3, r8
 8000900:	000c      	movs	r4, r1
 8000902:	1af7      	subs	r7, r6, r3
 8000904:	e6e3      	b.n	80006ce <__aeabi_fadd+0x52>
 8000906:	4642      	mov	r2, r8
 8000908:	2a00      	cmp	r2, #0
 800090a:	d000      	beq.n	800090e <__aeabi_fadd+0x292>
 800090c:	e775      	b.n	80007fa <__aeabi_fadd+0x17e>
 800090e:	2e00      	cmp	r6, #0
 8000910:	d000      	beq.n	8000914 <__aeabi_fadd+0x298>
 8000912:	e77a      	b.n	800080a <__aeabi_fadd+0x18e>
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	03db      	lsls	r3, r3, #15
 8000918:	2400      	movs	r4, #0
 800091a:	469c      	mov	ip, r3
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	e6f2      	b.n	8000706 <__aeabi_fadd+0x8a>
 8000920:	0030      	movs	r0, r6
 8000922:	4440      	add	r0, r8
 8000924:	2501      	movs	r5, #1
 8000926:	0143      	lsls	r3, r0, #5
 8000928:	d400      	bmi.n	800092c <__aeabi_fadd+0x2b0>
 800092a:	e75b      	b.n	80007e4 <__aeabi_fadd+0x168>
 800092c:	2502      	movs	r5, #2
 800092e:	e718      	b.n	8000762 <__aeabi_fadd+0xe6>
 8000930:	4643      	mov	r3, r8
 8000932:	2501      	movs	r5, #1
 8000934:	1b98      	subs	r0, r3, r6
 8000936:	e6c5      	b.n	80006c4 <__aeabi_fadd+0x48>
 8000938:	2320      	movs	r3, #32
 800093a:	4644      	mov	r4, r8
 800093c:	4640      	mov	r0, r8
 800093e:	40d4      	lsrs	r4, r2
 8000940:	1a9a      	subs	r2, r3, r2
 8000942:	4090      	lsls	r0, r2
 8000944:	1e43      	subs	r3, r0, #1
 8000946:	4198      	sbcs	r0, r3
 8000948:	4320      	orrs	r0, r4
 800094a:	e7a4      	b.n	8000896 <__aeabi_fadd+0x21a>
 800094c:	000d      	movs	r5, r1
 800094e:	e74d      	b.n	80007ec <__aeabi_fadd+0x170>
 8000950:	2320      	movs	r3, #32
 8000952:	4641      	mov	r1, r8
 8000954:	4640      	mov	r0, r8
 8000956:	40d1      	lsrs	r1, r2
 8000958:	1a9a      	subs	r2, r3, r2
 800095a:	4090      	lsls	r0, r2
 800095c:	1e43      	subs	r3, r0, #1
 800095e:	4198      	sbcs	r0, r3
 8000960:	4308      	orrs	r0, r1
 8000962:	e770      	b.n	8000846 <__aeabi_fadd+0x1ca>
 8000964:	4642      	mov	r2, r8
 8000966:	2a00      	cmp	r2, #0
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x2f0>
 800096a:	e74f      	b.n	800080c <__aeabi_fadd+0x190>
 800096c:	2e00      	cmp	r6, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fadd+0x2f6>
 8000970:	e74d      	b.n	800080e <__aeabi_fadd+0x192>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	4213      	tst	r3, r2
 8000978:	d100      	bne.n	800097c <__aeabi_fadd+0x300>
 800097a:	e748      	b.n	800080e <__aeabi_fadd+0x192>
 800097c:	4210      	tst	r0, r2
 800097e:	d000      	beq.n	8000982 <__aeabi_fadd+0x306>
 8000980:	e745      	b.n	800080e <__aeabi_fadd+0x192>
 8000982:	0003      	movs	r3, r0
 8000984:	e743      	b.n	800080e <__aeabi_fadd+0x192>
 8000986:	2e00      	cmp	r6, #0
 8000988:	d090      	beq.n	80008ac <__aeabi_fadd+0x230>
 800098a:	000c      	movs	r4, r1
 800098c:	4684      	mov	ip, r0
 800098e:	2200      	movs	r2, #0
 8000990:	e6b9      	b.n	8000706 <__aeabi_fadd+0x8a>
 8000992:	4643      	mov	r3, r8
 8000994:	000c      	movs	r4, r1
 8000996:	1af0      	subs	r0, r6, r3
 8000998:	3501      	adds	r5, #1
 800099a:	e693      	b.n	80006c4 <__aeabi_fadd+0x48>
 800099c:	4684      	mov	ip, r0
 800099e:	2200      	movs	r2, #0
 80009a0:	e6b1      	b.n	8000706 <__aeabi_fadd+0x8a>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d000      	beq.n	80009a8 <__aeabi_fadd+0x32c>
 80009a6:	e71d      	b.n	80007e4 <__aeabi_fadd+0x168>
 80009a8:	2300      	movs	r3, #0
 80009aa:	2400      	movs	r4, #0
 80009ac:	469c      	mov	ip, r3
 80009ae:	e6aa      	b.n	8000706 <__aeabi_fadd+0x8a>
 80009b0:	fbffffff 	.word	0xfbffffff
 80009b4:	7dffffff 	.word	0x7dffffff

080009b8 <__aeabi_fdiv>:
 80009b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ba:	464f      	mov	r7, r9
 80009bc:	4646      	mov	r6, r8
 80009be:	46d6      	mov	lr, sl
 80009c0:	0245      	lsls	r5, r0, #9
 80009c2:	b5c0      	push	{r6, r7, lr}
 80009c4:	0047      	lsls	r7, r0, #1
 80009c6:	1c0c      	adds	r4, r1, #0
 80009c8:	0a6d      	lsrs	r5, r5, #9
 80009ca:	0e3f      	lsrs	r7, r7, #24
 80009cc:	0fc6      	lsrs	r6, r0, #31
 80009ce:	2f00      	cmp	r7, #0
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fdiv+0x1c>
 80009d2:	e070      	b.n	8000ab6 <__aeabi_fdiv+0xfe>
 80009d4:	2fff      	cmp	r7, #255	; 0xff
 80009d6:	d100      	bne.n	80009da <__aeabi_fdiv+0x22>
 80009d8:	e075      	b.n	8000ac6 <__aeabi_fdiv+0x10e>
 80009da:	00eb      	lsls	r3, r5, #3
 80009dc:	2580      	movs	r5, #128	; 0x80
 80009de:	04ed      	lsls	r5, r5, #19
 80009e0:	431d      	orrs	r5, r3
 80009e2:	2300      	movs	r3, #0
 80009e4:	4699      	mov	r9, r3
 80009e6:	469a      	mov	sl, r3
 80009e8:	3f7f      	subs	r7, #127	; 0x7f
 80009ea:	0260      	lsls	r0, r4, #9
 80009ec:	0a43      	lsrs	r3, r0, #9
 80009ee:	4698      	mov	r8, r3
 80009f0:	0063      	lsls	r3, r4, #1
 80009f2:	0e1b      	lsrs	r3, r3, #24
 80009f4:	0fe4      	lsrs	r4, r4, #31
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d04e      	beq.n	8000a98 <__aeabi_fdiv+0xe0>
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d046      	beq.n	8000a8c <__aeabi_fdiv+0xd4>
 80009fe:	4642      	mov	r2, r8
 8000a00:	00d0      	lsls	r0, r2, #3
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	04d2      	lsls	r2, r2, #19
 8000a06:	4302      	orrs	r2, r0
 8000a08:	4690      	mov	r8, r2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	3b7f      	subs	r3, #127	; 0x7f
 8000a0e:	0031      	movs	r1, r6
 8000a10:	1aff      	subs	r7, r7, r3
 8000a12:	464b      	mov	r3, r9
 8000a14:	4061      	eors	r1, r4
 8000a16:	b2c9      	uxtb	r1, r1
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d900      	bls.n	8000a20 <__aeabi_fdiv+0x68>
 8000a1e:	e0b5      	b.n	8000b8c <__aeabi_fdiv+0x1d4>
 8000a20:	486e      	ldr	r0, [pc, #440]	; (8000bdc <__aeabi_fdiv+0x224>)
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	58c3      	ldr	r3, [r0, r3]
 8000a26:	469f      	mov	pc, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	4698      	mov	r8, r3
 8000a2c:	0026      	movs	r6, r4
 8000a2e:	4645      	mov	r5, r8
 8000a30:	4692      	mov	sl, r2
 8000a32:	4653      	mov	r3, sl
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d100      	bne.n	8000a3a <__aeabi_fdiv+0x82>
 8000a38:	e089      	b.n	8000b4e <__aeabi_fdiv+0x196>
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fdiv+0x88>
 8000a3e:	e09e      	b.n	8000b7e <__aeabi_fdiv+0x1c6>
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d018      	beq.n	8000a76 <__aeabi_fdiv+0xbe>
 8000a44:	003b      	movs	r3, r7
 8000a46:	337f      	adds	r3, #127	; 0x7f
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	dd69      	ble.n	8000b20 <__aeabi_fdiv+0x168>
 8000a4c:	076a      	lsls	r2, r5, #29
 8000a4e:	d004      	beq.n	8000a5a <__aeabi_fdiv+0xa2>
 8000a50:	220f      	movs	r2, #15
 8000a52:	402a      	ands	r2, r5
 8000a54:	2a04      	cmp	r2, #4
 8000a56:	d000      	beq.n	8000a5a <__aeabi_fdiv+0xa2>
 8000a58:	3504      	adds	r5, #4
 8000a5a:	012a      	lsls	r2, r5, #4
 8000a5c:	d503      	bpl.n	8000a66 <__aeabi_fdiv+0xae>
 8000a5e:	4b60      	ldr	r3, [pc, #384]	; (8000be0 <__aeabi_fdiv+0x228>)
 8000a60:	401d      	ands	r5, r3
 8000a62:	003b      	movs	r3, r7
 8000a64:	3380      	adds	r3, #128	; 0x80
 8000a66:	2bfe      	cmp	r3, #254	; 0xfe
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_fdiv+0xb4>
 8000a6a:	e070      	b.n	8000b4e <__aeabi_fdiv+0x196>
 8000a6c:	01ad      	lsls	r5, r5, #6
 8000a6e:	0a6d      	lsrs	r5, r5, #9
 8000a70:	b2d8      	uxtb	r0, r3
 8000a72:	e002      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000a74:	000e      	movs	r6, r1
 8000a76:	2000      	movs	r0, #0
 8000a78:	2500      	movs	r5, #0
 8000a7a:	05c0      	lsls	r0, r0, #23
 8000a7c:	4328      	orrs	r0, r5
 8000a7e:	07f6      	lsls	r6, r6, #31
 8000a80:	4330      	orrs	r0, r6
 8000a82:	bce0      	pop	{r5, r6, r7}
 8000a84:	46ba      	mov	sl, r7
 8000a86:	46b1      	mov	r9, r6
 8000a88:	46a8      	mov	r8, r5
 8000a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a8c:	4643      	mov	r3, r8
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d13f      	bne.n	8000b12 <__aeabi_fdiv+0x15a>
 8000a92:	2202      	movs	r2, #2
 8000a94:	3fff      	subs	r7, #255	; 0xff
 8000a96:	e003      	b.n	8000aa0 <__aeabi_fdiv+0xe8>
 8000a98:	4643      	mov	r3, r8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d12d      	bne.n	8000afa <__aeabi_fdiv+0x142>
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	0031      	movs	r1, r6
 8000aa2:	464b      	mov	r3, r9
 8000aa4:	4061      	eors	r1, r4
 8000aa6:	b2c9      	uxtb	r1, r1
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	2b0f      	cmp	r3, #15
 8000aac:	d834      	bhi.n	8000b18 <__aeabi_fdiv+0x160>
 8000aae:	484d      	ldr	r0, [pc, #308]	; (8000be4 <__aeabi_fdiv+0x22c>)
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	58c3      	ldr	r3, [r0, r3]
 8000ab4:	469f      	mov	pc, r3
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d113      	bne.n	8000ae2 <__aeabi_fdiv+0x12a>
 8000aba:	2304      	movs	r3, #4
 8000abc:	4699      	mov	r9, r3
 8000abe:	3b03      	subs	r3, #3
 8000ac0:	2700      	movs	r7, #0
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	e791      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d105      	bne.n	8000ad6 <__aeabi_fdiv+0x11e>
 8000aca:	2308      	movs	r3, #8
 8000acc:	4699      	mov	r9, r3
 8000ace:	3b06      	subs	r3, #6
 8000ad0:	27ff      	movs	r7, #255	; 0xff
 8000ad2:	469a      	mov	sl, r3
 8000ad4:	e789      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	4699      	mov	r9, r3
 8000ada:	3b09      	subs	r3, #9
 8000adc:	27ff      	movs	r7, #255	; 0xff
 8000ade:	469a      	mov	sl, r3
 8000ae0:	e783      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000ae2:	0028      	movs	r0, r5
 8000ae4:	f002 fa12 	bl	8002f0c <__clzsi2>
 8000ae8:	2776      	movs	r7, #118	; 0x76
 8000aea:	1f43      	subs	r3, r0, #5
 8000aec:	409d      	lsls	r5, r3
 8000aee:	2300      	movs	r3, #0
 8000af0:	427f      	negs	r7, r7
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	1a3f      	subs	r7, r7, r0
 8000af8:	e777      	b.n	80009ea <__aeabi_fdiv+0x32>
 8000afa:	4640      	mov	r0, r8
 8000afc:	f002 fa06 	bl	8002f0c <__clzsi2>
 8000b00:	4642      	mov	r2, r8
 8000b02:	1f43      	subs	r3, r0, #5
 8000b04:	409a      	lsls	r2, r3
 8000b06:	2376      	movs	r3, #118	; 0x76
 8000b08:	425b      	negs	r3, r3
 8000b0a:	4690      	mov	r8, r2
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	e77d      	b.n	8000a0e <__aeabi_fdiv+0x56>
 8000b12:	23ff      	movs	r3, #255	; 0xff
 8000b14:	2203      	movs	r2, #3
 8000b16:	e77a      	b.n	8000a0e <__aeabi_fdiv+0x56>
 8000b18:	000e      	movs	r6, r1
 8000b1a:	20ff      	movs	r0, #255	; 0xff
 8000b1c:	2500      	movs	r5, #0
 8000b1e:	e7ac      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b20:	2001      	movs	r0, #1
 8000b22:	1ac0      	subs	r0, r0, r3
 8000b24:	281b      	cmp	r0, #27
 8000b26:	dca6      	bgt.n	8000a76 <__aeabi_fdiv+0xbe>
 8000b28:	379e      	adds	r7, #158	; 0x9e
 8000b2a:	002a      	movs	r2, r5
 8000b2c:	40bd      	lsls	r5, r7
 8000b2e:	40c2      	lsrs	r2, r0
 8000b30:	1e6b      	subs	r3, r5, #1
 8000b32:	419d      	sbcs	r5, r3
 8000b34:	4315      	orrs	r5, r2
 8000b36:	076b      	lsls	r3, r5, #29
 8000b38:	d004      	beq.n	8000b44 <__aeabi_fdiv+0x18c>
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	402b      	ands	r3, r5
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fdiv+0x18c>
 8000b42:	3504      	adds	r5, #4
 8000b44:	016b      	lsls	r3, r5, #5
 8000b46:	d544      	bpl.n	8000bd2 <__aeabi_fdiv+0x21a>
 8000b48:	2001      	movs	r0, #1
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	e795      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b4e:	20ff      	movs	r0, #255	; 0xff
 8000b50:	2500      	movs	r5, #0
 8000b52:	e792      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b54:	2580      	movs	r5, #128	; 0x80
 8000b56:	2600      	movs	r6, #0
 8000b58:	20ff      	movs	r0, #255	; 0xff
 8000b5a:	03ed      	lsls	r5, r5, #15
 8000b5c:	e78d      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b5e:	2300      	movs	r3, #0
 8000b60:	4698      	mov	r8, r3
 8000b62:	2080      	movs	r0, #128	; 0x80
 8000b64:	03c0      	lsls	r0, r0, #15
 8000b66:	4205      	tst	r5, r0
 8000b68:	d009      	beq.n	8000b7e <__aeabi_fdiv+0x1c6>
 8000b6a:	4643      	mov	r3, r8
 8000b6c:	4203      	tst	r3, r0
 8000b6e:	d106      	bne.n	8000b7e <__aeabi_fdiv+0x1c6>
 8000b70:	4645      	mov	r5, r8
 8000b72:	4305      	orrs	r5, r0
 8000b74:	026d      	lsls	r5, r5, #9
 8000b76:	0026      	movs	r6, r4
 8000b78:	20ff      	movs	r0, #255	; 0xff
 8000b7a:	0a6d      	lsrs	r5, r5, #9
 8000b7c:	e77d      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b7e:	2080      	movs	r0, #128	; 0x80
 8000b80:	03c0      	lsls	r0, r0, #15
 8000b82:	4305      	orrs	r5, r0
 8000b84:	026d      	lsls	r5, r5, #9
 8000b86:	20ff      	movs	r0, #255	; 0xff
 8000b88:	0a6d      	lsrs	r5, r5, #9
 8000b8a:	e776      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000b8c:	4642      	mov	r2, r8
 8000b8e:	016b      	lsls	r3, r5, #5
 8000b90:	0150      	lsls	r0, r2, #5
 8000b92:	4283      	cmp	r3, r0
 8000b94:	d219      	bcs.n	8000bca <__aeabi_fdiv+0x212>
 8000b96:	221b      	movs	r2, #27
 8000b98:	2500      	movs	r5, #0
 8000b9a:	3f01      	subs	r7, #1
 8000b9c:	2601      	movs	r6, #1
 8000b9e:	001c      	movs	r4, r3
 8000ba0:	006d      	lsls	r5, r5, #1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2c00      	cmp	r4, #0
 8000ba6:	db01      	blt.n	8000bac <__aeabi_fdiv+0x1f4>
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d801      	bhi.n	8000bb0 <__aeabi_fdiv+0x1f8>
 8000bac:	1a1b      	subs	r3, r3, r0
 8000bae:	4335      	orrs	r5, r6
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	d1f3      	bne.n	8000b9e <__aeabi_fdiv+0x1e6>
 8000bb6:	1e5a      	subs	r2, r3, #1
 8000bb8:	4193      	sbcs	r3, r2
 8000bba:	431d      	orrs	r5, r3
 8000bbc:	003b      	movs	r3, r7
 8000bbe:	337f      	adds	r3, #127	; 0x7f
 8000bc0:	000e      	movs	r6, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	dd00      	ble.n	8000bc8 <__aeabi_fdiv+0x210>
 8000bc6:	e741      	b.n	8000a4c <__aeabi_fdiv+0x94>
 8000bc8:	e7aa      	b.n	8000b20 <__aeabi_fdiv+0x168>
 8000bca:	221a      	movs	r2, #26
 8000bcc:	2501      	movs	r5, #1
 8000bce:	1a1b      	subs	r3, r3, r0
 8000bd0:	e7e4      	b.n	8000b9c <__aeabi_fdiv+0x1e4>
 8000bd2:	01ad      	lsls	r5, r5, #6
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	0a6d      	lsrs	r5, r5, #9
 8000bd8:	e74f      	b.n	8000a7a <__aeabi_fdiv+0xc2>
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	08009030 	.word	0x08009030
 8000be0:	f7ffffff 	.word	0xf7ffffff
 8000be4:	08009070 	.word	0x08009070

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0244      	lsls	r4, r0, #9
 8000bf2:	0045      	lsls	r5, r0, #1
 8000bf4:	b5c0      	push	{r6, r7, lr}
 8000bf6:	0a64      	lsrs	r4, r4, #9
 8000bf8:	1c0f      	adds	r7, r1, #0
 8000bfa:	0e2d      	lsrs	r5, r5, #24
 8000bfc:	0fc6      	lsrs	r6, r0, #31
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x1c>
 8000c02:	e08d      	b.n	8000d20 <__aeabi_fmul+0x138>
 8000c04:	2dff      	cmp	r5, #255	; 0xff
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fmul+0x22>
 8000c08:	e092      	b.n	8000d30 <__aeabi_fmul+0x148>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2080      	movs	r0, #128	; 0x80
 8000c0e:	4699      	mov	r9, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	00e4      	lsls	r4, r4, #3
 8000c14:	04c0      	lsls	r0, r0, #19
 8000c16:	4304      	orrs	r4, r0
 8000c18:	3d7f      	subs	r5, #127	; 0x7f
 8000c1a:	0278      	lsls	r0, r7, #9
 8000c1c:	0a43      	lsrs	r3, r0, #9
 8000c1e:	4698      	mov	r8, r3
 8000c20:	007b      	lsls	r3, r7, #1
 8000c22:	0e1b      	lsrs	r3, r3, #24
 8000c24:	0fff      	lsrs	r7, r7, #31
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x44>
 8000c2a:	e070      	b.n	8000d0e <__aeabi_fmul+0x126>
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fmul+0x4a>
 8000c30:	e086      	b.n	8000d40 <__aeabi_fmul+0x158>
 8000c32:	4642      	mov	r2, r8
 8000c34:	00d0      	lsls	r0, r2, #3
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	3b7f      	subs	r3, #127	; 0x7f
 8000c3a:	18ed      	adds	r5, r5, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	04d2      	lsls	r2, r2, #19
 8000c40:	4302      	orrs	r2, r0
 8000c42:	4690      	mov	r8, r2
 8000c44:	469c      	mov	ip, r3
 8000c46:	0031      	movs	r1, r6
 8000c48:	464b      	mov	r3, r9
 8000c4a:	4079      	eors	r1, r7
 8000c4c:	1c68      	adds	r0, r5, #1
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d81c      	bhi.n	8000c8c <__aeabi_fmul+0xa4>
 8000c52:	4a76      	ldr	r2, [pc, #472]	; (8000e2c <__aeabi_fmul+0x244>)
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	58d3      	ldr	r3, [r2, r3]
 8000c58:	469f      	mov	pc, r3
 8000c5a:	0039      	movs	r1, r7
 8000c5c:	4644      	mov	r4, r8
 8000c5e:	46e2      	mov	sl, ip
 8000c60:	4653      	mov	r3, sl
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d00f      	beq.n	8000c86 <__aeabi_fmul+0x9e>
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fmul+0x84>
 8000c6a:	e0d7      	b.n	8000e1c <__aeabi_fmul+0x234>
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d137      	bne.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c70:	2000      	movs	r0, #0
 8000c72:	2400      	movs	r4, #0
 8000c74:	05c0      	lsls	r0, r0, #23
 8000c76:	4320      	orrs	r0, r4
 8000c78:	07c9      	lsls	r1, r1, #31
 8000c7a:	4308      	orrs	r0, r1
 8000c7c:	bce0      	pop	{r5, r6, r7}
 8000c7e:	46ba      	mov	sl, r7
 8000c80:	46b1      	mov	r9, r6
 8000c82:	46a8      	mov	r8, r5
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	20ff      	movs	r0, #255	; 0xff
 8000c88:	2400      	movs	r4, #0
 8000c8a:	e7f3      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000c8c:	0c26      	lsrs	r6, r4, #16
 8000c8e:	0424      	lsls	r4, r4, #16
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	4644      	mov	r4, r8
 8000c94:	0424      	lsls	r4, r4, #16
 8000c96:	0c24      	lsrs	r4, r4, #16
 8000c98:	4643      	mov	r3, r8
 8000c9a:	0027      	movs	r7, r4
 8000c9c:	0c1b      	lsrs	r3, r3, #16
 8000c9e:	4357      	muls	r7, r2
 8000ca0:	4374      	muls	r4, r6
 8000ca2:	435a      	muls	r2, r3
 8000ca4:	435e      	muls	r6, r3
 8000ca6:	1912      	adds	r2, r2, r4
 8000ca8:	0c3b      	lsrs	r3, r7, #16
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	429c      	cmp	r4, r3
 8000cae:	d903      	bls.n	8000cb8 <__aeabi_fmul+0xd0>
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0252      	lsls	r2, r2, #9
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	4466      	add	r6, ip
 8000cb8:	043f      	lsls	r7, r7, #16
 8000cba:	041a      	lsls	r2, r3, #16
 8000cbc:	0c3f      	lsrs	r7, r7, #16
 8000cbe:	19d2      	adds	r2, r2, r7
 8000cc0:	0194      	lsls	r4, r2, #6
 8000cc2:	1e67      	subs	r7, r4, #1
 8000cc4:	41bc      	sbcs	r4, r7
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	0e92      	lsrs	r2, r2, #26
 8000cca:	199b      	adds	r3, r3, r6
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	019b      	lsls	r3, r3, #6
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fmul+0xf0>
 8000cd6:	e09b      	b.n	8000e10 <__aeabi_fmul+0x228>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	0862      	lsrs	r2, r4, #1
 8000cdc:	401c      	ands	r4, r3
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	327f      	adds	r2, #127	; 0x7f
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	dd64      	ble.n	8000db2 <__aeabi_fmul+0x1ca>
 8000ce8:	0763      	lsls	r3, r4, #29
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cec:	230f      	movs	r3, #15
 8000cee:	4023      	ands	r3, r4
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cf4:	3404      	adds	r4, #4
 8000cf6:	0123      	lsls	r3, r4, #4
 8000cf8:	d503      	bpl.n	8000d02 <__aeabi_fmul+0x11a>
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <__aeabi_fmul+0x248>)
 8000cfe:	3280      	adds	r2, #128	; 0x80
 8000d00:	401c      	ands	r4, r3
 8000d02:	2afe      	cmp	r2, #254	; 0xfe
 8000d04:	dcbf      	bgt.n	8000c86 <__aeabi_fmul+0x9e>
 8000d06:	01a4      	lsls	r4, r4, #6
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	b2d0      	uxtb	r0, r2
 8000d0c:	e7b2      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13d      	bne.n	8000d90 <__aeabi_fmul+0x1a8>
 8000d14:	464a      	mov	r2, r9
 8000d16:	3301      	adds	r3, #1
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	e792      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d20:	2c00      	cmp	r4, #0
 8000d22:	d129      	bne.n	8000d78 <__aeabi_fmul+0x190>
 8000d24:	2304      	movs	r3, #4
 8000d26:	4699      	mov	r9, r3
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	e774      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d11b      	bne.n	8000d6c <__aeabi_fmul+0x184>
 8000d34:	2308      	movs	r3, #8
 8000d36:	4699      	mov	r9, r3
 8000d38:	3b06      	subs	r3, #6
 8000d3a:	25ff      	movs	r5, #255	; 0xff
 8000d3c:	469a      	mov	sl, r3
 8000d3e:	e76c      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d40:	4643      	mov	r3, r8
 8000d42:	35ff      	adds	r5, #255	; 0xff
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10b      	bne.n	8000d60 <__aeabi_fmul+0x178>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	469c      	mov	ip, r3
 8000d52:	e778      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d54:	4653      	mov	r3, sl
 8000d56:	0031      	movs	r1, r6
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fmul+0x176>
 8000d5c:	e783      	b.n	8000c66 <__aeabi_fmul+0x7e>
 8000d5e:	e792      	b.n	8000c86 <__aeabi_fmul+0x9e>
 8000d60:	2303      	movs	r3, #3
 8000d62:	464a      	mov	r2, r9
 8000d64:	431a      	orrs	r2, r3
 8000d66:	4691      	mov	r9, r2
 8000d68:	469c      	mov	ip, r3
 8000d6a:	e76c      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	4699      	mov	r9, r3
 8000d70:	3b09      	subs	r3, #9
 8000d72:	25ff      	movs	r5, #255	; 0xff
 8000d74:	469a      	mov	sl, r3
 8000d76:	e750      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f002 f8c7 	bl	8002f0c <__clzsi2>
 8000d7e:	2576      	movs	r5, #118	; 0x76
 8000d80:	1f43      	subs	r3, r0, #5
 8000d82:	409c      	lsls	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	426d      	negs	r5, r5
 8000d88:	4699      	mov	r9, r3
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	1a2d      	subs	r5, r5, r0
 8000d8e:	e744      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d90:	4640      	mov	r0, r8
 8000d92:	f002 f8bb 	bl	8002f0c <__clzsi2>
 8000d96:	4642      	mov	r2, r8
 8000d98:	1f43      	subs	r3, r0, #5
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	1a2d      	subs	r5, r5, r0
 8000da0:	4690      	mov	r8, r2
 8000da2:	469c      	mov	ip, r3
 8000da4:	3d76      	subs	r5, #118	; 0x76
 8000da6:	e74e      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	2100      	movs	r1, #0
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	03e4      	lsls	r4, r4, #15
 8000db0:	e760      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000db2:	2301      	movs	r3, #1
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	2b1b      	cmp	r3, #27
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_fmul+0x1d4>
 8000dba:	e759      	b.n	8000c70 <__aeabi_fmul+0x88>
 8000dbc:	0022      	movs	r2, r4
 8000dbe:	309e      	adds	r0, #158	; 0x9e
 8000dc0:	40da      	lsrs	r2, r3
 8000dc2:	4084      	lsls	r4, r0
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	1e62      	subs	r2, r4, #1
 8000dc8:	4194      	sbcs	r4, r2
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	0763      	lsls	r3, r4, #29
 8000dce:	d004      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d000      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd8:	3404      	adds	r4, #4
 8000dda:	0163      	lsls	r3, r4, #5
 8000ddc:	d51a      	bpl.n	8000e14 <__aeabi_fmul+0x22c>
 8000dde:	2001      	movs	r0, #1
 8000de0:	2400      	movs	r4, #0
 8000de2:	e747      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000de4:	2080      	movs	r0, #128	; 0x80
 8000de6:	03c0      	lsls	r0, r0, #15
 8000de8:	4204      	tst	r4, r0
 8000dea:	d009      	beq.n	8000e00 <__aeabi_fmul+0x218>
 8000dec:	4643      	mov	r3, r8
 8000dee:	4203      	tst	r3, r0
 8000df0:	d106      	bne.n	8000e00 <__aeabi_fmul+0x218>
 8000df2:	4644      	mov	r4, r8
 8000df4:	4304      	orrs	r4, r0
 8000df6:	0264      	lsls	r4, r4, #9
 8000df8:	0039      	movs	r1, r7
 8000dfa:	20ff      	movs	r0, #255	; 0xff
 8000dfc:	0a64      	lsrs	r4, r4, #9
 8000dfe:	e739      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	03c0      	lsls	r0, r0, #15
 8000e04:	4304      	orrs	r4, r0
 8000e06:	0264      	lsls	r4, r4, #9
 8000e08:	0031      	movs	r1, r6
 8000e0a:	20ff      	movs	r0, #255	; 0xff
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	e731      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e10:	0028      	movs	r0, r5
 8000e12:	e765      	b.n	8000ce0 <__aeabi_fmul+0xf8>
 8000e14:	01a4      	lsls	r4, r4, #6
 8000e16:	2000      	movs	r0, #0
 8000e18:	0a64      	lsrs	r4, r4, #9
 8000e1a:	e72b      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	03c0      	lsls	r0, r0, #15
 8000e20:	4304      	orrs	r4, r0
 8000e22:	0264      	lsls	r4, r4, #9
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	0a64      	lsrs	r4, r4, #9
 8000e28:	e724      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	080090b0 	.word	0x080090b0
 8000e30:	f7ffffff 	.word	0xf7ffffff

08000e34 <__aeabi_fsub>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	46ce      	mov	lr, r9
 8000e38:	4647      	mov	r7, r8
 8000e3a:	0243      	lsls	r3, r0, #9
 8000e3c:	0a5b      	lsrs	r3, r3, #9
 8000e3e:	024e      	lsls	r6, r1, #9
 8000e40:	00da      	lsls	r2, r3, #3
 8000e42:	4694      	mov	ip, r2
 8000e44:	0a72      	lsrs	r2, r6, #9
 8000e46:	4691      	mov	r9, r2
 8000e48:	0045      	lsls	r5, r0, #1
 8000e4a:	004a      	lsls	r2, r1, #1
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	0e2d      	lsrs	r5, r5, #24
 8000e50:	001f      	movs	r7, r3
 8000e52:	0fc4      	lsrs	r4, r0, #31
 8000e54:	0e12      	lsrs	r2, r2, #24
 8000e56:	0fc9      	lsrs	r1, r1, #31
 8000e58:	09b6      	lsrs	r6, r6, #6
 8000e5a:	2aff      	cmp	r2, #255	; 0xff
 8000e5c:	d05b      	beq.n	8000f16 <__aeabi_fsub+0xe2>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4041      	eors	r1, r0
 8000e62:	428c      	cmp	r4, r1
 8000e64:	d039      	beq.n	8000eda <__aeabi_fsub+0xa6>
 8000e66:	1aa8      	subs	r0, r5, r2
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	dd5a      	ble.n	8000f22 <__aeabi_fsub+0xee>
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d06a      	beq.n	8000f46 <__aeabi_fsub+0x112>
 8000e70:	2dff      	cmp	r5, #255	; 0xff
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x42>
 8000e74:	e0d9      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	04d2      	lsls	r2, r2, #19
 8000e7a:	4316      	orrs	r6, r2
 8000e7c:	281b      	cmp	r0, #27
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0x4e>
 8000e80:	e0e9      	b.n	8001056 <__aeabi_fsub+0x222>
 8000e82:	2001      	movs	r0, #1
 8000e84:	4663      	mov	r3, ip
 8000e86:	1a18      	subs	r0, r3, r0
 8000e88:	0143      	lsls	r3, r0, #5
 8000e8a:	d400      	bmi.n	8000e8e <__aeabi_fsub+0x5a>
 8000e8c:	e0b4      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000e8e:	0180      	lsls	r0, r0, #6
 8000e90:	0987      	lsrs	r7, r0, #6
 8000e92:	0038      	movs	r0, r7
 8000e94:	f002 f83a 	bl	8002f0c <__clzsi2>
 8000e98:	3805      	subs	r0, #5
 8000e9a:	4087      	lsls	r7, r0
 8000e9c:	4285      	cmp	r5, r0
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_fsub+0x6e>
 8000ea0:	e0cc      	b.n	800103c <__aeabi_fsub+0x208>
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	48b5      	ldr	r0, [pc, #724]	; (800117c <__aeabi_fsub+0x348>)
 8000ea6:	4038      	ands	r0, r7
 8000ea8:	0743      	lsls	r3, r0, #29
 8000eaa:	d004      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eac:	230f      	movs	r3, #15
 8000eae:	4003      	ands	r3, r0
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eb4:	3004      	adds	r0, #4
 8000eb6:	0143      	lsls	r3, r0, #5
 8000eb8:	d400      	bmi.n	8000ebc <__aeabi_fsub+0x88>
 8000eba:	e0a0      	b.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ebc:	1c6a      	adds	r2, r5, #1
 8000ebe:	2dfe      	cmp	r5, #254	; 0xfe
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x90>
 8000ec2:	e08d      	b.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ec4:	0180      	lsls	r0, r0, #6
 8000ec6:	0a47      	lsrs	r7, r0, #9
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	05d0      	lsls	r0, r2, #23
 8000ecc:	4338      	orrs	r0, r7
 8000ece:	07e4      	lsls	r4, r4, #31
 8000ed0:	4320      	orrs	r0, r4
 8000ed2:	bcc0      	pop	{r6, r7}
 8000ed4:	46b9      	mov	r9, r7
 8000ed6:	46b0      	mov	r8, r6
 8000ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eda:	1aa8      	subs	r0, r5, r2
 8000edc:	4680      	mov	r8, r0
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	dd45      	ble.n	8000f6e <__aeabi_fsub+0x13a>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d070      	beq.n	8000fc8 <__aeabi_fsub+0x194>
 8000ee6:	2dff      	cmp	r5, #255	; 0xff
 8000ee8:	d100      	bne.n	8000eec <__aeabi_fsub+0xb8>
 8000eea:	e09e      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	04db      	lsls	r3, r3, #19
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	2b1b      	cmp	r3, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0xc6>
 8000ef8:	e0d2      	b.n	80010a0 <__aeabi_fsub+0x26c>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4460      	add	r0, ip
 8000efe:	0143      	lsls	r3, r0, #5
 8000f00:	d57a      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000f02:	3501      	adds	r5, #1
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d06b      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4a9d      	ldr	r2, [pc, #628]	; (8001180 <__aeabi_fsub+0x34c>)
 8000f0c:	4003      	ands	r3, r0
 8000f0e:	0840      	lsrs	r0, r0, #1
 8000f10:	4010      	ands	r0, r2
 8000f12:	4318      	orrs	r0, r3
 8000f14:	e7c8      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d020      	beq.n	8000f5c <__aeabi_fsub+0x128>
 8000f1a:	428c      	cmp	r4, r1
 8000f1c:	d023      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f1e:	0028      	movs	r0, r5
 8000f20:	38ff      	subs	r0, #255	; 0xff
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d039      	beq.n	8000f9a <__aeabi_fsub+0x166>
 8000f26:	1b57      	subs	r7, r2, r5
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0xfa>
 8000f2c:	e09d      	b.n	800106a <__aeabi_fsub+0x236>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x102>
 8000f34:	e0db      	b.n	80010ee <__aeabi_fsub+0x2ba>
 8000f36:	1e7b      	subs	r3, r7, #1
 8000f38:	2f01      	cmp	r7, #1
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x10a>
 8000f3c:	e10d      	b.n	800115a <__aeabi_fsub+0x326>
 8000f3e:	2fff      	cmp	r7, #255	; 0xff
 8000f40:	d071      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 8000f42:	001f      	movs	r7, r3
 8000f44:	e098      	b.n	8001078 <__aeabi_fsub+0x244>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x118>
 8000f4a:	e0a7      	b.n	800109c <__aeabi_fsub+0x268>
 8000f4c:	1e42      	subs	r2, r0, #1
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x120>
 8000f52:	e0e6      	b.n	8001122 <__aeabi_fsub+0x2ee>
 8000f54:	28ff      	cmp	r0, #255	; 0xff
 8000f56:	d068      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000f58:	0010      	movs	r0, r2
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fsub+0x48>
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4041      	eors	r1, r0
 8000f60:	42a1      	cmp	r1, r4
 8000f62:	d000      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f64:	e77f      	b.n	8000e66 <__aeabi_fsub+0x32>
 8000f66:	20ff      	movs	r0, #255	; 0xff
 8000f68:	4240      	negs	r0, r0
 8000f6a:	4680      	mov	r8, r0
 8000f6c:	44a8      	add	r8, r5
 8000f6e:	4640      	mov	r0, r8
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d038      	beq.n	8000fe6 <__aeabi_fsub+0x1b2>
 8000f74:	1b51      	subs	r1, r2, r5
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x148>
 8000f7a:	e0ae      	b.n	80010da <__aeabi_fsub+0x2a6>
 8000f7c:	2aff      	cmp	r2, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x14e>
 8000f80:	e0df      	b.n	8001142 <__aeabi_fsub+0x30e>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4660      	mov	r0, ip
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	4318      	orrs	r0, r3
 8000f8a:	4684      	mov	ip, r0
 8000f8c:	291b      	cmp	r1, #27
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_fsub+0x15e>
 8000f90:	e0d9      	b.n	8001146 <__aeabi_fsub+0x312>
 8000f92:	2001      	movs	r0, #1
 8000f94:	0015      	movs	r5, r2
 8000f96:	1980      	adds	r0, r0, r6
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fsub+0xca>
 8000f9a:	20fe      	movs	r0, #254	; 0xfe
 8000f9c:	1c6a      	adds	r2, r5, #1
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d171      	bne.n	8001086 <__aeabi_fsub+0x252>
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x174>
 8000fa6:	e0a6      	b.n	80010f6 <__aeabi_fsub+0x2c2>
 8000fa8:	4663      	mov	r3, ip
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x17c>
 8000fae:	e0d9      	b.n	8001164 <__aeabi_fsub+0x330>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x184>
 8000fb6:	e788      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fb8:	1b98      	subs	r0, r3, r6
 8000fba:	0143      	lsls	r3, r0, #5
 8000fbc:	d400      	bmi.n	8000fc0 <__aeabi_fsub+0x18c>
 8000fbe:	e0e1      	b.n	8001184 <__aeabi_fsub+0x350>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	1af0      	subs	r0, r6, r3
 8000fc6:	e76f      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x19a>
 8000fcc:	e0b7      	b.n	800113e <__aeabi_fsub+0x30a>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	2801      	cmp	r0, #1
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_fsub+0x1a4>
 8000fd6:	e09c      	b.n	8001112 <__aeabi_fsub+0x2de>
 8000fd8:	28ff      	cmp	r0, #255	; 0xff
 8000fda:	d026      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000fdc:	4690      	mov	r8, r2
 8000fde:	e788      	b.n	8000ef2 <__aeabi_fsub+0xbe>
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	2700      	movs	r7, #0
 8000fe4:	e771      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fe6:	20fe      	movs	r0, #254	; 0xfe
 8000fe8:	1c6a      	adds	r2, r5, #1
 8000fea:	4210      	tst	r0, r2
 8000fec:	d064      	beq.n	80010b8 <__aeabi_fsub+0x284>
 8000fee:	2aff      	cmp	r2, #255	; 0xff
 8000ff0:	d0f6      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ff2:	0015      	movs	r5, r2
 8000ff4:	4466      	add	r6, ip
 8000ff6:	0870      	lsrs	r0, r6, #1
 8000ff8:	0743      	lsls	r3, r0, #29
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ffc:	e756      	b.n	8000eac <__aeabi_fsub+0x78>
 8000ffe:	08c3      	lsrs	r3, r0, #3
 8001000:	2dff      	cmp	r5, #255	; 0xff
 8001002:	d012      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	0a5f      	lsrs	r7, r3, #9
 8001008:	b2ea      	uxtb	r2, r5
 800100a:	e75e      	b.n	8000eca <__aeabi_fsub+0x96>
 800100c:	4662      	mov	r2, ip
 800100e:	2a00      	cmp	r2, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 8001012:	e096      	b.n	8001142 <__aeabi_fsub+0x30e>
 8001014:	2e00      	cmp	r6, #0
 8001016:	d008      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	03d2      	lsls	r2, r2, #15
 800101c:	4213      	tst	r3, r2
 800101e:	d004      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001020:	4648      	mov	r0, r9
 8001022:	4210      	tst	r0, r2
 8001024:	d101      	bne.n	800102a <__aeabi_fsub+0x1f6>
 8001026:	000c      	movs	r4, r1
 8001028:	464b      	mov	r3, r9
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0d8      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 800102e:	2780      	movs	r7, #128	; 0x80
 8001030:	03ff      	lsls	r7, r7, #15
 8001032:	431f      	orrs	r7, r3
 8001034:	027f      	lsls	r7, r7, #9
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	0a7f      	lsrs	r7, r7, #9
 800103a:	e746      	b.n	8000eca <__aeabi_fsub+0x96>
 800103c:	2320      	movs	r3, #32
 800103e:	003a      	movs	r2, r7
 8001040:	1b45      	subs	r5, r0, r5
 8001042:	0038      	movs	r0, r7
 8001044:	3501      	adds	r5, #1
 8001046:	40ea      	lsrs	r2, r5
 8001048:	1b5d      	subs	r5, r3, r5
 800104a:	40a8      	lsls	r0, r5
 800104c:	1e43      	subs	r3, r0, #1
 800104e:	4198      	sbcs	r0, r3
 8001050:	2500      	movs	r5, #0
 8001052:	4310      	orrs	r0, r2
 8001054:	e728      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8001056:	2320      	movs	r3, #32
 8001058:	1a1b      	subs	r3, r3, r0
 800105a:	0032      	movs	r2, r6
 800105c:	409e      	lsls	r6, r3
 800105e:	40c2      	lsrs	r2, r0
 8001060:	0030      	movs	r0, r6
 8001062:	1e43      	subs	r3, r0, #1
 8001064:	4198      	sbcs	r0, r3
 8001066:	4310      	orrs	r0, r2
 8001068:	e70c      	b.n	8000e84 <__aeabi_fsub+0x50>
 800106a:	2aff      	cmp	r2, #255	; 0xff
 800106c:	d0db      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	4660      	mov	r0, ip
 8001072:	04db      	lsls	r3, r3, #19
 8001074:	4318      	orrs	r0, r3
 8001076:	4684      	mov	ip, r0
 8001078:	2f1b      	cmp	r7, #27
 800107a:	dd56      	ble.n	800112a <__aeabi_fsub+0x2f6>
 800107c:	2001      	movs	r0, #1
 800107e:	000c      	movs	r4, r1
 8001080:	0015      	movs	r5, r2
 8001082:	1a30      	subs	r0, r6, r0
 8001084:	e700      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001086:	4663      	mov	r3, ip
 8001088:	1b9f      	subs	r7, r3, r6
 800108a:	017b      	lsls	r3, r7, #5
 800108c:	d43d      	bmi.n	800110a <__aeabi_fsub+0x2d6>
 800108e:	2f00      	cmp	r7, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001092:	e6fe      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001094:	2400      	movs	r4, #0
 8001096:	2200      	movs	r2, #0
 8001098:	2700      	movs	r7, #0
 800109a:	e716      	b.n	8000eca <__aeabi_fsub+0x96>
 800109c:	0005      	movs	r5, r0
 800109e:	e7af      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010a0:	0032      	movs	r2, r6
 80010a2:	4643      	mov	r3, r8
 80010a4:	4641      	mov	r1, r8
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	2320      	movs	r3, #32
 80010aa:	1a5b      	subs	r3, r3, r1
 80010ac:	409e      	lsls	r6, r3
 80010ae:	0030      	movs	r0, r6
 80010b0:	1e43      	subs	r3, r0, #1
 80010b2:	4198      	sbcs	r0, r3
 80010b4:	4310      	orrs	r0, r2
 80010b6:	e721      	b.n	8000efc <__aeabi_fsub+0xc8>
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	d1a7      	bne.n	800100c <__aeabi_fsub+0x1d8>
 80010bc:	4663      	mov	r3, ip
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d059      	beq.n	8001176 <__aeabi_fsub+0x342>
 80010c2:	2200      	movs	r2, #0
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x296>
 80010c8:	e6ff      	b.n	8000eca <__aeabi_fsub+0x96>
 80010ca:	0030      	movs	r0, r6
 80010cc:	4460      	add	r0, ip
 80010ce:	0143      	lsls	r3, r0, #5
 80010d0:	d592      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <__aeabi_fsub+0x348>)
 80010d4:	3501      	adds	r5, #1
 80010d6:	4018      	ands	r0, r3
 80010d8:	e78e      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010da:	4663      	mov	r3, ip
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d047      	beq.n	8001170 <__aeabi_fsub+0x33c>
 80010e0:	1e4b      	subs	r3, r1, #1
 80010e2:	2901      	cmp	r1, #1
 80010e4:	d015      	beq.n	8001112 <__aeabi_fsub+0x2de>
 80010e6:	29ff      	cmp	r1, #255	; 0xff
 80010e8:	d02b      	beq.n	8001142 <__aeabi_fsub+0x30e>
 80010ea:	0019      	movs	r1, r3
 80010ec:	e74e      	b.n	8000f8c <__aeabi_fsub+0x158>
 80010ee:	000c      	movs	r4, r1
 80010f0:	464b      	mov	r3, r9
 80010f2:	003d      	movs	r5, r7
 80010f4:	e784      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010f6:	4662      	mov	r2, ip
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d18b      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d192      	bne.n	8001026 <__aeabi_fsub+0x1f2>
 8001100:	2780      	movs	r7, #128	; 0x80
 8001102:	2400      	movs	r4, #0
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	03ff      	lsls	r7, r7, #15
 8001108:	e6df      	b.n	8000eca <__aeabi_fsub+0x96>
 800110a:	4663      	mov	r3, ip
 800110c:	000c      	movs	r4, r1
 800110e:	1af7      	subs	r7, r6, r3
 8001110:	e6bf      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001112:	0030      	movs	r0, r6
 8001114:	4460      	add	r0, ip
 8001116:	2501      	movs	r5, #1
 8001118:	0143      	lsls	r3, r0, #5
 800111a:	d400      	bmi.n	800111e <__aeabi_fsub+0x2ea>
 800111c:	e76c      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800111e:	2502      	movs	r5, #2
 8001120:	e6f2      	b.n	8000f08 <__aeabi_fsub+0xd4>
 8001122:	4663      	mov	r3, ip
 8001124:	2501      	movs	r5, #1
 8001126:	1b98      	subs	r0, r3, r6
 8001128:	e6ae      	b.n	8000e88 <__aeabi_fsub+0x54>
 800112a:	2320      	movs	r3, #32
 800112c:	4664      	mov	r4, ip
 800112e:	4660      	mov	r0, ip
 8001130:	40fc      	lsrs	r4, r7
 8001132:	1bdf      	subs	r7, r3, r7
 8001134:	40b8      	lsls	r0, r7
 8001136:	1e43      	subs	r3, r0, #1
 8001138:	4198      	sbcs	r0, r3
 800113a:	4320      	orrs	r0, r4
 800113c:	e79f      	b.n	800107e <__aeabi_fsub+0x24a>
 800113e:	0005      	movs	r5, r0
 8001140:	e75e      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001142:	464b      	mov	r3, r9
 8001144:	e771      	b.n	800102a <__aeabi_fsub+0x1f6>
 8001146:	2320      	movs	r3, #32
 8001148:	4665      	mov	r5, ip
 800114a:	4660      	mov	r0, ip
 800114c:	40cd      	lsrs	r5, r1
 800114e:	1a59      	subs	r1, r3, r1
 8001150:	4088      	lsls	r0, r1
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	4328      	orrs	r0, r5
 8001158:	e71c      	b.n	8000f94 <__aeabi_fsub+0x160>
 800115a:	4663      	mov	r3, ip
 800115c:	000c      	movs	r4, r1
 800115e:	2501      	movs	r5, #1
 8001160:	1af0      	subs	r0, r6, r3
 8001162:	e691      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d095      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001168:	000c      	movs	r4, r1
 800116a:	464f      	mov	r7, r9
 800116c:	2200      	movs	r2, #0
 800116e:	e6ac      	b.n	8000eca <__aeabi_fsub+0x96>
 8001170:	464b      	mov	r3, r9
 8001172:	000d      	movs	r5, r1
 8001174:	e744      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001176:	464f      	mov	r7, r9
 8001178:	2200      	movs	r2, #0
 800117a:	e6a6      	b.n	8000eca <__aeabi_fsub+0x96>
 800117c:	fbffffff 	.word	0xfbffffff
 8001180:	7dffffff 	.word	0x7dffffff
 8001184:	2800      	cmp	r0, #0
 8001186:	d000      	beq.n	800118a <__aeabi_fsub+0x356>
 8001188:	e736      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800118a:	2400      	movs	r4, #0
 800118c:	2700      	movs	r7, #0
 800118e:	e69c      	b.n	8000eca <__aeabi_fsub+0x96>

08001190 <__aeabi_i2f>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	2800      	cmp	r0, #0
 8001194:	d013      	beq.n	80011be <__aeabi_i2f+0x2e>
 8001196:	17c3      	asrs	r3, r0, #31
 8001198:	18c6      	adds	r6, r0, r3
 800119a:	405e      	eors	r6, r3
 800119c:	0fc4      	lsrs	r4, r0, #31
 800119e:	0030      	movs	r0, r6
 80011a0:	f001 feb4 	bl	8002f0c <__clzsi2>
 80011a4:	239e      	movs	r3, #158	; 0x9e
 80011a6:	0005      	movs	r5, r0
 80011a8:	1a1b      	subs	r3, r3, r0
 80011aa:	2b96      	cmp	r3, #150	; 0x96
 80011ac:	dc0f      	bgt.n	80011ce <__aeabi_i2f+0x3e>
 80011ae:	2808      	cmp	r0, #8
 80011b0:	dd01      	ble.n	80011b6 <__aeabi_i2f+0x26>
 80011b2:	3d08      	subs	r5, #8
 80011b4:	40ae      	lsls	r6, r5
 80011b6:	0276      	lsls	r6, r6, #9
 80011b8:	0a76      	lsrs	r6, r6, #9
 80011ba:	b2d8      	uxtb	r0, r3
 80011bc:	e002      	b.n	80011c4 <__aeabi_i2f+0x34>
 80011be:	2400      	movs	r4, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	2600      	movs	r6, #0
 80011c4:	05c0      	lsls	r0, r0, #23
 80011c6:	4330      	orrs	r0, r6
 80011c8:	07e4      	lsls	r4, r4, #31
 80011ca:	4320      	orrs	r0, r4
 80011cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ce:	2b99      	cmp	r3, #153	; 0x99
 80011d0:	dd0c      	ble.n	80011ec <__aeabi_i2f+0x5c>
 80011d2:	2205      	movs	r2, #5
 80011d4:	0031      	movs	r1, r6
 80011d6:	1a12      	subs	r2, r2, r0
 80011d8:	40d1      	lsrs	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	0001      	movs	r1, r0
 80011de:	0030      	movs	r0, r6
 80011e0:	311b      	adds	r1, #27
 80011e2:	4088      	lsls	r0, r1
 80011e4:	1e41      	subs	r1, r0, #1
 80011e6:	4188      	sbcs	r0, r1
 80011e8:	4302      	orrs	r2, r0
 80011ea:	0016      	movs	r6, r2
 80011ec:	2d05      	cmp	r5, #5
 80011ee:	dc12      	bgt.n	8001216 <__aeabi_i2f+0x86>
 80011f0:	0031      	movs	r1, r6
 80011f2:	4f0d      	ldr	r7, [pc, #52]	; (8001228 <__aeabi_i2f+0x98>)
 80011f4:	4039      	ands	r1, r7
 80011f6:	0772      	lsls	r2, r6, #29
 80011f8:	d009      	beq.n	800120e <__aeabi_i2f+0x7e>
 80011fa:	200f      	movs	r0, #15
 80011fc:	4030      	ands	r0, r6
 80011fe:	2804      	cmp	r0, #4
 8001200:	d005      	beq.n	800120e <__aeabi_i2f+0x7e>
 8001202:	3104      	adds	r1, #4
 8001204:	014a      	lsls	r2, r1, #5
 8001206:	d502      	bpl.n	800120e <__aeabi_i2f+0x7e>
 8001208:	239f      	movs	r3, #159	; 0x9f
 800120a:	4039      	ands	r1, r7
 800120c:	1b5b      	subs	r3, r3, r5
 800120e:	0189      	lsls	r1, r1, #6
 8001210:	0a4e      	lsrs	r6, r1, #9
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	e7d6      	b.n	80011c4 <__aeabi_i2f+0x34>
 8001216:	1f6a      	subs	r2, r5, #5
 8001218:	4096      	lsls	r6, r2
 800121a:	0031      	movs	r1, r6
 800121c:	4f02      	ldr	r7, [pc, #8]	; (8001228 <__aeabi_i2f+0x98>)
 800121e:	4039      	ands	r1, r7
 8001220:	0772      	lsls	r2, r6, #29
 8001222:	d0f4      	beq.n	800120e <__aeabi_i2f+0x7e>
 8001224:	e7e9      	b.n	80011fa <__aeabi_i2f+0x6a>
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	fbffffff 	.word	0xfbffffff

0800122c <__aeabi_ui2f>:
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	1e05      	subs	r5, r0, #0
 8001230:	d00e      	beq.n	8001250 <__aeabi_ui2f+0x24>
 8001232:	f001 fe6b 	bl	8002f0c <__clzsi2>
 8001236:	239e      	movs	r3, #158	; 0x9e
 8001238:	0004      	movs	r4, r0
 800123a:	1a1b      	subs	r3, r3, r0
 800123c:	2b96      	cmp	r3, #150	; 0x96
 800123e:	dc0c      	bgt.n	800125a <__aeabi_ui2f+0x2e>
 8001240:	2808      	cmp	r0, #8
 8001242:	dd01      	ble.n	8001248 <__aeabi_ui2f+0x1c>
 8001244:	3c08      	subs	r4, #8
 8001246:	40a5      	lsls	r5, r4
 8001248:	026d      	lsls	r5, r5, #9
 800124a:	0a6d      	lsrs	r5, r5, #9
 800124c:	b2d8      	uxtb	r0, r3
 800124e:	e001      	b.n	8001254 <__aeabi_ui2f+0x28>
 8001250:	2000      	movs	r0, #0
 8001252:	2500      	movs	r5, #0
 8001254:	05c0      	lsls	r0, r0, #23
 8001256:	4328      	orrs	r0, r5
 8001258:	bd70      	pop	{r4, r5, r6, pc}
 800125a:	2b99      	cmp	r3, #153	; 0x99
 800125c:	dd09      	ble.n	8001272 <__aeabi_ui2f+0x46>
 800125e:	0002      	movs	r2, r0
 8001260:	0029      	movs	r1, r5
 8001262:	321b      	adds	r2, #27
 8001264:	4091      	lsls	r1, r2
 8001266:	1e4a      	subs	r2, r1, #1
 8001268:	4191      	sbcs	r1, r2
 800126a:	2205      	movs	r2, #5
 800126c:	1a12      	subs	r2, r2, r0
 800126e:	40d5      	lsrs	r5, r2
 8001270:	430d      	orrs	r5, r1
 8001272:	2c05      	cmp	r4, #5
 8001274:	dc12      	bgt.n	800129c <__aeabi_ui2f+0x70>
 8001276:	0029      	movs	r1, r5
 8001278:	4e0c      	ldr	r6, [pc, #48]	; (80012ac <__aeabi_ui2f+0x80>)
 800127a:	4031      	ands	r1, r6
 800127c:	076a      	lsls	r2, r5, #29
 800127e:	d009      	beq.n	8001294 <__aeabi_ui2f+0x68>
 8001280:	200f      	movs	r0, #15
 8001282:	4028      	ands	r0, r5
 8001284:	2804      	cmp	r0, #4
 8001286:	d005      	beq.n	8001294 <__aeabi_ui2f+0x68>
 8001288:	3104      	adds	r1, #4
 800128a:	014a      	lsls	r2, r1, #5
 800128c:	d502      	bpl.n	8001294 <__aeabi_ui2f+0x68>
 800128e:	239f      	movs	r3, #159	; 0x9f
 8001290:	4031      	ands	r1, r6
 8001292:	1b1b      	subs	r3, r3, r4
 8001294:	0189      	lsls	r1, r1, #6
 8001296:	0a4d      	lsrs	r5, r1, #9
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	e7db      	b.n	8001254 <__aeabi_ui2f+0x28>
 800129c:	1f62      	subs	r2, r4, #5
 800129e:	4095      	lsls	r5, r2
 80012a0:	0029      	movs	r1, r5
 80012a2:	4e02      	ldr	r6, [pc, #8]	; (80012ac <__aeabi_ui2f+0x80>)
 80012a4:	4031      	ands	r1, r6
 80012a6:	076a      	lsls	r2, r5, #29
 80012a8:	d0f4      	beq.n	8001294 <__aeabi_ui2f+0x68>
 80012aa:	e7e9      	b.n	8001280 <__aeabi_ui2f+0x54>
 80012ac:	fbffffff 	.word	0xfbffffff

080012b0 <__aeabi_dadd>:
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	464f      	mov	r7, r9
 80012b4:	4646      	mov	r6, r8
 80012b6:	46d6      	mov	lr, sl
 80012b8:	000d      	movs	r5, r1
 80012ba:	0004      	movs	r4, r0
 80012bc:	b5c0      	push	{r6, r7, lr}
 80012be:	001f      	movs	r7, r3
 80012c0:	0011      	movs	r1, r2
 80012c2:	0328      	lsls	r0, r5, #12
 80012c4:	0f62      	lsrs	r2, r4, #29
 80012c6:	0a40      	lsrs	r0, r0, #9
 80012c8:	4310      	orrs	r0, r2
 80012ca:	007a      	lsls	r2, r7, #1
 80012cc:	0d52      	lsrs	r2, r2, #21
 80012ce:	00e3      	lsls	r3, r4, #3
 80012d0:	033c      	lsls	r4, r7, #12
 80012d2:	4691      	mov	r9, r2
 80012d4:	0a64      	lsrs	r4, r4, #9
 80012d6:	0ffa      	lsrs	r2, r7, #31
 80012d8:	0f4f      	lsrs	r7, r1, #29
 80012da:	006e      	lsls	r6, r5, #1
 80012dc:	4327      	orrs	r7, r4
 80012de:	4692      	mov	sl, r2
 80012e0:	46b8      	mov	r8, r7
 80012e2:	0d76      	lsrs	r6, r6, #21
 80012e4:	0fed      	lsrs	r5, r5, #31
 80012e6:	00c9      	lsls	r1, r1, #3
 80012e8:	4295      	cmp	r5, r2
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x3e>
 80012ec:	e099      	b.n	8001422 <__aeabi_dadd+0x172>
 80012ee:	464c      	mov	r4, r9
 80012f0:	1b34      	subs	r4, r6, r4
 80012f2:	46a4      	mov	ip, r4
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dadd+0x4a>
 80012f8:	e07c      	b.n	80013f4 <__aeabi_dadd+0x144>
 80012fa:	464a      	mov	r2, r9
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x52>
 8001300:	e0b8      	b.n	8001474 <__aeabi_dadd+0x1c4>
 8001302:	4ac5      	ldr	r2, [pc, #788]	; (8001618 <__aeabi_dadd+0x368>)
 8001304:	4296      	cmp	r6, r2
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x5a>
 8001308:	e11c      	b.n	8001544 <__aeabi_dadd+0x294>
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	003c      	movs	r4, r7
 800130e:	0412      	lsls	r2, r2, #16
 8001310:	4314      	orrs	r4, r2
 8001312:	46a0      	mov	r8, r4
 8001314:	4662      	mov	r2, ip
 8001316:	2a38      	cmp	r2, #56	; 0x38
 8001318:	dd00      	ble.n	800131c <__aeabi_dadd+0x6c>
 800131a:	e161      	b.n	80015e0 <__aeabi_dadd+0x330>
 800131c:	2a1f      	cmp	r2, #31
 800131e:	dd00      	ble.n	8001322 <__aeabi_dadd+0x72>
 8001320:	e1cc      	b.n	80016bc <__aeabi_dadd+0x40c>
 8001322:	4664      	mov	r4, ip
 8001324:	2220      	movs	r2, #32
 8001326:	1b12      	subs	r2, r2, r4
 8001328:	4644      	mov	r4, r8
 800132a:	4094      	lsls	r4, r2
 800132c:	000f      	movs	r7, r1
 800132e:	46a1      	mov	r9, r4
 8001330:	4664      	mov	r4, ip
 8001332:	4091      	lsls	r1, r2
 8001334:	40e7      	lsrs	r7, r4
 8001336:	464c      	mov	r4, r9
 8001338:	1e4a      	subs	r2, r1, #1
 800133a:	4191      	sbcs	r1, r2
 800133c:	433c      	orrs	r4, r7
 800133e:	4642      	mov	r2, r8
 8001340:	4321      	orrs	r1, r4
 8001342:	4664      	mov	r4, ip
 8001344:	40e2      	lsrs	r2, r4
 8001346:	1a80      	subs	r0, r0, r2
 8001348:	1a5c      	subs	r4, r3, r1
 800134a:	42a3      	cmp	r3, r4
 800134c:	419b      	sbcs	r3, r3
 800134e:	425f      	negs	r7, r3
 8001350:	1bc7      	subs	r7, r0, r7
 8001352:	023b      	lsls	r3, r7, #8
 8001354:	d400      	bmi.n	8001358 <__aeabi_dadd+0xa8>
 8001356:	e0d0      	b.n	80014fa <__aeabi_dadd+0x24a>
 8001358:	027f      	lsls	r7, r7, #9
 800135a:	0a7f      	lsrs	r7, r7, #9
 800135c:	2f00      	cmp	r7, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_dadd+0xb2>
 8001360:	e0ff      	b.n	8001562 <__aeabi_dadd+0x2b2>
 8001362:	0038      	movs	r0, r7
 8001364:	f001 fdd2 	bl	8002f0c <__clzsi2>
 8001368:	0001      	movs	r1, r0
 800136a:	3908      	subs	r1, #8
 800136c:	2320      	movs	r3, #32
 800136e:	0022      	movs	r2, r4
 8001370:	1a5b      	subs	r3, r3, r1
 8001372:	408f      	lsls	r7, r1
 8001374:	40da      	lsrs	r2, r3
 8001376:	408c      	lsls	r4, r1
 8001378:	4317      	orrs	r7, r2
 800137a:	42b1      	cmp	r1, r6
 800137c:	da00      	bge.n	8001380 <__aeabi_dadd+0xd0>
 800137e:	e0ff      	b.n	8001580 <__aeabi_dadd+0x2d0>
 8001380:	1b89      	subs	r1, r1, r6
 8001382:	1c4b      	adds	r3, r1, #1
 8001384:	2b1f      	cmp	r3, #31
 8001386:	dd00      	ble.n	800138a <__aeabi_dadd+0xda>
 8001388:	e0a8      	b.n	80014dc <__aeabi_dadd+0x22c>
 800138a:	2220      	movs	r2, #32
 800138c:	0039      	movs	r1, r7
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	0020      	movs	r0, r4
 8001392:	4094      	lsls	r4, r2
 8001394:	4091      	lsls	r1, r2
 8001396:	40d8      	lsrs	r0, r3
 8001398:	1e62      	subs	r2, r4, #1
 800139a:	4194      	sbcs	r4, r2
 800139c:	40df      	lsrs	r7, r3
 800139e:	2600      	movs	r6, #0
 80013a0:	4301      	orrs	r1, r0
 80013a2:	430c      	orrs	r4, r1
 80013a4:	0763      	lsls	r3, r4, #29
 80013a6:	d009      	beq.n	80013bc <__aeabi_dadd+0x10c>
 80013a8:	230f      	movs	r3, #15
 80013aa:	4023      	ands	r3, r4
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d005      	beq.n	80013bc <__aeabi_dadd+0x10c>
 80013b0:	1d23      	adds	r3, r4, #4
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	41a4      	sbcs	r4, r4
 80013b6:	4264      	negs	r4, r4
 80013b8:	193f      	adds	r7, r7, r4
 80013ba:	001c      	movs	r4, r3
 80013bc:	023b      	lsls	r3, r7, #8
 80013be:	d400      	bmi.n	80013c2 <__aeabi_dadd+0x112>
 80013c0:	e09e      	b.n	8001500 <__aeabi_dadd+0x250>
 80013c2:	4b95      	ldr	r3, [pc, #596]	; (8001618 <__aeabi_dadd+0x368>)
 80013c4:	3601      	adds	r6, #1
 80013c6:	429e      	cmp	r6, r3
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x11c>
 80013ca:	e0b7      	b.n	800153c <__aeabi_dadd+0x28c>
 80013cc:	4a93      	ldr	r2, [pc, #588]	; (800161c <__aeabi_dadd+0x36c>)
 80013ce:	08e4      	lsrs	r4, r4, #3
 80013d0:	4017      	ands	r7, r2
 80013d2:	077b      	lsls	r3, r7, #29
 80013d4:	0571      	lsls	r1, r6, #21
 80013d6:	027f      	lsls	r7, r7, #9
 80013d8:	4323      	orrs	r3, r4
 80013da:	0b3f      	lsrs	r7, r7, #12
 80013dc:	0d4a      	lsrs	r2, r1, #21
 80013de:	0512      	lsls	r2, r2, #20
 80013e0:	433a      	orrs	r2, r7
 80013e2:	07ed      	lsls	r5, r5, #31
 80013e4:	432a      	orrs	r2, r5
 80013e6:	0018      	movs	r0, r3
 80013e8:	0011      	movs	r1, r2
 80013ea:	bce0      	pop	{r5, r6, r7}
 80013ec:	46ba      	mov	sl, r7
 80013ee:	46b1      	mov	r9, r6
 80013f0:	46a8      	mov	r8, r5
 80013f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f4:	2c00      	cmp	r4, #0
 80013f6:	d04b      	beq.n	8001490 <__aeabi_dadd+0x1e0>
 80013f8:	464c      	mov	r4, r9
 80013fa:	1ba4      	subs	r4, r4, r6
 80013fc:	46a4      	mov	ip, r4
 80013fe:	2e00      	cmp	r6, #0
 8001400:	d000      	beq.n	8001404 <__aeabi_dadd+0x154>
 8001402:	e123      	b.n	800164c <__aeabi_dadd+0x39c>
 8001404:	0004      	movs	r4, r0
 8001406:	431c      	orrs	r4, r3
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x15c>
 800140a:	e1af      	b.n	800176c <__aeabi_dadd+0x4bc>
 800140c:	4662      	mov	r2, ip
 800140e:	1e54      	subs	r4, r2, #1
 8001410:	2a01      	cmp	r2, #1
 8001412:	d100      	bne.n	8001416 <__aeabi_dadd+0x166>
 8001414:	e215      	b.n	8001842 <__aeabi_dadd+0x592>
 8001416:	4d80      	ldr	r5, [pc, #512]	; (8001618 <__aeabi_dadd+0x368>)
 8001418:	45ac      	cmp	ip, r5
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x16e>
 800141c:	e1c8      	b.n	80017b0 <__aeabi_dadd+0x500>
 800141e:	46a4      	mov	ip, r4
 8001420:	e11b      	b.n	800165a <__aeabi_dadd+0x3aa>
 8001422:	464a      	mov	r2, r9
 8001424:	1ab2      	subs	r2, r6, r2
 8001426:	4694      	mov	ip, r2
 8001428:	2a00      	cmp	r2, #0
 800142a:	dc00      	bgt.n	800142e <__aeabi_dadd+0x17e>
 800142c:	e0ac      	b.n	8001588 <__aeabi_dadd+0x2d8>
 800142e:	464a      	mov	r2, r9
 8001430:	2a00      	cmp	r2, #0
 8001432:	d043      	beq.n	80014bc <__aeabi_dadd+0x20c>
 8001434:	4a78      	ldr	r2, [pc, #480]	; (8001618 <__aeabi_dadd+0x368>)
 8001436:	4296      	cmp	r6, r2
 8001438:	d100      	bne.n	800143c <__aeabi_dadd+0x18c>
 800143a:	e1af      	b.n	800179c <__aeabi_dadd+0x4ec>
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	003c      	movs	r4, r7
 8001440:	0412      	lsls	r2, r2, #16
 8001442:	4314      	orrs	r4, r2
 8001444:	46a0      	mov	r8, r4
 8001446:	4662      	mov	r2, ip
 8001448:	2a38      	cmp	r2, #56	; 0x38
 800144a:	dc67      	bgt.n	800151c <__aeabi_dadd+0x26c>
 800144c:	2a1f      	cmp	r2, #31
 800144e:	dc00      	bgt.n	8001452 <__aeabi_dadd+0x1a2>
 8001450:	e15f      	b.n	8001712 <__aeabi_dadd+0x462>
 8001452:	4647      	mov	r7, r8
 8001454:	3a20      	subs	r2, #32
 8001456:	40d7      	lsrs	r7, r2
 8001458:	4662      	mov	r2, ip
 800145a:	2a20      	cmp	r2, #32
 800145c:	d005      	beq.n	800146a <__aeabi_dadd+0x1ba>
 800145e:	4664      	mov	r4, ip
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	1b12      	subs	r2, r2, r4
 8001464:	4644      	mov	r4, r8
 8001466:	4094      	lsls	r4, r2
 8001468:	4321      	orrs	r1, r4
 800146a:	1e4a      	subs	r2, r1, #1
 800146c:	4191      	sbcs	r1, r2
 800146e:	000c      	movs	r4, r1
 8001470:	433c      	orrs	r4, r7
 8001472:	e057      	b.n	8001524 <__aeabi_dadd+0x274>
 8001474:	003a      	movs	r2, r7
 8001476:	430a      	orrs	r2, r1
 8001478:	d100      	bne.n	800147c <__aeabi_dadd+0x1cc>
 800147a:	e105      	b.n	8001688 <__aeabi_dadd+0x3d8>
 800147c:	0022      	movs	r2, r4
 800147e:	3a01      	subs	r2, #1
 8001480:	2c01      	cmp	r4, #1
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x1d6>
 8001484:	e182      	b.n	800178c <__aeabi_dadd+0x4dc>
 8001486:	4c64      	ldr	r4, [pc, #400]	; (8001618 <__aeabi_dadd+0x368>)
 8001488:	45a4      	cmp	ip, r4
 800148a:	d05b      	beq.n	8001544 <__aeabi_dadd+0x294>
 800148c:	4694      	mov	ip, r2
 800148e:	e741      	b.n	8001314 <__aeabi_dadd+0x64>
 8001490:	4c63      	ldr	r4, [pc, #396]	; (8001620 <__aeabi_dadd+0x370>)
 8001492:	1c77      	adds	r7, r6, #1
 8001494:	4227      	tst	r7, r4
 8001496:	d000      	beq.n	800149a <__aeabi_dadd+0x1ea>
 8001498:	e0c4      	b.n	8001624 <__aeabi_dadd+0x374>
 800149a:	0004      	movs	r4, r0
 800149c:	431c      	orrs	r4, r3
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d000      	beq.n	80014a4 <__aeabi_dadd+0x1f4>
 80014a2:	e169      	b.n	8001778 <__aeabi_dadd+0x4c8>
 80014a4:	2c00      	cmp	r4, #0
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x1fa>
 80014a8:	e1bf      	b.n	800182a <__aeabi_dadd+0x57a>
 80014aa:	4644      	mov	r4, r8
 80014ac:	430c      	orrs	r4, r1
 80014ae:	d000      	beq.n	80014b2 <__aeabi_dadd+0x202>
 80014b0:	e1d0      	b.n	8001854 <__aeabi_dadd+0x5a4>
 80014b2:	0742      	lsls	r2, r0, #29
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	08c0      	lsrs	r0, r0, #3
 80014ba:	e029      	b.n	8001510 <__aeabi_dadd+0x260>
 80014bc:	003a      	movs	r2, r7
 80014be:	430a      	orrs	r2, r1
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x214>
 80014c2:	e170      	b.n	80017a6 <__aeabi_dadd+0x4f6>
 80014c4:	4662      	mov	r2, ip
 80014c6:	4664      	mov	r4, ip
 80014c8:	3a01      	subs	r2, #1
 80014ca:	2c01      	cmp	r4, #1
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x220>
 80014ce:	e0e0      	b.n	8001692 <__aeabi_dadd+0x3e2>
 80014d0:	4c51      	ldr	r4, [pc, #324]	; (8001618 <__aeabi_dadd+0x368>)
 80014d2:	45a4      	cmp	ip, r4
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dadd+0x228>
 80014d6:	e161      	b.n	800179c <__aeabi_dadd+0x4ec>
 80014d8:	4694      	mov	ip, r2
 80014da:	e7b4      	b.n	8001446 <__aeabi_dadd+0x196>
 80014dc:	003a      	movs	r2, r7
 80014de:	391f      	subs	r1, #31
 80014e0:	40ca      	lsrs	r2, r1
 80014e2:	0011      	movs	r1, r2
 80014e4:	2b20      	cmp	r3, #32
 80014e6:	d003      	beq.n	80014f0 <__aeabi_dadd+0x240>
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	409f      	lsls	r7, r3
 80014ee:	433c      	orrs	r4, r7
 80014f0:	1e63      	subs	r3, r4, #1
 80014f2:	419c      	sbcs	r4, r3
 80014f4:	2700      	movs	r7, #0
 80014f6:	2600      	movs	r6, #0
 80014f8:	430c      	orrs	r4, r1
 80014fa:	0763      	lsls	r3, r4, #29
 80014fc:	d000      	beq.n	8001500 <__aeabi_dadd+0x250>
 80014fe:	e753      	b.n	80013a8 <__aeabi_dadd+0xf8>
 8001500:	46b4      	mov	ip, r6
 8001502:	08e4      	lsrs	r4, r4, #3
 8001504:	077b      	lsls	r3, r7, #29
 8001506:	4323      	orrs	r3, r4
 8001508:	08f8      	lsrs	r0, r7, #3
 800150a:	4a43      	ldr	r2, [pc, #268]	; (8001618 <__aeabi_dadd+0x368>)
 800150c:	4594      	cmp	ip, r2
 800150e:	d01d      	beq.n	800154c <__aeabi_dadd+0x29c>
 8001510:	4662      	mov	r2, ip
 8001512:	0307      	lsls	r7, r0, #12
 8001514:	0552      	lsls	r2, r2, #21
 8001516:	0b3f      	lsrs	r7, r7, #12
 8001518:	0d52      	lsrs	r2, r2, #21
 800151a:	e760      	b.n	80013de <__aeabi_dadd+0x12e>
 800151c:	4644      	mov	r4, r8
 800151e:	430c      	orrs	r4, r1
 8001520:	1e62      	subs	r2, r4, #1
 8001522:	4194      	sbcs	r4, r2
 8001524:	18e4      	adds	r4, r4, r3
 8001526:	429c      	cmp	r4, r3
 8001528:	419b      	sbcs	r3, r3
 800152a:	425f      	negs	r7, r3
 800152c:	183f      	adds	r7, r7, r0
 800152e:	023b      	lsls	r3, r7, #8
 8001530:	d5e3      	bpl.n	80014fa <__aeabi_dadd+0x24a>
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <__aeabi_dadd+0x368>)
 8001534:	3601      	adds	r6, #1
 8001536:	429e      	cmp	r6, r3
 8001538:	d000      	beq.n	800153c <__aeabi_dadd+0x28c>
 800153a:	e0b5      	b.n	80016a8 <__aeabi_dadd+0x3f8>
 800153c:	0032      	movs	r2, r6
 800153e:	2700      	movs	r7, #0
 8001540:	2300      	movs	r3, #0
 8001542:	e74c      	b.n	80013de <__aeabi_dadd+0x12e>
 8001544:	0742      	lsls	r2, r0, #29
 8001546:	08db      	lsrs	r3, r3, #3
 8001548:	4313      	orrs	r3, r2
 800154a:	08c0      	lsrs	r0, r0, #3
 800154c:	001a      	movs	r2, r3
 800154e:	4302      	orrs	r2, r0
 8001550:	d100      	bne.n	8001554 <__aeabi_dadd+0x2a4>
 8001552:	e1e1      	b.n	8001918 <__aeabi_dadd+0x668>
 8001554:	2780      	movs	r7, #128	; 0x80
 8001556:	033f      	lsls	r7, r7, #12
 8001558:	4307      	orrs	r7, r0
 800155a:	033f      	lsls	r7, r7, #12
 800155c:	4a2e      	ldr	r2, [pc, #184]	; (8001618 <__aeabi_dadd+0x368>)
 800155e:	0b3f      	lsrs	r7, r7, #12
 8001560:	e73d      	b.n	80013de <__aeabi_dadd+0x12e>
 8001562:	0020      	movs	r0, r4
 8001564:	f001 fcd2 	bl	8002f0c <__clzsi2>
 8001568:	0001      	movs	r1, r0
 800156a:	3118      	adds	r1, #24
 800156c:	291f      	cmp	r1, #31
 800156e:	dc00      	bgt.n	8001572 <__aeabi_dadd+0x2c2>
 8001570:	e6fc      	b.n	800136c <__aeabi_dadd+0xbc>
 8001572:	3808      	subs	r0, #8
 8001574:	4084      	lsls	r4, r0
 8001576:	0027      	movs	r7, r4
 8001578:	2400      	movs	r4, #0
 800157a:	42b1      	cmp	r1, r6
 800157c:	db00      	blt.n	8001580 <__aeabi_dadd+0x2d0>
 800157e:	e6ff      	b.n	8001380 <__aeabi_dadd+0xd0>
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <__aeabi_dadd+0x36c>)
 8001582:	1a76      	subs	r6, r6, r1
 8001584:	4017      	ands	r7, r2
 8001586:	e70d      	b.n	80013a4 <__aeabi_dadd+0xf4>
 8001588:	2a00      	cmp	r2, #0
 800158a:	d02f      	beq.n	80015ec <__aeabi_dadd+0x33c>
 800158c:	464a      	mov	r2, r9
 800158e:	1b92      	subs	r2, r2, r6
 8001590:	4694      	mov	ip, r2
 8001592:	2e00      	cmp	r6, #0
 8001594:	d100      	bne.n	8001598 <__aeabi_dadd+0x2e8>
 8001596:	e0ad      	b.n	80016f4 <__aeabi_dadd+0x444>
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <__aeabi_dadd+0x368>)
 800159a:	4591      	cmp	r9, r2
 800159c:	d100      	bne.n	80015a0 <__aeabi_dadd+0x2f0>
 800159e:	e10f      	b.n	80017c0 <__aeabi_dadd+0x510>
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	0412      	lsls	r2, r2, #16
 80015a4:	4310      	orrs	r0, r2
 80015a6:	4662      	mov	r2, ip
 80015a8:	2a38      	cmp	r2, #56	; 0x38
 80015aa:	dd00      	ble.n	80015ae <__aeabi_dadd+0x2fe>
 80015ac:	e10f      	b.n	80017ce <__aeabi_dadd+0x51e>
 80015ae:	2a1f      	cmp	r2, #31
 80015b0:	dd00      	ble.n	80015b4 <__aeabi_dadd+0x304>
 80015b2:	e180      	b.n	80018b6 <__aeabi_dadd+0x606>
 80015b4:	4664      	mov	r4, ip
 80015b6:	2220      	movs	r2, #32
 80015b8:	001e      	movs	r6, r3
 80015ba:	1b12      	subs	r2, r2, r4
 80015bc:	4667      	mov	r7, ip
 80015be:	0004      	movs	r4, r0
 80015c0:	4093      	lsls	r3, r2
 80015c2:	4094      	lsls	r4, r2
 80015c4:	40fe      	lsrs	r6, r7
 80015c6:	1e5a      	subs	r2, r3, #1
 80015c8:	4193      	sbcs	r3, r2
 80015ca:	40f8      	lsrs	r0, r7
 80015cc:	4334      	orrs	r4, r6
 80015ce:	431c      	orrs	r4, r3
 80015d0:	4480      	add	r8, r0
 80015d2:	1864      	adds	r4, r4, r1
 80015d4:	428c      	cmp	r4, r1
 80015d6:	41bf      	sbcs	r7, r7
 80015d8:	427f      	negs	r7, r7
 80015da:	464e      	mov	r6, r9
 80015dc:	4447      	add	r7, r8
 80015de:	e7a6      	b.n	800152e <__aeabi_dadd+0x27e>
 80015e0:	4642      	mov	r2, r8
 80015e2:	430a      	orrs	r2, r1
 80015e4:	0011      	movs	r1, r2
 80015e6:	1e4a      	subs	r2, r1, #1
 80015e8:	4191      	sbcs	r1, r2
 80015ea:	e6ad      	b.n	8001348 <__aeabi_dadd+0x98>
 80015ec:	4c0c      	ldr	r4, [pc, #48]	; (8001620 <__aeabi_dadd+0x370>)
 80015ee:	1c72      	adds	r2, r6, #1
 80015f0:	4222      	tst	r2, r4
 80015f2:	d000      	beq.n	80015f6 <__aeabi_dadd+0x346>
 80015f4:	e0a1      	b.n	800173a <__aeabi_dadd+0x48a>
 80015f6:	0002      	movs	r2, r0
 80015f8:	431a      	orrs	r2, r3
 80015fa:	2e00      	cmp	r6, #0
 80015fc:	d000      	beq.n	8001600 <__aeabi_dadd+0x350>
 80015fe:	e0fa      	b.n	80017f6 <__aeabi_dadd+0x546>
 8001600:	2a00      	cmp	r2, #0
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x356>
 8001604:	e145      	b.n	8001892 <__aeabi_dadd+0x5e2>
 8001606:	003a      	movs	r2, r7
 8001608:	430a      	orrs	r2, r1
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x35e>
 800160c:	e146      	b.n	800189c <__aeabi_dadd+0x5ec>
 800160e:	0742      	lsls	r2, r0, #29
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	4313      	orrs	r3, r2
 8001614:	08c0      	lsrs	r0, r0, #3
 8001616:	e77b      	b.n	8001510 <__aeabi_dadd+0x260>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff
 8001620:	000007fe 	.word	0x000007fe
 8001624:	4647      	mov	r7, r8
 8001626:	1a5c      	subs	r4, r3, r1
 8001628:	1bc2      	subs	r2, r0, r7
 800162a:	42a3      	cmp	r3, r4
 800162c:	41bf      	sbcs	r7, r7
 800162e:	427f      	negs	r7, r7
 8001630:	46b9      	mov	r9, r7
 8001632:	0017      	movs	r7, r2
 8001634:	464a      	mov	r2, r9
 8001636:	1abf      	subs	r7, r7, r2
 8001638:	023a      	lsls	r2, r7, #8
 800163a:	d500      	bpl.n	800163e <__aeabi_dadd+0x38e>
 800163c:	e08d      	b.n	800175a <__aeabi_dadd+0x4aa>
 800163e:	0023      	movs	r3, r4
 8001640:	433b      	orrs	r3, r7
 8001642:	d000      	beq.n	8001646 <__aeabi_dadd+0x396>
 8001644:	e68a      	b.n	800135c <__aeabi_dadd+0xac>
 8001646:	2000      	movs	r0, #0
 8001648:	2500      	movs	r5, #0
 800164a:	e761      	b.n	8001510 <__aeabi_dadd+0x260>
 800164c:	4cb4      	ldr	r4, [pc, #720]	; (8001920 <__aeabi_dadd+0x670>)
 800164e:	45a1      	cmp	r9, r4
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x3a4>
 8001652:	e0ad      	b.n	80017b0 <__aeabi_dadd+0x500>
 8001654:	2480      	movs	r4, #128	; 0x80
 8001656:	0424      	lsls	r4, r4, #16
 8001658:	4320      	orrs	r0, r4
 800165a:	4664      	mov	r4, ip
 800165c:	2c38      	cmp	r4, #56	; 0x38
 800165e:	dc3d      	bgt.n	80016dc <__aeabi_dadd+0x42c>
 8001660:	4662      	mov	r2, ip
 8001662:	2c1f      	cmp	r4, #31
 8001664:	dd00      	ble.n	8001668 <__aeabi_dadd+0x3b8>
 8001666:	e0b7      	b.n	80017d8 <__aeabi_dadd+0x528>
 8001668:	2520      	movs	r5, #32
 800166a:	001e      	movs	r6, r3
 800166c:	1b2d      	subs	r5, r5, r4
 800166e:	0004      	movs	r4, r0
 8001670:	40ab      	lsls	r3, r5
 8001672:	40ac      	lsls	r4, r5
 8001674:	40d6      	lsrs	r6, r2
 8001676:	40d0      	lsrs	r0, r2
 8001678:	4642      	mov	r2, r8
 800167a:	1e5d      	subs	r5, r3, #1
 800167c:	41ab      	sbcs	r3, r5
 800167e:	4334      	orrs	r4, r6
 8001680:	1a12      	subs	r2, r2, r0
 8001682:	4690      	mov	r8, r2
 8001684:	4323      	orrs	r3, r4
 8001686:	e02c      	b.n	80016e2 <__aeabi_dadd+0x432>
 8001688:	0742      	lsls	r2, r0, #29
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	4313      	orrs	r3, r2
 800168e:	08c0      	lsrs	r0, r0, #3
 8001690:	e73b      	b.n	800150a <__aeabi_dadd+0x25a>
 8001692:	185c      	adds	r4, r3, r1
 8001694:	429c      	cmp	r4, r3
 8001696:	419b      	sbcs	r3, r3
 8001698:	4440      	add	r0, r8
 800169a:	425b      	negs	r3, r3
 800169c:	18c7      	adds	r7, r0, r3
 800169e:	2601      	movs	r6, #1
 80016a0:	023b      	lsls	r3, r7, #8
 80016a2:	d400      	bmi.n	80016a6 <__aeabi_dadd+0x3f6>
 80016a4:	e729      	b.n	80014fa <__aeabi_dadd+0x24a>
 80016a6:	2602      	movs	r6, #2
 80016a8:	4a9e      	ldr	r2, [pc, #632]	; (8001924 <__aeabi_dadd+0x674>)
 80016aa:	0863      	lsrs	r3, r4, #1
 80016ac:	4017      	ands	r7, r2
 80016ae:	2201      	movs	r2, #1
 80016b0:	4014      	ands	r4, r2
 80016b2:	431c      	orrs	r4, r3
 80016b4:	07fb      	lsls	r3, r7, #31
 80016b6:	431c      	orrs	r4, r3
 80016b8:	087f      	lsrs	r7, r7, #1
 80016ba:	e673      	b.n	80013a4 <__aeabi_dadd+0xf4>
 80016bc:	4644      	mov	r4, r8
 80016be:	3a20      	subs	r2, #32
 80016c0:	40d4      	lsrs	r4, r2
 80016c2:	4662      	mov	r2, ip
 80016c4:	2a20      	cmp	r2, #32
 80016c6:	d005      	beq.n	80016d4 <__aeabi_dadd+0x424>
 80016c8:	4667      	mov	r7, ip
 80016ca:	2240      	movs	r2, #64	; 0x40
 80016cc:	1bd2      	subs	r2, r2, r7
 80016ce:	4647      	mov	r7, r8
 80016d0:	4097      	lsls	r7, r2
 80016d2:	4339      	orrs	r1, r7
 80016d4:	1e4a      	subs	r2, r1, #1
 80016d6:	4191      	sbcs	r1, r2
 80016d8:	4321      	orrs	r1, r4
 80016da:	e635      	b.n	8001348 <__aeabi_dadd+0x98>
 80016dc:	4303      	orrs	r3, r0
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	4183      	sbcs	r3, r0
 80016e2:	1acc      	subs	r4, r1, r3
 80016e4:	42a1      	cmp	r1, r4
 80016e6:	41bf      	sbcs	r7, r7
 80016e8:	4643      	mov	r3, r8
 80016ea:	427f      	negs	r7, r7
 80016ec:	4655      	mov	r5, sl
 80016ee:	464e      	mov	r6, r9
 80016f0:	1bdf      	subs	r7, r3, r7
 80016f2:	e62e      	b.n	8001352 <__aeabi_dadd+0xa2>
 80016f4:	0002      	movs	r2, r0
 80016f6:	431a      	orrs	r2, r3
 80016f8:	d100      	bne.n	80016fc <__aeabi_dadd+0x44c>
 80016fa:	e0bd      	b.n	8001878 <__aeabi_dadd+0x5c8>
 80016fc:	4662      	mov	r2, ip
 80016fe:	4664      	mov	r4, ip
 8001700:	3a01      	subs	r2, #1
 8001702:	2c01      	cmp	r4, #1
 8001704:	d100      	bne.n	8001708 <__aeabi_dadd+0x458>
 8001706:	e0e5      	b.n	80018d4 <__aeabi_dadd+0x624>
 8001708:	4c85      	ldr	r4, [pc, #532]	; (8001920 <__aeabi_dadd+0x670>)
 800170a:	45a4      	cmp	ip, r4
 800170c:	d058      	beq.n	80017c0 <__aeabi_dadd+0x510>
 800170e:	4694      	mov	ip, r2
 8001710:	e749      	b.n	80015a6 <__aeabi_dadd+0x2f6>
 8001712:	4664      	mov	r4, ip
 8001714:	2220      	movs	r2, #32
 8001716:	1b12      	subs	r2, r2, r4
 8001718:	4644      	mov	r4, r8
 800171a:	4094      	lsls	r4, r2
 800171c:	000f      	movs	r7, r1
 800171e:	46a1      	mov	r9, r4
 8001720:	4664      	mov	r4, ip
 8001722:	4091      	lsls	r1, r2
 8001724:	40e7      	lsrs	r7, r4
 8001726:	464c      	mov	r4, r9
 8001728:	1e4a      	subs	r2, r1, #1
 800172a:	4191      	sbcs	r1, r2
 800172c:	433c      	orrs	r4, r7
 800172e:	4642      	mov	r2, r8
 8001730:	430c      	orrs	r4, r1
 8001732:	4661      	mov	r1, ip
 8001734:	40ca      	lsrs	r2, r1
 8001736:	1880      	adds	r0, r0, r2
 8001738:	e6f4      	b.n	8001524 <__aeabi_dadd+0x274>
 800173a:	4c79      	ldr	r4, [pc, #484]	; (8001920 <__aeabi_dadd+0x670>)
 800173c:	42a2      	cmp	r2, r4
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x492>
 8001740:	e6fd      	b.n	800153e <__aeabi_dadd+0x28e>
 8001742:	1859      	adds	r1, r3, r1
 8001744:	4299      	cmp	r1, r3
 8001746:	419b      	sbcs	r3, r3
 8001748:	4440      	add	r0, r8
 800174a:	425f      	negs	r7, r3
 800174c:	19c7      	adds	r7, r0, r7
 800174e:	07fc      	lsls	r4, r7, #31
 8001750:	0849      	lsrs	r1, r1, #1
 8001752:	0016      	movs	r6, r2
 8001754:	430c      	orrs	r4, r1
 8001756:	087f      	lsrs	r7, r7, #1
 8001758:	e6cf      	b.n	80014fa <__aeabi_dadd+0x24a>
 800175a:	1acc      	subs	r4, r1, r3
 800175c:	42a1      	cmp	r1, r4
 800175e:	41bf      	sbcs	r7, r7
 8001760:	4643      	mov	r3, r8
 8001762:	427f      	negs	r7, r7
 8001764:	1a18      	subs	r0, r3, r0
 8001766:	4655      	mov	r5, sl
 8001768:	1bc7      	subs	r7, r0, r7
 800176a:	e5f7      	b.n	800135c <__aeabi_dadd+0xac>
 800176c:	08c9      	lsrs	r1, r1, #3
 800176e:	077b      	lsls	r3, r7, #29
 8001770:	4655      	mov	r5, sl
 8001772:	430b      	orrs	r3, r1
 8001774:	08f8      	lsrs	r0, r7, #3
 8001776:	e6c8      	b.n	800150a <__aeabi_dadd+0x25a>
 8001778:	2c00      	cmp	r4, #0
 800177a:	d000      	beq.n	800177e <__aeabi_dadd+0x4ce>
 800177c:	e081      	b.n	8001882 <__aeabi_dadd+0x5d2>
 800177e:	4643      	mov	r3, r8
 8001780:	430b      	orrs	r3, r1
 8001782:	d115      	bne.n	80017b0 <__aeabi_dadd+0x500>
 8001784:	2080      	movs	r0, #128	; 0x80
 8001786:	2500      	movs	r5, #0
 8001788:	0300      	lsls	r0, r0, #12
 800178a:	e6e3      	b.n	8001554 <__aeabi_dadd+0x2a4>
 800178c:	1a5c      	subs	r4, r3, r1
 800178e:	42a3      	cmp	r3, r4
 8001790:	419b      	sbcs	r3, r3
 8001792:	1bc7      	subs	r7, r0, r7
 8001794:	425b      	negs	r3, r3
 8001796:	2601      	movs	r6, #1
 8001798:	1aff      	subs	r7, r7, r3
 800179a:	e5da      	b.n	8001352 <__aeabi_dadd+0xa2>
 800179c:	0742      	lsls	r2, r0, #29
 800179e:	08db      	lsrs	r3, r3, #3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	08c0      	lsrs	r0, r0, #3
 80017a4:	e6d2      	b.n	800154c <__aeabi_dadd+0x29c>
 80017a6:	0742      	lsls	r2, r0, #29
 80017a8:	08db      	lsrs	r3, r3, #3
 80017aa:	4313      	orrs	r3, r2
 80017ac:	08c0      	lsrs	r0, r0, #3
 80017ae:	e6ac      	b.n	800150a <__aeabi_dadd+0x25a>
 80017b0:	4643      	mov	r3, r8
 80017b2:	4642      	mov	r2, r8
 80017b4:	08c9      	lsrs	r1, r1, #3
 80017b6:	075b      	lsls	r3, r3, #29
 80017b8:	4655      	mov	r5, sl
 80017ba:	430b      	orrs	r3, r1
 80017bc:	08d0      	lsrs	r0, r2, #3
 80017be:	e6c5      	b.n	800154c <__aeabi_dadd+0x29c>
 80017c0:	4643      	mov	r3, r8
 80017c2:	4642      	mov	r2, r8
 80017c4:	075b      	lsls	r3, r3, #29
 80017c6:	08c9      	lsrs	r1, r1, #3
 80017c8:	430b      	orrs	r3, r1
 80017ca:	08d0      	lsrs	r0, r2, #3
 80017cc:	e6be      	b.n	800154c <__aeabi_dadd+0x29c>
 80017ce:	4303      	orrs	r3, r0
 80017d0:	001c      	movs	r4, r3
 80017d2:	1e63      	subs	r3, r4, #1
 80017d4:	419c      	sbcs	r4, r3
 80017d6:	e6fc      	b.n	80015d2 <__aeabi_dadd+0x322>
 80017d8:	0002      	movs	r2, r0
 80017da:	3c20      	subs	r4, #32
 80017dc:	40e2      	lsrs	r2, r4
 80017de:	0014      	movs	r4, r2
 80017e0:	4662      	mov	r2, ip
 80017e2:	2a20      	cmp	r2, #32
 80017e4:	d003      	beq.n	80017ee <__aeabi_dadd+0x53e>
 80017e6:	2540      	movs	r5, #64	; 0x40
 80017e8:	1aad      	subs	r5, r5, r2
 80017ea:	40a8      	lsls	r0, r5
 80017ec:	4303      	orrs	r3, r0
 80017ee:	1e58      	subs	r0, r3, #1
 80017f0:	4183      	sbcs	r3, r0
 80017f2:	4323      	orrs	r3, r4
 80017f4:	e775      	b.n	80016e2 <__aeabi_dadd+0x432>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d0e2      	beq.n	80017c0 <__aeabi_dadd+0x510>
 80017fa:	003a      	movs	r2, r7
 80017fc:	430a      	orrs	r2, r1
 80017fe:	d0cd      	beq.n	800179c <__aeabi_dadd+0x4ec>
 8001800:	0742      	lsls	r2, r0, #29
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	4313      	orrs	r3, r2
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	08c0      	lsrs	r0, r0, #3
 800180a:	0312      	lsls	r2, r2, #12
 800180c:	4210      	tst	r0, r2
 800180e:	d006      	beq.n	800181e <__aeabi_dadd+0x56e>
 8001810:	08fc      	lsrs	r4, r7, #3
 8001812:	4214      	tst	r4, r2
 8001814:	d103      	bne.n	800181e <__aeabi_dadd+0x56e>
 8001816:	0020      	movs	r0, r4
 8001818:	08cb      	lsrs	r3, r1, #3
 800181a:	077a      	lsls	r2, r7, #29
 800181c:	4313      	orrs	r3, r2
 800181e:	0f5a      	lsrs	r2, r3, #29
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	0752      	lsls	r2, r2, #29
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	4313      	orrs	r3, r2
 8001828:	e690      	b.n	800154c <__aeabi_dadd+0x29c>
 800182a:	4643      	mov	r3, r8
 800182c:	430b      	orrs	r3, r1
 800182e:	d100      	bne.n	8001832 <__aeabi_dadd+0x582>
 8001830:	e709      	b.n	8001646 <__aeabi_dadd+0x396>
 8001832:	4643      	mov	r3, r8
 8001834:	4642      	mov	r2, r8
 8001836:	08c9      	lsrs	r1, r1, #3
 8001838:	075b      	lsls	r3, r3, #29
 800183a:	4655      	mov	r5, sl
 800183c:	430b      	orrs	r3, r1
 800183e:	08d0      	lsrs	r0, r2, #3
 8001840:	e666      	b.n	8001510 <__aeabi_dadd+0x260>
 8001842:	1acc      	subs	r4, r1, r3
 8001844:	42a1      	cmp	r1, r4
 8001846:	4189      	sbcs	r1, r1
 8001848:	1a3f      	subs	r7, r7, r0
 800184a:	4249      	negs	r1, r1
 800184c:	4655      	mov	r5, sl
 800184e:	2601      	movs	r6, #1
 8001850:	1a7f      	subs	r7, r7, r1
 8001852:	e57e      	b.n	8001352 <__aeabi_dadd+0xa2>
 8001854:	4642      	mov	r2, r8
 8001856:	1a5c      	subs	r4, r3, r1
 8001858:	1a87      	subs	r7, r0, r2
 800185a:	42a3      	cmp	r3, r4
 800185c:	4192      	sbcs	r2, r2
 800185e:	4252      	negs	r2, r2
 8001860:	1abf      	subs	r7, r7, r2
 8001862:	023a      	lsls	r2, r7, #8
 8001864:	d53d      	bpl.n	80018e2 <__aeabi_dadd+0x632>
 8001866:	1acc      	subs	r4, r1, r3
 8001868:	42a1      	cmp	r1, r4
 800186a:	4189      	sbcs	r1, r1
 800186c:	4643      	mov	r3, r8
 800186e:	4249      	negs	r1, r1
 8001870:	1a1f      	subs	r7, r3, r0
 8001872:	4655      	mov	r5, sl
 8001874:	1a7f      	subs	r7, r7, r1
 8001876:	e595      	b.n	80013a4 <__aeabi_dadd+0xf4>
 8001878:	077b      	lsls	r3, r7, #29
 800187a:	08c9      	lsrs	r1, r1, #3
 800187c:	430b      	orrs	r3, r1
 800187e:	08f8      	lsrs	r0, r7, #3
 8001880:	e643      	b.n	800150a <__aeabi_dadd+0x25a>
 8001882:	4644      	mov	r4, r8
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	430c      	orrs	r4, r1
 8001888:	d130      	bne.n	80018ec <__aeabi_dadd+0x63c>
 800188a:	0742      	lsls	r2, r0, #29
 800188c:	4313      	orrs	r3, r2
 800188e:	08c0      	lsrs	r0, r0, #3
 8001890:	e65c      	b.n	800154c <__aeabi_dadd+0x29c>
 8001892:	077b      	lsls	r3, r7, #29
 8001894:	08c9      	lsrs	r1, r1, #3
 8001896:	430b      	orrs	r3, r1
 8001898:	08f8      	lsrs	r0, r7, #3
 800189a:	e639      	b.n	8001510 <__aeabi_dadd+0x260>
 800189c:	185c      	adds	r4, r3, r1
 800189e:	429c      	cmp	r4, r3
 80018a0:	419b      	sbcs	r3, r3
 80018a2:	4440      	add	r0, r8
 80018a4:	425b      	negs	r3, r3
 80018a6:	18c7      	adds	r7, r0, r3
 80018a8:	023b      	lsls	r3, r7, #8
 80018aa:	d400      	bmi.n	80018ae <__aeabi_dadd+0x5fe>
 80018ac:	e625      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <__aeabi_dadd+0x674>)
 80018b0:	2601      	movs	r6, #1
 80018b2:	401f      	ands	r7, r3
 80018b4:	e621      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018b6:	0004      	movs	r4, r0
 80018b8:	3a20      	subs	r2, #32
 80018ba:	40d4      	lsrs	r4, r2
 80018bc:	4662      	mov	r2, ip
 80018be:	2a20      	cmp	r2, #32
 80018c0:	d004      	beq.n	80018cc <__aeabi_dadd+0x61c>
 80018c2:	2240      	movs	r2, #64	; 0x40
 80018c4:	4666      	mov	r6, ip
 80018c6:	1b92      	subs	r2, r2, r6
 80018c8:	4090      	lsls	r0, r2
 80018ca:	4303      	orrs	r3, r0
 80018cc:	1e5a      	subs	r2, r3, #1
 80018ce:	4193      	sbcs	r3, r2
 80018d0:	431c      	orrs	r4, r3
 80018d2:	e67e      	b.n	80015d2 <__aeabi_dadd+0x322>
 80018d4:	185c      	adds	r4, r3, r1
 80018d6:	428c      	cmp	r4, r1
 80018d8:	4189      	sbcs	r1, r1
 80018da:	4440      	add	r0, r8
 80018dc:	4249      	negs	r1, r1
 80018de:	1847      	adds	r7, r0, r1
 80018e0:	e6dd      	b.n	800169e <__aeabi_dadd+0x3ee>
 80018e2:	0023      	movs	r3, r4
 80018e4:	433b      	orrs	r3, r7
 80018e6:	d100      	bne.n	80018ea <__aeabi_dadd+0x63a>
 80018e8:	e6ad      	b.n	8001646 <__aeabi_dadd+0x396>
 80018ea:	e606      	b.n	80014fa <__aeabi_dadd+0x24a>
 80018ec:	0744      	lsls	r4, r0, #29
 80018ee:	4323      	orrs	r3, r4
 80018f0:	2480      	movs	r4, #128	; 0x80
 80018f2:	08c0      	lsrs	r0, r0, #3
 80018f4:	0324      	lsls	r4, r4, #12
 80018f6:	4220      	tst	r0, r4
 80018f8:	d008      	beq.n	800190c <__aeabi_dadd+0x65c>
 80018fa:	4642      	mov	r2, r8
 80018fc:	08d6      	lsrs	r6, r2, #3
 80018fe:	4226      	tst	r6, r4
 8001900:	d104      	bne.n	800190c <__aeabi_dadd+0x65c>
 8001902:	4655      	mov	r5, sl
 8001904:	0030      	movs	r0, r6
 8001906:	08cb      	lsrs	r3, r1, #3
 8001908:	0751      	lsls	r1, r2, #29
 800190a:	430b      	orrs	r3, r1
 800190c:	0f5a      	lsrs	r2, r3, #29
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	0752      	lsls	r2, r2, #29
 8001914:	4313      	orrs	r3, r2
 8001916:	e619      	b.n	800154c <__aeabi_dadd+0x29c>
 8001918:	2300      	movs	r3, #0
 800191a:	4a01      	ldr	r2, [pc, #4]	; (8001920 <__aeabi_dadd+0x670>)
 800191c:	001f      	movs	r7, r3
 800191e:	e55e      	b.n	80013de <__aeabi_dadd+0x12e>
 8001920:	000007ff 	.word	0x000007ff
 8001924:	ff7fffff 	.word	0xff7fffff

08001928 <__aeabi_ddiv>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	4657      	mov	r7, sl
 800192c:	464e      	mov	r6, r9
 800192e:	4645      	mov	r5, r8
 8001930:	46de      	mov	lr, fp
 8001932:	b5e0      	push	{r5, r6, r7, lr}
 8001934:	4681      	mov	r9, r0
 8001936:	0005      	movs	r5, r0
 8001938:	030c      	lsls	r4, r1, #12
 800193a:	0048      	lsls	r0, r1, #1
 800193c:	4692      	mov	sl, r2
 800193e:	001f      	movs	r7, r3
 8001940:	b085      	sub	sp, #20
 8001942:	0b24      	lsrs	r4, r4, #12
 8001944:	0d40      	lsrs	r0, r0, #21
 8001946:	0fce      	lsrs	r6, r1, #31
 8001948:	2800      	cmp	r0, #0
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x26>
 800194c:	e156      	b.n	8001bfc <__aeabi_ddiv+0x2d4>
 800194e:	4bd4      	ldr	r3, [pc, #848]	; (8001ca0 <__aeabi_ddiv+0x378>)
 8001950:	4298      	cmp	r0, r3
 8001952:	d100      	bne.n	8001956 <__aeabi_ddiv+0x2e>
 8001954:	e172      	b.n	8001c3c <__aeabi_ddiv+0x314>
 8001956:	0f6b      	lsrs	r3, r5, #29
 8001958:	00e4      	lsls	r4, r4, #3
 800195a:	431c      	orrs	r4, r3
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	4323      	orrs	r3, r4
 8001962:	4698      	mov	r8, r3
 8001964:	4bcf      	ldr	r3, [pc, #828]	; (8001ca4 <__aeabi_ddiv+0x37c>)
 8001966:	00ed      	lsls	r5, r5, #3
 8001968:	469b      	mov	fp, r3
 800196a:	2300      	movs	r3, #0
 800196c:	4699      	mov	r9, r3
 800196e:	4483      	add	fp, r0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	033c      	lsls	r4, r7, #12
 8001974:	007b      	lsls	r3, r7, #1
 8001976:	4650      	mov	r0, sl
 8001978:	0b24      	lsrs	r4, r4, #12
 800197a:	0d5b      	lsrs	r3, r3, #21
 800197c:	0fff      	lsrs	r7, r7, #31
 800197e:	2b00      	cmp	r3, #0
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x5c>
 8001982:	e11f      	b.n	8001bc4 <__aeabi_ddiv+0x29c>
 8001984:	4ac6      	ldr	r2, [pc, #792]	; (8001ca0 <__aeabi_ddiv+0x378>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d100      	bne.n	800198c <__aeabi_ddiv+0x64>
 800198a:	e162      	b.n	8001c52 <__aeabi_ddiv+0x32a>
 800198c:	49c5      	ldr	r1, [pc, #788]	; (8001ca4 <__aeabi_ddiv+0x37c>)
 800198e:	0f42      	lsrs	r2, r0, #29
 8001990:	468c      	mov	ip, r1
 8001992:	00e4      	lsls	r4, r4, #3
 8001994:	4659      	mov	r1, fp
 8001996:	4314      	orrs	r4, r2
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	4463      	add	r3, ip
 800199c:	0412      	lsls	r2, r2, #16
 800199e:	1acb      	subs	r3, r1, r3
 80019a0:	4314      	orrs	r4, r2
 80019a2:	469b      	mov	fp, r3
 80019a4:	00c2      	lsls	r2, r0, #3
 80019a6:	2000      	movs	r0, #0
 80019a8:	0033      	movs	r3, r6
 80019aa:	407b      	eors	r3, r7
 80019ac:	469a      	mov	sl, r3
 80019ae:	464b      	mov	r3, r9
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d827      	bhi.n	8001a04 <__aeabi_ddiv+0xdc>
 80019b4:	49bc      	ldr	r1, [pc, #752]	; (8001ca8 <__aeabi_ddiv+0x380>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	58cb      	ldr	r3, [r1, r3]
 80019ba:	469f      	mov	pc, r3
 80019bc:	46b2      	mov	sl, r6
 80019be:	9b00      	ldr	r3, [sp, #0]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d016      	beq.n	80019f2 <__aeabi_ddiv+0xca>
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d100      	bne.n	80019ca <__aeabi_ddiv+0xa2>
 80019c8:	e28e      	b.n	8001ee8 <__aeabi_ddiv+0x5c0>
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d000      	beq.n	80019d0 <__aeabi_ddiv+0xa8>
 80019ce:	e0d9      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2400      	movs	r4, #0
 80019d4:	2500      	movs	r5, #0
 80019d6:	4652      	mov	r2, sl
 80019d8:	051b      	lsls	r3, r3, #20
 80019da:	4323      	orrs	r3, r4
 80019dc:	07d2      	lsls	r2, r2, #31
 80019de:	4313      	orrs	r3, r2
 80019e0:	0028      	movs	r0, r5
 80019e2:	0019      	movs	r1, r3
 80019e4:	b005      	add	sp, #20
 80019e6:	bcf0      	pop	{r4, r5, r6, r7}
 80019e8:	46bb      	mov	fp, r7
 80019ea:	46b2      	mov	sl, r6
 80019ec:	46a9      	mov	r9, r5
 80019ee:	46a0      	mov	r8, r4
 80019f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f2:	2400      	movs	r4, #0
 80019f4:	2500      	movs	r5, #0
 80019f6:	4baa      	ldr	r3, [pc, #680]	; (8001ca0 <__aeabi_ddiv+0x378>)
 80019f8:	e7ed      	b.n	80019d6 <__aeabi_ddiv+0xae>
 80019fa:	46ba      	mov	sl, r7
 80019fc:	46a0      	mov	r8, r4
 80019fe:	0015      	movs	r5, r2
 8001a00:	9000      	str	r0, [sp, #0]
 8001a02:	e7dc      	b.n	80019be <__aeabi_ddiv+0x96>
 8001a04:	4544      	cmp	r4, r8
 8001a06:	d200      	bcs.n	8001a0a <__aeabi_ddiv+0xe2>
 8001a08:	e1c7      	b.n	8001d9a <__aeabi_ddiv+0x472>
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0xe6>
 8001a0c:	e1c2      	b.n	8001d94 <__aeabi_ddiv+0x46c>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	425b      	negs	r3, r3
 8001a12:	469c      	mov	ip, r3
 8001a14:	002e      	movs	r6, r5
 8001a16:	4640      	mov	r0, r8
 8001a18:	2500      	movs	r5, #0
 8001a1a:	44e3      	add	fp, ip
 8001a1c:	0223      	lsls	r3, r4, #8
 8001a1e:	0e14      	lsrs	r4, r2, #24
 8001a20:	431c      	orrs	r4, r3
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	4699      	mov	r9, r3
 8001a26:	0423      	lsls	r3, r4, #16
 8001a28:	0c1f      	lsrs	r7, r3, #16
 8001a2a:	0212      	lsls	r2, r2, #8
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	9701      	str	r7, [sp, #4]
 8001a32:	f7fe fc09 	bl	8000248 <__aeabi_uidivmod>
 8001a36:	0002      	movs	r2, r0
 8001a38:	437a      	muls	r2, r7
 8001a3a:	040b      	lsls	r3, r1, #16
 8001a3c:	0c31      	lsrs	r1, r6, #16
 8001a3e:	4680      	mov	r8, r0
 8001a40:	4319      	orrs	r1, r3
 8001a42:	428a      	cmp	r2, r1
 8001a44:	d907      	bls.n	8001a56 <__aeabi_ddiv+0x12e>
 8001a46:	2301      	movs	r3, #1
 8001a48:	425b      	negs	r3, r3
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	1909      	adds	r1, r1, r4
 8001a4e:	44e0      	add	r8, ip
 8001a50:	428c      	cmp	r4, r1
 8001a52:	d800      	bhi.n	8001a56 <__aeabi_ddiv+0x12e>
 8001a54:	e207      	b.n	8001e66 <__aeabi_ddiv+0x53e>
 8001a56:	1a88      	subs	r0, r1, r2
 8001a58:	4649      	mov	r1, r9
 8001a5a:	f7fe fbf5 	bl	8000248 <__aeabi_uidivmod>
 8001a5e:	0409      	lsls	r1, r1, #16
 8001a60:	468c      	mov	ip, r1
 8001a62:	0431      	lsls	r1, r6, #16
 8001a64:	4666      	mov	r6, ip
 8001a66:	9a01      	ldr	r2, [sp, #4]
 8001a68:	0c09      	lsrs	r1, r1, #16
 8001a6a:	4342      	muls	r2, r0
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	4331      	orrs	r1, r6
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d904      	bls.n	8001a7e <__aeabi_ddiv+0x156>
 8001a74:	1909      	adds	r1, r1, r4
 8001a76:	3b01      	subs	r3, #1
 8001a78:	428c      	cmp	r4, r1
 8001a7a:	d800      	bhi.n	8001a7e <__aeabi_ddiv+0x156>
 8001a7c:	e1ed      	b.n	8001e5a <__aeabi_ddiv+0x532>
 8001a7e:	1a88      	subs	r0, r1, r2
 8001a80:	4642      	mov	r2, r8
 8001a82:	0412      	lsls	r2, r2, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4690      	mov	r8, r2
 8001a88:	4641      	mov	r1, r8
 8001a8a:	9b00      	ldr	r3, [sp, #0]
 8001a8c:	040e      	lsls	r6, r1, #16
 8001a8e:	0c1b      	lsrs	r3, r3, #16
 8001a90:	001f      	movs	r7, r3
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	9b00      	ldr	r3, [sp, #0]
 8001a96:	0c36      	lsrs	r6, r6, #16
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	0c19      	lsrs	r1, r3, #16
 8001a9c:	000b      	movs	r3, r1
 8001a9e:	4373      	muls	r3, r6
 8001aa0:	0c12      	lsrs	r2, r2, #16
 8001aa2:	437e      	muls	r6, r7
 8001aa4:	9103      	str	r1, [sp, #12]
 8001aa6:	4351      	muls	r1, r2
 8001aa8:	437a      	muls	r2, r7
 8001aaa:	0c1f      	lsrs	r7, r3, #16
 8001aac:	46bc      	mov	ip, r7
 8001aae:	1876      	adds	r6, r6, r1
 8001ab0:	4466      	add	r6, ip
 8001ab2:	42b1      	cmp	r1, r6
 8001ab4:	d903      	bls.n	8001abe <__aeabi_ddiv+0x196>
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	0249      	lsls	r1, r1, #9
 8001aba:	468c      	mov	ip, r1
 8001abc:	4462      	add	r2, ip
 8001abe:	0c31      	lsrs	r1, r6, #16
 8001ac0:	188a      	adds	r2, r1, r2
 8001ac2:	0431      	lsls	r1, r6, #16
 8001ac4:	041e      	lsls	r6, r3, #16
 8001ac6:	0c36      	lsrs	r6, r6, #16
 8001ac8:	198e      	adds	r6, r1, r6
 8001aca:	4290      	cmp	r0, r2
 8001acc:	d302      	bcc.n	8001ad4 <__aeabi_ddiv+0x1ac>
 8001ace:	d112      	bne.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001ad0:	42b5      	cmp	r5, r6
 8001ad2:	d210      	bcs.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	1e59      	subs	r1, r3, #1
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	469c      	mov	ip, r3
 8001adc:	4465      	add	r5, ip
 8001ade:	001f      	movs	r7, r3
 8001ae0:	429d      	cmp	r5, r3
 8001ae2:	419b      	sbcs	r3, r3
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	191b      	adds	r3, r3, r4
 8001ae8:	18c0      	adds	r0, r0, r3
 8001aea:	4284      	cmp	r4, r0
 8001aec:	d200      	bcs.n	8001af0 <__aeabi_ddiv+0x1c8>
 8001aee:	e1a0      	b.n	8001e32 <__aeabi_ddiv+0x50a>
 8001af0:	d100      	bne.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001af2:	e19b      	b.n	8001e2c <__aeabi_ddiv+0x504>
 8001af4:	4688      	mov	r8, r1
 8001af6:	1bae      	subs	r6, r5, r6
 8001af8:	42b5      	cmp	r5, r6
 8001afa:	41ad      	sbcs	r5, r5
 8001afc:	1a80      	subs	r0, r0, r2
 8001afe:	426d      	negs	r5, r5
 8001b00:	1b40      	subs	r0, r0, r5
 8001b02:	4284      	cmp	r4, r0
 8001b04:	d100      	bne.n	8001b08 <__aeabi_ddiv+0x1e0>
 8001b06:	e1d5      	b.n	8001eb4 <__aeabi_ddiv+0x58c>
 8001b08:	4649      	mov	r1, r9
 8001b0a:	f7fe fb9d 	bl	8000248 <__aeabi_uidivmod>
 8001b0e:	9a01      	ldr	r2, [sp, #4]
 8001b10:	040b      	lsls	r3, r1, #16
 8001b12:	4342      	muls	r2, r0
 8001b14:	0c31      	lsrs	r1, r6, #16
 8001b16:	0005      	movs	r5, r0
 8001b18:	4319      	orrs	r1, r3
 8001b1a:	428a      	cmp	r2, r1
 8001b1c:	d900      	bls.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001b1e:	e16c      	b.n	8001dfa <__aeabi_ddiv+0x4d2>
 8001b20:	1a88      	subs	r0, r1, r2
 8001b22:	4649      	mov	r1, r9
 8001b24:	f7fe fb90 	bl	8000248 <__aeabi_uidivmod>
 8001b28:	9a01      	ldr	r2, [sp, #4]
 8001b2a:	0436      	lsls	r6, r6, #16
 8001b2c:	4342      	muls	r2, r0
 8001b2e:	0409      	lsls	r1, r1, #16
 8001b30:	0c36      	lsrs	r6, r6, #16
 8001b32:	0003      	movs	r3, r0
 8001b34:	430e      	orrs	r6, r1
 8001b36:	42b2      	cmp	r2, r6
 8001b38:	d900      	bls.n	8001b3c <__aeabi_ddiv+0x214>
 8001b3a:	e153      	b.n	8001de4 <__aeabi_ddiv+0x4bc>
 8001b3c:	9803      	ldr	r0, [sp, #12]
 8001b3e:	1ab6      	subs	r6, r6, r2
 8001b40:	0002      	movs	r2, r0
 8001b42:	042d      	lsls	r5, r5, #16
 8001b44:	431d      	orrs	r5, r3
 8001b46:	9f02      	ldr	r7, [sp, #8]
 8001b48:	042b      	lsls	r3, r5, #16
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	435a      	muls	r2, r3
 8001b4e:	437b      	muls	r3, r7
 8001b50:	469c      	mov	ip, r3
 8001b52:	0c29      	lsrs	r1, r5, #16
 8001b54:	4348      	muls	r0, r1
 8001b56:	0c13      	lsrs	r3, r2, #16
 8001b58:	4484      	add	ip, r0
 8001b5a:	4463      	add	r3, ip
 8001b5c:	4379      	muls	r1, r7
 8001b5e:	4298      	cmp	r0, r3
 8001b60:	d903      	bls.n	8001b6a <__aeabi_ddiv+0x242>
 8001b62:	2080      	movs	r0, #128	; 0x80
 8001b64:	0240      	lsls	r0, r0, #9
 8001b66:	4684      	mov	ip, r0
 8001b68:	4461      	add	r1, ip
 8001b6a:	0c18      	lsrs	r0, r3, #16
 8001b6c:	0412      	lsls	r2, r2, #16
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	0c12      	lsrs	r2, r2, #16
 8001b72:	1841      	adds	r1, r0, r1
 8001b74:	189b      	adds	r3, r3, r2
 8001b76:	428e      	cmp	r6, r1
 8001b78:	d200      	bcs.n	8001b7c <__aeabi_ddiv+0x254>
 8001b7a:	e0ff      	b.n	8001d7c <__aeabi_ddiv+0x454>
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_ddiv+0x258>
 8001b7e:	e0fa      	b.n	8001d76 <__aeabi_ddiv+0x44e>
 8001b80:	2301      	movs	r3, #1
 8001b82:	431d      	orrs	r5, r3
 8001b84:	4a49      	ldr	r2, [pc, #292]	; (8001cac <__aeabi_ddiv+0x384>)
 8001b86:	445a      	add	r2, fp
 8001b88:	2a00      	cmp	r2, #0
 8001b8a:	dc00      	bgt.n	8001b8e <__aeabi_ddiv+0x266>
 8001b8c:	e0aa      	b.n	8001ce4 <__aeabi_ddiv+0x3bc>
 8001b8e:	076b      	lsls	r3, r5, #29
 8001b90:	d000      	beq.n	8001b94 <__aeabi_ddiv+0x26c>
 8001b92:	e13d      	b.n	8001e10 <__aeabi_ddiv+0x4e8>
 8001b94:	08ed      	lsrs	r5, r5, #3
 8001b96:	4643      	mov	r3, r8
 8001b98:	01db      	lsls	r3, r3, #7
 8001b9a:	d506      	bpl.n	8001baa <__aeabi_ddiv+0x282>
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <__aeabi_ddiv+0x388>)
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	4690      	mov	r8, r2
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	445a      	add	r2, fp
 8001baa:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <__aeabi_ddiv+0x38c>)
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dd00      	ble.n	8001bb2 <__aeabi_ddiv+0x28a>
 8001bb0:	e71f      	b.n	80019f2 <__aeabi_ddiv+0xca>
 8001bb2:	4643      	mov	r3, r8
 8001bb4:	075b      	lsls	r3, r3, #29
 8001bb6:	431d      	orrs	r5, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	0552      	lsls	r2, r2, #21
 8001bbc:	025c      	lsls	r4, r3, #9
 8001bbe:	0b24      	lsrs	r4, r4, #12
 8001bc0:	0d53      	lsrs	r3, r2, #21
 8001bc2:	e708      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001bc4:	4652      	mov	r2, sl
 8001bc6:	4322      	orrs	r2, r4
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x2a4>
 8001bca:	e07b      	b.n	8001cc4 <__aeabi_ddiv+0x39c>
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d100      	bne.n	8001bd2 <__aeabi_ddiv+0x2aa>
 8001bd0:	e0fa      	b.n	8001dc8 <__aeabi_ddiv+0x4a0>
 8001bd2:	0020      	movs	r0, r4
 8001bd4:	f001 f99a 	bl	8002f0c <__clzsi2>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	3a0b      	subs	r2, #11
 8001bdc:	231d      	movs	r3, #29
 8001bde:	0001      	movs	r1, r0
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	4652      	mov	r2, sl
 8001be4:	3908      	subs	r1, #8
 8001be6:	40da      	lsrs	r2, r3
 8001be8:	408c      	lsls	r4, r1
 8001bea:	4314      	orrs	r4, r2
 8001bec:	4652      	mov	r2, sl
 8001bee:	408a      	lsls	r2, r1
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <__aeabi_ddiv+0x390>)
 8001bf2:	4458      	add	r0, fp
 8001bf4:	469b      	mov	fp, r3
 8001bf6:	4483      	add	fp, r0
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	e6d5      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4323      	orrs	r3, r4
 8001c00:	4698      	mov	r8, r3
 8001c02:	d044      	beq.n	8001c8e <__aeabi_ddiv+0x366>
 8001c04:	2c00      	cmp	r4, #0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_ddiv+0x2e2>
 8001c08:	e0ce      	b.n	8001da8 <__aeabi_ddiv+0x480>
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f001 f97e 	bl	8002f0c <__clzsi2>
 8001c10:	0001      	movs	r1, r0
 8001c12:	0002      	movs	r2, r0
 8001c14:	390b      	subs	r1, #11
 8001c16:	231d      	movs	r3, #29
 8001c18:	1a5b      	subs	r3, r3, r1
 8001c1a:	4649      	mov	r1, r9
 8001c1c:	0010      	movs	r0, r2
 8001c1e:	40d9      	lsrs	r1, r3
 8001c20:	3808      	subs	r0, #8
 8001c22:	4084      	lsls	r4, r0
 8001c24:	000b      	movs	r3, r1
 8001c26:	464d      	mov	r5, r9
 8001c28:	4323      	orrs	r3, r4
 8001c2a:	4698      	mov	r8, r3
 8001c2c:	4085      	lsls	r5, r0
 8001c2e:	4823      	ldr	r0, [pc, #140]	; (8001cbc <__aeabi_ddiv+0x394>)
 8001c30:	1a83      	subs	r3, r0, r2
 8001c32:	469b      	mov	fp, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	4699      	mov	r9, r3
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	e69a      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	4323      	orrs	r3, r4
 8001c40:	4698      	mov	r8, r3
 8001c42:	d11d      	bne.n	8001c80 <__aeabi_ddiv+0x358>
 8001c44:	2308      	movs	r3, #8
 8001c46:	4699      	mov	r9, r3
 8001c48:	3b06      	subs	r3, #6
 8001c4a:	2500      	movs	r5, #0
 8001c4c:	4683      	mov	fp, r0
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	e68f      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c52:	4652      	mov	r2, sl
 8001c54:	4322      	orrs	r2, r4
 8001c56:	d109      	bne.n	8001c6c <__aeabi_ddiv+0x344>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	4649      	mov	r1, r9
 8001c5c:	4319      	orrs	r1, r3
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <__aeabi_ddiv+0x398>)
 8001c60:	4689      	mov	r9, r1
 8001c62:	469c      	mov	ip, r3
 8001c64:	2400      	movs	r4, #0
 8001c66:	2002      	movs	r0, #2
 8001c68:	44e3      	add	fp, ip
 8001c6a:	e69d      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	464a      	mov	r2, r9
 8001c70:	431a      	orrs	r2, r3
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <__aeabi_ddiv+0x398>)
 8001c74:	4691      	mov	r9, r2
 8001c76:	469c      	mov	ip, r3
 8001c78:	4652      	mov	r2, sl
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	44e3      	add	fp, ip
 8001c7e:	e693      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001c80:	230c      	movs	r3, #12
 8001c82:	4699      	mov	r9, r3
 8001c84:	3b09      	subs	r3, #9
 8001c86:	46a0      	mov	r8, r4
 8001c88:	4683      	mov	fp, r0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	e671      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	4699      	mov	r9, r3
 8001c92:	2300      	movs	r3, #0
 8001c94:	469b      	mov	fp, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	2500      	movs	r5, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	e669      	b.n	8001972 <__aeabi_ddiv+0x4a>
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	000007ff 	.word	0x000007ff
 8001ca4:	fffffc01 	.word	0xfffffc01
 8001ca8:	080090f0 	.word	0x080090f0
 8001cac:	000003ff 	.word	0x000003ff
 8001cb0:	feffffff 	.word	0xfeffffff
 8001cb4:	000007fe 	.word	0x000007fe
 8001cb8:	000003f3 	.word	0x000003f3
 8001cbc:	fffffc0d 	.word	0xfffffc0d
 8001cc0:	fffff801 	.word	0xfffff801
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	4689      	mov	r9, r1
 8001ccc:	2400      	movs	r4, #0
 8001cce:	2001      	movs	r0, #1
 8001cd0:	e66a      	b.n	80019a8 <__aeabi_ddiv+0x80>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2480      	movs	r4, #128	; 0x80
 8001cd6:	469a      	mov	sl, r3
 8001cd8:	2500      	movs	r5, #0
 8001cda:	4b8a      	ldr	r3, [pc, #552]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001cdc:	0324      	lsls	r4, r4, #12
 8001cde:	e67a      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ce0:	2501      	movs	r5, #1
 8001ce2:	426d      	negs	r5, r5
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	2b38      	cmp	r3, #56	; 0x38
 8001cea:	dd00      	ble.n	8001cee <__aeabi_ddiv+0x3c6>
 8001cec:	e670      	b.n	80019d0 <__aeabi_ddiv+0xa8>
 8001cee:	2b1f      	cmp	r3, #31
 8001cf0:	dc00      	bgt.n	8001cf4 <__aeabi_ddiv+0x3cc>
 8001cf2:	e0bf      	b.n	8001e74 <__aeabi_ddiv+0x54c>
 8001cf4:	211f      	movs	r1, #31
 8001cf6:	4249      	negs	r1, r1
 8001cf8:	1a8a      	subs	r2, r1, r2
 8001cfa:	4641      	mov	r1, r8
 8001cfc:	40d1      	lsrs	r1, r2
 8001cfe:	000a      	movs	r2, r1
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d004      	beq.n	8001d0e <__aeabi_ddiv+0x3e6>
 8001d04:	4641      	mov	r1, r8
 8001d06:	4b80      	ldr	r3, [pc, #512]	; (8001f08 <__aeabi_ddiv+0x5e0>)
 8001d08:	445b      	add	r3, fp
 8001d0a:	4099      	lsls	r1, r3
 8001d0c:	430d      	orrs	r5, r1
 8001d0e:	1e6b      	subs	r3, r5, #1
 8001d10:	419d      	sbcs	r5, r3
 8001d12:	2307      	movs	r3, #7
 8001d14:	432a      	orrs	r2, r5
 8001d16:	001d      	movs	r5, r3
 8001d18:	2400      	movs	r4, #0
 8001d1a:	4015      	ands	r5, r2
 8001d1c:	4213      	tst	r3, r2
 8001d1e:	d100      	bne.n	8001d22 <__aeabi_ddiv+0x3fa>
 8001d20:	e0d4      	b.n	8001ecc <__aeabi_ddiv+0x5a4>
 8001d22:	210f      	movs	r1, #15
 8001d24:	2300      	movs	r3, #0
 8001d26:	4011      	ands	r1, r2
 8001d28:	2904      	cmp	r1, #4
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_ddiv+0x406>
 8001d2c:	e0cb      	b.n	8001ec6 <__aeabi_ddiv+0x59e>
 8001d2e:	1d11      	adds	r1, r2, #4
 8001d30:	4291      	cmp	r1, r2
 8001d32:	4192      	sbcs	r2, r2
 8001d34:	4252      	negs	r2, r2
 8001d36:	189b      	adds	r3, r3, r2
 8001d38:	000a      	movs	r2, r1
 8001d3a:	0219      	lsls	r1, r3, #8
 8001d3c:	d400      	bmi.n	8001d40 <__aeabi_ddiv+0x418>
 8001d3e:	e0c2      	b.n	8001ec6 <__aeabi_ddiv+0x59e>
 8001d40:	2301      	movs	r3, #1
 8001d42:	2400      	movs	r4, #0
 8001d44:	2500      	movs	r5, #0
 8001d46:	e646      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	4219      	tst	r1, r3
 8001d50:	d008      	beq.n	8001d64 <__aeabi_ddiv+0x43c>
 8001d52:	421c      	tst	r4, r3
 8001d54:	d106      	bne.n	8001d64 <__aeabi_ddiv+0x43c>
 8001d56:	431c      	orrs	r4, r3
 8001d58:	0324      	lsls	r4, r4, #12
 8001d5a:	46ba      	mov	sl, r7
 8001d5c:	0015      	movs	r5, r2
 8001d5e:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001d60:	0b24      	lsrs	r4, r4, #12
 8001d62:	e638      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d64:	2480      	movs	r4, #128	; 0x80
 8001d66:	4643      	mov	r3, r8
 8001d68:	0324      	lsls	r4, r4, #12
 8001d6a:	431c      	orrs	r4, r3
 8001d6c:	0324      	lsls	r4, r4, #12
 8001d6e:	46b2      	mov	sl, r6
 8001d70:	4b64      	ldr	r3, [pc, #400]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001d72:	0b24      	lsrs	r4, r4, #12
 8001d74:	e62f      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d100      	bne.n	8001d7c <__aeabi_ddiv+0x454>
 8001d7a:	e703      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 8001d7c:	19a6      	adds	r6, r4, r6
 8001d7e:	1e68      	subs	r0, r5, #1
 8001d80:	42a6      	cmp	r6, r4
 8001d82:	d200      	bcs.n	8001d86 <__aeabi_ddiv+0x45e>
 8001d84:	e08d      	b.n	8001ea2 <__aeabi_ddiv+0x57a>
 8001d86:	428e      	cmp	r6, r1
 8001d88:	d200      	bcs.n	8001d8c <__aeabi_ddiv+0x464>
 8001d8a:	e0a3      	b.n	8001ed4 <__aeabi_ddiv+0x5ac>
 8001d8c:	d100      	bne.n	8001d90 <__aeabi_ddiv+0x468>
 8001d8e:	e0b3      	b.n	8001ef8 <__aeabi_ddiv+0x5d0>
 8001d90:	0005      	movs	r5, r0
 8001d92:	e6f5      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001d94:	42aa      	cmp	r2, r5
 8001d96:	d900      	bls.n	8001d9a <__aeabi_ddiv+0x472>
 8001d98:	e639      	b.n	8001a0e <__aeabi_ddiv+0xe6>
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	07de      	lsls	r6, r3, #31
 8001d9e:	0858      	lsrs	r0, r3, #1
 8001da0:	086b      	lsrs	r3, r5, #1
 8001da2:	431e      	orrs	r6, r3
 8001da4:	07ed      	lsls	r5, r5, #31
 8001da6:	e639      	b.n	8001a1c <__aeabi_ddiv+0xf4>
 8001da8:	4648      	mov	r0, r9
 8001daa:	f001 f8af 	bl	8002f0c <__clzsi2>
 8001dae:	0001      	movs	r1, r0
 8001db0:	0002      	movs	r2, r0
 8001db2:	3115      	adds	r1, #21
 8001db4:	3220      	adds	r2, #32
 8001db6:	291c      	cmp	r1, #28
 8001db8:	dc00      	bgt.n	8001dbc <__aeabi_ddiv+0x494>
 8001dba:	e72c      	b.n	8001c16 <__aeabi_ddiv+0x2ee>
 8001dbc:	464b      	mov	r3, r9
 8001dbe:	3808      	subs	r0, #8
 8001dc0:	4083      	lsls	r3, r0
 8001dc2:	2500      	movs	r5, #0
 8001dc4:	4698      	mov	r8, r3
 8001dc6:	e732      	b.n	8001c2e <__aeabi_ddiv+0x306>
 8001dc8:	f001 f8a0 	bl	8002f0c <__clzsi2>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	001a      	movs	r2, r3
 8001dd0:	3215      	adds	r2, #21
 8001dd2:	3020      	adds	r0, #32
 8001dd4:	2a1c      	cmp	r2, #28
 8001dd6:	dc00      	bgt.n	8001dda <__aeabi_ddiv+0x4b2>
 8001dd8:	e700      	b.n	8001bdc <__aeabi_ddiv+0x2b4>
 8001dda:	4654      	mov	r4, sl
 8001ddc:	3b08      	subs	r3, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	409c      	lsls	r4, r3
 8001de2:	e705      	b.n	8001bf0 <__aeabi_ddiv+0x2c8>
 8001de4:	1936      	adds	r6, r6, r4
 8001de6:	3b01      	subs	r3, #1
 8001de8:	42b4      	cmp	r4, r6
 8001dea:	d900      	bls.n	8001dee <__aeabi_ddiv+0x4c6>
 8001dec:	e6a6      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001dee:	42b2      	cmp	r2, r6
 8001df0:	d800      	bhi.n	8001df4 <__aeabi_ddiv+0x4cc>
 8001df2:	e6a3      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001df4:	1e83      	subs	r3, r0, #2
 8001df6:	1936      	adds	r6, r6, r4
 8001df8:	e6a0      	b.n	8001b3c <__aeabi_ddiv+0x214>
 8001dfa:	1909      	adds	r1, r1, r4
 8001dfc:	3d01      	subs	r5, #1
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d900      	bls.n	8001e04 <__aeabi_ddiv+0x4dc>
 8001e02:	e68d      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e04:	428a      	cmp	r2, r1
 8001e06:	d800      	bhi.n	8001e0a <__aeabi_ddiv+0x4e2>
 8001e08:	e68a      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e0a:	1e85      	subs	r5, r0, #2
 8001e0c:	1909      	adds	r1, r1, r4
 8001e0e:	e687      	b.n	8001b20 <__aeabi_ddiv+0x1f8>
 8001e10:	230f      	movs	r3, #15
 8001e12:	402b      	ands	r3, r5
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d100      	bne.n	8001e1a <__aeabi_ddiv+0x4f2>
 8001e18:	e6bc      	b.n	8001b94 <__aeabi_ddiv+0x26c>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	42ab      	cmp	r3, r5
 8001e20:	419b      	sbcs	r3, r3
 8001e22:	3504      	adds	r5, #4
 8001e24:	425b      	negs	r3, r3
 8001e26:	08ed      	lsrs	r5, r5, #3
 8001e28:	4498      	add	r8, r3
 8001e2a:	e6b4      	b.n	8001b96 <__aeabi_ddiv+0x26e>
 8001e2c:	42af      	cmp	r7, r5
 8001e2e:	d900      	bls.n	8001e32 <__aeabi_ddiv+0x50a>
 8001e30:	e660      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e32:	4282      	cmp	r2, r0
 8001e34:	d804      	bhi.n	8001e40 <__aeabi_ddiv+0x518>
 8001e36:	d000      	beq.n	8001e3a <__aeabi_ddiv+0x512>
 8001e38:	e65c      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e3a:	42ae      	cmp	r6, r5
 8001e3c:	d800      	bhi.n	8001e40 <__aeabi_ddiv+0x518>
 8001e3e:	e659      	b.n	8001af4 <__aeabi_ddiv+0x1cc>
 8001e40:	2302      	movs	r3, #2
 8001e42:	425b      	negs	r3, r3
 8001e44:	469c      	mov	ip, r3
 8001e46:	9b00      	ldr	r3, [sp, #0]
 8001e48:	44e0      	add	r8, ip
 8001e4a:	469c      	mov	ip, r3
 8001e4c:	4465      	add	r5, ip
 8001e4e:	429d      	cmp	r5, r3
 8001e50:	419b      	sbcs	r3, r3
 8001e52:	425b      	negs	r3, r3
 8001e54:	191b      	adds	r3, r3, r4
 8001e56:	18c0      	adds	r0, r0, r3
 8001e58:	e64d      	b.n	8001af6 <__aeabi_ddiv+0x1ce>
 8001e5a:	428a      	cmp	r2, r1
 8001e5c:	d800      	bhi.n	8001e60 <__aeabi_ddiv+0x538>
 8001e5e:	e60e      	b.n	8001a7e <__aeabi_ddiv+0x156>
 8001e60:	1e83      	subs	r3, r0, #2
 8001e62:	1909      	adds	r1, r1, r4
 8001e64:	e60b      	b.n	8001a7e <__aeabi_ddiv+0x156>
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d800      	bhi.n	8001e6c <__aeabi_ddiv+0x544>
 8001e6a:	e5f4      	b.n	8001a56 <__aeabi_ddiv+0x12e>
 8001e6c:	1e83      	subs	r3, r0, #2
 8001e6e:	4698      	mov	r8, r3
 8001e70:	1909      	adds	r1, r1, r4
 8001e72:	e5f0      	b.n	8001a56 <__aeabi_ddiv+0x12e>
 8001e74:	4925      	ldr	r1, [pc, #148]	; (8001f0c <__aeabi_ddiv+0x5e4>)
 8001e76:	0028      	movs	r0, r5
 8001e78:	4459      	add	r1, fp
 8001e7a:	408d      	lsls	r5, r1
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	408a      	lsls	r2, r1
 8001e80:	1e69      	subs	r1, r5, #1
 8001e82:	418d      	sbcs	r5, r1
 8001e84:	4641      	mov	r1, r8
 8001e86:	40d8      	lsrs	r0, r3
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	4302      	orrs	r2, r0
 8001e8c:	432a      	orrs	r2, r5
 8001e8e:	000b      	movs	r3, r1
 8001e90:	0751      	lsls	r1, r2, #29
 8001e92:	d100      	bne.n	8001e96 <__aeabi_ddiv+0x56e>
 8001e94:	e751      	b.n	8001d3a <__aeabi_ddiv+0x412>
 8001e96:	210f      	movs	r1, #15
 8001e98:	4011      	ands	r1, r2
 8001e9a:	2904      	cmp	r1, #4
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_ddiv+0x578>
 8001e9e:	e746      	b.n	8001d2e <__aeabi_ddiv+0x406>
 8001ea0:	e74b      	b.n	8001d3a <__aeabi_ddiv+0x412>
 8001ea2:	0005      	movs	r5, r0
 8001ea4:	428e      	cmp	r6, r1
 8001ea6:	d000      	beq.n	8001eaa <__aeabi_ddiv+0x582>
 8001ea8:	e66a      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001eaa:	9a00      	ldr	r2, [sp, #0]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d000      	beq.n	8001eb2 <__aeabi_ddiv+0x58a>
 8001eb0:	e666      	b.n	8001b80 <__aeabi_ddiv+0x258>
 8001eb2:	e667      	b.n	8001b84 <__aeabi_ddiv+0x25c>
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <__aeabi_ddiv+0x5e8>)
 8001eb6:	445a      	add	r2, fp
 8001eb8:	2a00      	cmp	r2, #0
 8001eba:	dc00      	bgt.n	8001ebe <__aeabi_ddiv+0x596>
 8001ebc:	e710      	b.n	8001ce0 <__aeabi_ddiv+0x3b8>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	2500      	movs	r5, #0
 8001ec2:	4498      	add	r8, r3
 8001ec4:	e667      	b.n	8001b96 <__aeabi_ddiv+0x26e>
 8001ec6:	075d      	lsls	r5, r3, #29
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	0b1c      	lsrs	r4, r3, #12
 8001ecc:	08d2      	lsrs	r2, r2, #3
 8001ece:	2300      	movs	r3, #0
 8001ed0:	4315      	orrs	r5, r2
 8001ed2:	e580      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ed4:	9800      	ldr	r0, [sp, #0]
 8001ed6:	3d02      	subs	r5, #2
 8001ed8:	0042      	lsls	r2, r0, #1
 8001eda:	4282      	cmp	r2, r0
 8001edc:	41bf      	sbcs	r7, r7
 8001ede:	427f      	negs	r7, r7
 8001ee0:	193c      	adds	r4, r7, r4
 8001ee2:	1936      	adds	r6, r6, r4
 8001ee4:	9200      	str	r2, [sp, #0]
 8001ee6:	e7dd      	b.n	8001ea4 <__aeabi_ddiv+0x57c>
 8001ee8:	2480      	movs	r4, #128	; 0x80
 8001eea:	4643      	mov	r3, r8
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	431c      	orrs	r4, r3
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__aeabi_ddiv+0x5dc>)
 8001ef4:	0b24      	lsrs	r4, r4, #12
 8001ef6:	e56e      	b.n	80019d6 <__aeabi_ddiv+0xae>
 8001ef8:	9a00      	ldr	r2, [sp, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d3ea      	bcc.n	8001ed4 <__aeabi_ddiv+0x5ac>
 8001efe:	0005      	movs	r5, r0
 8001f00:	e7d3      	b.n	8001eaa <__aeabi_ddiv+0x582>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	0000043e 	.word	0x0000043e
 8001f0c:	0000041e 	.word	0x0000041e
 8001f10:	000003ff 	.word	0x000003ff

08001f14 <__eqdf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	464e      	mov	r6, r9
 8001f18:	4645      	mov	r5, r8
 8001f1a:	46de      	mov	lr, fp
 8001f1c:	4657      	mov	r7, sl
 8001f1e:	4690      	mov	r8, r2
 8001f20:	b5e0      	push	{r5, r6, r7, lr}
 8001f22:	0017      	movs	r7, r2
 8001f24:	031a      	lsls	r2, r3, #12
 8001f26:	0b12      	lsrs	r2, r2, #12
 8001f28:	0005      	movs	r5, r0
 8001f2a:	4684      	mov	ip, r0
 8001f2c:	4819      	ldr	r0, [pc, #100]	; (8001f94 <__eqdf2+0x80>)
 8001f2e:	030e      	lsls	r6, r1, #12
 8001f30:	004c      	lsls	r4, r1, #1
 8001f32:	4691      	mov	r9, r2
 8001f34:	005a      	lsls	r2, r3, #1
 8001f36:	0fdb      	lsrs	r3, r3, #31
 8001f38:	469b      	mov	fp, r3
 8001f3a:	0b36      	lsrs	r6, r6, #12
 8001f3c:	0d64      	lsrs	r4, r4, #21
 8001f3e:	0fc9      	lsrs	r1, r1, #31
 8001f40:	0d52      	lsrs	r2, r2, #21
 8001f42:	4284      	cmp	r4, r0
 8001f44:	d019      	beq.n	8001f7a <__eqdf2+0x66>
 8001f46:	4282      	cmp	r2, r0
 8001f48:	d010      	beq.n	8001f6c <__eqdf2+0x58>
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	4294      	cmp	r4, r2
 8001f4e:	d10e      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f50:	454e      	cmp	r6, r9
 8001f52:	d10c      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f54:	2001      	movs	r0, #1
 8001f56:	45c4      	cmp	ip, r8
 8001f58:	d109      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f5a:	4559      	cmp	r1, fp
 8001f5c:	d017      	beq.n	8001f8e <__eqdf2+0x7a>
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	d105      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f62:	0030      	movs	r0, r6
 8001f64:	4328      	orrs	r0, r5
 8001f66:	1e43      	subs	r3, r0, #1
 8001f68:	4198      	sbcs	r0, r3
 8001f6a:	e000      	b.n	8001f6e <__eqdf2+0x5a>
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f70:	46bb      	mov	fp, r7
 8001f72:	46b2      	mov	sl, r6
 8001f74:	46a9      	mov	r9, r5
 8001f76:	46a0      	mov	r8, r4
 8001f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f7a:	0033      	movs	r3, r6
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	432b      	orrs	r3, r5
 8001f80:	d1f5      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f82:	42a2      	cmp	r2, r4
 8001f84:	d1f3      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f86:	464b      	mov	r3, r9
 8001f88:	433b      	orrs	r3, r7
 8001f8a:	d1f0      	bne.n	8001f6e <__eqdf2+0x5a>
 8001f8c:	e7e2      	b.n	8001f54 <__eqdf2+0x40>
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e7ed      	b.n	8001f6e <__eqdf2+0x5a>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	000007ff 	.word	0x000007ff

08001f98 <__gedf2>:
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	4647      	mov	r7, r8
 8001f9c:	46ce      	mov	lr, r9
 8001f9e:	0004      	movs	r4, r0
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	0016      	movs	r6, r2
 8001fa4:	031b      	lsls	r3, r3, #12
 8001fa6:	0b1b      	lsrs	r3, r3, #12
 8001fa8:	4d2d      	ldr	r5, [pc, #180]	; (8002060 <__gedf2+0xc8>)
 8001faa:	004a      	lsls	r2, r1, #1
 8001fac:	4699      	mov	r9, r3
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	0043      	lsls	r3, r0, #1
 8001fb2:	030f      	lsls	r7, r1, #12
 8001fb4:	46a4      	mov	ip, r4
 8001fb6:	46b0      	mov	r8, r6
 8001fb8:	0b3f      	lsrs	r7, r7, #12
 8001fba:	0d52      	lsrs	r2, r2, #21
 8001fbc:	0fc9      	lsrs	r1, r1, #31
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	0fc0      	lsrs	r0, r0, #31
 8001fc2:	42aa      	cmp	r2, r5
 8001fc4:	d021      	beq.n	800200a <__gedf2+0x72>
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	d013      	beq.n	8001ff2 <__gedf2+0x5a>
 8001fca:	2a00      	cmp	r2, #0
 8001fcc:	d122      	bne.n	8002014 <__gedf2+0x7c>
 8001fce:	433c      	orrs	r4, r7
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <__gedf2+0x42>
 8001fd4:	464d      	mov	r5, r9
 8001fd6:	432e      	orrs	r6, r5
 8001fd8:	d022      	beq.n	8002020 <__gedf2+0x88>
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	d010      	beq.n	8002000 <__gedf2+0x68>
 8001fde:	4281      	cmp	r1, r0
 8001fe0:	d022      	beq.n	8002028 <__gedf2+0x90>
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	3901      	subs	r1, #1
 8001fe6:	4008      	ands	r0, r1
 8001fe8:	3801      	subs	r0, #1
 8001fea:	bcc0      	pop	{r6, r7}
 8001fec:	46b9      	mov	r9, r7
 8001fee:	46b0      	mov	r8, r6
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff2:	464d      	mov	r5, r9
 8001ff4:	432e      	orrs	r6, r5
 8001ff6:	d129      	bne.n	800204c <__gedf2+0xb4>
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d1f0      	bne.n	8001fde <__gedf2+0x46>
 8001ffc:	433c      	orrs	r4, r7
 8001ffe:	d1ee      	bne.n	8001fde <__gedf2+0x46>
 8002000:	2800      	cmp	r0, #0
 8002002:	d1f2      	bne.n	8001fea <__gedf2+0x52>
 8002004:	2001      	movs	r0, #1
 8002006:	4240      	negs	r0, r0
 8002008:	e7ef      	b.n	8001fea <__gedf2+0x52>
 800200a:	003d      	movs	r5, r7
 800200c:	4325      	orrs	r5, r4
 800200e:	d11d      	bne.n	800204c <__gedf2+0xb4>
 8002010:	4293      	cmp	r3, r2
 8002012:	d0ee      	beq.n	8001ff2 <__gedf2+0x5a>
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1e2      	bne.n	8001fde <__gedf2+0x46>
 8002018:	464c      	mov	r4, r9
 800201a:	4326      	orrs	r6, r4
 800201c:	d1df      	bne.n	8001fde <__gedf2+0x46>
 800201e:	e7e0      	b.n	8001fe2 <__gedf2+0x4a>
 8002020:	2000      	movs	r0, #0
 8002022:	2c00      	cmp	r4, #0
 8002024:	d0e1      	beq.n	8001fea <__gedf2+0x52>
 8002026:	e7dc      	b.n	8001fe2 <__gedf2+0x4a>
 8002028:	429a      	cmp	r2, r3
 800202a:	dc0a      	bgt.n	8002042 <__gedf2+0xaa>
 800202c:	dbe8      	blt.n	8002000 <__gedf2+0x68>
 800202e:	454f      	cmp	r7, r9
 8002030:	d8d7      	bhi.n	8001fe2 <__gedf2+0x4a>
 8002032:	d00e      	beq.n	8002052 <__gedf2+0xba>
 8002034:	2000      	movs	r0, #0
 8002036:	454f      	cmp	r7, r9
 8002038:	d2d7      	bcs.n	8001fea <__gedf2+0x52>
 800203a:	2900      	cmp	r1, #0
 800203c:	d0e2      	beq.n	8002004 <__gedf2+0x6c>
 800203e:	0008      	movs	r0, r1
 8002040:	e7d3      	b.n	8001fea <__gedf2+0x52>
 8002042:	4243      	negs	r3, r0
 8002044:	4158      	adcs	r0, r3
 8002046:	0040      	lsls	r0, r0, #1
 8002048:	3801      	subs	r0, #1
 800204a:	e7ce      	b.n	8001fea <__gedf2+0x52>
 800204c:	2002      	movs	r0, #2
 800204e:	4240      	negs	r0, r0
 8002050:	e7cb      	b.n	8001fea <__gedf2+0x52>
 8002052:	45c4      	cmp	ip, r8
 8002054:	d8c5      	bhi.n	8001fe2 <__gedf2+0x4a>
 8002056:	2000      	movs	r0, #0
 8002058:	45c4      	cmp	ip, r8
 800205a:	d2c6      	bcs.n	8001fea <__gedf2+0x52>
 800205c:	e7ed      	b.n	800203a <__gedf2+0xa2>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	000007ff 	.word	0x000007ff

08002064 <__ledf2>:
 8002064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002066:	4647      	mov	r7, r8
 8002068:	46ce      	mov	lr, r9
 800206a:	0004      	movs	r4, r0
 800206c:	0018      	movs	r0, r3
 800206e:	0016      	movs	r6, r2
 8002070:	031b      	lsls	r3, r3, #12
 8002072:	0b1b      	lsrs	r3, r3, #12
 8002074:	4d2c      	ldr	r5, [pc, #176]	; (8002128 <__ledf2+0xc4>)
 8002076:	004a      	lsls	r2, r1, #1
 8002078:	4699      	mov	r9, r3
 800207a:	b580      	push	{r7, lr}
 800207c:	0043      	lsls	r3, r0, #1
 800207e:	030f      	lsls	r7, r1, #12
 8002080:	46a4      	mov	ip, r4
 8002082:	46b0      	mov	r8, r6
 8002084:	0b3f      	lsrs	r7, r7, #12
 8002086:	0d52      	lsrs	r2, r2, #21
 8002088:	0fc9      	lsrs	r1, r1, #31
 800208a:	0d5b      	lsrs	r3, r3, #21
 800208c:	0fc0      	lsrs	r0, r0, #31
 800208e:	42aa      	cmp	r2, r5
 8002090:	d00d      	beq.n	80020ae <__ledf2+0x4a>
 8002092:	42ab      	cmp	r3, r5
 8002094:	d010      	beq.n	80020b8 <__ledf2+0x54>
 8002096:	2a00      	cmp	r2, #0
 8002098:	d127      	bne.n	80020ea <__ledf2+0x86>
 800209a:	433c      	orrs	r4, r7
 800209c:	2b00      	cmp	r3, #0
 800209e:	d111      	bne.n	80020c4 <__ledf2+0x60>
 80020a0:	464d      	mov	r5, r9
 80020a2:	432e      	orrs	r6, r5
 80020a4:	d10e      	bne.n	80020c4 <__ledf2+0x60>
 80020a6:	2000      	movs	r0, #0
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d015      	beq.n	80020d8 <__ledf2+0x74>
 80020ac:	e00e      	b.n	80020cc <__ledf2+0x68>
 80020ae:	003d      	movs	r5, r7
 80020b0:	4325      	orrs	r5, r4
 80020b2:	d110      	bne.n	80020d6 <__ledf2+0x72>
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d118      	bne.n	80020ea <__ledf2+0x86>
 80020b8:	464d      	mov	r5, r9
 80020ba:	432e      	orrs	r6, r5
 80020bc:	d10b      	bne.n	80020d6 <__ledf2+0x72>
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d102      	bne.n	80020c8 <__ledf2+0x64>
 80020c2:	433c      	orrs	r4, r7
 80020c4:	2c00      	cmp	r4, #0
 80020c6:	d00b      	beq.n	80020e0 <__ledf2+0x7c>
 80020c8:	4281      	cmp	r1, r0
 80020ca:	d014      	beq.n	80020f6 <__ledf2+0x92>
 80020cc:	2002      	movs	r0, #2
 80020ce:	3901      	subs	r1, #1
 80020d0:	4008      	ands	r0, r1
 80020d2:	3801      	subs	r0, #1
 80020d4:	e000      	b.n	80020d8 <__ledf2+0x74>
 80020d6:	2002      	movs	r0, #2
 80020d8:	bcc0      	pop	{r6, r7}
 80020da:	46b9      	mov	r9, r7
 80020dc:	46b0      	mov	r8, r6
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	2800      	cmp	r0, #0
 80020e2:	d1f9      	bne.n	80020d8 <__ledf2+0x74>
 80020e4:	2001      	movs	r0, #1
 80020e6:	4240      	negs	r0, r0
 80020e8:	e7f6      	b.n	80020d8 <__ledf2+0x74>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ec      	bne.n	80020c8 <__ledf2+0x64>
 80020ee:	464c      	mov	r4, r9
 80020f0:	4326      	orrs	r6, r4
 80020f2:	d1e9      	bne.n	80020c8 <__ledf2+0x64>
 80020f4:	e7ea      	b.n	80020cc <__ledf2+0x68>
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dd04      	ble.n	8002104 <__ledf2+0xa0>
 80020fa:	4243      	negs	r3, r0
 80020fc:	4158      	adcs	r0, r3
 80020fe:	0040      	lsls	r0, r0, #1
 8002100:	3801      	subs	r0, #1
 8002102:	e7e9      	b.n	80020d8 <__ledf2+0x74>
 8002104:	429a      	cmp	r2, r3
 8002106:	dbeb      	blt.n	80020e0 <__ledf2+0x7c>
 8002108:	454f      	cmp	r7, r9
 800210a:	d8df      	bhi.n	80020cc <__ledf2+0x68>
 800210c:	d006      	beq.n	800211c <__ledf2+0xb8>
 800210e:	2000      	movs	r0, #0
 8002110:	454f      	cmp	r7, r9
 8002112:	d2e1      	bcs.n	80020d8 <__ledf2+0x74>
 8002114:	2900      	cmp	r1, #0
 8002116:	d0e5      	beq.n	80020e4 <__ledf2+0x80>
 8002118:	0008      	movs	r0, r1
 800211a:	e7dd      	b.n	80020d8 <__ledf2+0x74>
 800211c:	45c4      	cmp	ip, r8
 800211e:	d8d5      	bhi.n	80020cc <__ledf2+0x68>
 8002120:	2000      	movs	r0, #0
 8002122:	45c4      	cmp	ip, r8
 8002124:	d2d8      	bcs.n	80020d8 <__ledf2+0x74>
 8002126:	e7f5      	b.n	8002114 <__ledf2+0xb0>
 8002128:	000007ff 	.word	0x000007ff

0800212c <__aeabi_dmul>:
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	4657      	mov	r7, sl
 8002130:	464e      	mov	r6, r9
 8002132:	4645      	mov	r5, r8
 8002134:	46de      	mov	lr, fp
 8002136:	b5e0      	push	{r5, r6, r7, lr}
 8002138:	4698      	mov	r8, r3
 800213a:	030c      	lsls	r4, r1, #12
 800213c:	004b      	lsls	r3, r1, #1
 800213e:	0006      	movs	r6, r0
 8002140:	4692      	mov	sl, r2
 8002142:	b087      	sub	sp, #28
 8002144:	0b24      	lsrs	r4, r4, #12
 8002146:	0d5b      	lsrs	r3, r3, #21
 8002148:	0fcf      	lsrs	r7, r1, #31
 800214a:	2b00      	cmp	r3, #0
 800214c:	d100      	bne.n	8002150 <__aeabi_dmul+0x24>
 800214e:	e15c      	b.n	800240a <__aeabi_dmul+0x2de>
 8002150:	4ad9      	ldr	r2, [pc, #868]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d100      	bne.n	8002158 <__aeabi_dmul+0x2c>
 8002156:	e175      	b.n	8002444 <__aeabi_dmul+0x318>
 8002158:	0f42      	lsrs	r2, r0, #29
 800215a:	00e4      	lsls	r4, r4, #3
 800215c:	4314      	orrs	r4, r2
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	0412      	lsls	r2, r2, #16
 8002162:	4314      	orrs	r4, r2
 8002164:	4ad5      	ldr	r2, [pc, #852]	; (80024bc <__aeabi_dmul+0x390>)
 8002166:	00c5      	lsls	r5, r0, #3
 8002168:	4694      	mov	ip, r2
 800216a:	4463      	add	r3, ip
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	4699      	mov	r9, r3
 8002172:	469b      	mov	fp, r3
 8002174:	4643      	mov	r3, r8
 8002176:	4642      	mov	r2, r8
 8002178:	031e      	lsls	r6, r3, #12
 800217a:	0fd2      	lsrs	r2, r2, #31
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4650      	mov	r0, sl
 8002180:	4690      	mov	r8, r2
 8002182:	0b36      	lsrs	r6, r6, #12
 8002184:	0d5b      	lsrs	r3, r3, #21
 8002186:	d100      	bne.n	800218a <__aeabi_dmul+0x5e>
 8002188:	e120      	b.n	80023cc <__aeabi_dmul+0x2a0>
 800218a:	4acb      	ldr	r2, [pc, #812]	; (80024b8 <__aeabi_dmul+0x38c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d100      	bne.n	8002192 <__aeabi_dmul+0x66>
 8002190:	e162      	b.n	8002458 <__aeabi_dmul+0x32c>
 8002192:	49ca      	ldr	r1, [pc, #808]	; (80024bc <__aeabi_dmul+0x390>)
 8002194:	0f42      	lsrs	r2, r0, #29
 8002196:	468c      	mov	ip, r1
 8002198:	9900      	ldr	r1, [sp, #0]
 800219a:	4463      	add	r3, ip
 800219c:	00f6      	lsls	r6, r6, #3
 800219e:	468c      	mov	ip, r1
 80021a0:	4316      	orrs	r6, r2
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	449c      	add	ip, r3
 80021a6:	0412      	lsls	r2, r2, #16
 80021a8:	4663      	mov	r3, ip
 80021aa:	4316      	orrs	r6, r2
 80021ac:	00c2      	lsls	r2, r0, #3
 80021ae:	2000      	movs	r0, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	9900      	ldr	r1, [sp, #0]
 80021b4:	4643      	mov	r3, r8
 80021b6:	3101      	adds	r1, #1
 80021b8:	468c      	mov	ip, r1
 80021ba:	4649      	mov	r1, r9
 80021bc:	407b      	eors	r3, r7
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	290f      	cmp	r1, #15
 80021c2:	d826      	bhi.n	8002212 <__aeabi_dmul+0xe6>
 80021c4:	4bbe      	ldr	r3, [pc, #760]	; (80024c0 <__aeabi_dmul+0x394>)
 80021c6:	0089      	lsls	r1, r1, #2
 80021c8:	5859      	ldr	r1, [r3, r1]
 80021ca:	468f      	mov	pc, r1
 80021cc:	4643      	mov	r3, r8
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	0034      	movs	r4, r6
 80021d2:	0015      	movs	r5, r2
 80021d4:	4683      	mov	fp, r0
 80021d6:	465b      	mov	r3, fp
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d016      	beq.n	800220a <__aeabi_dmul+0xde>
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d100      	bne.n	80021e2 <__aeabi_dmul+0xb6>
 80021e0:	e203      	b.n	80025ea <__aeabi_dmul+0x4be>
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dmul+0xbc>
 80021e6:	e0cd      	b.n	8002384 <__aeabi_dmul+0x258>
 80021e8:	2200      	movs	r2, #0
 80021ea:	2400      	movs	r4, #0
 80021ec:	2500      	movs	r5, #0
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	0512      	lsls	r2, r2, #20
 80021f2:	4322      	orrs	r2, r4
 80021f4:	07db      	lsls	r3, r3, #31
 80021f6:	431a      	orrs	r2, r3
 80021f8:	0028      	movs	r0, r5
 80021fa:	0011      	movs	r1, r2
 80021fc:	b007      	add	sp, #28
 80021fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002200:	46bb      	mov	fp, r7
 8002202:	46b2      	mov	sl, r6
 8002204:	46a9      	mov	r9, r5
 8002206:	46a0      	mov	r8, r4
 8002208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220a:	2400      	movs	r4, #0
 800220c:	2500      	movs	r5, #0
 800220e:	4aaa      	ldr	r2, [pc, #680]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002210:	e7ed      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002212:	0c28      	lsrs	r0, r5, #16
 8002214:	042d      	lsls	r5, r5, #16
 8002216:	0c2d      	lsrs	r5, r5, #16
 8002218:	002b      	movs	r3, r5
 800221a:	0c11      	lsrs	r1, r2, #16
 800221c:	0412      	lsls	r2, r2, #16
 800221e:	0c12      	lsrs	r2, r2, #16
 8002220:	4353      	muls	r3, r2
 8002222:	4698      	mov	r8, r3
 8002224:	0013      	movs	r3, r2
 8002226:	002f      	movs	r7, r5
 8002228:	4343      	muls	r3, r0
 800222a:	4699      	mov	r9, r3
 800222c:	434f      	muls	r7, r1
 800222e:	444f      	add	r7, r9
 8002230:	46bb      	mov	fp, r7
 8002232:	4647      	mov	r7, r8
 8002234:	000b      	movs	r3, r1
 8002236:	0c3f      	lsrs	r7, r7, #16
 8002238:	46ba      	mov	sl, r7
 800223a:	4343      	muls	r3, r0
 800223c:	44da      	add	sl, fp
 800223e:	9302      	str	r3, [sp, #8]
 8002240:	45d1      	cmp	r9, sl
 8002242:	d904      	bls.n	800224e <__aeabi_dmul+0x122>
 8002244:	2780      	movs	r7, #128	; 0x80
 8002246:	027f      	lsls	r7, r7, #9
 8002248:	46b9      	mov	r9, r7
 800224a:	444b      	add	r3, r9
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	4653      	mov	r3, sl
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	469b      	mov	fp, r3
 8002254:	4653      	mov	r3, sl
 8002256:	041f      	lsls	r7, r3, #16
 8002258:	4643      	mov	r3, r8
 800225a:	041b      	lsls	r3, r3, #16
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	4698      	mov	r8, r3
 8002260:	003b      	movs	r3, r7
 8002262:	4443      	add	r3, r8
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	0c33      	lsrs	r3, r6, #16
 8002268:	0436      	lsls	r6, r6, #16
 800226a:	0c36      	lsrs	r6, r6, #16
 800226c:	4698      	mov	r8, r3
 800226e:	0033      	movs	r3, r6
 8002270:	4343      	muls	r3, r0
 8002272:	4699      	mov	r9, r3
 8002274:	4643      	mov	r3, r8
 8002276:	4343      	muls	r3, r0
 8002278:	002f      	movs	r7, r5
 800227a:	469a      	mov	sl, r3
 800227c:	4643      	mov	r3, r8
 800227e:	4377      	muls	r7, r6
 8002280:	435d      	muls	r5, r3
 8002282:	0c38      	lsrs	r0, r7, #16
 8002284:	444d      	add	r5, r9
 8002286:	1945      	adds	r5, r0, r5
 8002288:	45a9      	cmp	r9, r5
 800228a:	d903      	bls.n	8002294 <__aeabi_dmul+0x168>
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	4699      	mov	r9, r3
 8002292:	44ca      	add	sl, r9
 8002294:	043f      	lsls	r7, r7, #16
 8002296:	0c28      	lsrs	r0, r5, #16
 8002298:	0c3f      	lsrs	r7, r7, #16
 800229a:	042d      	lsls	r5, r5, #16
 800229c:	19ed      	adds	r5, r5, r7
 800229e:	0c27      	lsrs	r7, r4, #16
 80022a0:	0424      	lsls	r4, r4, #16
 80022a2:	0c24      	lsrs	r4, r4, #16
 80022a4:	0003      	movs	r3, r0
 80022a6:	0020      	movs	r0, r4
 80022a8:	4350      	muls	r0, r2
 80022aa:	437a      	muls	r2, r7
 80022ac:	4691      	mov	r9, r2
 80022ae:	003a      	movs	r2, r7
 80022b0:	4453      	add	r3, sl
 80022b2:	9305      	str	r3, [sp, #20]
 80022b4:	0c03      	lsrs	r3, r0, #16
 80022b6:	469a      	mov	sl, r3
 80022b8:	434a      	muls	r2, r1
 80022ba:	4361      	muls	r1, r4
 80022bc:	4449      	add	r1, r9
 80022be:	4451      	add	r1, sl
 80022c0:	44ab      	add	fp, r5
 80022c2:	4589      	cmp	r9, r1
 80022c4:	d903      	bls.n	80022ce <__aeabi_dmul+0x1a2>
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	4699      	mov	r9, r3
 80022cc:	444a      	add	r2, r9
 80022ce:	0400      	lsls	r0, r0, #16
 80022d0:	0c0b      	lsrs	r3, r1, #16
 80022d2:	0c00      	lsrs	r0, r0, #16
 80022d4:	0409      	lsls	r1, r1, #16
 80022d6:	1809      	adds	r1, r1, r0
 80022d8:	0020      	movs	r0, r4
 80022da:	4699      	mov	r9, r3
 80022dc:	4643      	mov	r3, r8
 80022de:	4370      	muls	r0, r6
 80022e0:	435c      	muls	r4, r3
 80022e2:	437e      	muls	r6, r7
 80022e4:	435f      	muls	r7, r3
 80022e6:	0c03      	lsrs	r3, r0, #16
 80022e8:	4698      	mov	r8, r3
 80022ea:	19a4      	adds	r4, r4, r6
 80022ec:	4444      	add	r4, r8
 80022ee:	444a      	add	r2, r9
 80022f0:	9703      	str	r7, [sp, #12]
 80022f2:	42a6      	cmp	r6, r4
 80022f4:	d904      	bls.n	8002300 <__aeabi_dmul+0x1d4>
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	025b      	lsls	r3, r3, #9
 80022fa:	4698      	mov	r8, r3
 80022fc:	4447      	add	r7, r8
 80022fe:	9703      	str	r7, [sp, #12]
 8002300:	0423      	lsls	r3, r4, #16
 8002302:	9e02      	ldr	r6, [sp, #8]
 8002304:	469a      	mov	sl, r3
 8002306:	9b05      	ldr	r3, [sp, #20]
 8002308:	445e      	add	r6, fp
 800230a:	4698      	mov	r8, r3
 800230c:	42ae      	cmp	r6, r5
 800230e:	41ad      	sbcs	r5, r5
 8002310:	1876      	adds	r6, r6, r1
 8002312:	428e      	cmp	r6, r1
 8002314:	4189      	sbcs	r1, r1
 8002316:	0400      	lsls	r0, r0, #16
 8002318:	0c00      	lsrs	r0, r0, #16
 800231a:	4450      	add	r0, sl
 800231c:	4440      	add	r0, r8
 800231e:	426d      	negs	r5, r5
 8002320:	1947      	adds	r7, r0, r5
 8002322:	46b8      	mov	r8, r7
 8002324:	4693      	mov	fp, r2
 8002326:	4249      	negs	r1, r1
 8002328:	4689      	mov	r9, r1
 800232a:	44c3      	add	fp, r8
 800232c:	44d9      	add	r9, fp
 800232e:	4298      	cmp	r0, r3
 8002330:	4180      	sbcs	r0, r0
 8002332:	45a8      	cmp	r8, r5
 8002334:	41ad      	sbcs	r5, r5
 8002336:	4593      	cmp	fp, r2
 8002338:	4192      	sbcs	r2, r2
 800233a:	4589      	cmp	r9, r1
 800233c:	4189      	sbcs	r1, r1
 800233e:	426d      	negs	r5, r5
 8002340:	4240      	negs	r0, r0
 8002342:	4328      	orrs	r0, r5
 8002344:	0c24      	lsrs	r4, r4, #16
 8002346:	4252      	negs	r2, r2
 8002348:	4249      	negs	r1, r1
 800234a:	430a      	orrs	r2, r1
 800234c:	9b03      	ldr	r3, [sp, #12]
 800234e:	1900      	adds	r0, r0, r4
 8002350:	1880      	adds	r0, r0, r2
 8002352:	18c7      	adds	r7, r0, r3
 8002354:	464b      	mov	r3, r9
 8002356:	0ddc      	lsrs	r4, r3, #23
 8002358:	9b04      	ldr	r3, [sp, #16]
 800235a:	0275      	lsls	r5, r6, #9
 800235c:	431d      	orrs	r5, r3
 800235e:	1e6a      	subs	r2, r5, #1
 8002360:	4195      	sbcs	r5, r2
 8002362:	464b      	mov	r3, r9
 8002364:	0df6      	lsrs	r6, r6, #23
 8002366:	027f      	lsls	r7, r7, #9
 8002368:	4335      	orrs	r5, r6
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	433c      	orrs	r4, r7
 800236e:	4315      	orrs	r5, r2
 8002370:	01fb      	lsls	r3, r7, #7
 8002372:	d400      	bmi.n	8002376 <__aeabi_dmul+0x24a>
 8002374:	e11c      	b.n	80025b0 <__aeabi_dmul+0x484>
 8002376:	2101      	movs	r1, #1
 8002378:	086a      	lsrs	r2, r5, #1
 800237a:	400d      	ands	r5, r1
 800237c:	4315      	orrs	r5, r2
 800237e:	07e2      	lsls	r2, r4, #31
 8002380:	4315      	orrs	r5, r2
 8002382:	0864      	lsrs	r4, r4, #1
 8002384:	494f      	ldr	r1, [pc, #316]	; (80024c4 <__aeabi_dmul+0x398>)
 8002386:	4461      	add	r1, ip
 8002388:	2900      	cmp	r1, #0
 800238a:	dc00      	bgt.n	800238e <__aeabi_dmul+0x262>
 800238c:	e0b0      	b.n	80024f0 <__aeabi_dmul+0x3c4>
 800238e:	076b      	lsls	r3, r5, #29
 8002390:	d009      	beq.n	80023a6 <__aeabi_dmul+0x27a>
 8002392:	220f      	movs	r2, #15
 8002394:	402a      	ands	r2, r5
 8002396:	2a04      	cmp	r2, #4
 8002398:	d005      	beq.n	80023a6 <__aeabi_dmul+0x27a>
 800239a:	1d2a      	adds	r2, r5, #4
 800239c:	42aa      	cmp	r2, r5
 800239e:	41ad      	sbcs	r5, r5
 80023a0:	426d      	negs	r5, r5
 80023a2:	1964      	adds	r4, r4, r5
 80023a4:	0015      	movs	r5, r2
 80023a6:	01e3      	lsls	r3, r4, #7
 80023a8:	d504      	bpl.n	80023b4 <__aeabi_dmul+0x288>
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	4a46      	ldr	r2, [pc, #280]	; (80024c8 <__aeabi_dmul+0x39c>)
 80023ae:	00c9      	lsls	r1, r1, #3
 80023b0:	4014      	ands	r4, r2
 80023b2:	4461      	add	r1, ip
 80023b4:	4a45      	ldr	r2, [pc, #276]	; (80024cc <__aeabi_dmul+0x3a0>)
 80023b6:	4291      	cmp	r1, r2
 80023b8:	dd00      	ble.n	80023bc <__aeabi_dmul+0x290>
 80023ba:	e726      	b.n	800220a <__aeabi_dmul+0xde>
 80023bc:	0762      	lsls	r2, r4, #29
 80023be:	08ed      	lsrs	r5, r5, #3
 80023c0:	0264      	lsls	r4, r4, #9
 80023c2:	0549      	lsls	r1, r1, #21
 80023c4:	4315      	orrs	r5, r2
 80023c6:	0b24      	lsrs	r4, r4, #12
 80023c8:	0d4a      	lsrs	r2, r1, #21
 80023ca:	e710      	b.n	80021ee <__aeabi_dmul+0xc2>
 80023cc:	4652      	mov	r2, sl
 80023ce:	4332      	orrs	r2, r6
 80023d0:	d100      	bne.n	80023d4 <__aeabi_dmul+0x2a8>
 80023d2:	e07f      	b.n	80024d4 <__aeabi_dmul+0x3a8>
 80023d4:	2e00      	cmp	r6, #0
 80023d6:	d100      	bne.n	80023da <__aeabi_dmul+0x2ae>
 80023d8:	e0dc      	b.n	8002594 <__aeabi_dmul+0x468>
 80023da:	0030      	movs	r0, r6
 80023dc:	f000 fd96 	bl	8002f0c <__clzsi2>
 80023e0:	0002      	movs	r2, r0
 80023e2:	3a0b      	subs	r2, #11
 80023e4:	231d      	movs	r3, #29
 80023e6:	0001      	movs	r1, r0
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	4652      	mov	r2, sl
 80023ec:	3908      	subs	r1, #8
 80023ee:	40da      	lsrs	r2, r3
 80023f0:	408e      	lsls	r6, r1
 80023f2:	4316      	orrs	r6, r2
 80023f4:	4652      	mov	r2, sl
 80023f6:	408a      	lsls	r2, r1
 80023f8:	9b00      	ldr	r3, [sp, #0]
 80023fa:	4935      	ldr	r1, [pc, #212]	; (80024d0 <__aeabi_dmul+0x3a4>)
 80023fc:	1a18      	subs	r0, r3, r0
 80023fe:	0003      	movs	r3, r0
 8002400:	468c      	mov	ip, r1
 8002402:	4463      	add	r3, ip
 8002404:	2000      	movs	r0, #0
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	e6d3      	b.n	80021b2 <__aeabi_dmul+0x86>
 800240a:	0025      	movs	r5, r4
 800240c:	4305      	orrs	r5, r0
 800240e:	d04a      	beq.n	80024a6 <__aeabi_dmul+0x37a>
 8002410:	2c00      	cmp	r4, #0
 8002412:	d100      	bne.n	8002416 <__aeabi_dmul+0x2ea>
 8002414:	e0b0      	b.n	8002578 <__aeabi_dmul+0x44c>
 8002416:	0020      	movs	r0, r4
 8002418:	f000 fd78 	bl	8002f0c <__clzsi2>
 800241c:	0001      	movs	r1, r0
 800241e:	0002      	movs	r2, r0
 8002420:	390b      	subs	r1, #11
 8002422:	231d      	movs	r3, #29
 8002424:	0010      	movs	r0, r2
 8002426:	1a5b      	subs	r3, r3, r1
 8002428:	0031      	movs	r1, r6
 800242a:	0035      	movs	r5, r6
 800242c:	3808      	subs	r0, #8
 800242e:	4084      	lsls	r4, r0
 8002430:	40d9      	lsrs	r1, r3
 8002432:	4085      	lsls	r5, r0
 8002434:	430c      	orrs	r4, r1
 8002436:	4826      	ldr	r0, [pc, #152]	; (80024d0 <__aeabi_dmul+0x3a4>)
 8002438:	1a83      	subs	r3, r0, r2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	4699      	mov	r9, r3
 8002440:	469b      	mov	fp, r3
 8002442:	e697      	b.n	8002174 <__aeabi_dmul+0x48>
 8002444:	0005      	movs	r5, r0
 8002446:	4325      	orrs	r5, r4
 8002448:	d126      	bne.n	8002498 <__aeabi_dmul+0x36c>
 800244a:	2208      	movs	r2, #8
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2302      	movs	r3, #2
 8002450:	2400      	movs	r4, #0
 8002452:	4691      	mov	r9, r2
 8002454:	469b      	mov	fp, r3
 8002456:	e68d      	b.n	8002174 <__aeabi_dmul+0x48>
 8002458:	4652      	mov	r2, sl
 800245a:	9b00      	ldr	r3, [sp, #0]
 800245c:	4332      	orrs	r2, r6
 800245e:	d110      	bne.n	8002482 <__aeabi_dmul+0x356>
 8002460:	4915      	ldr	r1, [pc, #84]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002462:	2600      	movs	r6, #0
 8002464:	468c      	mov	ip, r1
 8002466:	4463      	add	r3, ip
 8002468:	4649      	mov	r1, r9
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2302      	movs	r3, #2
 800246e:	4319      	orrs	r1, r3
 8002470:	4689      	mov	r9, r1
 8002472:	2002      	movs	r0, #2
 8002474:	e69d      	b.n	80021b2 <__aeabi_dmul+0x86>
 8002476:	465b      	mov	r3, fp
 8002478:	9701      	str	r7, [sp, #4]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d000      	beq.n	8002480 <__aeabi_dmul+0x354>
 800247e:	e6ad      	b.n	80021dc <__aeabi_dmul+0xb0>
 8002480:	e6c3      	b.n	800220a <__aeabi_dmul+0xde>
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <__aeabi_dmul+0x38c>)
 8002484:	2003      	movs	r0, #3
 8002486:	4694      	mov	ip, r2
 8002488:	4463      	add	r3, ip
 800248a:	464a      	mov	r2, r9
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2303      	movs	r3, #3
 8002490:	431a      	orrs	r2, r3
 8002492:	4691      	mov	r9, r2
 8002494:	4652      	mov	r2, sl
 8002496:	e68c      	b.n	80021b2 <__aeabi_dmul+0x86>
 8002498:	220c      	movs	r2, #12
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2303      	movs	r3, #3
 800249e:	0005      	movs	r5, r0
 80024a0:	4691      	mov	r9, r2
 80024a2:	469b      	mov	fp, r3
 80024a4:	e666      	b.n	8002174 <__aeabi_dmul+0x48>
 80024a6:	2304      	movs	r3, #4
 80024a8:	4699      	mov	r9, r3
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	3301      	adds	r3, #1
 80024b0:	2400      	movs	r4, #0
 80024b2:	469b      	mov	fp, r3
 80024b4:	e65e      	b.n	8002174 <__aeabi_dmul+0x48>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	000007ff 	.word	0x000007ff
 80024bc:	fffffc01 	.word	0xfffffc01
 80024c0:	08009130 	.word	0x08009130
 80024c4:	000003ff 	.word	0x000003ff
 80024c8:	feffffff 	.word	0xfeffffff
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	fffffc0d 	.word	0xfffffc0d
 80024d4:	4649      	mov	r1, r9
 80024d6:	2301      	movs	r3, #1
 80024d8:	4319      	orrs	r1, r3
 80024da:	4689      	mov	r9, r1
 80024dc:	2600      	movs	r6, #0
 80024de:	2001      	movs	r0, #1
 80024e0:	e667      	b.n	80021b2 <__aeabi_dmul+0x86>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2480      	movs	r4, #128	; 0x80
 80024e6:	2500      	movs	r5, #0
 80024e8:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <__aeabi_dmul+0x4cc>)
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	0324      	lsls	r4, r4, #12
 80024ee:	e67e      	b.n	80021ee <__aeabi_dmul+0xc2>
 80024f0:	2001      	movs	r0, #1
 80024f2:	1a40      	subs	r0, r0, r1
 80024f4:	2838      	cmp	r0, #56	; 0x38
 80024f6:	dd00      	ble.n	80024fa <__aeabi_dmul+0x3ce>
 80024f8:	e676      	b.n	80021e8 <__aeabi_dmul+0xbc>
 80024fa:	281f      	cmp	r0, #31
 80024fc:	dd5b      	ble.n	80025b6 <__aeabi_dmul+0x48a>
 80024fe:	221f      	movs	r2, #31
 8002500:	0023      	movs	r3, r4
 8002502:	4252      	negs	r2, r2
 8002504:	1a51      	subs	r1, r2, r1
 8002506:	40cb      	lsrs	r3, r1
 8002508:	0019      	movs	r1, r3
 800250a:	2820      	cmp	r0, #32
 800250c:	d003      	beq.n	8002516 <__aeabi_dmul+0x3ea>
 800250e:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <__aeabi_dmul+0x4d0>)
 8002510:	4462      	add	r2, ip
 8002512:	4094      	lsls	r4, r2
 8002514:	4325      	orrs	r5, r4
 8002516:	1e6a      	subs	r2, r5, #1
 8002518:	4195      	sbcs	r5, r2
 800251a:	002a      	movs	r2, r5
 800251c:	430a      	orrs	r2, r1
 800251e:	2107      	movs	r1, #7
 8002520:	000d      	movs	r5, r1
 8002522:	2400      	movs	r4, #0
 8002524:	4015      	ands	r5, r2
 8002526:	4211      	tst	r1, r2
 8002528:	d05b      	beq.n	80025e2 <__aeabi_dmul+0x4b6>
 800252a:	210f      	movs	r1, #15
 800252c:	2400      	movs	r4, #0
 800252e:	4011      	ands	r1, r2
 8002530:	2904      	cmp	r1, #4
 8002532:	d053      	beq.n	80025dc <__aeabi_dmul+0x4b0>
 8002534:	1d11      	adds	r1, r2, #4
 8002536:	4291      	cmp	r1, r2
 8002538:	4192      	sbcs	r2, r2
 800253a:	4252      	negs	r2, r2
 800253c:	18a4      	adds	r4, r4, r2
 800253e:	000a      	movs	r2, r1
 8002540:	0223      	lsls	r3, r4, #8
 8002542:	d54b      	bpl.n	80025dc <__aeabi_dmul+0x4b0>
 8002544:	2201      	movs	r2, #1
 8002546:	2400      	movs	r4, #0
 8002548:	2500      	movs	r5, #0
 800254a:	e650      	b.n	80021ee <__aeabi_dmul+0xc2>
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	031b      	lsls	r3, r3, #12
 8002550:	421c      	tst	r4, r3
 8002552:	d009      	beq.n	8002568 <__aeabi_dmul+0x43c>
 8002554:	421e      	tst	r6, r3
 8002556:	d107      	bne.n	8002568 <__aeabi_dmul+0x43c>
 8002558:	4333      	orrs	r3, r6
 800255a:	031c      	lsls	r4, r3, #12
 800255c:	4643      	mov	r3, r8
 800255e:	0015      	movs	r5, r2
 8002560:	0b24      	lsrs	r4, r4, #12
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <__aeabi_dmul+0x4cc>)
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	e642      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	0312      	lsls	r2, r2, #12
 800256c:	4314      	orrs	r4, r2
 800256e:	0324      	lsls	r4, r4, #12
 8002570:	4a21      	ldr	r2, [pc, #132]	; (80025f8 <__aeabi_dmul+0x4cc>)
 8002572:	0b24      	lsrs	r4, r4, #12
 8002574:	9701      	str	r7, [sp, #4]
 8002576:	e63a      	b.n	80021ee <__aeabi_dmul+0xc2>
 8002578:	f000 fcc8 	bl	8002f0c <__clzsi2>
 800257c:	0001      	movs	r1, r0
 800257e:	0002      	movs	r2, r0
 8002580:	3115      	adds	r1, #21
 8002582:	3220      	adds	r2, #32
 8002584:	291c      	cmp	r1, #28
 8002586:	dc00      	bgt.n	800258a <__aeabi_dmul+0x45e>
 8002588:	e74b      	b.n	8002422 <__aeabi_dmul+0x2f6>
 800258a:	0034      	movs	r4, r6
 800258c:	3808      	subs	r0, #8
 800258e:	2500      	movs	r5, #0
 8002590:	4084      	lsls	r4, r0
 8002592:	e750      	b.n	8002436 <__aeabi_dmul+0x30a>
 8002594:	f000 fcba 	bl	8002f0c <__clzsi2>
 8002598:	0003      	movs	r3, r0
 800259a:	001a      	movs	r2, r3
 800259c:	3215      	adds	r2, #21
 800259e:	3020      	adds	r0, #32
 80025a0:	2a1c      	cmp	r2, #28
 80025a2:	dc00      	bgt.n	80025a6 <__aeabi_dmul+0x47a>
 80025a4:	e71e      	b.n	80023e4 <__aeabi_dmul+0x2b8>
 80025a6:	4656      	mov	r6, sl
 80025a8:	3b08      	subs	r3, #8
 80025aa:	2200      	movs	r2, #0
 80025ac:	409e      	lsls	r6, r3
 80025ae:	e723      	b.n	80023f8 <__aeabi_dmul+0x2cc>
 80025b0:	9b00      	ldr	r3, [sp, #0]
 80025b2:	469c      	mov	ip, r3
 80025b4:	e6e6      	b.n	8002384 <__aeabi_dmul+0x258>
 80025b6:	4912      	ldr	r1, [pc, #72]	; (8002600 <__aeabi_dmul+0x4d4>)
 80025b8:	0022      	movs	r2, r4
 80025ba:	4461      	add	r1, ip
 80025bc:	002e      	movs	r6, r5
 80025be:	408d      	lsls	r5, r1
 80025c0:	408a      	lsls	r2, r1
 80025c2:	40c6      	lsrs	r6, r0
 80025c4:	1e69      	subs	r1, r5, #1
 80025c6:	418d      	sbcs	r5, r1
 80025c8:	4332      	orrs	r2, r6
 80025ca:	432a      	orrs	r2, r5
 80025cc:	40c4      	lsrs	r4, r0
 80025ce:	0753      	lsls	r3, r2, #29
 80025d0:	d0b6      	beq.n	8002540 <__aeabi_dmul+0x414>
 80025d2:	210f      	movs	r1, #15
 80025d4:	4011      	ands	r1, r2
 80025d6:	2904      	cmp	r1, #4
 80025d8:	d1ac      	bne.n	8002534 <__aeabi_dmul+0x408>
 80025da:	e7b1      	b.n	8002540 <__aeabi_dmul+0x414>
 80025dc:	0765      	lsls	r5, r4, #29
 80025de:	0264      	lsls	r4, r4, #9
 80025e0:	0b24      	lsrs	r4, r4, #12
 80025e2:	08d2      	lsrs	r2, r2, #3
 80025e4:	4315      	orrs	r5, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	e601      	b.n	80021ee <__aeabi_dmul+0xc2>
 80025ea:	2280      	movs	r2, #128	; 0x80
 80025ec:	0312      	lsls	r2, r2, #12
 80025ee:	4314      	orrs	r4, r2
 80025f0:	0324      	lsls	r4, r4, #12
 80025f2:	4a01      	ldr	r2, [pc, #4]	; (80025f8 <__aeabi_dmul+0x4cc>)
 80025f4:	0b24      	lsrs	r4, r4, #12
 80025f6:	e5fa      	b.n	80021ee <__aeabi_dmul+0xc2>
 80025f8:	000007ff 	.word	0x000007ff
 80025fc:	0000043e 	.word	0x0000043e
 8002600:	0000041e 	.word	0x0000041e

08002604 <__aeabi_dsub>:
 8002604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002606:	4657      	mov	r7, sl
 8002608:	464e      	mov	r6, r9
 800260a:	4645      	mov	r5, r8
 800260c:	46de      	mov	lr, fp
 800260e:	b5e0      	push	{r5, r6, r7, lr}
 8002610:	001e      	movs	r6, r3
 8002612:	0017      	movs	r7, r2
 8002614:	004a      	lsls	r2, r1, #1
 8002616:	030b      	lsls	r3, r1, #12
 8002618:	0d52      	lsrs	r2, r2, #21
 800261a:	0a5b      	lsrs	r3, r3, #9
 800261c:	4690      	mov	r8, r2
 800261e:	0f42      	lsrs	r2, r0, #29
 8002620:	431a      	orrs	r2, r3
 8002622:	0fcd      	lsrs	r5, r1, #31
 8002624:	4ccd      	ldr	r4, [pc, #820]	; (800295c <__aeabi_dsub+0x358>)
 8002626:	0331      	lsls	r1, r6, #12
 8002628:	00c3      	lsls	r3, r0, #3
 800262a:	4694      	mov	ip, r2
 800262c:	0070      	lsls	r0, r6, #1
 800262e:	0f7a      	lsrs	r2, r7, #29
 8002630:	0a49      	lsrs	r1, r1, #9
 8002632:	00ff      	lsls	r7, r7, #3
 8002634:	469a      	mov	sl, r3
 8002636:	46b9      	mov	r9, r7
 8002638:	0d40      	lsrs	r0, r0, #21
 800263a:	0ff6      	lsrs	r6, r6, #31
 800263c:	4311      	orrs	r1, r2
 800263e:	42a0      	cmp	r0, r4
 8002640:	d100      	bne.n	8002644 <__aeabi_dsub+0x40>
 8002642:	e0b1      	b.n	80027a8 <__aeabi_dsub+0x1a4>
 8002644:	2201      	movs	r2, #1
 8002646:	4056      	eors	r6, r2
 8002648:	46b3      	mov	fp, r6
 800264a:	42b5      	cmp	r5, r6
 800264c:	d100      	bne.n	8002650 <__aeabi_dsub+0x4c>
 800264e:	e088      	b.n	8002762 <__aeabi_dsub+0x15e>
 8002650:	4642      	mov	r2, r8
 8002652:	1a12      	subs	r2, r2, r0
 8002654:	2a00      	cmp	r2, #0
 8002656:	dc00      	bgt.n	800265a <__aeabi_dsub+0x56>
 8002658:	e0ae      	b.n	80027b8 <__aeabi_dsub+0x1b4>
 800265a:	2800      	cmp	r0, #0
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x5c>
 800265e:	e0c1      	b.n	80027e4 <__aeabi_dsub+0x1e0>
 8002660:	48be      	ldr	r0, [pc, #760]	; (800295c <__aeabi_dsub+0x358>)
 8002662:	4580      	cmp	r8, r0
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x64>
 8002666:	e151      	b.n	800290c <__aeabi_dsub+0x308>
 8002668:	2080      	movs	r0, #128	; 0x80
 800266a:	0400      	lsls	r0, r0, #16
 800266c:	4301      	orrs	r1, r0
 800266e:	2a38      	cmp	r2, #56	; 0x38
 8002670:	dd00      	ble.n	8002674 <__aeabi_dsub+0x70>
 8002672:	e17b      	b.n	800296c <__aeabi_dsub+0x368>
 8002674:	2a1f      	cmp	r2, #31
 8002676:	dd00      	ble.n	800267a <__aeabi_dsub+0x76>
 8002678:	e1ee      	b.n	8002a58 <__aeabi_dsub+0x454>
 800267a:	2020      	movs	r0, #32
 800267c:	003e      	movs	r6, r7
 800267e:	1a80      	subs	r0, r0, r2
 8002680:	000c      	movs	r4, r1
 8002682:	40d6      	lsrs	r6, r2
 8002684:	40d1      	lsrs	r1, r2
 8002686:	4087      	lsls	r7, r0
 8002688:	4662      	mov	r2, ip
 800268a:	4084      	lsls	r4, r0
 800268c:	1a52      	subs	r2, r2, r1
 800268e:	1e78      	subs	r0, r7, #1
 8002690:	4187      	sbcs	r7, r0
 8002692:	4694      	mov	ip, r2
 8002694:	4334      	orrs	r4, r6
 8002696:	4327      	orrs	r7, r4
 8002698:	1bdc      	subs	r4, r3, r7
 800269a:	42a3      	cmp	r3, r4
 800269c:	419b      	sbcs	r3, r3
 800269e:	4662      	mov	r2, ip
 80026a0:	425b      	negs	r3, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	4699      	mov	r9, r3
 80026a6:	464b      	mov	r3, r9
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	d400      	bmi.n	80026ae <__aeabi_dsub+0xaa>
 80026ac:	e118      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 80026ae:	464b      	mov	r3, r9
 80026b0:	0258      	lsls	r0, r3, #9
 80026b2:	0a43      	lsrs	r3, r0, #9
 80026b4:	4699      	mov	r9, r3
 80026b6:	464b      	mov	r3, r9
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0xba>
 80026bc:	e137      	b.n	800292e <__aeabi_dsub+0x32a>
 80026be:	4648      	mov	r0, r9
 80026c0:	f000 fc24 	bl	8002f0c <__clzsi2>
 80026c4:	0001      	movs	r1, r0
 80026c6:	3908      	subs	r1, #8
 80026c8:	2320      	movs	r3, #32
 80026ca:	0022      	movs	r2, r4
 80026cc:	4648      	mov	r0, r9
 80026ce:	1a5b      	subs	r3, r3, r1
 80026d0:	40da      	lsrs	r2, r3
 80026d2:	4088      	lsls	r0, r1
 80026d4:	408c      	lsls	r4, r1
 80026d6:	4643      	mov	r3, r8
 80026d8:	4310      	orrs	r0, r2
 80026da:	4588      	cmp	r8, r1
 80026dc:	dd00      	ble.n	80026e0 <__aeabi_dsub+0xdc>
 80026de:	e136      	b.n	800294e <__aeabi_dsub+0x34a>
 80026e0:	1ac9      	subs	r1, r1, r3
 80026e2:	1c4b      	adds	r3, r1, #1
 80026e4:	2b1f      	cmp	r3, #31
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dsub+0xe6>
 80026e8:	e0ea      	b.n	80028c0 <__aeabi_dsub+0x2bc>
 80026ea:	2220      	movs	r2, #32
 80026ec:	0026      	movs	r6, r4
 80026ee:	1ad2      	subs	r2, r2, r3
 80026f0:	0001      	movs	r1, r0
 80026f2:	4094      	lsls	r4, r2
 80026f4:	40de      	lsrs	r6, r3
 80026f6:	40d8      	lsrs	r0, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	4091      	lsls	r1, r2
 80026fc:	1e62      	subs	r2, r4, #1
 80026fe:	4194      	sbcs	r4, r2
 8002700:	4681      	mov	r9, r0
 8002702:	4698      	mov	r8, r3
 8002704:	4331      	orrs	r1, r6
 8002706:	430c      	orrs	r4, r1
 8002708:	0763      	lsls	r3, r4, #29
 800270a:	d009      	beq.n	8002720 <__aeabi_dsub+0x11c>
 800270c:	230f      	movs	r3, #15
 800270e:	4023      	ands	r3, r4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d005      	beq.n	8002720 <__aeabi_dsub+0x11c>
 8002714:	1d23      	adds	r3, r4, #4
 8002716:	42a3      	cmp	r3, r4
 8002718:	41a4      	sbcs	r4, r4
 800271a:	4264      	negs	r4, r4
 800271c:	44a1      	add	r9, r4
 800271e:	001c      	movs	r4, r3
 8002720:	464b      	mov	r3, r9
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	d400      	bmi.n	8002728 <__aeabi_dsub+0x124>
 8002726:	e0de      	b.n	80028e6 <__aeabi_dsub+0x2e2>
 8002728:	4641      	mov	r1, r8
 800272a:	4b8c      	ldr	r3, [pc, #560]	; (800295c <__aeabi_dsub+0x358>)
 800272c:	3101      	adds	r1, #1
 800272e:	4299      	cmp	r1, r3
 8002730:	d100      	bne.n	8002734 <__aeabi_dsub+0x130>
 8002732:	e0e7      	b.n	8002904 <__aeabi_dsub+0x300>
 8002734:	464b      	mov	r3, r9
 8002736:	488a      	ldr	r0, [pc, #552]	; (8002960 <__aeabi_dsub+0x35c>)
 8002738:	08e4      	lsrs	r4, r4, #3
 800273a:	4003      	ands	r3, r0
 800273c:	0018      	movs	r0, r3
 800273e:	0549      	lsls	r1, r1, #21
 8002740:	075b      	lsls	r3, r3, #29
 8002742:	0240      	lsls	r0, r0, #9
 8002744:	4323      	orrs	r3, r4
 8002746:	0d4a      	lsrs	r2, r1, #21
 8002748:	0b04      	lsrs	r4, r0, #12
 800274a:	0512      	lsls	r2, r2, #20
 800274c:	07ed      	lsls	r5, r5, #31
 800274e:	4322      	orrs	r2, r4
 8002750:	432a      	orrs	r2, r5
 8002752:	0018      	movs	r0, r3
 8002754:	0011      	movs	r1, r2
 8002756:	bcf0      	pop	{r4, r5, r6, r7}
 8002758:	46bb      	mov	fp, r7
 800275a:	46b2      	mov	sl, r6
 800275c:	46a9      	mov	r9, r5
 800275e:	46a0      	mov	r8, r4
 8002760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002762:	4642      	mov	r2, r8
 8002764:	1a12      	subs	r2, r2, r0
 8002766:	2a00      	cmp	r2, #0
 8002768:	dd52      	ble.n	8002810 <__aeabi_dsub+0x20c>
 800276a:	2800      	cmp	r0, #0
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x16c>
 800276e:	e09c      	b.n	80028aa <__aeabi_dsub+0x2a6>
 8002770:	45a0      	cmp	r8, r4
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x172>
 8002774:	e0ca      	b.n	800290c <__aeabi_dsub+0x308>
 8002776:	2080      	movs	r0, #128	; 0x80
 8002778:	0400      	lsls	r0, r0, #16
 800277a:	4301      	orrs	r1, r0
 800277c:	2a38      	cmp	r2, #56	; 0x38
 800277e:	dd00      	ble.n	8002782 <__aeabi_dsub+0x17e>
 8002780:	e149      	b.n	8002a16 <__aeabi_dsub+0x412>
 8002782:	2a1f      	cmp	r2, #31
 8002784:	dc00      	bgt.n	8002788 <__aeabi_dsub+0x184>
 8002786:	e197      	b.n	8002ab8 <__aeabi_dsub+0x4b4>
 8002788:	0010      	movs	r0, r2
 800278a:	000e      	movs	r6, r1
 800278c:	3820      	subs	r0, #32
 800278e:	40c6      	lsrs	r6, r0
 8002790:	2a20      	cmp	r2, #32
 8002792:	d004      	beq.n	800279e <__aeabi_dsub+0x19a>
 8002794:	2040      	movs	r0, #64	; 0x40
 8002796:	1a82      	subs	r2, r0, r2
 8002798:	4091      	lsls	r1, r2
 800279a:	430f      	orrs	r7, r1
 800279c:	46b9      	mov	r9, r7
 800279e:	464c      	mov	r4, r9
 80027a0:	1e62      	subs	r2, r4, #1
 80027a2:	4194      	sbcs	r4, r2
 80027a4:	4334      	orrs	r4, r6
 80027a6:	e13a      	b.n	8002a1e <__aeabi_dsub+0x41a>
 80027a8:	000a      	movs	r2, r1
 80027aa:	433a      	orrs	r2, r7
 80027ac:	d028      	beq.n	8002800 <__aeabi_dsub+0x1fc>
 80027ae:	46b3      	mov	fp, r6
 80027b0:	42b5      	cmp	r5, r6
 80027b2:	d02b      	beq.n	800280c <__aeabi_dsub+0x208>
 80027b4:	4a6b      	ldr	r2, [pc, #428]	; (8002964 <__aeabi_dsub+0x360>)
 80027b6:	4442      	add	r2, r8
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d05d      	beq.n	8002878 <__aeabi_dsub+0x274>
 80027bc:	4642      	mov	r2, r8
 80027be:	4644      	mov	r4, r8
 80027c0:	1a82      	subs	r2, r0, r2
 80027c2:	2c00      	cmp	r4, #0
 80027c4:	d000      	beq.n	80027c8 <__aeabi_dsub+0x1c4>
 80027c6:	e0f5      	b.n	80029b4 <__aeabi_dsub+0x3b0>
 80027c8:	4665      	mov	r5, ip
 80027ca:	431d      	orrs	r5, r3
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dsub+0x1cc>
 80027ce:	e19c      	b.n	8002b0a <__aeabi_dsub+0x506>
 80027d0:	1e55      	subs	r5, r2, #1
 80027d2:	2a01      	cmp	r2, #1
 80027d4:	d100      	bne.n	80027d8 <__aeabi_dsub+0x1d4>
 80027d6:	e1fb      	b.n	8002bd0 <__aeabi_dsub+0x5cc>
 80027d8:	4c60      	ldr	r4, [pc, #384]	; (800295c <__aeabi_dsub+0x358>)
 80027da:	42a2      	cmp	r2, r4
 80027dc:	d100      	bne.n	80027e0 <__aeabi_dsub+0x1dc>
 80027de:	e1bd      	b.n	8002b5c <__aeabi_dsub+0x558>
 80027e0:	002a      	movs	r2, r5
 80027e2:	e0f0      	b.n	80029c6 <__aeabi_dsub+0x3c2>
 80027e4:	0008      	movs	r0, r1
 80027e6:	4338      	orrs	r0, r7
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x1e8>
 80027ea:	e0c3      	b.n	8002974 <__aeabi_dsub+0x370>
 80027ec:	1e50      	subs	r0, r2, #1
 80027ee:	2a01      	cmp	r2, #1
 80027f0:	d100      	bne.n	80027f4 <__aeabi_dsub+0x1f0>
 80027f2:	e1a8      	b.n	8002b46 <__aeabi_dsub+0x542>
 80027f4:	4c59      	ldr	r4, [pc, #356]	; (800295c <__aeabi_dsub+0x358>)
 80027f6:	42a2      	cmp	r2, r4
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x1f8>
 80027fa:	e087      	b.n	800290c <__aeabi_dsub+0x308>
 80027fc:	0002      	movs	r2, r0
 80027fe:	e736      	b.n	800266e <__aeabi_dsub+0x6a>
 8002800:	2201      	movs	r2, #1
 8002802:	4056      	eors	r6, r2
 8002804:	46b3      	mov	fp, r6
 8002806:	42b5      	cmp	r5, r6
 8002808:	d000      	beq.n	800280c <__aeabi_dsub+0x208>
 800280a:	e721      	b.n	8002650 <__aeabi_dsub+0x4c>
 800280c:	4a55      	ldr	r2, [pc, #340]	; (8002964 <__aeabi_dsub+0x360>)
 800280e:	4442      	add	r2, r8
 8002810:	2a00      	cmp	r2, #0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x212>
 8002814:	e0b5      	b.n	8002982 <__aeabi_dsub+0x37e>
 8002816:	4642      	mov	r2, r8
 8002818:	4644      	mov	r4, r8
 800281a:	1a82      	subs	r2, r0, r2
 800281c:	2c00      	cmp	r4, #0
 800281e:	d100      	bne.n	8002822 <__aeabi_dsub+0x21e>
 8002820:	e138      	b.n	8002a94 <__aeabi_dsub+0x490>
 8002822:	4e4e      	ldr	r6, [pc, #312]	; (800295c <__aeabi_dsub+0x358>)
 8002824:	42b0      	cmp	r0, r6
 8002826:	d100      	bne.n	800282a <__aeabi_dsub+0x226>
 8002828:	e1de      	b.n	8002be8 <__aeabi_dsub+0x5e4>
 800282a:	2680      	movs	r6, #128	; 0x80
 800282c:	4664      	mov	r4, ip
 800282e:	0436      	lsls	r6, r6, #16
 8002830:	4334      	orrs	r4, r6
 8002832:	46a4      	mov	ip, r4
 8002834:	2a38      	cmp	r2, #56	; 0x38
 8002836:	dd00      	ble.n	800283a <__aeabi_dsub+0x236>
 8002838:	e196      	b.n	8002b68 <__aeabi_dsub+0x564>
 800283a:	2a1f      	cmp	r2, #31
 800283c:	dd00      	ble.n	8002840 <__aeabi_dsub+0x23c>
 800283e:	e224      	b.n	8002c8a <__aeabi_dsub+0x686>
 8002840:	2620      	movs	r6, #32
 8002842:	1ab4      	subs	r4, r6, r2
 8002844:	46a2      	mov	sl, r4
 8002846:	4664      	mov	r4, ip
 8002848:	4656      	mov	r6, sl
 800284a:	40b4      	lsls	r4, r6
 800284c:	46a1      	mov	r9, r4
 800284e:	001c      	movs	r4, r3
 8002850:	464e      	mov	r6, r9
 8002852:	40d4      	lsrs	r4, r2
 8002854:	4326      	orrs	r6, r4
 8002856:	0034      	movs	r4, r6
 8002858:	4656      	mov	r6, sl
 800285a:	40b3      	lsls	r3, r6
 800285c:	1e5e      	subs	r6, r3, #1
 800285e:	41b3      	sbcs	r3, r6
 8002860:	431c      	orrs	r4, r3
 8002862:	4663      	mov	r3, ip
 8002864:	40d3      	lsrs	r3, r2
 8002866:	18c9      	adds	r1, r1, r3
 8002868:	19e4      	adds	r4, r4, r7
 800286a:	42bc      	cmp	r4, r7
 800286c:	41bf      	sbcs	r7, r7
 800286e:	427f      	negs	r7, r7
 8002870:	46b9      	mov	r9, r7
 8002872:	4680      	mov	r8, r0
 8002874:	4489      	add	r9, r1
 8002876:	e0d8      	b.n	8002a2a <__aeabi_dsub+0x426>
 8002878:	4640      	mov	r0, r8
 800287a:	4c3b      	ldr	r4, [pc, #236]	; (8002968 <__aeabi_dsub+0x364>)
 800287c:	3001      	adds	r0, #1
 800287e:	4220      	tst	r0, r4
 8002880:	d000      	beq.n	8002884 <__aeabi_dsub+0x280>
 8002882:	e0b4      	b.n	80029ee <__aeabi_dsub+0x3ea>
 8002884:	4640      	mov	r0, r8
 8002886:	2800      	cmp	r0, #0
 8002888:	d000      	beq.n	800288c <__aeabi_dsub+0x288>
 800288a:	e144      	b.n	8002b16 <__aeabi_dsub+0x512>
 800288c:	4660      	mov	r0, ip
 800288e:	4318      	orrs	r0, r3
 8002890:	d100      	bne.n	8002894 <__aeabi_dsub+0x290>
 8002892:	e190      	b.n	8002bb6 <__aeabi_dsub+0x5b2>
 8002894:	0008      	movs	r0, r1
 8002896:	4338      	orrs	r0, r7
 8002898:	d000      	beq.n	800289c <__aeabi_dsub+0x298>
 800289a:	e1aa      	b.n	8002bf2 <__aeabi_dsub+0x5ee>
 800289c:	4661      	mov	r1, ip
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	0749      	lsls	r1, r1, #29
 80028a2:	430b      	orrs	r3, r1
 80028a4:	4661      	mov	r1, ip
 80028a6:	08cc      	lsrs	r4, r1, #3
 80028a8:	e027      	b.n	80028fa <__aeabi_dsub+0x2f6>
 80028aa:	0008      	movs	r0, r1
 80028ac:	4338      	orrs	r0, r7
 80028ae:	d061      	beq.n	8002974 <__aeabi_dsub+0x370>
 80028b0:	1e50      	subs	r0, r2, #1
 80028b2:	2a01      	cmp	r2, #1
 80028b4:	d100      	bne.n	80028b8 <__aeabi_dsub+0x2b4>
 80028b6:	e139      	b.n	8002b2c <__aeabi_dsub+0x528>
 80028b8:	42a2      	cmp	r2, r4
 80028ba:	d027      	beq.n	800290c <__aeabi_dsub+0x308>
 80028bc:	0002      	movs	r2, r0
 80028be:	e75d      	b.n	800277c <__aeabi_dsub+0x178>
 80028c0:	0002      	movs	r2, r0
 80028c2:	391f      	subs	r1, #31
 80028c4:	40ca      	lsrs	r2, r1
 80028c6:	0011      	movs	r1, r2
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d003      	beq.n	80028d4 <__aeabi_dsub+0x2d0>
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4098      	lsls	r0, r3
 80028d2:	4304      	orrs	r4, r0
 80028d4:	1e63      	subs	r3, r4, #1
 80028d6:	419c      	sbcs	r4, r3
 80028d8:	2300      	movs	r3, #0
 80028da:	4699      	mov	r9, r3
 80028dc:	4698      	mov	r8, r3
 80028de:	430c      	orrs	r4, r1
 80028e0:	0763      	lsls	r3, r4, #29
 80028e2:	d000      	beq.n	80028e6 <__aeabi_dsub+0x2e2>
 80028e4:	e712      	b.n	800270c <__aeabi_dsub+0x108>
 80028e6:	464b      	mov	r3, r9
 80028e8:	464a      	mov	r2, r9
 80028ea:	08e4      	lsrs	r4, r4, #3
 80028ec:	075b      	lsls	r3, r3, #29
 80028ee:	4323      	orrs	r3, r4
 80028f0:	08d4      	lsrs	r4, r2, #3
 80028f2:	4642      	mov	r2, r8
 80028f4:	4919      	ldr	r1, [pc, #100]	; (800295c <__aeabi_dsub+0x358>)
 80028f6:	428a      	cmp	r2, r1
 80028f8:	d00e      	beq.n	8002918 <__aeabi_dsub+0x314>
 80028fa:	0324      	lsls	r4, r4, #12
 80028fc:	0552      	lsls	r2, r2, #21
 80028fe:	0b24      	lsrs	r4, r4, #12
 8002900:	0d52      	lsrs	r2, r2, #21
 8002902:	e722      	b.n	800274a <__aeabi_dsub+0x146>
 8002904:	000a      	movs	r2, r1
 8002906:	2400      	movs	r4, #0
 8002908:	2300      	movs	r3, #0
 800290a:	e71e      	b.n	800274a <__aeabi_dsub+0x146>
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	4662      	mov	r2, ip
 8002910:	0752      	lsls	r2, r2, #29
 8002912:	4313      	orrs	r3, r2
 8002914:	4662      	mov	r2, ip
 8002916:	08d4      	lsrs	r4, r2, #3
 8002918:	001a      	movs	r2, r3
 800291a:	4322      	orrs	r2, r4
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x31c>
 800291e:	e1fc      	b.n	8002d1a <__aeabi_dsub+0x716>
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	0312      	lsls	r2, r2, #12
 8002924:	4314      	orrs	r4, r2
 8002926:	0324      	lsls	r4, r4, #12
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <__aeabi_dsub+0x358>)
 800292a:	0b24      	lsrs	r4, r4, #12
 800292c:	e70d      	b.n	800274a <__aeabi_dsub+0x146>
 800292e:	0020      	movs	r0, r4
 8002930:	f000 faec 	bl	8002f0c <__clzsi2>
 8002934:	0001      	movs	r1, r0
 8002936:	3118      	adds	r1, #24
 8002938:	291f      	cmp	r1, #31
 800293a:	dc00      	bgt.n	800293e <__aeabi_dsub+0x33a>
 800293c:	e6c4      	b.n	80026c8 <__aeabi_dsub+0xc4>
 800293e:	3808      	subs	r0, #8
 8002940:	4084      	lsls	r4, r0
 8002942:	4643      	mov	r3, r8
 8002944:	0020      	movs	r0, r4
 8002946:	2400      	movs	r4, #0
 8002948:	4588      	cmp	r8, r1
 800294a:	dc00      	bgt.n	800294e <__aeabi_dsub+0x34a>
 800294c:	e6c8      	b.n	80026e0 <__aeabi_dsub+0xdc>
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__aeabi_dsub+0x35c>)
 8002950:	1a5b      	subs	r3, r3, r1
 8002952:	4010      	ands	r0, r2
 8002954:	4698      	mov	r8, r3
 8002956:	4681      	mov	r9, r0
 8002958:	e6d6      	b.n	8002708 <__aeabi_dsub+0x104>
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	000007ff 	.word	0x000007ff
 8002960:	ff7fffff 	.word	0xff7fffff
 8002964:	fffff801 	.word	0xfffff801
 8002968:	000007fe 	.word	0x000007fe
 800296c:	430f      	orrs	r7, r1
 800296e:	1e7a      	subs	r2, r7, #1
 8002970:	4197      	sbcs	r7, r2
 8002972:	e691      	b.n	8002698 <__aeabi_dsub+0x94>
 8002974:	4661      	mov	r1, ip
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	0749      	lsls	r1, r1, #29
 800297a:	430b      	orrs	r3, r1
 800297c:	4661      	mov	r1, ip
 800297e:	08cc      	lsrs	r4, r1, #3
 8002980:	e7b8      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002982:	4640      	mov	r0, r8
 8002984:	4cd3      	ldr	r4, [pc, #844]	; (8002cd4 <__aeabi_dsub+0x6d0>)
 8002986:	3001      	adds	r0, #1
 8002988:	4220      	tst	r0, r4
 800298a:	d000      	beq.n	800298e <__aeabi_dsub+0x38a>
 800298c:	e0a2      	b.n	8002ad4 <__aeabi_dsub+0x4d0>
 800298e:	4640      	mov	r0, r8
 8002990:	2800      	cmp	r0, #0
 8002992:	d000      	beq.n	8002996 <__aeabi_dsub+0x392>
 8002994:	e101      	b.n	8002b9a <__aeabi_dsub+0x596>
 8002996:	4660      	mov	r0, ip
 8002998:	4318      	orrs	r0, r3
 800299a:	d100      	bne.n	800299e <__aeabi_dsub+0x39a>
 800299c:	e15e      	b.n	8002c5c <__aeabi_dsub+0x658>
 800299e:	0008      	movs	r0, r1
 80029a0:	4338      	orrs	r0, r7
 80029a2:	d000      	beq.n	80029a6 <__aeabi_dsub+0x3a2>
 80029a4:	e15f      	b.n	8002c66 <__aeabi_dsub+0x662>
 80029a6:	4661      	mov	r1, ip
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	0749      	lsls	r1, r1, #29
 80029ac:	430b      	orrs	r3, r1
 80029ae:	4661      	mov	r1, ip
 80029b0:	08cc      	lsrs	r4, r1, #3
 80029b2:	e7a2      	b.n	80028fa <__aeabi_dsub+0x2f6>
 80029b4:	4dc8      	ldr	r5, [pc, #800]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 80029b6:	42a8      	cmp	r0, r5
 80029b8:	d100      	bne.n	80029bc <__aeabi_dsub+0x3b8>
 80029ba:	e0cf      	b.n	8002b5c <__aeabi_dsub+0x558>
 80029bc:	2580      	movs	r5, #128	; 0x80
 80029be:	4664      	mov	r4, ip
 80029c0:	042d      	lsls	r5, r5, #16
 80029c2:	432c      	orrs	r4, r5
 80029c4:	46a4      	mov	ip, r4
 80029c6:	2a38      	cmp	r2, #56	; 0x38
 80029c8:	dc56      	bgt.n	8002a78 <__aeabi_dsub+0x474>
 80029ca:	2a1f      	cmp	r2, #31
 80029cc:	dd00      	ble.n	80029d0 <__aeabi_dsub+0x3cc>
 80029ce:	e0d1      	b.n	8002b74 <__aeabi_dsub+0x570>
 80029d0:	2520      	movs	r5, #32
 80029d2:	001e      	movs	r6, r3
 80029d4:	1aad      	subs	r5, r5, r2
 80029d6:	4664      	mov	r4, ip
 80029d8:	40ab      	lsls	r3, r5
 80029da:	40ac      	lsls	r4, r5
 80029dc:	40d6      	lsrs	r6, r2
 80029de:	1e5d      	subs	r5, r3, #1
 80029e0:	41ab      	sbcs	r3, r5
 80029e2:	4334      	orrs	r4, r6
 80029e4:	4323      	orrs	r3, r4
 80029e6:	4664      	mov	r4, ip
 80029e8:	40d4      	lsrs	r4, r2
 80029ea:	1b09      	subs	r1, r1, r4
 80029ec:	e049      	b.n	8002a82 <__aeabi_dsub+0x47e>
 80029ee:	4660      	mov	r0, ip
 80029f0:	1bdc      	subs	r4, r3, r7
 80029f2:	1a46      	subs	r6, r0, r1
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	4180      	sbcs	r0, r0
 80029f8:	4240      	negs	r0, r0
 80029fa:	4681      	mov	r9, r0
 80029fc:	0030      	movs	r0, r6
 80029fe:	464e      	mov	r6, r9
 8002a00:	1b80      	subs	r0, r0, r6
 8002a02:	4681      	mov	r9, r0
 8002a04:	0200      	lsls	r0, r0, #8
 8002a06:	d476      	bmi.n	8002af6 <__aeabi_dsub+0x4f2>
 8002a08:	464b      	mov	r3, r9
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	d000      	beq.n	8002a10 <__aeabi_dsub+0x40c>
 8002a0e:	e652      	b.n	80026b6 <__aeabi_dsub+0xb2>
 8002a10:	2400      	movs	r4, #0
 8002a12:	2500      	movs	r5, #0
 8002a14:	e771      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002a16:	4339      	orrs	r1, r7
 8002a18:	000c      	movs	r4, r1
 8002a1a:	1e62      	subs	r2, r4, #1
 8002a1c:	4194      	sbcs	r4, r2
 8002a1e:	18e4      	adds	r4, r4, r3
 8002a20:	429c      	cmp	r4, r3
 8002a22:	419b      	sbcs	r3, r3
 8002a24:	425b      	negs	r3, r3
 8002a26:	4463      	add	r3, ip
 8002a28:	4699      	mov	r9, r3
 8002a2a:	464b      	mov	r3, r9
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	d400      	bmi.n	8002a32 <__aeabi_dsub+0x42e>
 8002a30:	e756      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002a32:	2301      	movs	r3, #1
 8002a34:	469c      	mov	ip, r3
 8002a36:	4ba8      	ldr	r3, [pc, #672]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002a38:	44e0      	add	r8, ip
 8002a3a:	4598      	cmp	r8, r3
 8002a3c:	d038      	beq.n	8002ab0 <__aeabi_dsub+0x4ac>
 8002a3e:	464b      	mov	r3, r9
 8002a40:	48a6      	ldr	r0, [pc, #664]	; (8002cdc <__aeabi_dsub+0x6d8>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	4003      	ands	r3, r0
 8002a46:	0018      	movs	r0, r3
 8002a48:	0863      	lsrs	r3, r4, #1
 8002a4a:	4014      	ands	r4, r2
 8002a4c:	431c      	orrs	r4, r3
 8002a4e:	07c3      	lsls	r3, r0, #31
 8002a50:	431c      	orrs	r4, r3
 8002a52:	0843      	lsrs	r3, r0, #1
 8002a54:	4699      	mov	r9, r3
 8002a56:	e657      	b.n	8002708 <__aeabi_dsub+0x104>
 8002a58:	0010      	movs	r0, r2
 8002a5a:	000e      	movs	r6, r1
 8002a5c:	3820      	subs	r0, #32
 8002a5e:	40c6      	lsrs	r6, r0
 8002a60:	2a20      	cmp	r2, #32
 8002a62:	d004      	beq.n	8002a6e <__aeabi_dsub+0x46a>
 8002a64:	2040      	movs	r0, #64	; 0x40
 8002a66:	1a82      	subs	r2, r0, r2
 8002a68:	4091      	lsls	r1, r2
 8002a6a:	430f      	orrs	r7, r1
 8002a6c:	46b9      	mov	r9, r7
 8002a6e:	464f      	mov	r7, r9
 8002a70:	1e7a      	subs	r2, r7, #1
 8002a72:	4197      	sbcs	r7, r2
 8002a74:	4337      	orrs	r7, r6
 8002a76:	e60f      	b.n	8002698 <__aeabi_dsub+0x94>
 8002a78:	4662      	mov	r2, ip
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	0013      	movs	r3, r2
 8002a7e:	1e5a      	subs	r2, r3, #1
 8002a80:	4193      	sbcs	r3, r2
 8002a82:	1afc      	subs	r4, r7, r3
 8002a84:	42a7      	cmp	r7, r4
 8002a86:	41bf      	sbcs	r7, r7
 8002a88:	427f      	negs	r7, r7
 8002a8a:	1bcb      	subs	r3, r1, r7
 8002a8c:	4699      	mov	r9, r3
 8002a8e:	465d      	mov	r5, fp
 8002a90:	4680      	mov	r8, r0
 8002a92:	e608      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002a94:	4666      	mov	r6, ip
 8002a96:	431e      	orrs	r6, r3
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x498>
 8002a9a:	e0be      	b.n	8002c1a <__aeabi_dsub+0x616>
 8002a9c:	1e56      	subs	r6, r2, #1
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d100      	bne.n	8002aa4 <__aeabi_dsub+0x4a0>
 8002aa2:	e109      	b.n	8002cb8 <__aeabi_dsub+0x6b4>
 8002aa4:	4c8c      	ldr	r4, [pc, #560]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002aa6:	42a2      	cmp	r2, r4
 8002aa8:	d100      	bne.n	8002aac <__aeabi_dsub+0x4a8>
 8002aaa:	e119      	b.n	8002ce0 <__aeabi_dsub+0x6dc>
 8002aac:	0032      	movs	r2, r6
 8002aae:	e6c1      	b.n	8002834 <__aeabi_dsub+0x230>
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	2400      	movs	r4, #0
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e648      	b.n	800274a <__aeabi_dsub+0x146>
 8002ab8:	2020      	movs	r0, #32
 8002aba:	000c      	movs	r4, r1
 8002abc:	1a80      	subs	r0, r0, r2
 8002abe:	003e      	movs	r6, r7
 8002ac0:	4087      	lsls	r7, r0
 8002ac2:	4084      	lsls	r4, r0
 8002ac4:	40d6      	lsrs	r6, r2
 8002ac6:	1e78      	subs	r0, r7, #1
 8002ac8:	4187      	sbcs	r7, r0
 8002aca:	40d1      	lsrs	r1, r2
 8002acc:	4334      	orrs	r4, r6
 8002ace:	433c      	orrs	r4, r7
 8002ad0:	448c      	add	ip, r1
 8002ad2:	e7a4      	b.n	8002a1e <__aeabi_dsub+0x41a>
 8002ad4:	4a80      	ldr	r2, [pc, #512]	; (8002cd8 <__aeabi_dsub+0x6d4>)
 8002ad6:	4290      	cmp	r0, r2
 8002ad8:	d100      	bne.n	8002adc <__aeabi_dsub+0x4d8>
 8002ada:	e0e9      	b.n	8002cb0 <__aeabi_dsub+0x6ac>
 8002adc:	19df      	adds	r7, r3, r7
 8002ade:	429f      	cmp	r7, r3
 8002ae0:	419b      	sbcs	r3, r3
 8002ae2:	4461      	add	r1, ip
 8002ae4:	425b      	negs	r3, r3
 8002ae6:	18c9      	adds	r1, r1, r3
 8002ae8:	07cc      	lsls	r4, r1, #31
 8002aea:	087f      	lsrs	r7, r7, #1
 8002aec:	084b      	lsrs	r3, r1, #1
 8002aee:	4699      	mov	r9, r3
 8002af0:	4680      	mov	r8, r0
 8002af2:	433c      	orrs	r4, r7
 8002af4:	e6f4      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002af6:	1afc      	subs	r4, r7, r3
 8002af8:	42a7      	cmp	r7, r4
 8002afa:	41bf      	sbcs	r7, r7
 8002afc:	4663      	mov	r3, ip
 8002afe:	427f      	negs	r7, r7
 8002b00:	1ac9      	subs	r1, r1, r3
 8002b02:	1bcb      	subs	r3, r1, r7
 8002b04:	4699      	mov	r9, r3
 8002b06:	465d      	mov	r5, fp
 8002b08:	e5d5      	b.n	80026b6 <__aeabi_dsub+0xb2>
 8002b0a:	08ff      	lsrs	r7, r7, #3
 8002b0c:	074b      	lsls	r3, r1, #29
 8002b0e:	465d      	mov	r5, fp
 8002b10:	433b      	orrs	r3, r7
 8002b12:	08cc      	lsrs	r4, r1, #3
 8002b14:	e6ee      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002b16:	4662      	mov	r2, ip
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_dsub+0x51a>
 8002b1c:	e082      	b.n	8002c24 <__aeabi_dsub+0x620>
 8002b1e:	000b      	movs	r3, r1
 8002b20:	433b      	orrs	r3, r7
 8002b22:	d11b      	bne.n	8002b5c <__aeabi_dsub+0x558>
 8002b24:	2480      	movs	r4, #128	; 0x80
 8002b26:	2500      	movs	r5, #0
 8002b28:	0324      	lsls	r4, r4, #12
 8002b2a:	e6f9      	b.n	8002920 <__aeabi_dsub+0x31c>
 8002b2c:	19dc      	adds	r4, r3, r7
 8002b2e:	429c      	cmp	r4, r3
 8002b30:	419b      	sbcs	r3, r3
 8002b32:	4461      	add	r1, ip
 8002b34:	4689      	mov	r9, r1
 8002b36:	425b      	negs	r3, r3
 8002b38:	4499      	add	r9, r3
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	d444      	bmi.n	8002bca <__aeabi_dsub+0x5c6>
 8002b40:	2301      	movs	r3, #1
 8002b42:	4698      	mov	r8, r3
 8002b44:	e6cc      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002b46:	1bdc      	subs	r4, r3, r7
 8002b48:	4662      	mov	r2, ip
 8002b4a:	42a3      	cmp	r3, r4
 8002b4c:	419b      	sbcs	r3, r3
 8002b4e:	1a51      	subs	r1, r2, r1
 8002b50:	425b      	negs	r3, r3
 8002b52:	1acb      	subs	r3, r1, r3
 8002b54:	4699      	mov	r9, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	4698      	mov	r8, r3
 8002b5a:	e5a4      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002b5c:	08ff      	lsrs	r7, r7, #3
 8002b5e:	074b      	lsls	r3, r1, #29
 8002b60:	465d      	mov	r5, fp
 8002b62:	433b      	orrs	r3, r7
 8002b64:	08cc      	lsrs	r4, r1, #3
 8002b66:	e6d7      	b.n	8002918 <__aeabi_dsub+0x314>
 8002b68:	4662      	mov	r2, ip
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	0014      	movs	r4, r2
 8002b6e:	1e63      	subs	r3, r4, #1
 8002b70:	419c      	sbcs	r4, r3
 8002b72:	e679      	b.n	8002868 <__aeabi_dsub+0x264>
 8002b74:	0015      	movs	r5, r2
 8002b76:	4664      	mov	r4, ip
 8002b78:	3d20      	subs	r5, #32
 8002b7a:	40ec      	lsrs	r4, r5
 8002b7c:	46a0      	mov	r8, r4
 8002b7e:	2a20      	cmp	r2, #32
 8002b80:	d005      	beq.n	8002b8e <__aeabi_dsub+0x58a>
 8002b82:	2540      	movs	r5, #64	; 0x40
 8002b84:	4664      	mov	r4, ip
 8002b86:	1aaa      	subs	r2, r5, r2
 8002b88:	4094      	lsls	r4, r2
 8002b8a:	4323      	orrs	r3, r4
 8002b8c:	469a      	mov	sl, r3
 8002b8e:	4654      	mov	r4, sl
 8002b90:	1e63      	subs	r3, r4, #1
 8002b92:	419c      	sbcs	r4, r3
 8002b94:	4643      	mov	r3, r8
 8002b96:	4323      	orrs	r3, r4
 8002b98:	e773      	b.n	8002a82 <__aeabi_dsub+0x47e>
 8002b9a:	4662      	mov	r2, ip
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	d023      	beq.n	8002be8 <__aeabi_dsub+0x5e4>
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	433a      	orrs	r2, r7
 8002ba4:	d000      	beq.n	8002ba8 <__aeabi_dsub+0x5a4>
 8002ba6:	e0a0      	b.n	8002cea <__aeabi_dsub+0x6e6>
 8002ba8:	4662      	mov	r2, ip
 8002baa:	08db      	lsrs	r3, r3, #3
 8002bac:	0752      	lsls	r2, r2, #29
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	4662      	mov	r2, ip
 8002bb2:	08d4      	lsrs	r4, r2, #3
 8002bb4:	e6b0      	b.n	8002918 <__aeabi_dsub+0x314>
 8002bb6:	000b      	movs	r3, r1
 8002bb8:	433b      	orrs	r3, r7
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x5ba>
 8002bbc:	e728      	b.n	8002a10 <__aeabi_dsub+0x40c>
 8002bbe:	08ff      	lsrs	r7, r7, #3
 8002bc0:	074b      	lsls	r3, r1, #29
 8002bc2:	465d      	mov	r5, fp
 8002bc4:	433b      	orrs	r3, r7
 8002bc6:	08cc      	lsrs	r4, r1, #3
 8002bc8:	e697      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	4698      	mov	r8, r3
 8002bce:	e736      	b.n	8002a3e <__aeabi_dsub+0x43a>
 8002bd0:	1afc      	subs	r4, r7, r3
 8002bd2:	42a7      	cmp	r7, r4
 8002bd4:	41bf      	sbcs	r7, r7
 8002bd6:	4663      	mov	r3, ip
 8002bd8:	427f      	negs	r7, r7
 8002bda:	1ac9      	subs	r1, r1, r3
 8002bdc:	1bcb      	subs	r3, r1, r7
 8002bde:	4699      	mov	r9, r3
 8002be0:	2301      	movs	r3, #1
 8002be2:	465d      	mov	r5, fp
 8002be4:	4698      	mov	r8, r3
 8002be6:	e55e      	b.n	80026a6 <__aeabi_dsub+0xa2>
 8002be8:	074b      	lsls	r3, r1, #29
 8002bea:	08ff      	lsrs	r7, r7, #3
 8002bec:	433b      	orrs	r3, r7
 8002bee:	08cc      	lsrs	r4, r1, #3
 8002bf0:	e692      	b.n	8002918 <__aeabi_dsub+0x314>
 8002bf2:	1bdc      	subs	r4, r3, r7
 8002bf4:	4660      	mov	r0, ip
 8002bf6:	42a3      	cmp	r3, r4
 8002bf8:	41b6      	sbcs	r6, r6
 8002bfa:	1a40      	subs	r0, r0, r1
 8002bfc:	4276      	negs	r6, r6
 8002bfe:	1b80      	subs	r0, r0, r6
 8002c00:	4681      	mov	r9, r0
 8002c02:	0200      	lsls	r0, r0, #8
 8002c04:	d560      	bpl.n	8002cc8 <__aeabi_dsub+0x6c4>
 8002c06:	1afc      	subs	r4, r7, r3
 8002c08:	42a7      	cmp	r7, r4
 8002c0a:	41bf      	sbcs	r7, r7
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	427f      	negs	r7, r7
 8002c10:	1ac9      	subs	r1, r1, r3
 8002c12:	1bcb      	subs	r3, r1, r7
 8002c14:	4699      	mov	r9, r3
 8002c16:	465d      	mov	r5, fp
 8002c18:	e576      	b.n	8002708 <__aeabi_dsub+0x104>
 8002c1a:	08ff      	lsrs	r7, r7, #3
 8002c1c:	074b      	lsls	r3, r1, #29
 8002c1e:	433b      	orrs	r3, r7
 8002c20:	08cc      	lsrs	r4, r1, #3
 8002c22:	e667      	b.n	80028f4 <__aeabi_dsub+0x2f0>
 8002c24:	000a      	movs	r2, r1
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	433a      	orrs	r2, r7
 8002c2a:	d100      	bne.n	8002c2e <__aeabi_dsub+0x62a>
 8002c2c:	e66f      	b.n	800290e <__aeabi_dsub+0x30a>
 8002c2e:	4662      	mov	r2, ip
 8002c30:	0752      	lsls	r2, r2, #29
 8002c32:	4313      	orrs	r3, r2
 8002c34:	4662      	mov	r2, ip
 8002c36:	08d4      	lsrs	r4, r2, #3
 8002c38:	2280      	movs	r2, #128	; 0x80
 8002c3a:	0312      	lsls	r2, r2, #12
 8002c3c:	4214      	tst	r4, r2
 8002c3e:	d007      	beq.n	8002c50 <__aeabi_dsub+0x64c>
 8002c40:	08c8      	lsrs	r0, r1, #3
 8002c42:	4210      	tst	r0, r2
 8002c44:	d104      	bne.n	8002c50 <__aeabi_dsub+0x64c>
 8002c46:	465d      	mov	r5, fp
 8002c48:	0004      	movs	r4, r0
 8002c4a:	08fb      	lsrs	r3, r7, #3
 8002c4c:	0749      	lsls	r1, r1, #29
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	0f5a      	lsrs	r2, r3, #29
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	08db      	lsrs	r3, r3, #3
 8002c56:	0752      	lsls	r2, r2, #29
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	e65d      	b.n	8002918 <__aeabi_dsub+0x314>
 8002c5c:	074b      	lsls	r3, r1, #29
 8002c5e:	08ff      	lsrs	r7, r7, #3
 8002c60:	433b      	orrs	r3, r7
 8002c62:	08cc      	lsrs	r4, r1, #3
 8002c64:	e649      	b.n	80028fa <__aeabi_dsub+0x2f6>
 8002c66:	19dc      	adds	r4, r3, r7
 8002c68:	429c      	cmp	r4, r3
 8002c6a:	419b      	sbcs	r3, r3
 8002c6c:	4461      	add	r1, ip
 8002c6e:	4689      	mov	r9, r1
 8002c70:	425b      	negs	r3, r3
 8002c72:	4499      	add	r9, r3
 8002c74:	464b      	mov	r3, r9
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	d400      	bmi.n	8002c7c <__aeabi_dsub+0x678>
 8002c7a:	e631      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002c7c:	464a      	mov	r2, r9
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <__aeabi_dsub+0x6d8>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	2301      	movs	r3, #1
 8002c84:	4691      	mov	r9, r2
 8002c86:	4698      	mov	r8, r3
 8002c88:	e62a      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002c8a:	0016      	movs	r6, r2
 8002c8c:	4664      	mov	r4, ip
 8002c8e:	3e20      	subs	r6, #32
 8002c90:	40f4      	lsrs	r4, r6
 8002c92:	46a0      	mov	r8, r4
 8002c94:	2a20      	cmp	r2, #32
 8002c96:	d005      	beq.n	8002ca4 <__aeabi_dsub+0x6a0>
 8002c98:	2640      	movs	r6, #64	; 0x40
 8002c9a:	4664      	mov	r4, ip
 8002c9c:	1ab2      	subs	r2, r6, r2
 8002c9e:	4094      	lsls	r4, r2
 8002ca0:	4323      	orrs	r3, r4
 8002ca2:	469a      	mov	sl, r3
 8002ca4:	4654      	mov	r4, sl
 8002ca6:	1e63      	subs	r3, r4, #1
 8002ca8:	419c      	sbcs	r4, r3
 8002caa:	4643      	mov	r3, r8
 8002cac:	431c      	orrs	r4, r3
 8002cae:	e5db      	b.n	8002868 <__aeabi_dsub+0x264>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	2400      	movs	r4, #0
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e548      	b.n	800274a <__aeabi_dsub+0x146>
 8002cb8:	19dc      	adds	r4, r3, r7
 8002cba:	42bc      	cmp	r4, r7
 8002cbc:	41bf      	sbcs	r7, r7
 8002cbe:	4461      	add	r1, ip
 8002cc0:	4689      	mov	r9, r1
 8002cc2:	427f      	negs	r7, r7
 8002cc4:	44b9      	add	r9, r7
 8002cc6:	e738      	b.n	8002b3a <__aeabi_dsub+0x536>
 8002cc8:	464b      	mov	r3, r9
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	d100      	bne.n	8002cd0 <__aeabi_dsub+0x6cc>
 8002cce:	e69f      	b.n	8002a10 <__aeabi_dsub+0x40c>
 8002cd0:	e606      	b.n	80028e0 <__aeabi_dsub+0x2dc>
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	000007fe 	.word	0x000007fe
 8002cd8:	000007ff 	.word	0x000007ff
 8002cdc:	ff7fffff 	.word	0xff7fffff
 8002ce0:	08ff      	lsrs	r7, r7, #3
 8002ce2:	074b      	lsls	r3, r1, #29
 8002ce4:	433b      	orrs	r3, r7
 8002ce6:	08cc      	lsrs	r4, r1, #3
 8002ce8:	e616      	b.n	8002918 <__aeabi_dsub+0x314>
 8002cea:	4662      	mov	r2, ip
 8002cec:	08db      	lsrs	r3, r3, #3
 8002cee:	0752      	lsls	r2, r2, #29
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	4662      	mov	r2, ip
 8002cf4:	08d4      	lsrs	r4, r2, #3
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0312      	lsls	r2, r2, #12
 8002cfa:	4214      	tst	r4, r2
 8002cfc:	d007      	beq.n	8002d0e <__aeabi_dsub+0x70a>
 8002cfe:	08c8      	lsrs	r0, r1, #3
 8002d00:	4210      	tst	r0, r2
 8002d02:	d104      	bne.n	8002d0e <__aeabi_dsub+0x70a>
 8002d04:	465d      	mov	r5, fp
 8002d06:	0004      	movs	r4, r0
 8002d08:	08fb      	lsrs	r3, r7, #3
 8002d0a:	0749      	lsls	r1, r1, #29
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	0f5a      	lsrs	r2, r3, #29
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	0752      	lsls	r2, r2, #29
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	4313      	orrs	r3, r2
 8002d18:	e5fe      	b.n	8002918 <__aeabi_dsub+0x314>
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	4a01      	ldr	r2, [pc, #4]	; (8002d24 <__aeabi_dsub+0x720>)
 8002d1e:	001c      	movs	r4, r3
 8002d20:	e513      	b.n	800274a <__aeabi_dsub+0x146>
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	000007ff 	.word	0x000007ff

08002d28 <__aeabi_dcmpun>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	0005      	movs	r5, r0
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <__aeabi_dcmpun+0x38>)
 8002d2e:	031c      	lsls	r4, r3, #12
 8002d30:	0016      	movs	r6, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	030a      	lsls	r2, r1, #12
 8002d36:	0049      	lsls	r1, r1, #1
 8002d38:	0b12      	lsrs	r2, r2, #12
 8002d3a:	0d49      	lsrs	r1, r1, #21
 8002d3c:	0b24      	lsrs	r4, r4, #12
 8002d3e:	0d5b      	lsrs	r3, r3, #21
 8002d40:	4281      	cmp	r1, r0
 8002d42:	d008      	beq.n	8002d56 <__aeabi_dcmpun+0x2e>
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <__aeabi_dcmpun+0x38>)
 8002d46:	2000      	movs	r0, #0
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d103      	bne.n	8002d54 <__aeabi_dcmpun+0x2c>
 8002d4c:	0020      	movs	r0, r4
 8002d4e:	4330      	orrs	r0, r6
 8002d50:	1e43      	subs	r3, r0, #1
 8002d52:	4198      	sbcs	r0, r3
 8002d54:	bd70      	pop	{r4, r5, r6, pc}
 8002d56:	2001      	movs	r0, #1
 8002d58:	432a      	orrs	r2, r5
 8002d5a:	d1fb      	bne.n	8002d54 <__aeabi_dcmpun+0x2c>
 8002d5c:	e7f2      	b.n	8002d44 <__aeabi_dcmpun+0x1c>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	000007ff 	.word	0x000007ff

08002d64 <__aeabi_d2iz>:
 8002d64:	000a      	movs	r2, r1
 8002d66:	b530      	push	{r4, r5, lr}
 8002d68:	4c13      	ldr	r4, [pc, #76]	; (8002db8 <__aeabi_d2iz+0x54>)
 8002d6a:	0053      	lsls	r3, r2, #1
 8002d6c:	0309      	lsls	r1, r1, #12
 8002d6e:	0005      	movs	r5, r0
 8002d70:	0b09      	lsrs	r1, r1, #12
 8002d72:	2000      	movs	r0, #0
 8002d74:	0d5b      	lsrs	r3, r3, #21
 8002d76:	0fd2      	lsrs	r2, r2, #31
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	dd04      	ble.n	8002d86 <__aeabi_d2iz+0x22>
 8002d7c:	480f      	ldr	r0, [pc, #60]	; (8002dbc <__aeabi_d2iz+0x58>)
 8002d7e:	4283      	cmp	r3, r0
 8002d80:	dd02      	ble.n	8002d88 <__aeabi_d2iz+0x24>
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <__aeabi_d2iz+0x5c>)
 8002d84:	18d0      	adds	r0, r2, r3
 8002d86:	bd30      	pop	{r4, r5, pc}
 8002d88:	2080      	movs	r0, #128	; 0x80
 8002d8a:	0340      	lsls	r0, r0, #13
 8002d8c:	4301      	orrs	r1, r0
 8002d8e:	480d      	ldr	r0, [pc, #52]	; (8002dc4 <__aeabi_d2iz+0x60>)
 8002d90:	1ac0      	subs	r0, r0, r3
 8002d92:	281f      	cmp	r0, #31
 8002d94:	dd08      	ble.n	8002da8 <__aeabi_d2iz+0x44>
 8002d96:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <__aeabi_d2iz+0x64>)
 8002d98:	1ac3      	subs	r3, r0, r3
 8002d9a:	40d9      	lsrs	r1, r3
 8002d9c:	000b      	movs	r3, r1
 8002d9e:	4258      	negs	r0, r3
 8002da0:	2a00      	cmp	r2, #0
 8002da2:	d1f0      	bne.n	8002d86 <__aeabi_d2iz+0x22>
 8002da4:	0018      	movs	r0, r3
 8002da6:	e7ee      	b.n	8002d86 <__aeabi_d2iz+0x22>
 8002da8:	4c08      	ldr	r4, [pc, #32]	; (8002dcc <__aeabi_d2iz+0x68>)
 8002daa:	40c5      	lsrs	r5, r0
 8002dac:	46a4      	mov	ip, r4
 8002dae:	4463      	add	r3, ip
 8002db0:	4099      	lsls	r1, r3
 8002db2:	000b      	movs	r3, r1
 8002db4:	432b      	orrs	r3, r5
 8002db6:	e7f2      	b.n	8002d9e <__aeabi_d2iz+0x3a>
 8002db8:	000003fe 	.word	0x000003fe
 8002dbc:	0000041d 	.word	0x0000041d
 8002dc0:	7fffffff 	.word	0x7fffffff
 8002dc4:	00000433 	.word	0x00000433
 8002dc8:	00000413 	.word	0x00000413
 8002dcc:	fffffbed 	.word	0xfffffbed

08002dd0 <__aeabi_i2d>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d016      	beq.n	8002e04 <__aeabi_i2d+0x34>
 8002dd6:	17c3      	asrs	r3, r0, #31
 8002dd8:	18c5      	adds	r5, r0, r3
 8002dda:	405d      	eors	r5, r3
 8002ddc:	0fc4      	lsrs	r4, r0, #31
 8002dde:	0028      	movs	r0, r5
 8002de0:	f000 f894 	bl	8002f0c <__clzsi2>
 8002de4:	4a11      	ldr	r2, [pc, #68]	; (8002e2c <__aeabi_i2d+0x5c>)
 8002de6:	1a12      	subs	r2, r2, r0
 8002de8:	280a      	cmp	r0, #10
 8002dea:	dc16      	bgt.n	8002e1a <__aeabi_i2d+0x4a>
 8002dec:	0003      	movs	r3, r0
 8002dee:	002e      	movs	r6, r5
 8002df0:	3315      	adds	r3, #21
 8002df2:	409e      	lsls	r6, r3
 8002df4:	230b      	movs	r3, #11
 8002df6:	1a18      	subs	r0, r3, r0
 8002df8:	40c5      	lsrs	r5, r0
 8002dfa:	0552      	lsls	r2, r2, #21
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	0b2d      	lsrs	r5, r5, #12
 8002e00:	0d53      	lsrs	r3, r2, #21
 8002e02:	e003      	b.n	8002e0c <__aeabi_i2d+0x3c>
 8002e04:	2400      	movs	r4, #0
 8002e06:	2300      	movs	r3, #0
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	051b      	lsls	r3, r3, #20
 8002e0e:	432b      	orrs	r3, r5
 8002e10:	07e4      	lsls	r4, r4, #31
 8002e12:	4323      	orrs	r3, r4
 8002e14:	0030      	movs	r0, r6
 8002e16:	0019      	movs	r1, r3
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
 8002e1a:	380b      	subs	r0, #11
 8002e1c:	4085      	lsls	r5, r0
 8002e1e:	0552      	lsls	r2, r2, #21
 8002e20:	032d      	lsls	r5, r5, #12
 8002e22:	2600      	movs	r6, #0
 8002e24:	0b2d      	lsrs	r5, r5, #12
 8002e26:	0d53      	lsrs	r3, r2, #21
 8002e28:	e7f0      	b.n	8002e0c <__aeabi_i2d+0x3c>
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	0000041e 	.word	0x0000041e

08002e30 <__aeabi_ui2d>:
 8002e30:	b510      	push	{r4, lr}
 8002e32:	1e04      	subs	r4, r0, #0
 8002e34:	d010      	beq.n	8002e58 <__aeabi_ui2d+0x28>
 8002e36:	f000 f869 	bl	8002f0c <__clzsi2>
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <__aeabi_ui2d+0x48>)
 8002e3c:	1a1b      	subs	r3, r3, r0
 8002e3e:	280a      	cmp	r0, #10
 8002e40:	dc11      	bgt.n	8002e66 <__aeabi_ui2d+0x36>
 8002e42:	220b      	movs	r2, #11
 8002e44:	0021      	movs	r1, r4
 8002e46:	1a12      	subs	r2, r2, r0
 8002e48:	40d1      	lsrs	r1, r2
 8002e4a:	3015      	adds	r0, #21
 8002e4c:	030a      	lsls	r2, r1, #12
 8002e4e:	055b      	lsls	r3, r3, #21
 8002e50:	4084      	lsls	r4, r0
 8002e52:	0b12      	lsrs	r2, r2, #12
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	e001      	b.n	8002e5c <__aeabi_ui2d+0x2c>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	0020      	movs	r0, r4
 8002e62:	0019      	movs	r1, r3
 8002e64:	bd10      	pop	{r4, pc}
 8002e66:	0022      	movs	r2, r4
 8002e68:	380b      	subs	r0, #11
 8002e6a:	4082      	lsls	r2, r0
 8002e6c:	055b      	lsls	r3, r3, #21
 8002e6e:	0312      	lsls	r2, r2, #12
 8002e70:	2400      	movs	r4, #0
 8002e72:	0b12      	lsrs	r2, r2, #12
 8002e74:	0d5b      	lsrs	r3, r3, #21
 8002e76:	e7f1      	b.n	8002e5c <__aeabi_ui2d+0x2c>
 8002e78:	0000041e 	.word	0x0000041e

08002e7c <__aeabi_f2d>:
 8002e7c:	b570      	push	{r4, r5, r6, lr}
 8002e7e:	0043      	lsls	r3, r0, #1
 8002e80:	0246      	lsls	r6, r0, #9
 8002e82:	0fc4      	lsrs	r4, r0, #31
 8002e84:	20fe      	movs	r0, #254	; 0xfe
 8002e86:	0e1b      	lsrs	r3, r3, #24
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	0a75      	lsrs	r5, r6, #9
 8002e8c:	4208      	tst	r0, r1
 8002e8e:	d00c      	beq.n	8002eaa <__aeabi_f2d+0x2e>
 8002e90:	22e0      	movs	r2, #224	; 0xe0
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4694      	mov	ip, r2
 8002e96:	076d      	lsls	r5, r5, #29
 8002e98:	0b36      	lsrs	r6, r6, #12
 8002e9a:	4463      	add	r3, ip
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	4333      	orrs	r3, r6
 8002ea0:	07e4      	lsls	r4, r4, #31
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	0028      	movs	r0, r5
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d114      	bne.n	8002ed8 <__aeabi_f2d+0x5c>
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d01b      	beq.n	8002eea <__aeabi_f2d+0x6e>
 8002eb2:	0028      	movs	r0, r5
 8002eb4:	f000 f82a 	bl	8002f0c <__clzsi2>
 8002eb8:	280a      	cmp	r0, #10
 8002eba:	dc1c      	bgt.n	8002ef6 <__aeabi_f2d+0x7a>
 8002ebc:	230b      	movs	r3, #11
 8002ebe:	002e      	movs	r6, r5
 8002ec0:	1a1b      	subs	r3, r3, r0
 8002ec2:	40de      	lsrs	r6, r3
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	3315      	adds	r3, #21
 8002ec8:	409d      	lsls	r5, r3
 8002eca:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <__aeabi_f2d+0x88>)
 8002ecc:	0336      	lsls	r6, r6, #12
 8002ece:	1a12      	subs	r2, r2, r0
 8002ed0:	0552      	lsls	r2, r2, #21
 8002ed2:	0b36      	lsrs	r6, r6, #12
 8002ed4:	0d53      	lsrs	r3, r2, #21
 8002ed6:	e7e1      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	d009      	beq.n	8002ef0 <__aeabi_f2d+0x74>
 8002edc:	2280      	movs	r2, #128	; 0x80
 8002ede:	0b36      	lsrs	r6, r6, #12
 8002ee0:	0312      	lsls	r2, r2, #12
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <__aeabi_f2d+0x8c>)
 8002ee4:	076d      	lsls	r5, r5, #29
 8002ee6:	4316      	orrs	r6, r2
 8002ee8:	e7d8      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2600      	movs	r6, #0
 8002eee:	e7d5      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef0:	2600      	movs	r6, #0
 8002ef2:	4b05      	ldr	r3, [pc, #20]	; (8002f08 <__aeabi_f2d+0x8c>)
 8002ef4:	e7d2      	b.n	8002e9c <__aeabi_f2d+0x20>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	3b0b      	subs	r3, #11
 8002efa:	409d      	lsls	r5, r3
 8002efc:	002e      	movs	r6, r5
 8002efe:	2500      	movs	r5, #0
 8002f00:	e7e3      	b.n	8002eca <__aeabi_f2d+0x4e>
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	00000389 	.word	0x00000389
 8002f08:	000007ff 	.word	0x000007ff

08002f0c <__clzsi2>:
 8002f0c:	211c      	movs	r1, #28
 8002f0e:	2301      	movs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d301      	bcc.n	8002f1a <__clzsi2+0xe>
 8002f16:	0c00      	lsrs	r0, r0, #16
 8002f18:	3910      	subs	r1, #16
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d301      	bcc.n	8002f24 <__clzsi2+0x18>
 8002f20:	0a00      	lsrs	r0, r0, #8
 8002f22:	3908      	subs	r1, #8
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	4298      	cmp	r0, r3
 8002f28:	d301      	bcc.n	8002f2e <__clzsi2+0x22>
 8002f2a:	0900      	lsrs	r0, r0, #4
 8002f2c:	3904      	subs	r1, #4
 8002f2e:	a202      	add	r2, pc, #8	; (adr r2, 8002f38 <__clzsi2+0x2c>)
 8002f30:	5c10      	ldrb	r0, [r2, r0]
 8002f32:	1840      	adds	r0, r0, r1
 8002f34:	4770      	bx	lr
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	02020304 	.word	0x02020304
 8002f3c:	01010101 	.word	0x01010101
	...

08002f48 <__clzdi2>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	2900      	cmp	r1, #0
 8002f4c:	d103      	bne.n	8002f56 <__clzdi2+0xe>
 8002f4e:	f7ff ffdd 	bl	8002f0c <__clzsi2>
 8002f52:	3020      	adds	r0, #32
 8002f54:	e002      	b.n	8002f5c <__clzdi2+0x14>
 8002f56:	0008      	movs	r0, r1
 8002f58:	f7ff ffd8 	bl	8002f0c <__clzsi2>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)

08002f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f62:	46ce      	mov	lr, r9
 8002f64:	4647      	mov	r7, r8
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	2214      	movs	r2, #20
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	a803      	add	r0, sp, #12
 8002f70:	f003 f9ed 	bl	800634e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <MX_GPIO_Init+0xe0>)
 8002f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f78:	2204      	movs	r2, #4
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	6359      	str	r1, [r3, #52]	; 0x34
 8002f7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f80:	400a      	ands	r2, r1
 8002f82:	9200      	str	r2, [sp, #0]
 8002f84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f88:	2501      	movs	r5, #1
 8002f8a:	432a      	orrs	r2, r5
 8002f8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f90:	402a      	ands	r2, r5
 8002f92:	9201      	str	r2, [sp, #4]
 8002f94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f98:	2202      	movs	r2, #2
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	6359      	str	r1, [r3, #52]	; 0x34
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	9202      	str	r2, [sp, #8]
 8002fa4:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|S0_SENS_Pin, GPIO_PIN_RESET);
 8002fa6:	4c27      	ldr	r4, [pc, #156]	; (8003044 <MX_GPIO_Init+0xe4>)
 8002fa8:	4b27      	ldr	r3, [pc, #156]	; (8003048 <MX_GPIO_Init+0xe8>)
 8002faa:	4699      	mov	r9, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	0021      	movs	r1, r4
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f001 fd75 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROPE_CUT_Pin|BUZZER_Pin|MUX_EN_1_Pin|MUX_EN_0_Pin
 8002fb6:	23cf      	movs	r3, #207	; 0xcf
 8002fb8:	015b      	lsls	r3, r3, #5
 8002fba:	4698      	mov	r8, r3
 8002fbc:	27a0      	movs	r7, #160	; 0xa0
 8002fbe:	05ff      	lsls	r7, r7, #23
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	0038      	movs	r0, r7
 8002fc6:	f001 fd6b 	bl	8004aa0 <HAL_GPIO_WritePin>
                          |S1_SENS_Pin|S2_SENS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_CAM_Pin|S0_CAM_Pin, GPIO_PIN_RESET);
 8002fca:	4e20      	ldr	r6, [pc, #128]	; (800304c <MX_GPIO_Init+0xec>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2103      	movs	r1, #3
 8002fd0:	0030      	movs	r0, r6
 8002fd2:	f001 fd65 	bl	8004aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_0_Pin S0_SENS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|S0_SENS_Pin;
 8002fd6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2400      	movs	r4, #0
 8002fdc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe0:	a903      	add	r1, sp, #12
 8002fe2:	4648      	mov	r0, r9
 8002fe4:	f001 fca0 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROPE_CUT_Pin BUZZER_Pin MUX_EN_1_Pin MUX_EN_0_Pin
                           S1_SENS_Pin S2_SENS_Pin */
  GPIO_InitStruct.Pin = ROPE_CUT_Pin|BUZZER_Pin|MUX_EN_1_Pin|MUX_EN_0_Pin
 8002fe8:	4643      	mov	r3, r8
 8002fea:	9303      	str	r3, [sp, #12]
                          |S1_SENS_Pin|S2_SENS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fec:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	a903      	add	r1, sp, #12
 8002ff4:	0038      	movs	r0, r7
 8002ff6:	f001 fc97 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_CAM_Pin S0_CAM_Pin */
  GPIO_InitStruct.Pin = S1_CAM_Pin|S0_CAM_Pin;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffe:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	a903      	add	r1, sp, #12
 8003006:	0030      	movs	r0, r6
 8003008:	f001 fc8e 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_HB_0_Pin */
  GPIO_InitStruct.Pin = CAM_HB_0_Pin;
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003012:	2588      	movs	r5, #136	; 0x88
 8003014:	036d      	lsls	r5, r5, #13
 8003016:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CAM_HB_0_GPIO_Port, &GPIO_InitStruct);
 800301a:	a903      	add	r1, sp, #12
 800301c:	0038      	movs	r0, r7
 800301e:	f001 fc83 	bl	8004928 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_HB_1_Pin */
  GPIO_InitStruct.Pin = CAM_HB_1_Pin;
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003028:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CAM_HB_1_GPIO_Port, &GPIO_InitStruct);
 800302c:	a903      	add	r1, sp, #12
 800302e:	0030      	movs	r0, r6
 8003030:	f001 fc7a 	bl	8004928 <HAL_GPIO_Init>

}
 8003034:	b009      	add	sp, #36	; 0x24
 8003036:	bcc0      	pop	{r6, r7}
 8003038:	46b9      	mov	r9, r7
 800303a:	46b0      	mov	r8, r6
 800303c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40021000 	.word	0x40021000
 8003044:	00008040 	.word	0x00008040
 8003048:	50000800 	.word	0x50000800
 800304c:	50000400 	.word	0x50000400

08003050 <MX_DMA_Init>:
{
 8003050:	b500      	push	{lr}
 8003052:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003054:	4a09      	ldr	r2, [pc, #36]	; (800307c <MX_DMA_Init+0x2c>)
 8003056:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003058:	2301      	movs	r3, #1
 800305a:	4319      	orrs	r1, r3
 800305c:	6391      	str	r1, [r2, #56]	; 0x38
 800305e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003060:	4013      	ands	r3, r2
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	2009      	movs	r0, #9
 800306c:	f001 f9b4 	bl	80043d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003070:	2009      	movs	r0, #9
 8003072:	f001 f9e1 	bl	8004438 <HAL_NVIC_EnableIRQ>
}
 8003076:	b003      	add	sp, #12
 8003078:	bd00      	pop	{pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	40021000 	.word	0x40021000

08003080 <__io_putchar>:
int __io_putchar(int ch){
 8003080:	b500      	push	{lr}
 8003082:	b083      	sub	sp, #12
 8003084:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__io_putchar+0x18>)
 8003088:	2201      	movs	r2, #1
 800308a:	a901      	add	r1, sp, #4
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <__io_putchar+0x1c>)
 800308e:	f002 ff57 	bl	8005f40 <HAL_UART_Transmit>
}
 8003092:	9801      	ldr	r0, [sp, #4]
 8003094:	b003      	add	sp, #12
 8003096:	bd00      	pop	{pc}
 8003098:	0000ffff 	.word	0x0000ffff
 800309c:	2000075c 	.word	0x2000075c

080030a0 <process_adc_buffer>:

/* USER CODE BEGIN 4 */
// Process half a buffer full of data

void process_adc_buffer(uint16_t *buffer){
 80030a0:	b570      	push	{r4, r5, r6, lr}
 80030a2:	0001      	movs	r1, r0

    uint32_t sum1 = 0, sum2 = 0;
    for (int i = 0; i < ADC_SAMPLES; ++i){
 80030a4:	2200      	movs	r2, #0
    uint32_t sum1 = 0, sum2 = 0;
 80030a6:	2400      	movs	r4, #0
 80030a8:	2000      	movs	r0, #0
    for (int i = 0; i < ADC_SAMPLES; ++i){
 80030aa:	e008      	b.n	80030be <process_adc_buffer+0x1e>
        sum1 += buffer[i * 2];
 80030ac:	0093      	lsls	r3, r2, #2
 80030ae:	5a5b      	ldrh	r3, [r3, r1]
 80030b0:	18c0      	adds	r0, r0, r3
        sum2 += buffer[1 + i * 2];
 80030b2:	0053      	lsls	r3, r2, #1
 80030b4:	3301      	adds	r3, #1
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	5a5b      	ldrh	r3, [r3, r1]
 80030ba:	18e4      	adds	r4, r4, r3
    for (int i = 0; i < ADC_SAMPLES; ++i){
 80030bc:	3201      	adds	r2, #1
 80030be:	2a63      	cmp	r2, #99	; 0x63
 80030c0:	ddf4      	ble.n	80030ac <process_adc_buffer+0xc>
    }

    temp_avg = sum1 / ADC_SAMPLES;
 80030c2:	2164      	movs	r1, #100	; 0x64
 80030c4:	f7fd f83a 	bl	800013c <__udivsi3>
 80030c8:	0005      	movs	r5, r0
 80030ca:	4b1a      	ldr	r3, [pc, #104]	; (8003134 <process_adc_buffer+0x94>)
 80030cc:	8018      	strh	r0, [r3, #0]
    vref_avg = sum2 / ADC_SAMPLES;
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	0020      	movs	r0, r4
 80030d2:	f7fd f833 	bl	800013c <__udivsi3>
 80030d6:	b284      	uxth	r4, r0
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <process_adc_buffer+0x98>)
 80030da:	801c      	strh	r4, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    vdda = (float)VREFINT_CAL_VREF * (float)*VREFINT_CAL_ADDR / vref_avg / 1000;
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <process_adc_buffer+0x9c>)
 80030de:	8818      	ldrh	r0, [r3, #0]
 80030e0:	f7fe f8a4 	bl	800122c <__aeabi_ui2f>
 80030e4:	4916      	ldr	r1, [pc, #88]	; (8003140 <process_adc_buffer+0xa0>)
 80030e6:	f7fd fd7f 	bl	8000be8 <__aeabi_fmul>
 80030ea:	1c06      	adds	r6, r0, #0
 80030ec:	0020      	movs	r0, r4
 80030ee:	f7fe f84f 	bl	8001190 <__aeabi_i2f>
 80030f2:	1c04      	adds	r4, r0, #0
 80030f4:	1c01      	adds	r1, r0, #0
 80030f6:	1c30      	adds	r0, r6, #0
 80030f8:	f7fd fc5e 	bl	80009b8 <__aeabi_fdiv>
 80030fc:	4911      	ldr	r1, [pc, #68]	; (8003144 <process_adc_buffer+0xa4>)
 80030fe:	f7fd fc5b 	bl	80009b8 <__aeabi_fdiv>
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <process_adc_buffer+0xa8>)
 8003104:	6018      	str	r0, [r3, #0]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (float) vdda / ADC_RESOLUTION * vref_avg;
 8003106:	4911      	ldr	r1, [pc, #68]	; (800314c <process_adc_buffer+0xac>)
 8003108:	f7fd fc56 	bl	80009b8 <__aeabi_fdiv>
 800310c:	1c01      	adds	r1, r0, #0
 800310e:	1c20      	adds	r0, r4, #0
 8003110:	f7fd fd6a 	bl	8000be8 <__aeabi_fmul>
 8003114:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <process_adc_buffer+0xb0>)
 8003116:	6018      	str	r0, [r3, #0]

    temp = (float) (ta * (float) (sum1 / ADC_SAMPLES) + tb);
 8003118:	0028      	movs	r0, r5
 800311a:	f7fe f887 	bl	800122c <__aeabi_ui2f>
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <process_adc_buffer+0xb4>)
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	f7fd fd61 	bl	8000be8 <__aeabi_fmul>
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <process_adc_buffer+0xb8>)
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	f7fd faa7 	bl	800067c <__aeabi_fadd>
 800312e:	4b0b      	ldr	r3, [pc, #44]	; (800315c <process_adc_buffer+0xbc>)
 8003130:	6018      	str	r0, [r3, #0]
    //vref = (float) sum2 / 1000 / ADC_SAMPLES;

}
 8003132:	bd70      	pop	{r4, r5, r6, pc}
 8003134:	20000890 	.word	0x20000890
 8003138:	2000089c 	.word	0x2000089c
 800313c:	1fff75aa 	.word	0x1fff75aa
 8003140:	453b8000 	.word	0x453b8000
 8003144:	447a0000 	.word	0x447a0000
 8003148:	20000894 	.word	0x20000894
 800314c:	457ff000 	.word	0x457ff000
 8003150:	20000898 	.word	0x20000898
 8003154:	20000884 	.word	0x20000884
 8003158:	20000888 	.word	0x20000888
 800315c:	2000088c 	.word	0x2000088c

08003160 <calculate_calibration>:

void calculate_calibration(){
 8003160:	b570      	push	{r4, r5, r6, lr}

    float x1 = (float) *TEMPSENSOR_CAL1_ADDR;
 8003162:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <calculate_calibration+0x50>)
 8003164:	8818      	ldrh	r0, [r3, #0]
 8003166:	f7fe f861 	bl	800122c <__aeabi_ui2f>
 800316a:	1c05      	adds	r5, r0, #0
    float x2 = (float) *TEMPSENSOR_CAL2_ADDR;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <calculate_calibration+0x54>)
 800316e:	8818      	ldrh	r0, [r3, #0]
 8003170:	f7fe f85c 	bl	800122c <__aeabi_ui2f>
 8003174:	1c06      	adds	r6, r0, #0
    float y1 = (float) TEMPSENSOR_CAL1_TEMP;
    float y2 = (float) TEMPSENSOR_CAL2_TEMP;

    // Simple linear equation y = ax + b based on two points
    ta = (float) ((y2 - y1) / (x2 - x1));
 8003176:	1c29      	adds	r1, r5, #0
 8003178:	f7fd fe5c 	bl	8000e34 <__aeabi_fsub>
 800317c:	1c04      	adds	r4, r0, #0
 800317e:	1c01      	adds	r1, r0, #0
 8003180:	480d      	ldr	r0, [pc, #52]	; (80031b8 <calculate_calibration+0x58>)
 8003182:	f7fd fc19 	bl	80009b8 <__aeabi_fdiv>
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <calculate_calibration+0x5c>)
 8003188:	6018      	str	r0, [r3, #0]
    tb = (float) ((x2 * y1 - x1 * y2) / (x2 - x1));
 800318a:	490d      	ldr	r1, [pc, #52]	; (80031c0 <calculate_calibration+0x60>)
 800318c:	1c30      	adds	r0, r6, #0
 800318e:	f7fd fd2b 	bl	8000be8 <__aeabi_fmul>
 8003192:	1c06      	adds	r6, r0, #0
 8003194:	490b      	ldr	r1, [pc, #44]	; (80031c4 <calculate_calibration+0x64>)
 8003196:	1c28      	adds	r0, r5, #0
 8003198:	f7fd fd26 	bl	8000be8 <__aeabi_fmul>
 800319c:	1c01      	adds	r1, r0, #0
 800319e:	1c30      	adds	r0, r6, #0
 80031a0:	f7fd fe48 	bl	8000e34 <__aeabi_fsub>
 80031a4:	1c21      	adds	r1, r4, #0
 80031a6:	f7fd fc07 	bl	80009b8 <__aeabi_fdiv>
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <calculate_calibration+0x68>)
 80031ac:	6018      	str	r0, [r3, #0]
}
 80031ae:	bd70      	pop	{r4, r5, r6, pc}
 80031b0:	1fff75a8 	.word	0x1fff75a8
 80031b4:	1fff75ca 	.word	0x1fff75ca
 80031b8:	42c80000 	.word	0x42c80000
 80031bc:	20000884 	.word	0x20000884
 80031c0:	41f00000 	.word	0x41f00000
 80031c4:	43020000 	.word	0x43020000
 80031c8:	20000888 	.word	0x20000888

080031cc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80031cc:	b510      	push	{r4, lr}
	process_adc_buffer(&adc_buffer[0]);
 80031ce:	4802      	ldr	r0, [pc, #8]	; (80031d8 <HAL_ADC_ConvHalfCpltCallback+0xc>)
 80031d0:	f7ff ff66 	bl	80030a0 <process_adc_buffer>
}
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	20000210 	.word	0x20000210

080031dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80031dc:	b510      	push	{r4, lr}
	process_adc_buffer(&adc_buffer[ADC_SAMPLES * 2]);
 80031de:	4802      	ldr	r0, [pc, #8]	; (80031e8 <HAL_ADC_ConvCpltCallback+0xc>)
 80031e0:	f7ff ff5e 	bl	80030a0 <process_adc_buffer>
}
 80031e4:	bd10      	pop	{r4, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	200003a0 	.word	0x200003a0

080031ec <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031ee:	e7fe      	b.n	80031ee <Error_Handler+0x2>

080031f0 <MX_ADC1_Init>:
{
 80031f0:	b500      	push	{lr}
 80031f2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80031f4:	220c      	movs	r2, #12
 80031f6:	2100      	movs	r1, #0
 80031f8:	a801      	add	r0, sp, #4
 80031fa:	f003 f8a8 	bl	800634e <memset>
  hadc1.Instance = ADC1;
 80031fe:	4823      	ldr	r0, [pc, #140]	; (800328c <MX_ADC1_Init+0x9c>)
 8003200:	4b23      	ldr	r3, [pc, #140]	; (8003290 <MX_ADC1_Init+0xa0>)
 8003202:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	05db      	lsls	r3, r3, #23
 8003208:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800320a:	2300      	movs	r3, #0
 800320c:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800320e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	0392      	lsls	r2, r2, #14
 8003214:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003216:	2208      	movs	r2, #8
 8003218:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800321a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800321c:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800321e:	7683      	strb	r3, [r0, #26]
  hadc1.Init.NbrOfConversion = 2;
 8003220:	3a06      	subs	r2, #6
 8003222:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003224:	321e      	adds	r2, #30
 8003226:	5483      	strb	r3, [r0, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8003228:	22a0      	movs	r2, #160	; 0xa0
 800322a:	00d2      	lsls	r2, r2, #3
 800322c:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	0112      	lsls	r2, r2, #4
 8003232:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003234:	222c      	movs	r2, #44	; 0x2c
 8003236:	2101      	movs	r1, #1
 8003238:	5481      	strb	r1, [r0, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800323a:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 800323c:	3a26      	subs	r2, #38	; 0x26
 800323e:	6342      	str	r2, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003240:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003242:	3236      	adds	r2, #54	; 0x36
 8003244:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003246:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003248:	f000 fc8c 	bl	8003b64 <HAL_ADC_Init>
 800324c:	2800      	cmp	r0, #0
 800324e:	d116      	bne.n	800327e <MX_ADC1_Init+0x8e>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <MX_ADC1_Init+0xa4>)
 8003252:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003254:	2300      	movs	r3, #0
 8003256:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003258:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800325a:	a901      	add	r1, sp, #4
 800325c:	480b      	ldr	r0, [pc, #44]	; (800328c <MX_ADC1_Init+0x9c>)
 800325e:	f000 fea3 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8003262:	2800      	cmp	r0, #0
 8003264:	d10d      	bne.n	8003282 <MX_ADC1_Init+0x92>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <MX_ADC1_Init+0xa8>)
 8003268:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800326a:	2304      	movs	r3, #4
 800326c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800326e:	a901      	add	r1, sp, #4
 8003270:	4806      	ldr	r0, [pc, #24]	; (800328c <MX_ADC1_Init+0x9c>)
 8003272:	f000 fe99 	bl	8003fa8 <HAL_ADC_ConfigChannel>
 8003276:	2800      	cmp	r0, #0
 8003278:	d105      	bne.n	8003286 <MX_ADC1_Init+0x96>
}
 800327a:	b005      	add	sp, #20
 800327c:	bd00      	pop	{pc}
    Error_Handler();
 800327e:	f7ff ffb5 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003282:	f7ff ffb3 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003286:	f7ff ffb1 	bl	80031ec <Error_Handler>
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	20000534 	.word	0x20000534
 8003290:	40012400 	.word	0x40012400
 8003294:	b0001000 	.word	0xb0001000
 8003298:	b4002000 	.word	0xb4002000

0800329c <MX_CRC_Init>:
{
 800329c:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800329e:	4808      	ldr	r0, [pc, #32]	; (80032c0 <MX_CRC_Init+0x24>)
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <MX_CRC_Init+0x28>)
 80032a2:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80032a4:	2300      	movs	r3, #0
 80032a6:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80032a8:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80032aa:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80032ac:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80032ae:	3301      	adds	r3, #1
 80032b0:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80032b2:	f001 f93f 	bl	8004534 <HAL_CRC_Init>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	d100      	bne.n	80032bc <MX_CRC_Init+0x20>
}
 80032ba:	bd10      	pop	{r4, pc}
    Error_Handler();
 80032bc:	f7ff ff96 	bl	80031ec <Error_Handler>
 80032c0:	20000598 	.word	0x20000598
 80032c4:	40023000 	.word	0x40023000

080032c8 <MX_SPI1_Init>:
{
 80032c8:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80032ca:	4811      	ldr	r0, [pc, #68]	; (8003310 <MX_SPI1_Init+0x48>)
 80032cc:	4b11      	ldr	r3, [pc, #68]	; (8003314 <MX_SPI1_Init+0x4c>)
 80032ce:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032d0:	2382      	movs	r3, #130	; 0x82
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032d6:	2300      	movs	r3, #0
 80032d8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032da:	22e0      	movs	r2, #224	; 0xe0
 80032dc:	00d2      	lsls	r2, r2, #3
 80032de:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032e2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032ea:	3ac9      	subs	r2, #201	; 0xc9
 80032ec:	3aff      	subs	r2, #255	; 0xff
 80032ee:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032f0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032f6:	3a31      	subs	r2, #49	; 0x31
 80032f8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032fa:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032fc:	3308      	adds	r3, #8
 80032fe:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003300:	f002 f8ba 	bl	8005478 <HAL_SPI_Init>
 8003304:	2800      	cmp	r0, #0
 8003306:	d100      	bne.n	800330a <MX_SPI1_Init+0x42>
}
 8003308:	bd10      	pop	{r4, pc}
    Error_Handler();
 800330a:	f7ff ff6f 	bl	80031ec <Error_Handler>
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	20000618 	.word	0x20000618
 8003314:	40013000 	.word	0x40013000

08003318 <MX_USART1_UART_Init>:
{
 8003318:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800331a:	4817      	ldr	r0, [pc, #92]	; (8003378 <MX_USART1_UART_Init+0x60>)
 800331c:	4b17      	ldr	r3, [pc, #92]	; (800337c <MX_USART1_UART_Init+0x64>)
 800331e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8003320:	23e1      	movs	r3, #225	; 0xe1
 8003322:	025b      	lsls	r3, r3, #9
 8003324:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003326:	2300      	movs	r3, #0
 8003328:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800332a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800332c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800332e:	220c      	movs	r2, #12
 8003330:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003332:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003334:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003336:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003338:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800333a:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800333c:	f002 feb2 	bl	80060a4 <HAL_UART_Init>
 8003340:	2800      	cmp	r0, #0
 8003342:	d111      	bne.n	8003368 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003344:	2100      	movs	r1, #0
 8003346:	480c      	ldr	r0, [pc, #48]	; (8003378 <MX_USART1_UART_Init+0x60>)
 8003348:	f002 ff2c 	bl	80061a4 <HAL_UARTEx_SetTxFifoThreshold>
 800334c:	2800      	cmp	r0, #0
 800334e:	d10d      	bne.n	800336c <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003350:	2100      	movs	r1, #0
 8003352:	4809      	ldr	r0, [pc, #36]	; (8003378 <MX_USART1_UART_Init+0x60>)
 8003354:	f002 ff4c 	bl	80061f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003358:	2800      	cmp	r0, #0
 800335a:	d109      	bne.n	8003370 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800335c:	4806      	ldr	r0, [pc, #24]	; (8003378 <MX_USART1_UART_Init+0x60>)
 800335e:	f002 ff01 	bl	8006164 <HAL_UARTEx_DisableFifoMode>
 8003362:	2800      	cmp	r0, #0
 8003364:	d106      	bne.n	8003374 <MX_USART1_UART_Init+0x5c>
}
 8003366:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003368:	f7ff ff40 	bl	80031ec <Error_Handler>
    Error_Handler();
 800336c:	f7ff ff3e 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003370:	f7ff ff3c 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003374:	f7ff ff3a 	bl	80031ec <Error_Handler>
 8003378:	200006c8 	.word	0x200006c8
 800337c:	40013800 	.word	0x40013800

08003380 <MX_USART4_UART_Init>:
{
 8003380:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 8003382:	480c      	ldr	r0, [pc, #48]	; (80033b4 <MX_USART4_UART_Init+0x34>)
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <MX_USART4_UART_Init+0x38>)
 8003386:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8003388:	23e1      	movs	r3, #225	; 0xe1
 800338a:	025b      	lsls	r3, r3, #9
 800338c:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800338e:	2300      	movs	r3, #0
 8003390:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003392:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003394:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003396:	220c      	movs	r2, #12
 8003398:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800339a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800339c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800339e:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033a0:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033a2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80033a4:	f002 fe7e 	bl	80060a4 <HAL_UART_Init>
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d100      	bne.n	80033ae <MX_USART4_UART_Init+0x2e>
}
 80033ac:	bd10      	pop	{r4, pc}
    Error_Handler();
 80033ae:	f7ff ff1d 	bl	80031ec <Error_Handler>
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	200007f0 	.word	0x200007f0
 80033b8:	40004c00 	.word	0x40004c00

080033bc <MX_USART2_UART_Init>:
{
 80033bc:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80033be:	4817      	ldr	r0, [pc, #92]	; (800341c <MX_USART2_UART_Init+0x60>)
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <MX_USART2_UART_Init+0x64>)
 80033c2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80033c4:	23e1      	movs	r3, #225	; 0xe1
 80033c6:	025b      	lsls	r3, r3, #9
 80033c8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033ca:	2300      	movs	r3, #0
 80033cc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033ce:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033d0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033d2:	220c      	movs	r2, #12
 80033d4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033d8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033da:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033dc:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033de:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033e0:	f002 fe60 	bl	80060a4 <HAL_UART_Init>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d111      	bne.n	800340c <MX_USART2_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e8:	2100      	movs	r1, #0
 80033ea:	480c      	ldr	r0, [pc, #48]	; (800341c <MX_USART2_UART_Init+0x60>)
 80033ec:	f002 feda 	bl	80061a4 <HAL_UARTEx_SetTxFifoThreshold>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d10d      	bne.n	8003410 <MX_USART2_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033f4:	2100      	movs	r1, #0
 80033f6:	4809      	ldr	r0, [pc, #36]	; (800341c <MX_USART2_UART_Init+0x60>)
 80033f8:	f002 fefa 	bl	80061f0 <HAL_UARTEx_SetRxFifoThreshold>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d109      	bne.n	8003414 <MX_USART2_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003400:	4806      	ldr	r0, [pc, #24]	; (800341c <MX_USART2_UART_Init+0x60>)
 8003402:	f002 feaf 	bl	8006164 <HAL_UARTEx_DisableFifoMode>
 8003406:	2800      	cmp	r0, #0
 8003408:	d106      	bne.n	8003418 <MX_USART2_UART_Init+0x5c>
}
 800340a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800340c:	f7ff feee 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003410:	f7ff feec 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003414:	f7ff feea 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003418:	f7ff fee8 	bl	80031ec <Error_Handler>
 800341c:	2000075c 	.word	0x2000075c
 8003420:	40004400 	.word	0x40004400

08003424 <MX_TIM15_Init>:
{
 8003424:	b500      	push	{lr}
 8003426:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003428:	2210      	movs	r2, #16
 800342a:	2100      	movs	r1, #0
 800342c:	a804      	add	r0, sp, #16
 800342e:	f002 ff8e 	bl	800634e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003432:	220c      	movs	r2, #12
 8003434:	2100      	movs	r1, #0
 8003436:	a801      	add	r0, sp, #4
 8003438:	f002 ff89 	bl	800634e <memset>
  htim15.Instance = TIM15;
 800343c:	4815      	ldr	r0, [pc, #84]	; (8003494 <MX_TIM15_Init+0x70>)
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <MX_TIM15_Init+0x74>)
 8003440:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 639;
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <MX_TIM15_Init+0x78>)
 8003444:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003446:	2300      	movs	r3, #0
 8003448:	6083      	str	r3, [r0, #8]
  htim15.Init.Period = 999;
 800344a:	4a15      	ldr	r2, [pc, #84]	; (80034a0 <MX_TIM15_Init+0x7c>)
 800344c:	60c2      	str	r2, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800344e:	6103      	str	r3, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8003450:	6143      	str	r3, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003452:	3380      	adds	r3, #128	; 0x80
 8003454:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003456:	f002 fa11 	bl	800587c <HAL_TIM_Base_Init>
 800345a:	2800      	cmp	r0, #0
 800345c:	d114      	bne.n	8003488 <MX_TIM15_Init+0x64>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	015b      	lsls	r3, r3, #5
 8003462:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003464:	a904      	add	r1, sp, #16
 8003466:	480b      	ldr	r0, [pc, #44]	; (8003494 <MX_TIM15_Init+0x70>)
 8003468:	f002 fa44 	bl	80058f4 <HAL_TIM_ConfigClockSource>
 800346c:	2800      	cmp	r0, #0
 800346e:	d10d      	bne.n	800348c <MX_TIM15_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003470:	2320      	movs	r3, #32
 8003472:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003478:	a901      	add	r1, sp, #4
 800347a:	4806      	ldr	r0, [pc, #24]	; (8003494 <MX_TIM15_Init+0x70>)
 800347c:	f002 fabe 	bl	80059fc <HAL_TIMEx_MasterConfigSynchronization>
 8003480:	2800      	cmp	r0, #0
 8003482:	d105      	bne.n	8003490 <MX_TIM15_Init+0x6c>
}
 8003484:	b009      	add	sp, #36	; 0x24
 8003486:	bd00      	pop	{pc}
    Error_Handler();
 8003488:	f7ff feb0 	bl	80031ec <Error_Handler>
    Error_Handler();
 800348c:	f7ff feae 	bl	80031ec <Error_Handler>
    Error_Handler();
 8003490:	f7ff feac 	bl	80031ec <Error_Handler>
 8003494:	2000067c 	.word	0x2000067c
 8003498:	40014000 	.word	0x40014000
 800349c:	0000027f 	.word	0x0000027f
 80034a0:	000003e7 	.word	0x000003e7

080034a4 <SystemClock_Config>:
{
 80034a4:	b500      	push	{lr}
 80034a6:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034a8:	2238      	movs	r2, #56	; 0x38
 80034aa:	2100      	movs	r1, #0
 80034ac:	a804      	add	r0, sp, #16
 80034ae:	f002 ff4e 	bl	800634e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034b2:	2210      	movs	r2, #16
 80034b4:	2100      	movs	r1, #0
 80034b6:	4668      	mov	r0, sp
 80034b8:	f002 ff49 	bl	800634e <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034bc:	2080      	movs	r0, #128	; 0x80
 80034be:	0080      	lsls	r0, r0, #2
 80034c0:	f001 faf4 	bl	8004aac <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034c4:	2302      	movs	r3, #2
 80034c6:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	0052      	lsls	r2, r2, #1
 80034cc:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80034ce:	2200      	movs	r2, #0
 80034d0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034d6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034d8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80034da:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 80034dc:	3306      	adds	r3, #6
 80034de:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80034e6:	2380      	movs	r3, #128	; 0x80
 80034e8:	049b      	lsls	r3, r3, #18
 80034ea:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	059b      	lsls	r3, r3, #22
 80034f0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034f2:	a804      	add	r0, sp, #16
 80034f4:	f001 fb04 	bl	8004b00 <HAL_RCC_OscConfig>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d10e      	bne.n	800351a <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034fc:	2307      	movs	r3, #7
 80034fe:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003500:	3b05      	subs	r3, #5
 8003502:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003504:	2300      	movs	r3, #0
 8003506:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003508:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800350a:	2102      	movs	r1, #2
 800350c:	4668      	mov	r0, sp
 800350e:	f001 fdaf 	bl	8005070 <HAL_RCC_ClockConfig>
 8003512:	2800      	cmp	r0, #0
 8003514:	d103      	bne.n	800351e <SystemClock_Config+0x7a>
}
 8003516:	b013      	add	sp, #76	; 0x4c
 8003518:	bd00      	pop	{pc}
    Error_Handler();
 800351a:	f7ff fe67 	bl	80031ec <Error_Handler>
    Error_Handler();
 800351e:	f7ff fe65 	bl	80031ec <Error_Handler>
	...

08003524 <main>:
{
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003526:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8003528:	f000 faf6 	bl	8003b18 <HAL_Init>
  SystemClock_Config();
 800352c:	f7ff ffba 	bl	80034a4 <SystemClock_Config>
  MX_GPIO_Init();
 8003530:	f7ff fd16 	bl	8002f60 <MX_GPIO_Init>
  MX_DMA_Init();
 8003534:	f7ff fd8c 	bl	8003050 <MX_DMA_Init>
  MX_ADC1_Init();
 8003538:	f7ff fe5a 	bl	80031f0 <MX_ADC1_Init>
  MX_CRC_Init();
 800353c:	f7ff feae 	bl	800329c <MX_CRC_Init>
  MX_SPI1_Init();
 8003540:	f7ff fec2 	bl	80032c8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8003544:	f7ff fee8 	bl	8003318 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8003548:	f7ff ff1a 	bl	8003380 <MX_USART4_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800354c:	f002 fe78 	bl	8006240 <MX_FATFS_Init>
 8003550:	2800      	cmp	r0, #0
 8003552:	d001      	beq.n	8003558 <main+0x34>
    Error_Handler();
 8003554:	f7ff fe4a 	bl	80031ec <Error_Handler>
  MX_USART2_UART_Init();
 8003558:	f7ff ff30 	bl	80033bc <MX_USART2_UART_Init>
  MX_TIM15_Init();
 800355c:	f7ff ff62 	bl	8003424 <MX_TIM15_Init>
 printf("\n\nStarting\n");
 8003560:	4834      	ldr	r0, [pc, #208]	; (8003634 <main+0x110>)
 8003562:	f003 fbf7 	bl	8006d54 <puts>
 printf("VREFINT_CAL = %d (0x%04x)\n", (uint16_t)*VREFINT_CAL_ADDR, (uint16_t)*VREFINT_CAL_ADDR);
 8003566:	4b34      	ldr	r3, [pc, #208]	; (8003638 <main+0x114>)
 8003568:	8819      	ldrh	r1, [r3, #0]
 800356a:	000a      	movs	r2, r1
 800356c:	4833      	ldr	r0, [pc, #204]	; (800363c <main+0x118>)
 800356e:	f003 fb65 	bl	8006c3c <iprintf>
 printf("TEMPSENSOR_CAL1 = %d (0x%04x)\n", (uint16_t)*TEMPSENSOR_CAL1_ADDR, (uint16_t)*TEMPSENSOR_CAL1_ADDR);
 8003572:	4b33      	ldr	r3, [pc, #204]	; (8003640 <main+0x11c>)
 8003574:	8819      	ldrh	r1, [r3, #0]
 8003576:	000a      	movs	r2, r1
 8003578:	4832      	ldr	r0, [pc, #200]	; (8003644 <main+0x120>)
 800357a:	f003 fb5f 	bl	8006c3c <iprintf>
 printf("TEMPSENSOR_CAL2 = %d (0x%04x)\n", (uint16_t)*TEMPSENSOR_CAL2_ADDR, (uint16_t)*TEMPSENSOR_CAL2_ADDR);
 800357e:	4b32      	ldr	r3, [pc, #200]	; (8003648 <main+0x124>)
 8003580:	8819      	ldrh	r1, [r3, #0]
 8003582:	000a      	movs	r2, r1
 8003584:	4831      	ldr	r0, [pc, #196]	; (800364c <main+0x128>)
 8003586:	f003 fb59 	bl	8006c3c <iprintf>
 calculate_calibration();
 800358a:	f7ff fde9 	bl	8003160 <calculate_calibration>
 printf("Temp calibration: t = %0.3f * tmeasured + %0.3f\n", ta, tb);
 800358e:	4b30      	ldr	r3, [pc, #192]	; (8003650 <main+0x12c>)
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	f7ff fc73 	bl	8002e7c <__aeabi_f2d>
 8003596:	0004      	movs	r4, r0
 8003598:	000d      	movs	r5, r1
 800359a:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <main+0x130>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f7ff fc6d 	bl	8002e7c <__aeabi_f2d>
 80035a2:	9000      	str	r0, [sp, #0]
 80035a4:	9101      	str	r1, [sp, #4]
 80035a6:	0022      	movs	r2, r4
 80035a8:	002b      	movs	r3, r5
 80035aa:	482b      	ldr	r0, [pc, #172]	; (8003658 <main+0x134>)
 80035ac:	f003 fb46 	bl	8006c3c <iprintf>
 HAL_TIM_Base_Start_IT(&htim15); // First get the timer running
 80035b0:	482a      	ldr	r0, [pc, #168]	; (800365c <main+0x138>)
 80035b2:	f002 f813 	bl	80055dc <HAL_TIM_Base_Start_IT>
 HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
 80035b6:	22c8      	movs	r2, #200	; 0xc8
 80035b8:	0052      	lsls	r2, r2, #1
 80035ba:	4929      	ldr	r1, [pc, #164]	; (8003660 <main+0x13c>)
 80035bc:	4829      	ldr	r0, [pc, #164]	; (8003664 <main+0x140>)
 80035be:	f000 fea9 	bl	8004314 <HAL_ADC_Start_DMA>
	  uint32_t now = 0, then = 0;
 80035c2:	2400      	movs	r4, #0
 80035c4:	0025      	movs	r5, r4
			 now = HAL_GetTick();
 80035c6:	f000 fac7 	bl	8003b58 <HAL_GetTick>
 80035ca:	0004      	movs	r4, r0
			 if (now - then >= 1000) {
 80035cc:	1b42      	subs	r2, r0, r5
 80035ce:	23fa      	movs	r3, #250	; 0xfa
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d3f7      	bcc.n	80035c6 <main+0xa2>
				 printf("VDDA = %5.3f V Vref = %5.3f V (raw = %d) Temp = %4.2f °C (raw = %d)\r\n", vdda, vref, vref_avg, temp, temp_avg);
 80035d6:	4b24      	ldr	r3, [pc, #144]	; (8003668 <main+0x144>)
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	f7ff fc4f 	bl	8002e7c <__aeabi_f2d>
 80035de:	0006      	movs	r6, r0
 80035e0:	000f      	movs	r7, r1
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <main+0x148>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	9306      	str	r3, [sp, #24]
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <main+0x14c>)
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	f7ff fc46 	bl	8002e7c <__aeabi_f2d>
 80035f0:	9004      	str	r0, [sp, #16]
 80035f2:	9105      	str	r1, [sp, #20]
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <main+0x150>)
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	4b1f      	ldr	r3, [pc, #124]	; (8003678 <main+0x154>)
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	f7ff fc3d 	bl	8002e7c <__aeabi_f2d>
 8003602:	9000      	str	r0, [sp, #0]
 8003604:	9101      	str	r1, [sp, #4]
 8003606:	0032      	movs	r2, r6
 8003608:	003b      	movs	r3, r7
 800360a:	481c      	ldr	r0, [pc, #112]	; (800367c <main+0x158>)
 800360c:	f003 fb16 	bl	8006c3c <iprintf>
				 crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)CRC_TEST_STRING, strlen(CRC_TEST_STRING));
 8003610:	4d1b      	ldr	r5, [pc, #108]	; (8003680 <main+0x15c>)
 8003612:	2218      	movs	r2, #24
 8003614:	0029      	movs	r1, r5
 8003616:	481b      	ldr	r0, [pc, #108]	; (8003684 <main+0x160>)
 8003618:	f000 ffce 	bl	80045b8 <HAL_CRC_Calculate>
 800361c:	0002      	movs	r2, r0
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <main+0x164>)
 8003620:	6018      	str	r0, [r3, #0]
				 printf("String '%s' - (MPEG-2 CRC) => 0x%08lu!!!\r\nString '%s' - (BZIP2 CRC) => 0x%08lu!!!\r\n", CRC_TEST_STRING, crc, CRC_TEST_STRING, ~crc);
 8003622:	43c3      	mvns	r3, r0
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	002b      	movs	r3, r5
 8003628:	0029      	movs	r1, r5
 800362a:	4818      	ldr	r0, [pc, #96]	; (800368c <main+0x168>)
 800362c:	f003 fb06 	bl	8006c3c <iprintf>
				 then = now;
 8003630:	e7c8      	b.n	80035c4 <main+0xa0>
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	08009170 	.word	0x08009170
 8003638:	1fff75aa 	.word	0x1fff75aa
 800363c:	0800917c 	.word	0x0800917c
 8003640:	1fff75a8 	.word	0x1fff75a8
 8003644:	08009198 	.word	0x08009198
 8003648:	1fff75ca 	.word	0x1fff75ca
 800364c:	080091b8 	.word	0x080091b8
 8003650:	20000884 	.word	0x20000884
 8003654:	20000888 	.word	0x20000888
 8003658:	080091d8 	.word	0x080091d8
 800365c:	2000067c 	.word	0x2000067c
 8003660:	20000210 	.word	0x20000210
 8003664:	20000534 	.word	0x20000534
 8003668:	20000894 	.word	0x20000894
 800366c:	20000890 	.word	0x20000890
 8003670:	2000088c 	.word	0x2000088c
 8003674:	2000089c 	.word	0x2000089c
 8003678:	20000898 	.word	0x20000898
 800367c:	0800920c 	.word	0x0800920c
 8003680:	08009254 	.word	0x08009254
 8003684:	20000598 	.word	0x20000598
 8003688:	20000530 	.word	0x20000530
 800368c:	08009270 	.word	0x08009270

08003690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003690:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_MspInit+0x2c>)
 8003694:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003696:	2201      	movs	r2, #1
 8003698:	4311      	orrs	r1, r2
 800369a:	6419      	str	r1, [r3, #64]	; 0x40
 800369c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800369e:	400a      	ands	r2, r1
 80036a0:	9200      	str	r2, [sp, #0]
 80036a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	0549      	lsls	r1, r1, #21
 80036aa:	430a      	orrs	r2, r1
 80036ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	400b      	ands	r3, r1
 80036b2:	9301      	str	r3, [sp, #4]
 80036b4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036b6:	b002      	add	sp, #8
 80036b8:	4770      	bx	lr
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40021000 	.word	0x40021000

080036c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	b08e      	sub	sp, #56	; 0x38
 80036c4:	0004      	movs	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036c6:	2234      	movs	r2, #52	; 0x34
 80036c8:	2100      	movs	r1, #0
 80036ca:	a801      	add	r0, sp, #4
 80036cc:	f002 fe3f 	bl	800634e <memset>
  if(hadc->Instance==ADC1)
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_ADC_MspInit+0x90>)
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036d8:	b00e      	add	sp, #56	; 0x38
 80036da:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	01db      	lsls	r3, r3, #7
 80036e0:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036e2:	a801      	add	r0, sp, #4
 80036e4:	f001 fda4 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 80036e8:	2800      	cmp	r0, #0
 80036ea:	d12b      	bne.n	8003744 <HAL_ADC_MspInit+0x84>
    __HAL_RCC_ADC_CLK_ENABLE();
 80036ec:	4a19      	ldr	r2, [pc, #100]	; (8003754 <HAL_ADC_MspInit+0x94>)
 80036ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80036f0:	2080      	movs	r0, #128	; 0x80
 80036f2:	0340      	lsls	r0, r0, #13
 80036f4:	4301      	orrs	r1, r0
 80036f6:	6411      	str	r1, [r2, #64]	; 0x40
 80036f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036fa:	4003      	ands	r3, r0
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	9b00      	ldr	r3, [sp, #0]
    hdma_adc1.Instance = DMA1_Channel1;
 8003700:	4815      	ldr	r0, [pc, #84]	; (8003758 <HAL_ADC_MspInit+0x98>)
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_ADC_MspInit+0x9c>)
 8003704:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003706:	2305      	movs	r3, #5
 8003708:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800370a:	2300      	movs	r3, #0
 800370c:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800370e:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003710:	2280      	movs	r2, #128	; 0x80
 8003712:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003714:	3280      	adds	r2, #128	; 0x80
 8003716:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003718:	2280      	movs	r2, #128	; 0x80
 800371a:	00d2      	lsls	r2, r2, #3
 800371c:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800371e:	2220      	movs	r2, #32
 8003720:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003722:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003724:	f000 fff4 	bl	8004710 <HAL_DMA_Init>
 8003728:	2800      	cmp	r0, #0
 800372a:	d10e      	bne.n	800374a <HAL_ADC_MspInit+0x8a>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <HAL_ADC_MspInit+0x98>)
 800372e:	6523      	str	r3, [r4, #80]	; 0x50
 8003730:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	200c      	movs	r0, #12
 8003738:	f000 fe4e 	bl	80043d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800373c:	200c      	movs	r0, #12
 800373e:	f000 fe7b 	bl	8004438 <HAL_NVIC_EnableIRQ>
}
 8003742:	e7c9      	b.n	80036d8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8003744:	f7ff fd52 	bl	80031ec <Error_Handler>
 8003748:	e7d0      	b.n	80036ec <HAL_ADC_MspInit+0x2c>
      Error_Handler();
 800374a:	f7ff fd4f 	bl	80031ec <Error_Handler>
 800374e:	e7ed      	b.n	800372c <HAL_ADC_MspInit+0x6c>
 8003750:	40012400 	.word	0x40012400
 8003754:	40021000 	.word	0x40021000
 8003758:	200005bc 	.word	0x200005bc
 800375c:	40020008 	.word	0x40020008

08003760 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003760:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8003762:	6802      	ldr	r2, [r0, #0]
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_CRC_MspInit+0x24>)
 8003766:	429a      	cmp	r2, r3
 8003768:	d001      	beq.n	800376e <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800376a:	b002      	add	sp, #8
 800376c:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 800376e:	4a06      	ldr	r2, [pc, #24]	; (8003788 <HAL_CRC_MspInit+0x28>)
 8003770:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8003772:	2080      	movs	r0, #128	; 0x80
 8003774:	0140      	lsls	r0, r0, #5
 8003776:	4301      	orrs	r1, r0
 8003778:	6391      	str	r1, [r2, #56]	; 0x38
 800377a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800377c:	4003      	ands	r3, r0
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	9b01      	ldr	r3, [sp, #4]
}
 8003782:	e7f2      	b.n	800376a <HAL_CRC_MspInit+0xa>
 8003784:	40023000 	.word	0x40023000
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800378c:	b510      	push	{r4, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003792:	2214      	movs	r2, #20
 8003794:	2100      	movs	r1, #0
 8003796:	a803      	add	r0, sp, #12
 8003798:	f002 fdd9 	bl	800634e <memset>
  if(hspi->Instance==SPI1)
 800379c:	6822      	ldr	r2, [r4, #0]
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_SPI_MspInit+0x50>)
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037a4:	b008      	add	sp, #32
 80037a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <HAL_SPI_MspInit+0x54>)
 80037aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037ac:	2080      	movs	r0, #128	; 0x80
 80037ae:	0140      	lsls	r0, r0, #5
 80037b0:	4301      	orrs	r1, r0
 80037b2:	6419      	str	r1, [r3, #64]	; 0x40
 80037b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b6:	4002      	ands	r2, r0
 80037b8:	9201      	str	r2, [sp, #4]
 80037ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037be:	2202      	movs	r2, #2
 80037c0:	4311      	orrs	r1, r2
 80037c2:	6359      	str	r1, [r3, #52]	; 0x34
 80037c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c6:	4013      	ands	r3, r2
 80037c8:	9302      	str	r3, [sp, #8]
 80037ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CLK_Pin|MISO_Pin|MOSI_Pin;
 80037cc:	2338      	movs	r3, #56	; 0x38
 80037ce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d0:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d2:	a903      	add	r1, sp, #12
 80037d4:	4803      	ldr	r0, [pc, #12]	; (80037e4 <HAL_SPI_MspInit+0x58>)
 80037d6:	f001 f8a7 	bl	8004928 <HAL_GPIO_Init>
}
 80037da:	e7e3      	b.n	80037a4 <HAL_SPI_MspInit+0x18>
 80037dc:	40013000 	.word	0x40013000
 80037e0:	40021000 	.word	0x40021000
 80037e4:	50000400 	.word	0x50000400

080037e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037e8:	b510      	push	{r4, lr}
 80037ea:	b08e      	sub	sp, #56	; 0x38
 80037ec:	0004      	movs	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037ee:	2234      	movs	r2, #52	; 0x34
 80037f0:	2100      	movs	r1, #0
 80037f2:	a801      	add	r0, sp, #4
 80037f4:	f002 fdab 	bl	800634e <memset>
  if(htim_base->Instance==TIM15)
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_TIM_Base_MspInit+0x58>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003800:	b00e      	add	sp, #56	; 0x38
 8003802:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	03db      	lsls	r3, r3, #15
 8003808:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800380a:	a801      	add	r0, sp, #4
 800380c:	f001 fd10 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8003810:	2800      	cmp	r0, #0
 8003812:	d112      	bne.n	800383a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003814:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <HAL_TIM_Base_MspInit+0x5c>)
 8003816:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003818:	2080      	movs	r0, #128	; 0x80
 800381a:	0240      	lsls	r0, r0, #9
 800381c:	4301      	orrs	r1, r0
 800381e:	6411      	str	r1, [r2, #64]	; 0x40
 8003820:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003822:	4003      	ands	r3, r0
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003828:	2200      	movs	r2, #0
 800382a:	2100      	movs	r1, #0
 800382c:	2014      	movs	r0, #20
 800382e:	f000 fdd3 	bl	80043d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003832:	2014      	movs	r0, #20
 8003834:	f000 fe00 	bl	8004438 <HAL_NVIC_EnableIRQ>
}
 8003838:	e7e2      	b.n	8003800 <HAL_TIM_Base_MspInit+0x18>
      Error_Handler();
 800383a:	f7ff fcd7 	bl	80031ec <Error_Handler>
 800383e:	e7e9      	b.n	8003814 <HAL_TIM_Base_MspInit+0x2c>
 8003840:	40014000 	.word	0x40014000
 8003844:	40021000 	.word	0x40021000

08003848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003848:	b510      	push	{r4, lr}
 800384a:	b098      	sub	sp, #96	; 0x60
 800384c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384e:	2214      	movs	r2, #20
 8003850:	2100      	movs	r1, #0
 8003852:	a813      	add	r0, sp, #76	; 0x4c
 8003854:	f002 fd7b 	bl	800634e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003858:	2234      	movs	r2, #52	; 0x34
 800385a:	2100      	movs	r1, #0
 800385c:	a806      	add	r0, sp, #24
 800385e:	f002 fd76 	bl	800634e <memset>
  if(huart->Instance==USART1)
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	4a3d      	ldr	r2, [pc, #244]	; (800395c <HAL_UART_MspInit+0x114>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_UART_MspInit+0x32>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800386a:	4a3d      	ldr	r2, [pc, #244]	; (8003960 <HAL_UART_MspInit+0x118>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d02c      	beq.n	80038ca <HAL_UART_MspInit+0x82>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART4)
 8003870:	4a3c      	ldr	r2, [pc, #240]	; (8003964 <HAL_UART_MspInit+0x11c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d053      	beq.n	800391e <HAL_UART_MspInit+0xd6>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8003876:	b018      	add	sp, #96	; 0x60
 8003878:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800387a:	2301      	movs	r3, #1
 800387c:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800387e:	a806      	add	r0, sp, #24
 8003880:	f001 fcd6 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 8003884:	2800      	cmp	r0, #0
 8003886:	d11d      	bne.n	80038c4 <HAL_UART_MspInit+0x7c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003888:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_UART_MspInit+0x120>)
 800388a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800388c:	2080      	movs	r0, #128	; 0x80
 800388e:	01c0      	lsls	r0, r0, #7
 8003890:	4301      	orrs	r1, r0
 8003892:	6419      	str	r1, [r3, #64]	; 0x40
 8003894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003896:	4002      	ands	r2, r0
 8003898:	9200      	str	r2, [sp, #0]
 800389a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800389c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800389e:	2202      	movs	r2, #2
 80038a0:	4311      	orrs	r1, r2
 80038a2:	6359      	str	r1, [r3, #52]	; 0x34
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	4013      	ands	r3, r2
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DEBUX_TX_Pin|DEBUX_RX_Pin;
 80038ac:	23c0      	movs	r3, #192	; 0xc0
 80038ae:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	9214      	str	r2, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b6:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80038b8:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ba:	a913      	add	r1, sp, #76	; 0x4c
 80038bc:	482b      	ldr	r0, [pc, #172]	; (800396c <HAL_UART_MspInit+0x124>)
 80038be:	f001 f833 	bl	8004928 <HAL_GPIO_Init>
 80038c2:	e7d8      	b.n	8003876 <HAL_UART_MspInit+0x2e>
      Error_Handler();
 80038c4:	f7ff fc92 	bl	80031ec <Error_Handler>
 80038c8:	e7de      	b.n	8003888 <HAL_UART_MspInit+0x40>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038ca:	2302      	movs	r3, #2
 80038cc:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ce:	a806      	add	r0, sp, #24
 80038d0:	f001 fcae 	bl	8005230 <HAL_RCCEx_PeriphCLKConfig>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d11f      	bne.n	8003918 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_UART_MspInit+0x120>)
 80038da:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80038dc:	2080      	movs	r0, #128	; 0x80
 80038de:	0280      	lsls	r0, r0, #10
 80038e0:	4301      	orrs	r1, r0
 80038e2:	63d9      	str	r1, [r3, #60]	; 0x3c
 80038e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038e6:	4002      	ands	r2, r0
 80038e8:	9202      	str	r2, [sp, #8]
 80038ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038ee:	2201      	movs	r2, #1
 80038f0:	4311      	orrs	r1, r2
 80038f2:	6359      	str	r1, [r3, #52]	; 0x34
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	4013      	ands	r3, r2
 80038f8:	9303      	str	r3, [sp, #12]
 80038fa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038fc:	230c      	movs	r3, #12
 80038fe:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	3b0a      	subs	r3, #10
 8003902:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003908:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800390a:	9217      	str	r2, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390c:	20a0      	movs	r0, #160	; 0xa0
 800390e:	a913      	add	r1, sp, #76	; 0x4c
 8003910:	05c0      	lsls	r0, r0, #23
 8003912:	f001 f809 	bl	8004928 <HAL_GPIO_Init>
 8003916:	e7ae      	b.n	8003876 <HAL_UART_MspInit+0x2e>
      Error_Handler();
 8003918:	f7ff fc68 	bl	80031ec <Error_Handler>
 800391c:	e7dc      	b.n	80038d8 <HAL_UART_MspInit+0x90>
    __HAL_RCC_USART4_CLK_ENABLE();
 800391e:	4b12      	ldr	r3, [pc, #72]	; (8003968 <HAL_UART_MspInit+0x120>)
 8003920:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003922:	2080      	movs	r0, #128	; 0x80
 8003924:	0300      	lsls	r0, r0, #12
 8003926:	4301      	orrs	r1, r0
 8003928:	63d9      	str	r1, [r3, #60]	; 0x3c
 800392a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392c:	4002      	ands	r2, r0
 800392e:	9204      	str	r2, [sp, #16]
 8003930:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003934:	2201      	movs	r2, #1
 8003936:	4311      	orrs	r1, r2
 8003938:	6359      	str	r1, [r3, #52]	; 0x34
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	401a      	ands	r2, r3
 800393e:	9205      	str	r2, [sp, #20]
 8003940:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = COM_TX_Pin|COM_RX_Pin;
 8003942:	2303      	movs	r3, #3
 8003944:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	3b01      	subs	r3, #1
 8003948:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 800394a:	3302      	adds	r3, #2
 800394c:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	20a0      	movs	r0, #160	; 0xa0
 8003950:	a913      	add	r1, sp, #76	; 0x4c
 8003952:	05c0      	lsls	r0, r0, #23
 8003954:	f000 ffe8 	bl	8004928 <HAL_GPIO_Init>
}
 8003958:	e78d      	b.n	8003876 <HAL_UART_MspInit+0x2e>
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	40013800 	.word	0x40013800
 8003960:	40004400 	.word	0x40004400
 8003964:	40004c00 	.word	0x40004c00
 8003968:	40021000 	.word	0x40021000
 800396c:	50000400 	.word	0x50000400

08003970 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <NMI_Handler>

08003972 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003972:	e7fe      	b.n	8003972 <HardFault_Handler>

08003974 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003974:	4770      	bx	lr

08003976 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003976:	4770      	bx	lr

08003978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003978:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800397a:	f000 f8e1 	bl	8003b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800397e:	bd10      	pop	{r4, pc}

08003980 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003980:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003982:	4802      	ldr	r0, [pc, #8]	; (800398c <DMA1_Channel1_IRQHandler+0xc>)
 8003984:	f000 ff6a 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003988:	bd10      	pop	{r4, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	200005bc 	.word	0x200005bc

08003990 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8003990:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003992:	4802      	ldr	r0, [pc, #8]	; (800399c <ADC1_COMP_IRQHandler+0xc>)
 8003994:	f000 fa5c 	bl	8003e50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003998:	bd10      	pop	{r4, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	20000534 	.word	0x20000534

080039a0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80039a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80039a2:	4802      	ldr	r0, [pc, #8]	; (80039ac <TIM15_IRQHandler+0xc>)
 80039a4:	f001 fe5c 	bl	8005660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80039a8:	bd10      	pop	{r4, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	2000067c 	.word	0x2000067c

080039b0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80039b0:	2001      	movs	r0, #1
 80039b2:	4770      	bx	lr

080039b4 <_kill>:

int _kill(int pid, int sig)
{
 80039b4:	b510      	push	{r4, lr}
	errno = EINVAL;
 80039b6:	f002 fc97 	bl	80062e8 <__errno>
 80039ba:	2316      	movs	r3, #22
 80039bc:	6003      	str	r3, [r0, #0]
	return -1;
 80039be:	2001      	movs	r0, #1
}
 80039c0:	4240      	negs	r0, r0
 80039c2:	bd10      	pop	{r4, pc}

080039c4 <_exit>:

void _exit (int status)
{
 80039c4:	b510      	push	{r4, lr}
	_kill(status, -1);
 80039c6:	2101      	movs	r1, #1
 80039c8:	4249      	negs	r1, r1
 80039ca:	f7ff fff3 	bl	80039b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039ce:	e7fe      	b.n	80039ce <_exit+0xa>

080039d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039d0:	b570      	push	{r4, r5, r6, lr}
 80039d2:	000c      	movs	r4, r1
 80039d4:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d6:	2500      	movs	r5, #0
 80039d8:	e004      	b.n	80039e4 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 80039da:	e000      	b.n	80039de <_read+0xe>
 80039dc:	bf00      	nop
 80039de:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e0:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 80039e2:	3401      	adds	r4, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e4:	42b5      	cmp	r5, r6
 80039e6:	dbf8      	blt.n	80039da <_read+0xa>
	}

return len;
}
 80039e8:	0030      	movs	r0, r6
 80039ea:	bd70      	pop	{r4, r5, r6, pc}

080039ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039ec:	b570      	push	{r4, r5, r6, lr}
 80039ee:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f0:	2400      	movs	r4, #0
 80039f2:	e005      	b.n	8003a00 <_write+0x14>
	{
		__io_putchar(*ptr++);
 80039f4:	1c4d      	adds	r5, r1, #1
 80039f6:	7808      	ldrb	r0, [r1, #0]
 80039f8:	f7ff fb42 	bl	8003080 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fc:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 80039fe:	0029      	movs	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a00:	42b4      	cmp	r4, r6
 8003a02:	dbf7      	blt.n	80039f4 <_write+0x8>
	}
	return len;
}
 8003a04:	0030      	movs	r0, r6
 8003a06:	bd70      	pop	{r4, r5, r6, pc}

08003a08 <_close>:

int _close(int file)
{
	return -1;
 8003a08:	2001      	movs	r0, #1
}
 8003a0a:	4240      	negs	r0, r0
 8003a0c:	4770      	bx	lr

08003a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003a14:	2000      	movs	r0, #0
 8003a16:	4770      	bx	lr

08003a18 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003a18:	2001      	movs	r0, #1
 8003a1a:	4770      	bx	lr

08003a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	4770      	bx	lr

08003a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a20:	b510      	push	{r4, lr}
 8003a22:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a24:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <_sbrk+0x38>)
 8003a26:	490d      	ldr	r1, [pc, #52]	; (8003a5c <_sbrk+0x3c>)
 8003a28:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <_sbrk+0x40>)
 8003a2c:	6809      	ldr	r1, [r1, #0]
 8003a2e:	2900      	cmp	r1, #0
 8003a30:	d007      	beq.n	8003a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a32:	490b      	ldr	r1, [pc, #44]	; (8003a60 <_sbrk+0x40>)
 8003a34:	6808      	ldr	r0, [r1, #0]
 8003a36:	18c3      	adds	r3, r0, r3
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d806      	bhi.n	8003a4a <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003a3c:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <_sbrk+0x40>)
 8003a3e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8003a40:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003a42:	4907      	ldr	r1, [pc, #28]	; (8003a60 <_sbrk+0x40>)
 8003a44:	4807      	ldr	r0, [pc, #28]	; (8003a64 <_sbrk+0x44>)
 8003a46:	6008      	str	r0, [r1, #0]
 8003a48:	e7f3      	b.n	8003a32 <_sbrk+0x12>
    errno = ENOMEM;
 8003a4a:	f002 fc4d 	bl	80062e8 <__errno>
 8003a4e:	230c      	movs	r3, #12
 8003a50:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003a52:	2001      	movs	r0, #1
 8003a54:	4240      	negs	r0, r0
 8003a56:	e7f3      	b.n	8003a40 <_sbrk+0x20>
 8003a58:	20009000 	.word	0x20009000
 8003a5c:	00000400 	.word	0x00000400
 8003a60:	200008a0 	.word	0x200008a0
 8003a64:	200008d0 	.word	0x200008d0

08003a68 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a68:	4770      	bx	lr
	...

08003a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a6c:	480d      	ldr	r0, [pc, #52]	; (8003aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a70:	f7ff fffa 	bl	8003a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a74:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a76:	490d      	ldr	r1, [pc, #52]	; (8003aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a78:	4a0d      	ldr	r2, [pc, #52]	; (8003ab0 <LoopForever+0xe>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a7c:	e002      	b.n	8003a84 <LoopCopyDataInit>

08003a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a82:	3304      	adds	r3, #4

08003a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a88:	d3f9      	bcc.n	8003a7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8a:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a8c:	4c0a      	ldr	r4, [pc, #40]	; (8003ab8 <LoopForever+0x16>)
  movs r3, #0
 8003a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a90:	e001      	b.n	8003a96 <LoopFillZerobss>

08003a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a94:	3204      	adds	r2, #4

08003a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a98:	d3fb      	bcc.n	8003a92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a9a:	f002 fc2b 	bl	80062f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a9e:	f7ff fd41 	bl	8003524 <main>

08003aa2 <LoopForever>:

LoopForever:
  b LoopForever
 8003aa2:	e7fe      	b.n	8003aa2 <LoopForever>
  ldr   r0, =_estack
 8003aa4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8003aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aac:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003ab0:	08009734 	.word	0x08009734
  ldr r2, =_sbss
 8003ab4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003ab8:	200008cc 	.word	0x200008cc

08003abc <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003abc:	e7fe      	b.n	8003abc <CEC_IRQHandler>
	...

08003ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac0:	b510      	push	{r4, lr}
 8003ac2:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <HAL_InitTick+0x4c>)
 8003ac6:	7819      	ldrb	r1, [r3, #0]
 8003ac8:	2900      	cmp	r1, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003acc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003ace:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003ad0:	20fa      	movs	r0, #250	; 0xfa
 8003ad2:	0080      	lsls	r0, r0, #2
 8003ad4:	f7fc fb32 	bl	800013c <__udivsi3>
 8003ad8:	0001      	movs	r1, r0
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <HAL_InitTick+0x50>)
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	f7fc fb2d 	bl	800013c <__udivsi3>
 8003ae2:	f000 fcb5 	bl	8004450 <HAL_SYSTICK_Config>
 8003ae6:	2800      	cmp	r0, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aea:	2c03      	cmp	r4, #3
 8003aec:	d901      	bls.n	8003af2 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8003aee:	2001      	movs	r0, #1
 8003af0:	e7ed      	b.n	8003ace <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003af2:	3001      	adds	r0, #1
 8003af4:	2200      	movs	r2, #0
 8003af6:	0021      	movs	r1, r4
 8003af8:	4240      	negs	r0, r0
 8003afa:	f000 fc6d 	bl	80043d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_InitTick+0x54>)
 8003b00:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b02:	2000      	movs	r0, #0
 8003b04:	e7e3      	b.n	8003ace <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8003b06:	2001      	movs	r0, #1
 8003b08:	e7e1      	b.n	8003ace <HAL_InitTick+0xe>
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	20000004 	.word	0x20000004
 8003b10:	20000000 	.word	0x20000000
 8003b14:	20000008 	.word	0x20000008

08003b18 <HAL_Init>:
{
 8003b18:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <HAL_Init+0x24>)
 8003b1c:	6811      	ldr	r1, [r2, #0]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	430b      	orrs	r3, r1
 8003b24:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b26:	2003      	movs	r0, #3
 8003b28:	f7ff ffca 	bl	8003ac0 <HAL_InitTick>
 8003b2c:	1e04      	subs	r4, r0, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8003b30:	2401      	movs	r4, #1
}
 8003b32:	0020      	movs	r0, r4
 8003b34:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8003b36:	f7ff fdab 	bl	8003690 <HAL_MspInit>
 8003b3a:	e7fa      	b.n	8003b32 <HAL_Init+0x1a>
 8003b3c:	40022000 	.word	0x40022000

08003b40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_IncTick+0x10>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	4a03      	ldr	r2, [pc, #12]	; (8003b54 <HAL_IncTick+0x14>)
 8003b46:	6811      	ldr	r1, [r2, #0]
 8003b48:	185b      	adds	r3, r3, r1
 8003b4a:	6013      	str	r3, [r2, #0]
}
 8003b4c:	4770      	bx	lr
 8003b4e:	46c0      	nop			; (mov r8, r8)
 8003b50:	20000004 	.word	0x20000004
 8003b54:	200008a4 	.word	0x200008a4

08003b58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003b58:	4b01      	ldr	r3, [pc, #4]	; (8003b60 <HAL_GetTick+0x8>)
 8003b5a:	6818      	ldr	r0, [r3, #0]
}
 8003b5c:	4770      	bx	lr
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	200008a4 	.word	0x200008a4

08003b64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b64:	b530      	push	{r4, r5, lr}
 8003b66:	b083      	sub	sp, #12
 8003b68:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d100      	bne.n	8003b74 <HAL_ADC_Init+0x10>
 8003b72:	e106      	b.n	8003d82 <HAL_ADC_Init+0x21e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b74:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d013      	beq.n	8003ba2 <HAL_ADC_Init+0x3e>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003b7a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	00d2      	lsls	r2, r2, #3
 8003b80:	d41c      	bmi.n	8003bbc <HAL_ADC_Init+0x58>
  MODIFY_REG(ADCx->CR,
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4980      	ldr	r1, [pc, #512]	; (8003d88 <HAL_ADC_Init+0x224>)
 8003b86:	4011      	ands	r1, r2
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	0552      	lsls	r2, r2, #21
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b90:	4b7e      	ldr	r3, [pc, #504]	; (8003d8c <HAL_ADC_Init+0x228>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	497e      	ldr	r1, [pc, #504]	; (8003d90 <HAL_ADC_Init+0x22c>)
 8003b96:	f7fc fad1 	bl	800013c <__udivsi3>
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	0040      	lsls	r0, r0, #1
 8003b9e:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8003ba0:	e009      	b.n	8003bb6 <HAL_ADC_Init+0x52>
    HAL_ADC_MspInit(hadc);
 8003ba2:	f7ff fd8d 	bl	80036c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003baa:	2254      	movs	r2, #84	; 0x54
 8003bac:	54a3      	strb	r3, [r4, r2]
 8003bae:	e7e4      	b.n	8003b7a <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8003bb0:	9b01      	ldr	r3, [sp, #4]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003bb6:	9b01      	ldr	r3, [sp, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f9      	bne.n	8003bb0 <HAL_ADC_Init+0x4c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003bbc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	00d2      	lsls	r2, r2, #3
 8003bc2:	d500      	bpl.n	8003bc6 <HAL_ADC_Init+0x62>
 8003bc4:	e09d      	b.n	8003d02 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003bc8:	2110      	movs	r1, #16
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003bd0:	390f      	subs	r1, #15
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	2104      	movs	r1, #4
 8003bdc:	000d      	movs	r5, r1
 8003bde:	4015      	ands	r5, r2
 8003be0:	4211      	tst	r1, r2
 8003be2:	d000      	beq.n	8003be6 <HAL_ADC_Init+0x82>
 8003be4:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003be6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003be8:	06d2      	lsls	r2, r2, #27
 8003bea:	d500      	bpl.n	8003bee <HAL_ADC_Init+0x8a>
 8003bec:	e0c2      	b.n	8003d74 <HAL_ADC_Init+0x210>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003bee:	2d00      	cmp	r5, #0
 8003bf0:	d000      	beq.n	8003bf4 <HAL_ADC_Init+0x90>
 8003bf2:	e0bf      	b.n	8003d74 <HAL_ADC_Init+0x210>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003bf6:	4967      	ldr	r1, [pc, #412]	; (8003d94 <HAL_ADC_Init+0x230>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	3106      	adds	r1, #6
 8003bfc:	31ff      	adds	r1, #255	; 0xff
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	07d2      	lsls	r2, r2, #31
 8003c06:	d452      	bmi.n	8003cae <HAL_ADC_Init+0x14a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c08:	7e22      	ldrb	r2, [r4, #24]
 8003c0a:	0392      	lsls	r2, r2, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003c0c:	68a1      	ldr	r1, [r4, #8]
 8003c0e:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c10:	7e61      	ldrb	r1, [r4, #25]
 8003c12:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003c14:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c16:	7ea5      	ldrb	r5, [r4, #26]
 8003c18:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003c1a:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003c1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_ADC_Init+0xc2>
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003c26:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003c28:	68e1      	ldr	r1, [r4, #12]
 8003c2a:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003c2c:	6921      	ldr	r1, [r4, #16]
 8003c2e:	2900      	cmp	r1, #0
 8003c30:	db69      	blt.n	8003d06 <HAL_ADC_Init+0x1a2>
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8003c36:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	5c61      	ldrb	r1, [r4, r1]
 8003c3c:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003c3e:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c40:	2120      	movs	r1, #32
 8003c42:	5c61      	ldrb	r1, [r4, r1]
 8003c44:	2901      	cmp	r1, #1
 8003c46:	d061      	beq.n	8003d0c <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d005      	beq.n	8003c5a <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003c4e:	25e0      	movs	r5, #224	; 0xe0
 8003c50:	006d      	lsls	r5, r5, #1
 8003c52:	4029      	ands	r1, r5
 8003c54:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003c56:	4329      	orrs	r1, r5
 8003c58:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003c5a:	68d9      	ldr	r1, [r3, #12]
 8003c5c:	4d4e      	ldr	r5, [pc, #312]	; (8003d98 <HAL_ADC_Init+0x234>)
 8003c5e:	4029      	ands	r1, r5
 8003c60:	430a      	orrs	r2, r1
 8003c62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003c64:	6863      	ldr	r3, [r4, #4]
 8003c66:	0f9b      	lsrs	r3, r3, #30
 8003c68:	079b      	lsls	r3, r3, #30
 8003c6a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003c6c:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c6e:	213c      	movs	r1, #60	; 0x3c
 8003c70:	5c61      	ldrb	r1, [r4, r1]
 8003c72:	2901      	cmp	r1, #1
 8003c74:	d059      	beq.n	8003d2a <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003c76:	6821      	ldr	r1, [r4, #0]
 8003c78:	690b      	ldr	r3, [r1, #16]
 8003c7a:	4d48      	ldr	r5, [pc, #288]	; (8003d9c <HAL_ADC_Init+0x238>)
 8003c7c:	402b      	ands	r3, r5
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003c82:	6863      	ldr	r3, [r4, #4]
 8003c84:	22c0      	movs	r2, #192	; 0xc0
 8003c86:	0612      	lsls	r2, r2, #24
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d010      	beq.n	8003cae <HAL_ADC_Init+0x14a>
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	05d2      	lsls	r2, r2, #23
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00c      	beq.n	8003cae <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	0612      	lsls	r2, r2, #24
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d008      	beq.n	8003cae <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003c9c:	4940      	ldr	r1, [pc, #256]	; (8003da0 <HAL_ADC_Init+0x23c>)
 8003c9e:	680a      	ldr	r2, [r1, #0]
 8003ca0:	4d40      	ldr	r5, [pc, #256]	; (8003da4 <HAL_ADC_Init+0x240>)
 8003ca2:	402a      	ands	r2, r5
 8003ca4:	25f0      	movs	r5, #240	; 0xf0
 8003ca6:	03ad      	lsls	r5, r5, #14
 8003ca8:	402b      	ands	r3, r5
 8003caa:	4313      	orrs	r3, r2
 8003cac:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003cae:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8003cb0:	6953      	ldr	r3, [r2, #20]
 8003cb2:	2107      	movs	r1, #7
 8003cb4:	438b      	bics	r3, r1
 8003cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003cbc:	6821      	ldr	r1, [r4, #0]
 8003cbe:	694b      	ldr	r3, [r1, #20]
 8003cc0:	2270      	movs	r2, #112	; 0x70
 8003cc2:	4393      	bics	r3, r2
 8003cc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003cc6:	0112      	lsls	r2, r2, #4
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003ccc:	6923      	ldr	r3, [r4, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d135      	bne.n	8003d3e <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cd6:	3b10      	subs	r3, #16
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003cdc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d03b      	beq.n	8003d62 <HAL_ADC_Init+0x1fe>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003cea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003cec:	2212      	movs	r2, #18
 8003cee:	4393      	bics	r3, r2
 8003cf0:	3a02      	subs	r2, #2
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003cf8:	3a0f      	subs	r2, #15
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
 8003d00:	e03d      	b.n	8003d7e <HAL_ADC_Init+0x21a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d02:	2000      	movs	r0, #0
 8003d04:	e768      	b.n	8003bd8 <HAL_ADC_Init+0x74>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d06:	0049      	lsls	r1, r1, #1
 8003d08:	0849      	lsrs	r1, r1, #1
 8003d0a:	e794      	b.n	8003c36 <HAL_ADC_Init+0xd2>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	d103      	bne.n	8003d18 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	0249      	lsls	r1, r1, #9
 8003d14:	430a      	orrs	r2, r1
 8003d16:	e797      	b.n	8003c48 <HAL_ADC_Init+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d18:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003d1a:	2520      	movs	r5, #32
 8003d1c:	4329      	orrs	r1, r5
 8003d1e:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d20:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003d22:	3d1f      	subs	r5, #31
 8003d24:	4329      	orrs	r1, r5
 8003d26:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003d28:	e78e      	b.n	8003c48 <HAL_ADC_Init+0xe4>
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d2c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.Ratio         |
 8003d2e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003d30:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003d32:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003d34:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003d36:	4313      	orrs	r3, r2
 8003d38:	2201      	movs	r2, #1
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	e79b      	b.n	8003c76 <HAL_ADC_Init+0x112>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	0392      	lsls	r2, r2, #14
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d1ca      	bne.n	8003cdc <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8003d46:	6821      	ldr	r1, [r4, #0]
 8003d48:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003d4a:	69e3      	ldr	r3, [r4, #28]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	221c      	movs	r2, #28
 8003d52:	401a      	ands	r2, r3
 8003d54:	2310      	movs	r3, #16
 8003d56:	425b      	negs	r3, r3
 8003d58:	4093      	lsls	r3, r2
 8003d5a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d60:	e7bc      	b.n	8003cdc <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8003d62:	2300      	movs	r3, #0
 8003d64:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8003d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d68:	2203      	movs	r2, #3
 8003d6a:	4393      	bics	r3, r2
 8003d6c:	3a02      	subs	r2, #2
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	65a3      	str	r3, [r4, #88]	; 0x58
 8003d72:	e004      	b.n	8003d7e <HAL_ADC_Init+0x21a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d76:	2210      	movs	r2, #16
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003d7e:	b003      	add	sp, #12
 8003d80:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003d82:	2001      	movs	r0, #1
 8003d84:	e7fb      	b.n	8003d7e <HAL_ADC_Init+0x21a>
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	6fffffe8 	.word	0x6fffffe8
 8003d8c:	20000000 	.word	0x20000000
 8003d90:	00030d40 	.word	0x00030d40
 8003d94:	fffffefd 	.word	0xfffffefd
 8003d98:	fffe0201 	.word	0xfffe0201
 8003d9c:	1ffffc02 	.word	0x1ffffc02
 8003da0:	40012708 	.word	0x40012708
 8003da4:	ffc3ffff 	.word	0xffc3ffff

08003da8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003da8:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003daa:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dac:	f7ff fa0e 	bl	80031cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003db0:	bd10      	pop	{r4, pc}

08003db2 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8003db2:	4770      	bx	lr

08003db4 <HAL_ADC_ErrorCallback>:
}
 8003db4:	4770      	bx	lr

08003db6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003db6:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dba:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003dbc:	2240      	movs	r2, #64	; 0x40
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003dc2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003dc4:	3a3c      	subs	r2, #60	; 0x3c
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dca:	f7ff fff3 	bl	8003db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dce:	bd10      	pop	{r4, pc}

08003dd0 <ADC_DMAConvCplt>:
{
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003dd6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003dd8:	2150      	movs	r1, #80	; 0x50
 8003dda:	4211      	tst	r1, r2
 8003ddc:	d12a      	bne.n	8003e34 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dde:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4313      	orrs	r3, r2
 8003de6:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003de8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003dea:	68d9      	ldr	r1, [r3, #12]
 8003dec:	22c0      	movs	r2, #192	; 0xc0
 8003dee:	0112      	lsls	r2, r2, #4
 8003df0:	4211      	tst	r1, r2
 8003df2:	d113      	bne.n	8003e1c <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003df4:	7e82      	ldrb	r2, [r0, #26]
 8003df6:	2a00      	cmp	r2, #0
 8003df8:	d110      	bne.n	8003e1c <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	0712      	lsls	r2, r2, #28
 8003dfe:	d50d      	bpl.n	8003e1c <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	0752      	lsls	r2, r2, #29
 8003e04:	d40d      	bmi.n	8003e22 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	210c      	movs	r1, #12
 8003e0a:	438a      	bics	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003e0e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <ADC_DMAConvCplt+0x7c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	3204      	adds	r2, #4
 8003e16:	32ff      	adds	r2, #255	; 0xff
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003e1c:	f7ff f9de 	bl	80031dc <HAL_ADC_ConvCpltCallback>
}
 8003e20:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e22:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003e24:	2220      	movs	r2, #32
 8003e26:	4313      	orrs	r3, r2
 8003e28:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e2a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003e2c:	3a1f      	subs	r2, #31
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	65c3      	str	r3, [r0, #92]	; 0x5c
 8003e32:	e7f3      	b.n	8003e1c <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e34:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003e36:	06d2      	lsls	r2, r2, #27
 8003e38:	d404      	bmi.n	8003e44 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e3a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8003e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e3e:	0018      	movs	r0, r3
 8003e40:	4790      	blx	r2
}
 8003e42:	e7ed      	b.n	8003e20 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8003e44:	f7ff ffb6 	bl	8003db4 <HAL_ADC_ErrorCallback>
 8003e48:	e7ea      	b.n	8003e20 <ADC_DMAConvCplt+0x50>
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	fffffefe 	.word	0xfffffefe

08003e50 <HAL_ADC_IRQHandler>:
{
 8003e50:	b570      	push	{r4, r5, r6, lr}
 8003e52:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e54:	6803      	ldr	r3, [r0, #0]
 8003e56:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e58:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e5a:	07b3      	lsls	r3, r6, #30
 8003e5c:	d50f      	bpl.n	8003e7e <HAL_ADC_IRQHandler+0x2e>
 8003e5e:	07ab      	lsls	r3, r5, #30
 8003e60:	d50d      	bpl.n	8003e7e <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e62:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003e64:	06db      	lsls	r3, r3, #27
 8003e66:	d404      	bmi.n	8003e72 <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e68:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e72:	0020      	movs	r0, r4
 8003e74:	f000 faae 	bl	80043d4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e7e:	0773      	lsls	r3, r6, #29
 8003e80:	d501      	bpl.n	8003e86 <HAL_ADC_IRQHandler+0x36>
 8003e82:	076b      	lsls	r3, r5, #29
 8003e84:	d403      	bmi.n	8003e8e <HAL_ADC_IRQHandler+0x3e>
 8003e86:	0733      	lsls	r3, r6, #28
 8003e88:	d529      	bpl.n	8003ede <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003e8a:	072b      	lsls	r3, r5, #28
 8003e8c:	d527      	bpl.n	8003ede <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e90:	06db      	lsls	r3, r3, #27
 8003e92:	d404      	bmi.n	8003e9e <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e94:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	65a3      	str	r3, [r4, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e9e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003ea0:	68d9      	ldr	r1, [r3, #12]
 8003ea2:	22c0      	movs	r2, #192	; 0xc0
 8003ea4:	0112      	lsls	r2, r2, #4
 8003ea6:	4211      	tst	r1, r2
 8003ea8:	d113      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003eaa:	7ea2      	ldrb	r2, [r4, #26]
 8003eac:	2a00      	cmp	r2, #0
 8003eae:	d110      	bne.n	8003ed2 <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	0712      	lsls	r2, r2, #28
 8003eb4:	d50d      	bpl.n	8003ed2 <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	0752      	lsls	r2, r2, #29
 8003eba:	d43b      	bmi.n	8003f34 <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	210c      	movs	r1, #12
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8003ec4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ec6:	4a37      	ldr	r2, [pc, #220]	; (8003fa4 <HAL_ADC_IRQHandler+0x154>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	3204      	adds	r2, #4
 8003ecc:	32ff      	adds	r2, #255	; 0xff
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003ed2:	0020      	movs	r0, r4
 8003ed4:	f7ff f982 	bl	80031dc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	220c      	movs	r2, #12
 8003edc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ede:	0633      	lsls	r3, r6, #24
 8003ee0:	d501      	bpl.n	8003ee6 <HAL_ADC_IRQHandler+0x96>
 8003ee2:	062b      	lsls	r3, r5, #24
 8003ee4:	d42f      	bmi.n	8003f46 <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ee6:	05f3      	lsls	r3, r6, #23
 8003ee8:	d501      	bpl.n	8003eee <HAL_ADC_IRQHandler+0x9e>
 8003eea:	05eb      	lsls	r3, r5, #23
 8003eec:	d437      	bmi.n	8003f5e <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003eee:	05b3      	lsls	r3, r6, #22
 8003ef0:	d501      	bpl.n	8003ef6 <HAL_ADC_IRQHandler+0xa6>
 8003ef2:	05ab      	lsls	r3, r5, #22
 8003ef4:	d440      	bmi.n	8003f78 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ef6:	06f3      	lsls	r3, r6, #27
 8003ef8:	d517      	bpl.n	8003f2a <HAL_ADC_IRQHandler+0xda>
 8003efa:	06eb      	lsls	r3, r5, #27
 8003efc:	d515      	bpl.n	8003f2a <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8003f04:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	079b      	lsls	r3, r3, #30
 8003f0a:	d00b      	beq.n	8003f24 <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	4313      	orrs	r3, r2
 8003f14:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003f16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f18:	2202      	movs	r2, #2
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8003f1e:	0020      	movs	r0, r4
 8003f20:	f7ff ff48 	bl	8003db4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	2210      	movs	r2, #16
 8003f28:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003f2a:	04b3      	lsls	r3, r6, #18
 8003f2c:	d501      	bpl.n	8003f32 <HAL_ADC_IRQHandler+0xe2>
 8003f2e:	04ab      	lsls	r3, r5, #18
 8003f30:	d42f      	bmi.n	8003f92 <HAL_ADC_IRQHandler+0x142>
}
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f36:	2220      	movs	r2, #32
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003f3e:	3a1f      	subs	r2, #31
 8003f40:	4313      	orrs	r3, r2
 8003f42:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003f44:	e7c5      	b.n	8003ed2 <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003f46:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	025b      	lsls	r3, r3, #9
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003f50:	0020      	movs	r0, r4
 8003f52:	f7ff ff2e 	bl	8003db2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	2280      	movs	r2, #128	; 0x80
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e7c3      	b.n	8003ee6 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003f5e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	029b      	lsls	r3, r3, #10
 8003f64:	4313      	orrs	r3, r2
 8003f66:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003f68:	0020      	movs	r0, r4
 8003f6a:	f000 fa31 	bl	80043d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003f6e:	6823      	ldr	r3, [r4, #0]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	0052      	lsls	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e7ba      	b.n	8003eee <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f78:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	02db      	lsls	r3, r3, #11
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f82:	0020      	movs	r0, r4
 8003f84:	f000 fa25 	bl	80043d2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	2280      	movs	r2, #128	; 0x80
 8003f8c:	0092      	lsls	r2, r2, #2
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e7b1      	b.n	8003ef6 <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003f92:	0020      	movs	r0, r4
 8003f94:	f000 fa1f 	bl	80043d6 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	2280      	movs	r2, #128	; 0x80
 8003f9c:	0192      	lsls	r2, r2, #6
 8003f9e:	601a      	str	r2, [r3, #0]
}
 8003fa0:	e7c7      	b.n	8003f32 <HAL_ADC_IRQHandler+0xe2>
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	fffffefe 	.word	0xfffffefe

08003fa8 <HAL_ADC_ConfigChannel>:
{
 8003fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003faa:	b083      	sub	sp, #12
 8003fac:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fb2:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8003fb4:	3354      	adds	r3, #84	; 0x54
 8003fb6:	5cc3      	ldrb	r3, [r0, r3]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d100      	bne.n	8003fbe <HAL_ADC_ConfigChannel+0x16>
 8003fbc:	e130      	b.n	8004220 <HAL_ADC_ConfigChannel+0x278>
 8003fbe:	2354      	movs	r3, #84	; 0x54
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fc4:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003fc6:	6883      	ldr	r3, [r0, #8]
 8003fc8:	3203      	adds	r2, #3
 8003fca:	0016      	movs	r6, r2
 8003fcc:	401e      	ands	r6, r3
 8003fce:	421a      	tst	r2, r3
 8003fd0:	d009      	beq.n	8003fe6 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fd4:	321c      	adds	r2, #28
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8003fdc:	2354      	movs	r3, #84	; 0x54
 8003fde:	2200      	movs	r2, #0
 8003fe0:	54e2      	strb	r2, [r4, r3]
}
 8003fe2:	b003      	add	sp, #12
 8003fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8003fe6:	684b      	ldr	r3, [r1, #4]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d100      	bne.n	8003fee <HAL_ADC_ConfigChannel+0x46>
 8003fec:	e0d6      	b.n	800419c <HAL_ADC_ConfigChannel+0x1f4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	0612      	lsls	r2, r2, #24
 8003ff2:	4295      	cmp	r5, r2
 8003ff4:	d026      	beq.n	8004044 <HAL_ADC_ConfigChannel+0x9c>
 8003ff6:	4a8b      	ldr	r2, [pc, #556]	; (8004224 <HAL_ADC_ConfigChannel+0x27c>)
 8003ff8:	4295      	cmp	r5, r2
 8003ffa:	d023      	beq.n	8004044 <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003ffc:	221f      	movs	r2, #31
 8003ffe:	4013      	ands	r3, r2
 8004000:	3a10      	subs	r2, #16
 8004002:	409a      	lsls	r2, r3
 8004004:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004006:	4395      	bics	r5, r2
 8004008:	002a      	movs	r2, r5
 800400a:	680d      	ldr	r5, [r1, #0]
 800400c:	036f      	lsls	r7, r5, #13
 800400e:	d12f      	bne.n	8004070 <HAL_ADC_ConfigChannel+0xc8>
 8004010:	0ead      	lsrs	r5, r5, #26
 8004012:	261f      	movs	r6, #31
 8004014:	402e      	ands	r6, r5
 8004016:	409e      	lsls	r6, r3
 8004018:	4316      	orrs	r6, r2
 800401a:	6626      	str	r6, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800401c:	684d      	ldr	r5, [r1, #4]
 800401e:	08ab      	lsrs	r3, r5, #2
 8004020:	3301      	adds	r3, #1
 8004022:	69e2      	ldr	r2, [r4, #28]
 8004024:	4293      	cmp	r3, r2
 8004026:	d813      	bhi.n	8004050 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 8004028:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800402a:	231f      	movs	r3, #31
 800402c:	401d      	ands	r5, r3
 800402e:	3b10      	subs	r3, #16
 8004030:	001e      	movs	r6, r3
 8004032:	40ae      	lsls	r6, r5
 8004034:	43b2      	bics	r2, r6
 8004036:	680e      	ldr	r6, [r1, #0]
 8004038:	0eb6      	lsrs	r6, r6, #26
 800403a:	4033      	ands	r3, r6
 800403c:	40ab      	lsls	r3, r5
 800403e:	4313      	orrs	r3, r2
 8004040:	6283      	str	r3, [r0, #40]	; 0x28
}
 8004042:	e005      	b.n	8004050 <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004044:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004046:	680b      	ldr	r3, [r1, #0]
 8004048:	035b      	lsls	r3, r3, #13
 800404a:	0b5b      	lsrs	r3, r3, #13
 800404c:	4313      	orrs	r3, r2
 800404e:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004050:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8004052:	6942      	ldr	r2, [r0, #20]
 8004054:	680b      	ldr	r3, [r1, #0]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	439a      	bics	r2, r3
 800405a:	688d      	ldr	r5, [r1, #8]
 800405c:	402b      	ands	r3, r5
 800405e:	4d72      	ldr	r5, [pc, #456]	; (8004228 <HAL_ADC_ConfigChannel+0x280>)
 8004060:	402b      	ands	r3, r5
 8004062:	4313      	orrs	r3, r2
 8004064:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004066:	680b      	ldr	r3, [r1, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db4f      	blt.n	800410c <HAL_ADC_ConfigChannel+0x164>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800406c:	2000      	movs	r0, #0
 800406e:	e7b5      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004070:	07ef      	lsls	r7, r5, #31
 8004072:	d4d0      	bmi.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 8004074:	07ae      	lsls	r6, r5, #30
 8004076:	d427      	bmi.n	80040c8 <HAL_ADC_ConfigChannel+0x120>
 8004078:	076e      	lsls	r6, r5, #29
 800407a:	d427      	bmi.n	80040cc <HAL_ADC_ConfigChannel+0x124>
 800407c:	072e      	lsls	r6, r5, #28
 800407e:	d427      	bmi.n	80040d0 <HAL_ADC_ConfigChannel+0x128>
 8004080:	06ee      	lsls	r6, r5, #27
 8004082:	d427      	bmi.n	80040d4 <HAL_ADC_ConfigChannel+0x12c>
 8004084:	06ae      	lsls	r6, r5, #26
 8004086:	d427      	bmi.n	80040d8 <HAL_ADC_ConfigChannel+0x130>
 8004088:	066e      	lsls	r6, r5, #25
 800408a:	d427      	bmi.n	80040dc <HAL_ADC_ConfigChannel+0x134>
 800408c:	062e      	lsls	r6, r5, #24
 800408e:	d427      	bmi.n	80040e0 <HAL_ADC_ConfigChannel+0x138>
 8004090:	05ee      	lsls	r6, r5, #23
 8004092:	d427      	bmi.n	80040e4 <HAL_ADC_ConfigChannel+0x13c>
 8004094:	05ae      	lsls	r6, r5, #22
 8004096:	d427      	bmi.n	80040e8 <HAL_ADC_ConfigChannel+0x140>
 8004098:	056e      	lsls	r6, r5, #21
 800409a:	d427      	bmi.n	80040ec <HAL_ADC_ConfigChannel+0x144>
 800409c:	052e      	lsls	r6, r5, #20
 800409e:	d427      	bmi.n	80040f0 <HAL_ADC_ConfigChannel+0x148>
 80040a0:	04ee      	lsls	r6, r5, #19
 80040a2:	d427      	bmi.n	80040f4 <HAL_ADC_ConfigChannel+0x14c>
 80040a4:	04ae      	lsls	r6, r5, #18
 80040a6:	d427      	bmi.n	80040f8 <HAL_ADC_ConfigChannel+0x150>
 80040a8:	046e      	lsls	r6, r5, #17
 80040aa:	d427      	bmi.n	80040fc <HAL_ADC_ConfigChannel+0x154>
 80040ac:	042e      	lsls	r6, r5, #16
 80040ae:	d427      	bmi.n	8004100 <HAL_ADC_ConfigChannel+0x158>
 80040b0:	03ee      	lsls	r6, r5, #15
 80040b2:	d427      	bmi.n	8004104 <HAL_ADC_ConfigChannel+0x15c>
 80040b4:	03ae      	lsls	r6, r5, #14
 80040b6:	d427      	bmi.n	8004108 <HAL_ADC_ConfigChannel+0x160>
 80040b8:	2780      	movs	r7, #128	; 0x80
 80040ba:	02ff      	lsls	r7, r7, #11
 80040bc:	002e      	movs	r6, r5
 80040be:	403e      	ands	r6, r7
 80040c0:	423d      	tst	r5, r7
 80040c2:	d0a8      	beq.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040c4:	2612      	movs	r6, #18
 80040c6:	e7a6      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040c8:	2601      	movs	r6, #1
 80040ca:	e7a4      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040cc:	2602      	movs	r6, #2
 80040ce:	e7a2      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040d0:	2603      	movs	r6, #3
 80040d2:	e7a0      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040d4:	2604      	movs	r6, #4
 80040d6:	e79e      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040d8:	2605      	movs	r6, #5
 80040da:	e79c      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040dc:	2606      	movs	r6, #6
 80040de:	e79a      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040e0:	2607      	movs	r6, #7
 80040e2:	e798      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040e4:	2608      	movs	r6, #8
 80040e6:	e796      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040e8:	2609      	movs	r6, #9
 80040ea:	e794      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040ec:	260a      	movs	r6, #10
 80040ee:	e792      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040f0:	260b      	movs	r6, #11
 80040f2:	e790      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040f4:	260c      	movs	r6, #12
 80040f6:	e78e      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040f8:	260d      	movs	r6, #13
 80040fa:	e78c      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 80040fc:	260e      	movs	r6, #14
 80040fe:	e78a      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 8004100:	260f      	movs	r6, #15
 8004102:	e788      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 8004104:	2610      	movs	r6, #16
 8004106:	e786      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
 8004108:	2611      	movs	r6, #17
 800410a:	e784      	b.n	8004016 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800410c:	4a47      	ldr	r2, [pc, #284]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 800410e:	6811      	ldr	r1, [r2, #0]
 8004110:	22e0      	movs	r2, #224	; 0xe0
 8004112:	0452      	lsls	r2, r2, #17
 8004114:	400a      	ands	r2, r1
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004116:	4846      	ldr	r0, [pc, #280]	; (8004230 <HAL_ADC_ConfigChannel+0x288>)
 8004118:	4283      	cmp	r3, r0
 800411a:	d007      	beq.n	800412c <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800411c:	4845      	ldr	r0, [pc, #276]	; (8004234 <HAL_ADC_ConfigChannel+0x28c>)
 800411e:	4283      	cmp	r3, r0
 8004120:	d022      	beq.n	8004168 <HAL_ADC_ConfigChannel+0x1c0>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004122:	4845      	ldr	r0, [pc, #276]	; (8004238 <HAL_ADC_ConfigChannel+0x290>)
 8004124:	4283      	cmp	r3, r0
 8004126:	d02c      	beq.n	8004182 <HAL_ADC_ConfigChannel+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004128:	2000      	movs	r0, #0
 800412a:	e757      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800412c:	0208      	lsls	r0, r1, #8
 800412e:	d4f5      	bmi.n	800411c <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004136:	493d      	ldr	r1, [pc, #244]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 8004138:	680b      	ldr	r3, [r1, #0]
 800413a:	4840      	ldr	r0, [pc, #256]	; (800423c <HAL_ADC_ConfigChannel+0x294>)
 800413c:	4003      	ands	r3, r0
 800413e:	431a      	orrs	r2, r3
 8004140:	600a      	str	r2, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_ADC_ConfigChannel+0x298>)
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	493f      	ldr	r1, [pc, #252]	; (8004244 <HAL_ADC_ConfigChannel+0x29c>)
 8004148:	f7fb fff8 	bl	800013c <__udivsi3>
 800414c:	3001      	adds	r0, #1
 800414e:	0043      	lsls	r3, r0, #1
 8004150:	181b      	adds	r3, r3, r0
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8004156:	e002      	b.n	800415e <HAL_ADC_ConfigChannel+0x1b6>
            wait_loop_index--;
 8004158:	9b01      	ldr	r3, [sp, #4]
 800415a:	3b01      	subs	r3, #1
 800415c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800415e:	9b01      	ldr	r3, [sp, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1f9      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x1b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004164:	2000      	movs	r0, #0
 8004166:	e739      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004168:	01c8      	lsls	r0, r1, #7
 800416a:	d4da      	bmi.n	8004122 <HAL_ADC_ConfigChannel+0x17a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	045b      	lsls	r3, r3, #17
 8004170:	431a      	orrs	r2, r3
 8004172:	492e      	ldr	r1, [pc, #184]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 8004174:	680b      	ldr	r3, [r1, #0]
 8004176:	4831      	ldr	r0, [pc, #196]	; (800423c <HAL_ADC_ConfigChannel+0x294>)
 8004178:	4003      	ands	r3, r0
 800417a:	431a      	orrs	r2, r3
 800417c:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800417e:	2000      	movs	r0, #0
}
 8004180:	e72c      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004182:	024b      	lsls	r3, r1, #9
 8004184:	d44a      	bmi.n	800421c <HAL_ADC_ConfigChannel+0x274>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	03db      	lsls	r3, r3, #15
 800418a:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800418c:	4927      	ldr	r1, [pc, #156]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	482a      	ldr	r0, [pc, #168]	; (800423c <HAL_ADC_ConfigChannel+0x294>)
 8004192:	4003      	ands	r3, r0
 8004194:	431a      	orrs	r2, r3
 8004196:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2000      	movs	r0, #0
}
 800419a:	e71f      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	429d      	cmp	r5, r3
 80041a2:	d002      	beq.n	80041aa <HAL_ADC_ConfigChannel+0x202>
 80041a4:	4b1f      	ldr	r3, [pc, #124]	; (8004224 <HAL_ADC_ConfigChannel+0x27c>)
 80041a6:	429d      	cmp	r5, r3
 80041a8:	d105      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x20e>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80041aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80041ac:	680b      	ldr	r3, [r1, #0]
 80041ae:	035b      	lsls	r3, r3, #13
 80041b0:	0b5b      	lsrs	r3, r3, #13
 80041b2:	439a      	bics	r2, r3
 80041b4:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80041b6:	680b      	ldr	r3, [r1, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	db01      	blt.n	80041c0 <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041bc:	2000      	movs	r0, #0
 80041be:	e70d      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041c0:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 80041c2:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c4:	491a      	ldr	r1, [pc, #104]	; (8004230 <HAL_ADC_ConfigChannel+0x288>)
 80041c6:	428b      	cmp	r3, r1
 80041c8:	d007      	beq.n	80041da <HAL_ADC_ConfigChannel+0x232>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80041ca:	491a      	ldr	r1, [pc, #104]	; (8004234 <HAL_ADC_ConfigChannel+0x28c>)
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d00f      	beq.n	80041f0 <HAL_ADC_ConfigChannel+0x248>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041d0:	4919      	ldr	r1, [pc, #100]	; (8004238 <HAL_ADC_ConfigChannel+0x290>)
 80041d2:	428b      	cmp	r3, r1
 80041d4:	d017      	beq.n	8004206 <HAL_ADC_ConfigChannel+0x25e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041d6:	2000      	movs	r0, #0
 80041d8:	e700      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041da:	23a0      	movs	r3, #160	; 0xa0
 80041dc:	045b      	lsls	r3, r3, #17
 80041de:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041e0:	4912      	ldr	r1, [pc, #72]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 80041e2:	680b      	ldr	r3, [r1, #0]
 80041e4:	4815      	ldr	r0, [pc, #84]	; (800423c <HAL_ADC_ConfigChannel+0x294>)
 80041e6:	4003      	ands	r3, r0
 80041e8:	431a      	orrs	r2, r3
 80041ea:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041ec:	2000      	movs	r0, #0
}
 80041ee:	e6f5      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041f6:	490d      	ldr	r1, [pc, #52]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	4810      	ldr	r0, [pc, #64]	; (800423c <HAL_ADC_ConfigChannel+0x294>)
 80041fc:	4003      	ands	r3, r0
 80041fe:	431a      	orrs	r2, r3
 8004200:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004202:	2000      	movs	r0, #0
}
 8004204:	e6ea      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004206:	23c0      	movs	r3, #192	; 0xc0
 8004208:	045b      	lsls	r3, r3, #17
 800420a:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800420c:	4907      	ldr	r1, [pc, #28]	; (800422c <HAL_ADC_ConfigChannel+0x284>)
 800420e:	680b      	ldr	r3, [r1, #0]
 8004210:	480a      	ldr	r0, [pc, #40]	; (800423c <HAL_ADC_ConfigChannel+0x294>)
 8004212:	4003      	ands	r3, r0
 8004214:	431a      	orrs	r2, r3
 8004216:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004218:	2000      	movs	r0, #0
}
 800421a:	e6df      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
 800421c:	2000      	movs	r0, #0
 800421e:	e6dd      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8004220:	2002      	movs	r0, #2
 8004222:	e6de      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x3a>
 8004224:	80000004 	.word	0x80000004
 8004228:	07ffff00 	.word	0x07ffff00
 800422c:	40012708 	.word	0x40012708
 8004230:	b0001000 	.word	0xb0001000
 8004234:	b8004000 	.word	0xb8004000
 8004238:	b4002000 	.word	0xb4002000
 800423c:	fe3fffff 	.word	0xfe3fffff
 8004240:	20000000 	.word	0x20000000
 8004244:	00030d40 	.word	0x00030d40

08004248 <ADC_Enable>:
{
 8004248:	b530      	push	{r4, r5, lr}
 800424a:	b083      	sub	sp, #12
 800424c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800424e:	2300      	movs	r3, #0
 8004250:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004252:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	07d2      	lsls	r2, r2, #31
 8004258:	d44f      	bmi.n	80042fa <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800425a:	6899      	ldr	r1, [r3, #8]
 800425c:	4a28      	ldr	r2, [pc, #160]	; (8004300 <ADC_Enable+0xb8>)
 800425e:	4211      	tst	r1, r2
 8004260:	d111      	bne.n	8004286 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	4927      	ldr	r1, [pc, #156]	; (8004304 <ADC_Enable+0xbc>)
 8004266:	400a      	ands	r2, r1
 8004268:	2101      	movs	r1, #1
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800426e:	4b26      	ldr	r3, [pc, #152]	; (8004308 <ADC_Enable+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	d517      	bpl.n	80042a6 <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004276:	4b25      	ldr	r3, [pc, #148]	; (800430c <ADC_Enable+0xc4>)
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	4925      	ldr	r1, [pc, #148]	; (8004310 <ADC_Enable+0xc8>)
 800427c:	f7fb ff5e 	bl	800013c <__udivsi3>
 8004280:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004282:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8004284:	e00c      	b.n	80042a0 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004286:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004288:	2210      	movs	r2, #16
 800428a:	4313      	orrs	r3, r2
 800428c:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800428e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004290:	3a0f      	subs	r2, #15
 8004292:	4313      	orrs	r3, r2
 8004294:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8004296:	2001      	movs	r0, #1
 8004298:	e030      	b.n	80042fc <ADC_Enable+0xb4>
        wait_loop_index--;
 800429a:	9b01      	ldr	r3, [sp, #4]
 800429c:	3b01      	subs	r3, #1
 800429e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80042a0:	9b01      	ldr	r3, [sp, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f9      	bne.n	800429a <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80042a6:	7e63      	ldrb	r3, [r4, #25]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <ADC_Enable+0x68>
  return HAL_OK;
 80042ac:	2000      	movs	r0, #0
 80042ae:	e025      	b.n	80042fc <ADC_Enable+0xb4>
      tickstart = HAL_GetTick();
 80042b0:	f7ff fc52 	bl	8003b58 <HAL_GetTick>
 80042b4:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	07d2      	lsls	r2, r2, #31
 80042bc:	d41b      	bmi.n	80042f6 <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	07d2      	lsls	r2, r2, #31
 80042c2:	d405      	bmi.n	80042d0 <ADC_Enable+0x88>
  MODIFY_REG(ADCx->CR,
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	490f      	ldr	r1, [pc, #60]	; (8004304 <ADC_Enable+0xbc>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	2101      	movs	r1, #1
 80042cc:	430a      	orrs	r2, r1
 80042ce:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042d0:	f7ff fc42 	bl	8003b58 <HAL_GetTick>
 80042d4:	1b40      	subs	r0, r0, r5
 80042d6:	2802      	cmp	r0, #2
 80042d8:	d9ed      	bls.n	80042b6 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042da:	6823      	ldr	r3, [r4, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	07db      	lsls	r3, r3, #31
 80042e0:	d4e9      	bmi.n	80042b6 <ADC_Enable+0x6e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042e4:	2210      	movs	r2, #16
 80042e6:	4313      	orrs	r3, r2
 80042e8:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80042ec:	3a0f      	subs	r2, #15
 80042ee:	4313      	orrs	r3, r2
 80042f0:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 80042f2:	2001      	movs	r0, #1
 80042f4:	e002      	b.n	80042fc <ADC_Enable+0xb4>
  return HAL_OK;
 80042f6:	2000      	movs	r0, #0
 80042f8:	e000      	b.n	80042fc <ADC_Enable+0xb4>
 80042fa:	2000      	movs	r0, #0
}
 80042fc:	b003      	add	sp, #12
 80042fe:	bd30      	pop	{r4, r5, pc}
 8004300:	80000017 	.word	0x80000017
 8004304:	7fffffe8 	.word	0x7fffffe8
 8004308:	40012708 	.word	0x40012708
 800430c:	20000000 	.word	0x20000000
 8004310:	00030d40 	.word	0x00030d40

08004314 <HAL_ADC_Start_DMA>:
{
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	0004      	movs	r4, r0
 8004318:	000d      	movs	r5, r1
 800431a:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800431c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	0752      	lsls	r2, r2, #29
 8004322:	d447      	bmi.n	80043b4 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8004324:	2254      	movs	r2, #84	; 0x54
 8004326:	5c82      	ldrb	r2, [r0, r2]
 8004328:	2a01      	cmp	r2, #1
 800432a:	d045      	beq.n	80043b8 <HAL_ADC_Start_DMA+0xa4>
 800432c:	2201      	movs	r2, #1
 800432e:	2154      	movs	r1, #84	; 0x54
 8004330:	5442      	strb	r2, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004332:	68d9      	ldr	r1, [r3, #12]
 8004334:	420a      	tst	r2, r1
 8004336:	d10d      	bne.n	8004354 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	07d2      	lsls	r2, r2, #31
 800433c:	d505      	bpl.n	800434a <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	491e      	ldr	r1, [pc, #120]	; (80043bc <HAL_ADC_Start_DMA+0xa8>)
 8004342:	400a      	ands	r2, r1
 8004344:	2102      	movs	r1, #2
 8004346:	430a      	orrs	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800434a:	6822      	ldr	r2, [r4, #0]
 800434c:	68d3      	ldr	r3, [r2, #12]
 800434e:	2101      	movs	r1, #1
 8004350:	430b      	orrs	r3, r1
 8004352:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8004354:	0020      	movs	r0, r4
 8004356:	f7ff ff77 	bl	8004248 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800435a:	2800      	cmp	r0, #0
 800435c:	d12b      	bne.n	80043b6 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 800435e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004360:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_ADC_Start_DMA+0xac>)
 8004362:	401a      	ands	r2, r3
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	4313      	orrs	r3, r2
 800436a:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800436c:	2300      	movs	r3, #0
 800436e:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004370:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004372:	4914      	ldr	r1, [pc, #80]	; (80043c4 <HAL_ADC_Start_DMA+0xb0>)
 8004374:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004376:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004378:	4913      	ldr	r1, [pc, #76]	; (80043c8 <HAL_ADC_Start_DMA+0xb4>)
 800437a:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800437c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800437e:	4913      	ldr	r1, [pc, #76]	; (80043cc <HAL_ADC_Start_DMA+0xb8>)
 8004380:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	211c      	movs	r1, #28
 8004386:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8004388:	2254      	movs	r2, #84	; 0x54
 800438a:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	6853      	ldr	r3, [r2, #4]
 8004390:	390c      	subs	r1, #12
 8004392:	430b      	orrs	r3, r1
 8004394:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	3140      	adds	r1, #64	; 0x40
 800439a:	0033      	movs	r3, r6
 800439c:	002a      	movs	r2, r5
 800439e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80043a0:	f000 fa0e 	bl	80047c0 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80043a4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80043a6:	6893      	ldr	r3, [r2, #8]
 80043a8:	4904      	ldr	r1, [pc, #16]	; (80043bc <HAL_ADC_Start_DMA+0xa8>)
 80043aa:	400b      	ands	r3, r1
 80043ac:	2104      	movs	r1, #4
 80043ae:	430b      	orrs	r3, r1
 80043b0:	6093      	str	r3, [r2, #8]
}
 80043b2:	e000      	b.n	80043b6 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 80043b4:	2002      	movs	r0, #2
}
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 80043b8:	2002      	movs	r0, #2
 80043ba:	e7fc      	b.n	80043b6 <HAL_ADC_Start_DMA+0xa2>
 80043bc:	7fffffe8 	.word	0x7fffffe8
 80043c0:	fffff0fe 	.word	0xfffff0fe
 80043c4:	08003dd1 	.word	0x08003dd1
 80043c8:	08003da9 	.word	0x08003da9
 80043cc:	08003db7 	.word	0x08003db7

080043d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043d0:	4770      	bx	lr

080043d2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043d2:	4770      	bx	lr

080043d4 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80043d4:	4770      	bx	lr

080043d6 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80043d6:	4770      	bx	lr

080043d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80043da:	2800      	cmp	r0, #0
 80043dc:	db11      	blt.n	8004402 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043de:	0883      	lsrs	r3, r0, #2
 80043e0:	4e13      	ldr	r6, [pc, #76]	; (8004430 <HAL_NVIC_SetPriority+0x58>)
 80043e2:	33c0      	adds	r3, #192	; 0xc0
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	599d      	ldr	r5, [r3, r6]
 80043e8:	2403      	movs	r4, #3
 80043ea:	4020      	ands	r0, r4
 80043ec:	00c0      	lsls	r0, r0, #3
 80043ee:	22ff      	movs	r2, #255	; 0xff
 80043f0:	0014      	movs	r4, r2
 80043f2:	4084      	lsls	r4, r0
 80043f4:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043f6:	0189      	lsls	r1, r1, #6
 80043f8:	400a      	ands	r2, r1
 80043fa:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043fc:	432a      	orrs	r2, r5
 80043fe:	519a      	str	r2, [r3, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004402:	230f      	movs	r3, #15
 8004404:	4003      	ands	r3, r0
 8004406:	3b08      	subs	r3, #8
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	3306      	adds	r3, #6
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4a09      	ldr	r2, [pc, #36]	; (8004434 <HAL_NVIC_SetPriority+0x5c>)
 8004410:	4694      	mov	ip, r2
 8004412:	4463      	add	r3, ip
 8004414:	685c      	ldr	r4, [r3, #4]
 8004416:	2203      	movs	r2, #3
 8004418:	4010      	ands	r0, r2
 800441a:	00c0      	lsls	r0, r0, #3
 800441c:	32fc      	adds	r2, #252	; 0xfc
 800441e:	0015      	movs	r5, r2
 8004420:	4085      	lsls	r5, r0
 8004422:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004424:	0189      	lsls	r1, r1, #6
 8004426:	400a      	ands	r2, r1
 8004428:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800442a:	4322      	orrs	r2, r4
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	e7e7      	b.n	8004400 <HAL_NVIC_SetPriority+0x28>
 8004430:	e000e100 	.word	0xe000e100
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004438:	2800      	cmp	r0, #0
 800443a:	db05      	blt.n	8004448 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800443c:	231f      	movs	r3, #31
 800443e:	4018      	ands	r0, r3
 8004440:	3b1e      	subs	r3, #30
 8004442:	4083      	lsls	r3, r0
 8004444:	4a01      	ldr	r2, [pc, #4]	; (800444c <HAL_NVIC_EnableIRQ+0x14>)
 8004446:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004448:	4770      	bx	lr
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	e000e100 	.word	0xe000e100

08004450 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004450:	3801      	subs	r0, #1
 8004452:	2380      	movs	r3, #128	; 0x80
 8004454:	045b      	lsls	r3, r3, #17
 8004456:	4298      	cmp	r0, r3
 8004458:	d20f      	bcs.n	800447a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800445a:	4a09      	ldr	r2, [pc, #36]	; (8004480 <HAL_SYSTICK_Config+0x30>)
 800445c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800445e:	4809      	ldr	r0, [pc, #36]	; (8004484 <HAL_SYSTICK_Config+0x34>)
 8004460:	6a03      	ldr	r3, [r0, #32]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	0a1b      	lsrs	r3, r3, #8
 8004466:	21c0      	movs	r1, #192	; 0xc0
 8004468:	0609      	lsls	r1, r1, #24
 800446a:	430b      	orrs	r3, r1
 800446c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800446e:	2300      	movs	r3, #0
 8004470:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004472:	3307      	adds	r3, #7
 8004474:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004476:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8004478:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800447a:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 800447c:	e7fc      	b.n	8004478 <HAL_SYSTICK_Config+0x28>
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	e000e010 	.word	0xe000e010
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004488:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800448a:	2500      	movs	r5, #0
 800448c:	e00e      	b.n	80044ac <CRC_Handle_8+0x24>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800448e:	00ac      	lsls	r4, r5, #2
 8004490:	5d0b      	ldrb	r3, [r1, r4]
 8004492:	061b      	lsls	r3, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004494:	190c      	adds	r4, r1, r4
 8004496:	7866      	ldrb	r6, [r4, #1]
 8004498:	0436      	lsls	r6, r6, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800449a:	4333      	orrs	r3, r6
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800449c:	78a6      	ldrb	r6, [r4, #2]
 800449e:	0236      	lsls	r6, r6, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80044a0:	4333      	orrs	r3, r6
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80044a2:	78e6      	ldrb	r6, [r4, #3]
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80044a4:	6804      	ldr	r4, [r0, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80044a6:	4333      	orrs	r3, r6
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80044a8:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80044aa:	3501      	adds	r5, #1
 80044ac:	0893      	lsrs	r3, r2, #2
 80044ae:	42ab      	cmp	r3, r5
 80044b0:	d8ed      	bhi.n	800448e <CRC_Handle_8+0x6>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80044b2:	2303      	movs	r3, #3
 80044b4:	001c      	movs	r4, r3
 80044b6:	4014      	ands	r4, r2
 80044b8:	4213      	tst	r3, r2
 80044ba:	d005      	beq.n	80044c8 <CRC_Handle_8+0x40>
  {
    if ((BufferLength % 4U) == 1U)
 80044bc:	2c01      	cmp	r4, #1
 80044be:	d006      	beq.n	80044ce <CRC_Handle_8+0x46>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
    }
    if ((BufferLength % 4U) == 2U)
 80044c0:	2c02      	cmp	r4, #2
 80044c2:	d009      	beq.n	80044d8 <CRC_Handle_8+0x50>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
      *pReg = data;
    }
    if ((BufferLength % 4U) == 3U)
 80044c4:	2c03      	cmp	r4, #3
 80044c6:	d010      	beq.n	80044ea <CRC_Handle_8+0x62>
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80044c8:	6803      	ldr	r3, [r0, #0]
 80044ca:	6818      	ldr	r0, [r3, #0]
}
 80044cc:	bd70      	pop	{r4, r5, r6, pc}
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80044ce:	00ab      	lsls	r3, r5, #2
 80044d0:	5ccb      	ldrb	r3, [r1, r3]
 80044d2:	6802      	ldr	r2, [r0, #0]
 80044d4:	7013      	strb	r3, [r2, #0]
 80044d6:	e7f3      	b.n	80044c0 <CRC_Handle_8+0x38>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80044d8:	00ab      	lsls	r3, r5, #2
 80044da:	5cca      	ldrb	r2, [r1, r3]
 80044dc:	0212      	lsls	r2, r2, #8
 80044de:	18cb      	adds	r3, r1, r3
 80044e0:	785b      	ldrb	r3, [r3, #1]
 80044e2:	4313      	orrs	r3, r2
      *pReg = data;
 80044e4:	6802      	ldr	r2, [r0, #0]
 80044e6:	8013      	strh	r3, [r2, #0]
 80044e8:	e7ec      	b.n	80044c4 <CRC_Handle_8+0x3c>
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80044ea:	00ad      	lsls	r5, r5, #2
 80044ec:	5d4a      	ldrb	r2, [r1, r5]
 80044ee:	0212      	lsls	r2, r2, #8
 80044f0:	194d      	adds	r5, r1, r5
 80044f2:	786b      	ldrb	r3, [r5, #1]
 80044f4:	4313      	orrs	r3, r2
      *pReg = data;
 80044f6:	6802      	ldr	r2, [r0, #0]
 80044f8:	8013      	strh	r3, [r2, #0]
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80044fa:	78ab      	ldrb	r3, [r5, #2]
 80044fc:	6802      	ldr	r2, [r0, #0]
 80044fe:	7013      	strb	r3, [r2, #0]
 8004500:	e7e2      	b.n	80044c8 <CRC_Handle_8+0x40>

08004502 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004502:	b570      	push	{r4, r5, r6, lr}
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004504:	2500      	movs	r5, #0
 8004506:	e008      	b.n	800451a <CRC_Handle_16+0x18>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004508:	00ac      	lsls	r4, r5, #2
 800450a:	5b0b      	ldrh	r3, [r1, r4]
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	190c      	adds	r4, r1, r4
 8004510:	8866      	ldrh	r6, [r4, #2]
 8004512:	6804      	ldr	r4, [r0, #0]
 8004514:	4333      	orrs	r3, r6
 8004516:	6023      	str	r3, [r4, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004518:	3501      	adds	r5, #1
 800451a:	0853      	lsrs	r3, r2, #1
 800451c:	42ab      	cmp	r3, r5
 800451e:	d8f3      	bhi.n	8004508 <CRC_Handle_16+0x6>
  }
  if ((BufferLength % 2U) != 0U)
 8004520:	07d3      	lsls	r3, r2, #31
 8004522:	d503      	bpl.n	800452c <CRC_Handle_16+0x2a>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
    *pReg = pBuffer[2U * i];
 8004524:	00ad      	lsls	r5, r5, #2
 8004526:	5a6b      	ldrh	r3, [r5, r1]
 8004528:	6802      	ldr	r2, [r0, #0]
 800452a:	8013      	strh	r3, [r2, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800452c:	6803      	ldr	r3, [r0, #0]
 800452e:	6818      	ldr	r0, [r3, #0]
}
 8004530:	bd70      	pop	{r4, r5, r6, pc}
	...

08004534 <HAL_CRC_Init>:
{
 8004534:	b510      	push	{r4, lr}
 8004536:	1e04      	subs	r4, r0, #0
  if (hcrc == NULL)
 8004538:	d039      	beq.n	80045ae <HAL_CRC_Init+0x7a>
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800453a:	7f43      	ldrb	r3, [r0, #29]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d025      	beq.n	800458c <HAL_CRC_Init+0x58>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004540:	2302      	movs	r3, #2
 8004542:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004544:	7923      	ldrb	r3, [r4, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d124      	bne.n	8004594 <HAL_CRC_Init+0x60>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_CRC_Init+0x80>)
 800454e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004550:	6822      	ldr	r2, [r4, #0]
 8004552:	6893      	ldr	r3, [r2, #8]
 8004554:	2118      	movs	r1, #24
 8004556:	438b      	bics	r3, r1
 8004558:	6093      	str	r3, [r2, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800455a:	7963      	ldrb	r3, [r4, #5]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d122      	bne.n	80045a6 <HAL_CRC_Init+0x72>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	4252      	negs	r2, r2
 8004566:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004568:	6822      	ldr	r2, [r4, #0]
 800456a:	6893      	ldr	r3, [r2, #8]
 800456c:	2160      	movs	r1, #96	; 0x60
 800456e:	438b      	bics	r3, r1
 8004570:	6961      	ldr	r1, [r4, #20]
 8004572:	430b      	orrs	r3, r1
 8004574:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	6893      	ldr	r3, [r2, #8]
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	438b      	bics	r3, r1
 800457e:	69a1      	ldr	r1, [r4, #24]
 8004580:	430b      	orrs	r3, r1
 8004582:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004584:	2301      	movs	r3, #1
 8004586:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004588:	2000      	movs	r0, #0
}
 800458a:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800458c:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800458e:	f7ff f8e7 	bl	8003760 <HAL_CRC_MspInit>
 8004592:	e7d5      	b.n	8004540 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004594:	68e2      	ldr	r2, [r4, #12]
 8004596:	68a1      	ldr	r1, [r4, #8]
 8004598:	0020      	movs	r0, r4
 800459a:	f000 f835 	bl	8004608 <HAL_CRCEx_Polynomial_Set>
 800459e:	2800      	cmp	r0, #0
 80045a0:	d0db      	beq.n	800455a <HAL_CRC_Init+0x26>
      return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
 80045a4:	e7f1      	b.n	800458a <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	6922      	ldr	r2, [r4, #16]
 80045aa:	611a      	str	r2, [r3, #16]
 80045ac:	e7dc      	b.n	8004568 <HAL_CRC_Init+0x34>
    return HAL_ERROR;
 80045ae:	2001      	movs	r0, #1
 80045b0:	e7eb      	b.n	800458a <HAL_CRC_Init+0x56>
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	04c11db7 	.word	0x04c11db7

080045b8 <HAL_CRC_Calculate>:
{
 80045b8:	b570      	push	{r4, r5, r6, lr}
 80045ba:	0004      	movs	r4, r0
  hcrc->State = HAL_CRC_STATE_BUSY;
 80045bc:	2302      	movs	r3, #2
 80045be:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80045c0:	6800      	ldr	r0, [r0, #0]
 80045c2:	6883      	ldr	r3, [r0, #8]
 80045c4:	2501      	movs	r5, #1
 80045c6:	432b      	orrs	r3, r5
 80045c8:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80045ca:	6a23      	ldr	r3, [r4, #32]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d017      	beq.n	8004600 <HAL_CRC_Calculate+0x48>
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d00f      	beq.n	80045f4 <HAL_CRC_Calculate+0x3c>
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d00f      	beq.n	80045f8 <HAL_CRC_Calculate+0x40>
 80045d8:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 80045da:	2301      	movs	r3, #1
 80045dc:	7763      	strb	r3, [r4, #29]
}
 80045de:	bd70      	pop	{r4, r5, r6, pc}
        hcrc->Instance->DR = pBuffer[index];
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	009d      	lsls	r5, r3, #2
 80045e4:	586d      	ldr	r5, [r5, r1]
 80045e6:	6005      	str	r5, [r0, #0]
      for (index = 0U; index < BufferLength; index++)
 80045e8:	3301      	adds	r3, #1
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d3f8      	bcc.n	80045e0 <HAL_CRC_Calculate+0x28>
      temp = hcrc->Instance->DR;
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	6818      	ldr	r0, [r3, #0]
      break;
 80045f2:	e7f2      	b.n	80045da <HAL_CRC_Calculate+0x22>
  switch (hcrc->InputDataFormat)
 80045f4:	2300      	movs	r3, #0
 80045f6:	e7f8      	b.n	80045ea <HAL_CRC_Calculate+0x32>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80045f8:	0020      	movs	r0, r4
 80045fa:	f7ff ff45 	bl	8004488 <CRC_Handle_8>
      break;
 80045fe:	e7ec      	b.n	80045da <HAL_CRC_Calculate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004600:	0020      	movs	r0, r4
 8004602:	f7ff ff7e 	bl	8004502 <CRC_Handle_16>
      break;
 8004606:	e7e8      	b.n	80045da <HAL_CRC_Calculate+0x22>

08004608 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004608:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800460a:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800460c:	001c      	movs	r4, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	2c00      	cmp	r4, #0
 8004612:	d006      	beq.n	8004622 <HAL_CRCEx_Polynomial_Set+0x1a>
 8004614:	241f      	movs	r4, #31
 8004616:	401c      	ands	r4, r3
 8004618:	000d      	movs	r5, r1
 800461a:	40e5      	lsrs	r5, r4
 800461c:	002c      	movs	r4, r5
 800461e:	07e4      	lsls	r4, r4, #31
 8004620:	d5f4      	bpl.n	800460c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004622:	2a10      	cmp	r2, #16
 8004624:	d018      	beq.n	8004658 <HAL_CRCEx_Polynomial_Set+0x50>
 8004626:	d809      	bhi.n	800463c <HAL_CRCEx_Polynomial_Set+0x34>
 8004628:	2a00      	cmp	r2, #0
 800462a:	d00b      	beq.n	8004644 <HAL_CRCEx_Polynomial_Set+0x3c>
 800462c:	2a08      	cmp	r2, #8
 800462e:	d103      	bne.n	8004638 <HAL_CRCEx_Polynomial_Set+0x30>
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004630:	2b0f      	cmp	r3, #15
 8004632:	d907      	bls.n	8004644 <HAL_CRCEx_Polynomial_Set+0x3c>
      {
        status =   HAL_ERROR;
 8004634:	2001      	movs	r0, #1
 8004636:	e00e      	b.n	8004656 <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 8004638:	2001      	movs	r0, #1
 800463a:	e00c      	b.n	8004656 <HAL_CRCEx_Polynomial_Set+0x4e>
 800463c:	2a18      	cmp	r2, #24
 800463e:	d10f      	bne.n	8004660 <HAL_CRCEx_Polynomial_Set+0x58>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004640:	2b06      	cmp	r3, #6
 8004642:	d80f      	bhi.n	8004664 <HAL_CRCEx_Polynomial_Set+0x5c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004644:	6803      	ldr	r3, [r0, #0]
 8004646:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004648:	6801      	ldr	r1, [r0, #0]
 800464a:	688b      	ldr	r3, [r1, #8]
 800464c:	2018      	movs	r0, #24
 800464e:	4383      	bics	r3, r0
 8004650:	431a      	orrs	r2, r3
 8004652:	608a      	str	r2, [r1, #8]
 8004654:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 8004656:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004658:	2b07      	cmp	r3, #7
 800465a:	d9f3      	bls.n	8004644 <HAL_CRCEx_Polynomial_Set+0x3c>
        status =   HAL_ERROR;
 800465c:	2001      	movs	r0, #1
 800465e:	e7fa      	b.n	8004656 <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 8004660:	2001      	movs	r0, #1
 8004662:	e7f8      	b.n	8004656 <HAL_CRCEx_Polynomial_Set+0x4e>
        status =   HAL_ERROR;
 8004664:	2001      	movs	r0, #1
 8004666:	e7f6      	b.n	8004656 <HAL_CRCEx_Polynomial_Set+0x4e>

08004668 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004668:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800466a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800466c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800466e:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004670:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004672:	2c00      	cmp	r4, #0
 8004674:	d002      	beq.n	800467c <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004676:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004678:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800467a:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800467c:	4f0b      	ldr	r7, [pc, #44]	; (80046ac <DMA_SetConfig+0x44>)
 800467e:	687c      	ldr	r4, [r7, #4]
 8004680:	261c      	movs	r6, #28
 8004682:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004684:	402e      	ands	r6, r5
 8004686:	2501      	movs	r5, #1
 8004688:	40b5      	lsls	r5, r6
 800468a:	432c      	orrs	r4, r5
 800468c:	607c      	str	r4, [r7, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800468e:	6804      	ldr	r4, [r0, #0]
 8004690:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004692:	6883      	ldr	r3, [r0, #8]
 8004694:	2b10      	cmp	r3, #16
 8004696:	d004      	beq.n	80046a2 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004698:	6803      	ldr	r3, [r0, #0]
 800469a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800469c:	6803      	ldr	r3, [r0, #0]
 800469e:	60da      	str	r2, [r3, #12]
  }
}
 80046a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80046a2:	6803      	ldr	r3, [r0, #0]
 80046a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80046a6:	6803      	ldr	r3, [r0, #0]
 80046a8:	60d9      	str	r1, [r3, #12]
 80046aa:	e7f9      	b.n	80046a0 <DMA_SetConfig+0x38>
 80046ac:	40020000 	.word	0x40020000

080046b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046b0:	b510      	push	{r4, lr}
 80046b2:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80046b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80046ba:	4694      	mov	ip, r2
 80046bc:	4463      	add	r3, ip
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046c2:	20ff      	movs	r0, #255	; 0xff
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	4018      	ands	r0, r3
 80046c8:	3808      	subs	r0, #8
 80046ca:	2114      	movs	r1, #20
 80046cc:	f7fb fd36 	bl	800013c <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046d0:	4b04      	ldr	r3, [pc, #16]	; (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80046d2:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80046d4:	231f      	movs	r3, #31
 80046d6:	4018      	ands	r0, r3
 80046d8:	3b1e      	subs	r3, #30
 80046da:	4083      	lsls	r3, r0
 80046dc:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80046de:	bd10      	pop	{r4, pc}
 80046e0:	10008200 	.word	0x10008200
 80046e4:	40020880 	.word	0x40020880

080046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046e8:	233f      	movs	r3, #63	; 0x3f
 80046ea:	6842      	ldr	r2, [r0, #4]
 80046ec:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046ee:	4a06      	ldr	r2, [pc, #24]	; (8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 80046f0:	189a      	adds	r2, r3, r2
 80046f2:	0092      	lsls	r2, r2, #2
 80046f4:	6502      	str	r2, [r0, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046f6:	4a05      	ldr	r2, [pc, #20]	; (800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80046f8:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80046fa:	3b01      	subs	r3, #1
 80046fc:	2203      	movs	r2, #3
 80046fe:	401a      	ands	r2, r3
 8004700:	2301      	movs	r3, #1
 8004702:	4093      	lsls	r3, r2
 8004704:	6583      	str	r3, [r0, #88]	; 0x58
}
 8004706:	4770      	bx	lr
 8004708:	1000823f 	.word	0x1000823f
 800470c:	40020940 	.word	0x40020940

08004710 <HAL_DMA_Init>:
{
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8004714:	d04d      	beq.n	80047b2 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004716:	6805      	ldr	r5, [r0, #0]
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_DMA_Init+0xa8>)
 800471a:	18e8      	adds	r0, r5, r3
 800471c:	2114      	movs	r1, #20
 800471e:	f7fb fd0d 	bl	800013c <__udivsi3>
 8004722:	0080      	lsls	r0, r0, #2
 8004724:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004726:	2325      	movs	r3, #37	; 0x25
 8004728:	2202      	movs	r2, #2
 800472a:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	4a23      	ldr	r2, [pc, #140]	; (80047bc <HAL_DMA_Init+0xac>)
 8004730:	4013      	ands	r3, r2
 8004732:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004734:	6821      	ldr	r1, [r4, #0]
 8004736:	680a      	ldr	r2, [r1, #0]
 8004738:	68a3      	ldr	r3, [r4, #8]
 800473a:	68e0      	ldr	r0, [r4, #12]
 800473c:	4303      	orrs	r3, r0
 800473e:	6920      	ldr	r0, [r4, #16]
 8004740:	4303      	orrs	r3, r0
 8004742:	6960      	ldr	r0, [r4, #20]
 8004744:	4303      	orrs	r3, r0
 8004746:	69a0      	ldr	r0, [r4, #24]
 8004748:	4303      	orrs	r3, r0
 800474a:	69e0      	ldr	r0, [r4, #28]
 800474c:	4303      	orrs	r3, r0
 800474e:	6a20      	ldr	r0, [r4, #32]
 8004750:	4303      	orrs	r3, r0
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004756:	0020      	movs	r0, r4
 8004758:	f7ff ffaa 	bl	80046b0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800475c:	2380      	movs	r3, #128	; 0x80
 800475e:	01db      	lsls	r3, r3, #7
 8004760:	68a2      	ldr	r2, [r4, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	d018      	beq.n	8004798 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004766:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004768:	233f      	movs	r3, #63	; 0x3f
 800476a:	6861      	ldr	r1, [r4, #4]
 800476c:	400b      	ands	r3, r1
 800476e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004770:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004772:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004774:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004776:	6863      	ldr	r3, [r4, #4]
 8004778:	3b01      	subs	r3, #1
 800477a:	2b03      	cmp	r3, #3
 800477c:	d90f      	bls.n	800479e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004782:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004784:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004786:	2300      	movs	r3, #0
 8004788:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800478a:	2225      	movs	r2, #37	; 0x25
 800478c:	2101      	movs	r1, #1
 800478e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8004790:	3a01      	subs	r2, #1
 8004792:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8004794:	2000      	movs	r0, #0
}
 8004796:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004798:	2300      	movs	r3, #0
 800479a:	6063      	str	r3, [r4, #4]
 800479c:	e7e3      	b.n	8004766 <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800479e:	0020      	movs	r0, r4
 80047a0:	f7ff ffa2 	bl	80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80047ae:	605a      	str	r2, [r3, #4]
 80047b0:	e7e9      	b.n	8004786 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80047b2:	2001      	movs	r0, #1
 80047b4:	e7ef      	b.n	8004796 <HAL_DMA_Init+0x86>
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	bffdfff8 	.word	0xbffdfff8
 80047bc:	ffff800f 	.word	0xffff800f

080047c0 <HAL_DMA_Start_IT>:
{
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80047c4:	2024      	movs	r0, #36	; 0x24
 80047c6:	5c20      	ldrb	r0, [r4, r0]
 80047c8:	2801      	cmp	r0, #1
 80047ca:	d045      	beq.n	8004858 <HAL_DMA_Start_IT+0x98>
 80047cc:	2024      	movs	r0, #36	; 0x24
 80047ce:	2501      	movs	r5, #1
 80047d0:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80047d2:	3001      	adds	r0, #1
 80047d4:	5c20      	ldrb	r0, [r4, r0]
 80047d6:	2801      	cmp	r0, #1
 80047d8:	d006      	beq.n	80047e8 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80047de:	3b5c      	subs	r3, #92	; 0x5c
 80047e0:	2200      	movs	r2, #0
 80047e2:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 80047e4:	2001      	movs	r0, #1
}
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80047e8:	3024      	adds	r0, #36	; 0x24
 80047ea:	3501      	adds	r5, #1
 80047ec:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ee:	2000      	movs	r0, #0
 80047f0:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80047f2:	6825      	ldr	r5, [r4, #0]
 80047f4:	6828      	ldr	r0, [r5, #0]
 80047f6:	2601      	movs	r6, #1
 80047f8:	43b0      	bics	r0, r6
 80047fa:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047fc:	0020      	movs	r0, r4
 80047fe:	f7ff ff33 	bl	8004668 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01c      	beq.n	8004842 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	210e      	movs	r1, #14
 800480e:	430b      	orrs	r3, r1
 8004810:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004812:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	03d2      	lsls	r2, r2, #15
 8004818:	d504      	bpl.n	8004824 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800481a:	6819      	ldr	r1, [r3, #0]
 800481c:	2280      	movs	r2, #128	; 0x80
 800481e:	0052      	lsls	r2, r2, #1
 8004820:	430a      	orrs	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8004824:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d004      	beq.n	8004834 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800482a:	6819      	ldr	r1, [r3, #0]
 800482c:	2280      	movs	r2, #128	; 0x80
 800482e:	0052      	lsls	r2, r2, #1
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	6813      	ldr	r3, [r2, #0]
 8004838:	2101      	movs	r1, #1
 800483a:	430b      	orrs	r3, r1
 800483c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483e:	2000      	movs	r0, #0
 8004840:	e7d1      	b.n	80047e6 <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004842:	6822      	ldr	r2, [r4, #0]
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	2104      	movs	r1, #4
 8004848:	438b      	bics	r3, r1
 800484a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800484c:	6822      	ldr	r2, [r4, #0]
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	3106      	adds	r1, #6
 8004852:	430b      	orrs	r3, r1
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e7dc      	b.n	8004812 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004858:	2002      	movs	r0, #2
 800485a:	e7c4      	b.n	80047e6 <HAL_DMA_Start_IT+0x26>

0800485c <HAL_DMA_IRQHandler>:
{
 800485c:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <HAL_DMA_IRQHandler+0xc8>)
 8004860:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004862:	6804      	ldr	r4, [r0, #0]
 8004864:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004866:	231c      	movs	r3, #28
 8004868:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800486a:	4013      	ands	r3, r2
 800486c:	2204      	movs	r2, #4
 800486e:	409a      	lsls	r2, r3
 8004870:	4211      	tst	r1, r2
 8004872:	d016      	beq.n	80048a2 <HAL_DMA_IRQHandler+0x46>
 8004874:	076a      	lsls	r2, r5, #29
 8004876:	d514      	bpl.n	80048a2 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004878:	6823      	ldr	r3, [r4, #0]
 800487a:	069b      	lsls	r3, r3, #26
 800487c:	d403      	bmi.n	8004886 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	2204      	movs	r2, #4
 8004882:	4393      	bics	r3, r2
 8004884:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004886:	4c27      	ldr	r4, [pc, #156]	; (8004924 <HAL_DMA_IRQHandler+0xc8>)
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	211c      	movs	r1, #28
 800488c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800488e:	4011      	ands	r1, r2
 8004890:	2204      	movs	r2, #4
 8004892:	408a      	lsls	r2, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	6063      	str	r3, [r4, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8004898:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800489a:	2b00      	cmp	r3, #0
 800489c:	d000      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 800489e:	4798      	blx	r3
}
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80048a2:	2202      	movs	r2, #2
 80048a4:	409a      	lsls	r2, r3
 80048a6:	4211      	tst	r1, r2
 80048a8:	d01c      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x88>
 80048aa:	07aa      	lsls	r2, r5, #30
 80048ac:	d51a      	bpl.n	80048e4 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	069b      	lsls	r3, r3, #26
 80048b2:	d406      	bmi.n	80048c2 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	220a      	movs	r2, #10
 80048b8:	4393      	bics	r3, r2
 80048ba:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80048bc:	2325      	movs	r3, #37	; 0x25
 80048be:	3a09      	subs	r2, #9
 80048c0:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80048c2:	4c18      	ldr	r4, [pc, #96]	; (8004924 <HAL_DMA_IRQHandler+0xc8>)
 80048c4:	6863      	ldr	r3, [r4, #4]
 80048c6:	211c      	movs	r1, #28
 80048c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80048ca:	4011      	ands	r1, r2
 80048cc:	2202      	movs	r2, #2
 80048ce:	408a      	lsls	r2, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hdma);
 80048d4:	2324      	movs	r3, #36	; 0x24
 80048d6:	2200      	movs	r2, #0
 80048d8:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80048da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0df      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 80048e0:	4798      	blx	r3
 80048e2:	e7dd      	b.n	80048a0 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80048e4:	2208      	movs	r2, #8
 80048e6:	409a      	lsls	r2, r3
 80048e8:	4211      	tst	r1, r2
 80048ea:	d0d9      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x44>
 80048ec:	072b      	lsls	r3, r5, #28
 80048ee:	d5d7      	bpl.n	80048a0 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	220e      	movs	r2, #14
 80048f4:	4393      	bics	r3, r2
 80048f6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80048f8:	4c0a      	ldr	r4, [pc, #40]	; (8004924 <HAL_DMA_IRQHandler+0xc8>)
 80048fa:	6862      	ldr	r2, [r4, #4]
 80048fc:	211c      	movs	r1, #28
 80048fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004900:	4019      	ands	r1, r3
 8004902:	2301      	movs	r3, #1
 8004904:	001d      	movs	r5, r3
 8004906:	408d      	lsls	r5, r1
 8004908:	432a      	orrs	r2, r5
 800490a:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800490c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800490e:	2225      	movs	r2, #37	; 0x25
 8004910:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8004912:	3323      	adds	r3, #35	; 0x23
 8004914:	2200      	movs	r2, #0
 8004916:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8004918:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0c0      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 800491e:	4798      	blx	r3
  return;
 8004920:	e7be      	b.n	80048a0 <HAL_DMA_IRQHandler+0x44>
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	40020000 	.word	0x40020000

08004928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004928:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800492a:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800492c:	e05a      	b.n	80049e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800492e:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004930:	005f      	lsls	r7, r3, #1
 8004932:	2603      	movs	r6, #3
 8004934:	40be      	lsls	r6, r7
 8004936:	43b4      	bics	r4, r6
 8004938:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800493a:	68cc      	ldr	r4, [r1, #12]
 800493c:	40bc      	lsls	r4, r7
 800493e:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8004940:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004942:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004944:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004946:	684a      	ldr	r2, [r1, #4]
 8004948:	0916      	lsrs	r6, r2, #4
 800494a:	2201      	movs	r2, #1
 800494c:	4032      	ands	r2, r6
 800494e:	409a      	lsls	r2, r3
 8004950:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8004952:	6042      	str	r2, [r0, #4]
 8004954:	e056      	b.n	8004a04 <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004956:	08dc      	lsrs	r4, r3, #3
 8004958:	3408      	adds	r4, #8
 800495a:	00a4      	lsls	r4, r4, #2
 800495c:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800495e:	3205      	adds	r2, #5
 8004960:	401a      	ands	r2, r3
 8004962:	0092      	lsls	r2, r2, #2
 8004964:	270f      	movs	r7, #15
 8004966:	4097      	lsls	r7, r2
 8004968:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800496a:	690f      	ldr	r7, [r1, #16]
 800496c:	4097      	lsls	r7, r2
 800496e:	003a      	movs	r2, r7
 8004970:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8004972:	5022      	str	r2, [r4, r0]
 8004974:	e05a      	b.n	8004a2c <HAL_GPIO_Init+0x104>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004976:	2603      	movs	r6, #3
 8004978:	e000      	b.n	800497c <HAL_GPIO_Init+0x54>
 800497a:	2600      	movs	r6, #0
 800497c:	40a6      	lsls	r6, r4
 800497e:	0034      	movs	r4, r6
 8004980:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8004982:	4e43      	ldr	r6, [pc, #268]	; (8004a90 <HAL_GPIO_Init+0x168>)
 8004984:	3218      	adds	r2, #24
 8004986:	0092      	lsls	r2, r2, #2
 8004988:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800498a:	6834      	ldr	r4, [r6, #0]
        temp &= ~(iocurrent);
 800498c:	43ea      	mvns	r2, r5
 800498e:	0026      	movs	r6, r4
 8004990:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004992:	684f      	ldr	r7, [r1, #4]
 8004994:	02ff      	lsls	r7, r7, #11
 8004996:	d501      	bpl.n	800499c <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8004998:	432c      	orrs	r4, r5
 800499a:	0026      	movs	r6, r4
        }
        EXTI->RTSR1 = temp;
 800499c:	4c3c      	ldr	r4, [pc, #240]	; (8004a90 <HAL_GPIO_Init+0x168>)
 800499e:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 80049a0:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 80049a2:	0026      	movs	r6, r4
 80049a4:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049a6:	684f      	ldr	r7, [r1, #4]
 80049a8:	02bf      	lsls	r7, r7, #10
 80049aa:	d501      	bpl.n	80049b0 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80049ac:	432c      	orrs	r4, r5
 80049ae:	0026      	movs	r6, r4
        }
        EXTI->FTSR1 = temp;
 80049b0:	4c37      	ldr	r4, [pc, #220]	; (8004a90 <HAL_GPIO_Init+0x168>)
 80049b2:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80049b4:	2684      	movs	r6, #132	; 0x84
 80049b6:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 80049b8:	0026      	movs	r6, r4
 80049ba:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049bc:	684f      	ldr	r7, [r1, #4]
 80049be:	03bf      	lsls	r7, r7, #14
 80049c0:	d501      	bpl.n	80049c6 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80049c2:	432c      	orrs	r4, r5
 80049c4:	0026      	movs	r6, r4
        }
        EXTI->EMR1 = temp;
 80049c6:	4c32      	ldr	r4, [pc, #200]	; (8004a90 <HAL_GPIO_Init+0x168>)
 80049c8:	2784      	movs	r7, #132	; 0x84
 80049ca:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 80049cc:	2680      	movs	r6, #128	; 0x80
 80049ce:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 80049d0:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049d2:	684e      	ldr	r6, [r1, #4]
 80049d4:	03f6      	lsls	r6, r6, #15
 80049d6:	d501      	bpl.n	80049dc <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80049d8:	002a      	movs	r2, r5
 80049da:	4322      	orrs	r2, r4
        }
        EXTI->IMR1 = temp;
 80049dc:	4d2c      	ldr	r5, [pc, #176]	; (8004a90 <HAL_GPIO_Init+0x168>)
 80049de:	2480      	movs	r4, #128	; 0x80
 80049e0:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 80049e2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049e4:	680c      	ldr	r4, [r1, #0]
 80049e6:	0022      	movs	r2, r4
 80049e8:	40da      	lsrs	r2, r3
 80049ea:	d04f      	beq.n	8004a8c <HAL_GPIO_Init+0x164>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	0025      	movs	r5, r4
 80049f2:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80049f4:	4214      	tst	r4, r2
 80049f6:	d0f4      	beq.n	80049e2 <HAL_GPIO_Init+0xba>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049f8:	2403      	movs	r4, #3
 80049fa:	684e      	ldr	r6, [r1, #4]
 80049fc:	4034      	ands	r4, r6
 80049fe:	3c01      	subs	r4, #1
 8004a00:	2c01      	cmp	r4, #1
 8004a02:	d994      	bls.n	800492e <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a04:	2203      	movs	r2, #3
 8004a06:	684c      	ldr	r4, [r1, #4]
 8004a08:	4022      	ands	r2, r4
 8004a0a:	2a03      	cmp	r2, #3
 8004a0c:	d009      	beq.n	8004a22 <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 8004a0e:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a10:	005e      	lsls	r6, r3, #1
 8004a12:	2403      	movs	r4, #3
 8004a14:	40b4      	lsls	r4, r6
 8004a16:	43a2      	bics	r2, r4
 8004a18:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a1a:	688a      	ldr	r2, [r1, #8]
 8004a1c:	40b2      	lsls	r2, r6
 8004a1e:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8004a20:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a22:	2203      	movs	r2, #3
 8004a24:	684c      	ldr	r4, [r1, #4]
 8004a26:	4022      	ands	r2, r4
 8004a28:	2a02      	cmp	r2, #2
 8004a2a:	d094      	beq.n	8004956 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8004a2c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a2e:	005e      	lsls	r6, r3, #1
 8004a30:	2203      	movs	r2, #3
 8004a32:	0017      	movs	r7, r2
 8004a34:	40b7      	lsls	r7, r6
 8004a36:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a38:	684f      	ldr	r7, [r1, #4]
 8004a3a:	403a      	ands	r2, r7
 8004a3c:	40b2      	lsls	r2, r6
 8004a3e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8004a40:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a42:	22c0      	movs	r2, #192	; 0xc0
 8004a44:	0292      	lsls	r2, r2, #10
 8004a46:	684c      	ldr	r4, [r1, #4]
 8004a48:	4214      	tst	r4, r2
 8004a4a:	d0ca      	beq.n	80049e2 <HAL_GPIO_Init+0xba>
        temp = EXTI->EXTICR[position >> 2u];
 8004a4c:	089a      	lsrs	r2, r3, #2
 8004a4e:	0014      	movs	r4, r2
 8004a50:	3418      	adds	r4, #24
 8004a52:	00a4      	lsls	r4, r4, #2
 8004a54:	4e0e      	ldr	r6, [pc, #56]	; (8004a90 <HAL_GPIO_Init+0x168>)
 8004a56:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004a58:	2403      	movs	r4, #3
 8004a5a:	401c      	ands	r4, r3
 8004a5c:	00e4      	lsls	r4, r4, #3
 8004a5e:	260f      	movs	r6, #15
 8004a60:	40a6      	lsls	r6, r4
 8004a62:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004a64:	26a0      	movs	r6, #160	; 0xa0
 8004a66:	05f6      	lsls	r6, r6, #23
 8004a68:	42b0      	cmp	r0, r6
 8004a6a:	d086      	beq.n	800497a <HAL_GPIO_Init+0x52>
 8004a6c:	4e09      	ldr	r6, [pc, #36]	; (8004a94 <HAL_GPIO_Init+0x16c>)
 8004a6e:	42b0      	cmp	r0, r6
 8004a70:	d008      	beq.n	8004a84 <HAL_GPIO_Init+0x15c>
 8004a72:	4e09      	ldr	r6, [pc, #36]	; (8004a98 <HAL_GPIO_Init+0x170>)
 8004a74:	42b0      	cmp	r0, r6
 8004a76:	d007      	beq.n	8004a88 <HAL_GPIO_Init+0x160>
 8004a78:	4e08      	ldr	r6, [pc, #32]	; (8004a9c <HAL_GPIO_Init+0x174>)
 8004a7a:	42b0      	cmp	r0, r6
 8004a7c:	d100      	bne.n	8004a80 <HAL_GPIO_Init+0x158>
 8004a7e:	e77a      	b.n	8004976 <HAL_GPIO_Init+0x4e>
 8004a80:	2605      	movs	r6, #5
 8004a82:	e77b      	b.n	800497c <HAL_GPIO_Init+0x54>
 8004a84:	2601      	movs	r6, #1
 8004a86:	e779      	b.n	800497c <HAL_GPIO_Init+0x54>
 8004a88:	2602      	movs	r6, #2
 8004a8a:	e777      	b.n	800497c <HAL_GPIO_Init+0x54>
  }
}
 8004a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a8e:	46c0      	nop			; (mov r8, r8)
 8004a90:	40021800 	.word	0x40021800
 8004a94:	50000400 	.word	0x50000400
 8004a98:	50000800 	.word	0x50000800
 8004a9c:	50000c00 	.word	0x50000c00

08004aa0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aa0:	2a00      	cmp	r2, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aa4:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004aa6:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004aa8:	6281      	str	r1, [r0, #40]	; 0x28
}
 8004aaa:	e7fc      	b.n	8004aa6 <HAL_GPIO_WritePin+0x6>

08004aac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004aac:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004aae:	4a10      	ldr	r2, [pc, #64]	; (8004af0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	4910      	ldr	r1, [pc, #64]	; (8004af4 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	4303      	orrs	r3, r0
 8004ab8:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4298      	cmp	r0, r3
 8004ac0:	d001      	beq.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004ac2:	2000      	movs	r0, #0
}
 8004ac4:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	0058      	lsls	r0, r3, #1
 8004acc:	18c0      	adds	r0, r0, r3
 8004ace:	0040      	lsls	r0, r0, #1
 8004ad0:	490a      	ldr	r1, [pc, #40]	; (8004afc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8004ad2:	f7fb fb33 	bl	800013c <__udivsi3>
 8004ad6:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ad8:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	055b      	lsls	r3, r3, #21
 8004ade:	d503      	bpl.n	8004ae8 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8004ae4:	3801      	subs	r0, #1
 8004ae6:	e7f7      	b.n	8004ad8 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e7eb      	b.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8004aec:	2003      	movs	r0, #3
 8004aee:	e7e9      	b.n	8004ac4 <HAL_PWREx_ControlVoltageScaling+0x18>
 8004af0:	40007000 	.word	0x40007000
 8004af4:	fffff9ff 	.word	0xfffff9ff
 8004af8:	20000000 	.word	0x20000000
 8004afc:	000f4240 	.word	0x000f4240

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b06:	d100      	bne.n	8004b0a <HAL_RCC_OscConfig+0xa>
 8004b08:	e231      	b.n	8004f6e <HAL_RCC_OscConfig+0x46e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b0a:	6803      	ldr	r3, [r0, #0]
 8004b0c:	07db      	lsls	r3, r3, #31
 8004b0e:	d539      	bpl.n	8004b84 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b10:	4ac1      	ldr	r2, [pc, #772]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004b12:	6891      	ldr	r1, [r2, #8]
 8004b14:	2338      	movs	r3, #56	; 0x38
 8004b16:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b18:	68d1      	ldr	r1, [r2, #12]
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d026      	beq.n	8004b70 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d026      	beq.n	8004b74 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	2280      	movs	r2, #128	; 0x80
 8004b2a:	0252      	lsls	r2, r2, #9
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d07f      	beq.n	8004c30 <HAL_RCC_OscConfig+0x130>
 8004b30:	22a0      	movs	r2, #160	; 0xa0
 8004b32:	02d2      	lsls	r2, r2, #11
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d100      	bne.n	8004b3a <HAL_RCC_OscConfig+0x3a>
 8004b38:	e081      	b.n	8004c3e <HAL_RCC_OscConfig+0x13e>
 8004b3a:	4bb7      	ldr	r3, [pc, #732]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	49b7      	ldr	r1, [pc, #732]	; (8004e1c <HAL_RCC_OscConfig+0x31c>)
 8004b40:	400a      	ands	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	49b6      	ldr	r1, [pc, #728]	; (8004e20 <HAL_RCC_OscConfig+0x320>)
 8004b48:	400a      	ands	r2, r1
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b4c:	6863      	ldr	r3, [r4, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d100      	bne.n	8004b54 <HAL_RCC_OscConfig+0x54>
 8004b52:	e080      	b.n	8004c56 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7ff f800 	bl	8003b58 <HAL_GetTick>
 8004b58:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5a:	4baf      	ldr	r3, [pc, #700]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	039b      	lsls	r3, r3, #14
 8004b60:	d410      	bmi.n	8004b84 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b62:	f7fe fff9 	bl	8003b58 <HAL_GetTick>
 8004b66:	1b40      	subs	r0, r0, r5
 8004b68:	2864      	cmp	r0, #100	; 0x64
 8004b6a:	d9f6      	bls.n	8004b5a <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8004b6c:	2003      	movs	r0, #3
 8004b6e:	e1ff      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b70:	2a03      	cmp	r2, #3
 8004b72:	d1d6      	bne.n	8004b22 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	4ba8      	ldr	r3, [pc, #672]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	039b      	lsls	r3, r3, #14
 8004b7a:	d503      	bpl.n	8004b84 <HAL_RCC_OscConfig+0x84>
 8004b7c:	6863      	ldr	r3, [r4, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d100      	bne.n	8004b84 <HAL_RCC_OscConfig+0x84>
 8004b82:	e1f7      	b.n	8004f74 <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	079b      	lsls	r3, r3, #30
 8004b88:	d531      	bpl.n	8004bee <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8a:	4aa3      	ldr	r2, [pc, #652]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004b8c:	6893      	ldr	r3, [r2, #8]
 8004b8e:	2138      	movs	r1, #56	; 0x38
 8004b90:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b92:	68d1      	ldr	r1, [r2, #12]
 8004b94:	2203      	movs	r2, #3
 8004b96:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d06a      	beq.n	8004c72 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d16b      	bne.n	8004c78 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba0:	4a9d      	ldr	r2, [pc, #628]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	0552      	lsls	r2, r2, #21
 8004ba6:	d503      	bpl.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004ba8:	68e2      	ldr	r2, [r4, #12]
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d100      	bne.n	8004bb0 <HAL_RCC_OscConfig+0xb0>
 8004bae:	e1e3      	b.n	8004f78 <HAL_RCC_OscConfig+0x478>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4899      	ldr	r0, [pc, #612]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004bb2:	6842      	ldr	r2, [r0, #4]
 8004bb4:	499b      	ldr	r1, [pc, #620]	; (8004e24 <HAL_RCC_OscConfig+0x324>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	6961      	ldr	r1, [r4, #20]
 8004bba:	0209      	lsls	r1, r1, #8
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10d      	bne.n	8004be0 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004bc4:	6803      	ldr	r3, [r0, #0]
 8004bc6:	4998      	ldr	r1, [pc, #608]	; (8004e28 <HAL_RCC_OscConfig+0x328>)
 8004bc8:	400b      	ands	r3, r1
 8004bca:	6921      	ldr	r1, [r4, #16]
 8004bcc:	430b      	orrs	r3, r1
 8004bce:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004bd0:	6803      	ldr	r3, [r0, #0]
 8004bd2:	0adb      	lsrs	r3, r3, #11
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	4b94      	ldr	r3, [pc, #592]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004bda:	40d3      	lsrs	r3, r2
 8004bdc:	4a94      	ldr	r2, [pc, #592]	; (8004e30 <HAL_RCC_OscConfig+0x330>)
 8004bde:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004be0:	4b94      	ldr	r3, [pc, #592]	; (8004e34 <HAL_RCC_OscConfig+0x334>)
 8004be2:	6818      	ldr	r0, [r3, #0]
 8004be4:	f7fe ff6c 	bl	8003ac0 <HAL_InitTick>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d000      	beq.n	8004bee <HAL_RCC_OscConfig+0xee>
 8004bec:	e1c6      	b.n	8004f7c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	071b      	lsls	r3, r3, #28
 8004bf2:	d400      	bmi.n	8004bf6 <HAL_RCC_OscConfig+0xf6>
 8004bf4:	e081      	b.n	8004cfa <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004bf6:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	2338      	movs	r3, #56	; 0x38
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b18      	cmp	r3, #24
 8004c00:	d073      	beq.n	8004cea <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c02:	69a3      	ldr	r3, [r4, #24]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d100      	bne.n	8004c0a <HAL_RCC_OscConfig+0x10a>
 8004c08:	e0b4      	b.n	8004d74 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004c0a:	4a83      	ldr	r2, [pc, #524]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004c0c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004c0e:	2101      	movs	r1, #1
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fe ffa0 	bl	8003b58 <HAL_GetTick>
 8004c18:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c1a:	4b7f      	ldr	r3, [pc, #508]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	079b      	lsls	r3, r3, #30
 8004c20:	d46b      	bmi.n	8004cfa <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c22:	f7fe ff99 	bl	8003b58 <HAL_GetTick>
 8004c26:	1b40      	subs	r0, r0, r5
 8004c28:	2802      	cmp	r0, #2
 8004c2a:	d9f6      	bls.n	8004c1a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8004c2c:	2003      	movs	r0, #3
 8004c2e:	e19f      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c30:	4a79      	ldr	r2, [pc, #484]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004c32:	6811      	ldr	r1, [r2, #0]
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	025b      	lsls	r3, r3, #9
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e786      	b.n	8004b4c <HAL_RCC_OscConfig+0x4c>
 8004c3e:	4b76      	ldr	r3, [pc, #472]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	02d2      	lsls	r2, r2, #11
 8004c46:	430a      	orrs	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	2280      	movs	r2, #128	; 0x80
 8004c4e:	0252      	lsls	r2, r2, #9
 8004c50:	430a      	orrs	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e77a      	b.n	8004b4c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004c56:	f7fe ff7f 	bl	8003b58 <HAL_GetTick>
 8004c5a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5c:	4b6e      	ldr	r3, [pc, #440]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	039b      	lsls	r3, r3, #14
 8004c62:	d58f      	bpl.n	8004b84 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7fe ff78 	bl	8003b58 <HAL_GetTick>
 8004c68:	1b40      	subs	r0, r0, r5
 8004c6a:	2864      	cmp	r0, #100	; 0x64
 8004c6c:	d9f6      	bls.n	8004c5c <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8004c6e:	2003      	movs	r0, #3
 8004c70:	e17e      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c72:	2a02      	cmp	r2, #2
 8004c74:	d192      	bne.n	8004b9c <HAL_RCC_OscConfig+0x9c>
 8004c76:	e793      	b.n	8004ba0 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c78:	68e3      	ldr	r3, [r4, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d022      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c7e:	4a66      	ldr	r2, [pc, #408]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004c80:	6813      	ldr	r3, [r2, #0]
 8004c82:	4969      	ldr	r1, [pc, #420]	; (8004e28 <HAL_RCC_OscConfig+0x328>)
 8004c84:	400b      	ands	r3, r1
 8004c86:	6921      	ldr	r1, [r4, #16]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004c8c:	6811      	ldr	r1, [r2, #0]
 8004c8e:	2380      	movs	r3, #128	; 0x80
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	430b      	orrs	r3, r1
 8004c94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004c96:	f7fe ff5f 	bl	8003b58 <HAL_GetTick>
 8004c9a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9c:	4b5e      	ldr	r3, [pc, #376]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	055b      	lsls	r3, r3, #21
 8004ca2:	d406      	bmi.n	8004cb2 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca4:	f7fe ff58 	bl	8003b58 <HAL_GetTick>
 8004ca8:	1b40      	subs	r0, r0, r5
 8004caa:	2802      	cmp	r0, #2
 8004cac:	d9f6      	bls.n	8004c9c <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8004cae:	2003      	movs	r0, #3
 8004cb0:	e15e      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb2:	4959      	ldr	r1, [pc, #356]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004cb4:	684b      	ldr	r3, [r1, #4]
 8004cb6:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <HAL_RCC_OscConfig+0x324>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	6962      	ldr	r2, [r4, #20]
 8004cbc:	0212      	lsls	r2, r2, #8
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	604b      	str	r3, [r1, #4]
 8004cc2:	e794      	b.n	8004bee <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8004cc4:	4a54      	ldr	r2, [pc, #336]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004cc6:	6813      	ldr	r3, [r2, #0]
 8004cc8:	495b      	ldr	r1, [pc, #364]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004cca:	400b      	ands	r3, r1
 8004ccc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004cce:	f7fe ff43 	bl	8003b58 <HAL_GetTick>
 8004cd2:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd4:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	055b      	lsls	r3, r3, #21
 8004cda:	d588      	bpl.n	8004bee <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fe ff3c 	bl	8003b58 <HAL_GetTick>
 8004ce0:	1b40      	subs	r0, r0, r5
 8004ce2:	2802      	cmp	r0, #2
 8004ce4:	d9f6      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8004ce6:	2003      	movs	r0, #3
 8004ce8:	e142      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004cea:	4b4b      	ldr	r3, [pc, #300]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cee:	079b      	lsls	r3, r3, #30
 8004cf0:	d503      	bpl.n	8004cfa <HAL_RCC_OscConfig+0x1fa>
 8004cf2:	69a3      	ldr	r3, [r4, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d100      	bne.n	8004cfa <HAL_RCC_OscConfig+0x1fa>
 8004cf8:	e142      	b.n	8004f80 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	075b      	lsls	r3, r3, #29
 8004cfe:	d400      	bmi.n	8004d02 <HAL_RCC_OscConfig+0x202>
 8004d00:	e0a2      	b.n	8004e48 <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d02:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	2338      	movs	r3, #56	; 0x38
 8004d08:	4013      	ands	r3, r2
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d045      	beq.n	8004d9a <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d0e:	4b42      	ldr	r3, [pc, #264]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	d44a      	bmi.n	8004dac <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d16:	4a40      	ldr	r2, [pc, #256]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d18:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004d1a:	2080      	movs	r0, #128	; 0x80
 8004d1c:	0540      	lsls	r0, r0, #21
 8004d1e:	4301      	orrs	r1, r0
 8004d20:	63d1      	str	r1, [r2, #60]	; 0x3c
 8004d22:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004d24:	4003      	ands	r3, r0
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8004d2a:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d2c:	4b43      	ldr	r3, [pc, #268]	; (8004e3c <HAL_RCC_OscConfig+0x33c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	05db      	lsls	r3, r3, #23
 8004d32:	d53d      	bpl.n	8004db0 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d34:	68a3      	ldr	r3, [r4, #8]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d04e      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x2d8>
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d052      	beq.n	8004de4 <HAL_RCC_OscConfig+0x2e4>
 8004d3e:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d42:	2101      	movs	r1, #1
 8004d44:	438a      	bics	r2, r1
 8004d46:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004d4a:	3103      	adds	r1, #3
 8004d4c:	438a      	bics	r2, r1
 8004d4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d50:	68a3      	ldr	r3, [r4, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d050      	beq.n	8004df8 <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe feff 	bl	8003b58 <HAL_GetTick>
 8004d5a:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5c:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d60:	079b      	lsls	r3, r3, #30
 8004d62:	d46f      	bmi.n	8004e44 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d64:	f7fe fef8 	bl	8003b58 <HAL_GetTick>
 8004d68:	1b80      	subs	r0, r0, r6
 8004d6a:	4b35      	ldr	r3, [pc, #212]	; (8004e40 <HAL_RCC_OscConfig+0x340>)
 8004d6c:	4298      	cmp	r0, r3
 8004d6e:	d9f5      	bls.n	8004d5c <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8004d70:	2003      	movs	r0, #3
 8004d72:	e0fd      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_LSI_DISABLE();
 8004d74:	4a28      	ldr	r2, [pc, #160]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d76:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004d78:	2101      	movs	r1, #1
 8004d7a:	438b      	bics	r3, r1
 8004d7c:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004d7e:	f7fe feeb 	bl	8003b58 <HAL_GetTick>
 8004d82:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d84:	4b24      	ldr	r3, [pc, #144]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d88:	079b      	lsls	r3, r3, #30
 8004d8a:	d5b6      	bpl.n	8004cfa <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7fe fee4 	bl	8003b58 <HAL_GetTick>
 8004d90:	1b40      	subs	r0, r0, r5
 8004d92:	2802      	cmp	r0, #2
 8004d94:	d9f6      	bls.n	8004d84 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8004d96:	2003      	movs	r0, #3
 8004d98:	e0ea      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9e:	079b      	lsls	r3, r3, #30
 8004da0:	d552      	bpl.n	8004e48 <HAL_RCC_OscConfig+0x348>
 8004da2:	68a3      	ldr	r3, [r4, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d14f      	bne.n	8004e48 <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8004da8:	2001      	movs	r0, #1
 8004daa:	e0e1      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
    FlagStatus       pwrclkchanged = RESET;
 8004dac:	2500      	movs	r5, #0
 8004dae:	e7bd      	b.n	8004d2c <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db0:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <HAL_RCC_OscConfig+0x33c>)
 8004db2:	6811      	ldr	r1, [r2, #0]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dbc:	f7fe fecc 	bl	8003b58 <HAL_GetTick>
 8004dc0:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dc2:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <HAL_RCC_OscConfig+0x33c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	05db      	lsls	r3, r3, #23
 8004dc8:	d4b4      	bmi.n	8004d34 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dca:	f7fe fec5 	bl	8003b58 <HAL_GetTick>
 8004dce:	1b80      	subs	r0, r0, r6
 8004dd0:	2802      	cmp	r0, #2
 8004dd2:	d9f6      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8004dd4:	2003      	movs	r0, #3
 8004dd6:	e0cb      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd8:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004dda:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004ddc:	2101      	movs	r1, #1
 8004dde:	430b      	orrs	r3, r1
 8004de0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004de2:	e7b5      	b.n	8004d50 <HAL_RCC_OscConfig+0x250>
 8004de4:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004de8:	2104      	movs	r1, #4
 8004dea:	430a      	orrs	r2, r1
 8004dec:	65da      	str	r2, [r3, #92]	; 0x5c
 8004dee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004df0:	3903      	subs	r1, #3
 8004df2:	430a      	orrs	r2, r1
 8004df4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004df6:	e7ab      	b.n	8004d50 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fe feae 	bl	8003b58 <HAL_GetTick>
 8004dfc:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_RCC_OscConfig+0x318>)
 8004e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e02:	079b      	lsls	r3, r3, #30
 8004e04:	d51e      	bpl.n	8004e44 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e06:	f7fe fea7 	bl	8003b58 <HAL_GetTick>
 8004e0a:	1b80      	subs	r0, r0, r6
 8004e0c:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <HAL_RCC_OscConfig+0x340>)
 8004e0e:	4298      	cmp	r0, r3
 8004e10:	d9f5      	bls.n	8004dfe <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8004e12:	2003      	movs	r0, #3
 8004e14:	e0ac      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	fffeffff 	.word	0xfffeffff
 8004e20:	fffbffff 	.word	0xfffbffff
 8004e24:	ffff80ff 	.word	0xffff80ff
 8004e28:	ffffc7ff 	.word	0xffffc7ff
 8004e2c:	00f42400 	.word	0x00f42400
 8004e30:	20000000 	.word	0x20000000
 8004e34:	20000008 	.word	0x20000008
 8004e38:	fffffeff 	.word	0xfffffeff
 8004e3c:	40007000 	.word	0x40007000
 8004e40:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e44:	2d01      	cmp	r5, #1
 8004e46:	d01e      	beq.n	8004e86 <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e48:	69e3      	ldr	r3, [r4, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d100      	bne.n	8004e50 <HAL_RCC_OscConfig+0x350>
 8004e4e:	e099      	b.n	8004f84 <HAL_RCC_OscConfig+0x484>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e50:	4a54      	ldr	r2, [pc, #336]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004e52:	6891      	ldr	r1, [r2, #8]
 8004e54:	2238      	movs	r2, #56	; 0x38
 8004e56:	400a      	ands	r2, r1
 8004e58:	2a10      	cmp	r2, #16
 8004e5a:	d060      	beq.n	8004f1e <HAL_RCC_OscConfig+0x41e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d018      	beq.n	8004e92 <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e60:	4a50      	ldr	r2, [pc, #320]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	4950      	ldr	r1, [pc, #320]	; (8004fa8 <HAL_RCC_OscConfig+0x4a8>)
 8004e66:	400b      	ands	r3, r1
 8004e68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6a:	f7fe fe75 	bl	8003b58 <HAL_GetTick>
 8004e6e:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e70:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	d54b      	bpl.n	8004f10 <HAL_RCC_OscConfig+0x410>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fe fe6e 	bl	8003b58 <HAL_GetTick>
 8004e7c:	1b00      	subs	r0, r0, r4
 8004e7e:	2802      	cmp	r0, #2
 8004e80:	d9f6      	bls.n	8004e70 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004e82:	2003      	movs	r0, #3
 8004e84:	e074      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e86:	4a47      	ldr	r2, [pc, #284]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004e88:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8004e8a:	4948      	ldr	r1, [pc, #288]	; (8004fac <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	400b      	ands	r3, r1
 8004e8e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004e90:	e7da      	b.n	8004e48 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8004e92:	4a44      	ldr	r2, [pc, #272]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004e94:	6813      	ldr	r3, [r2, #0]
 8004e96:	4944      	ldr	r1, [pc, #272]	; (8004fa8 <HAL_RCC_OscConfig+0x4a8>)
 8004e98:	400b      	ands	r3, r1
 8004e9a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e9c:	f7fe fe5c 	bl	8003b58 <HAL_GetTick>
 8004ea0:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea2:	4b40      	ldr	r3, [pc, #256]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	019b      	lsls	r3, r3, #6
 8004ea8:	d506      	bpl.n	8004eb8 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7fe fe55 	bl	8003b58 <HAL_GetTick>
 8004eae:	1b40      	subs	r0, r0, r5
 8004eb0:	2802      	cmp	r0, #2
 8004eb2:	d9f6      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	e05b      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb8:	4a3a      	ldr	r2, [pc, #232]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004eba:	68d3      	ldr	r3, [r2, #12]
 8004ebc:	493c      	ldr	r1, [pc, #240]	; (8004fb0 <HAL_RCC_OscConfig+0x4b0>)
 8004ebe:	4019      	ands	r1, r3
 8004ec0:	6a23      	ldr	r3, [r4, #32]
 8004ec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ec4:	4303      	orrs	r3, r0
 8004ec6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004ec8:	0200      	lsls	r0, r0, #8
 8004eca:	4303      	orrs	r3, r0
 8004ecc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004ece:	4303      	orrs	r3, r0
 8004ed0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004ed2:	4303      	orrs	r3, r0
 8004ed4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004ed6:	4303      	orrs	r3, r0
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8004edc:	6811      	ldr	r1, [r2, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	045b      	lsls	r3, r3, #17
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004ee6:	68d1      	ldr	r1, [r2, #12]
 8004ee8:	2380      	movs	r3, #128	; 0x80
 8004eea:	055b      	lsls	r3, r3, #21
 8004eec:	430b      	orrs	r3, r1
 8004eee:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004ef0:	f7fe fe32 	bl	8003b58 <HAL_GetTick>
 8004ef4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef6:	4b2b      	ldr	r3, [pc, #172]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	019b      	lsls	r3, r3, #6
 8004efc:	d406      	bmi.n	8004f0c <HAL_RCC_OscConfig+0x40c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efe:	f7fe fe2b 	bl	8003b58 <HAL_GetTick>
 8004f02:	1b00      	subs	r0, r0, r4
 8004f04:	2802      	cmp	r0, #2
 8004f06:	d9f6      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x3f6>
            return HAL_TIMEOUT;
 8004f08:	2003      	movs	r0, #3
 8004f0a:	e031      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	e02f      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004f10:	4a24      	ldr	r2, [pc, #144]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004f12:	68d3      	ldr	r3, [r2, #12]
 8004f14:	4927      	ldr	r1, [pc, #156]	; (8004fb4 <HAL_RCC_OscConfig+0x4b4>)
 8004f16:	400b      	ands	r3, r1
 8004f18:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	e028      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d032      	beq.n	8004f88 <HAL_RCC_OscConfig+0x488>
        temp_pllckcfg = RCC->PLLCFGR;
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCC_OscConfig+0x4a4>)
 8004f24:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	2303      	movs	r3, #3
 8004f28:	4013      	ands	r3, r2
 8004f2a:	6a21      	ldr	r1, [r4, #32]
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	d12d      	bne.n	8004f8c <HAL_RCC_OscConfig+0x48c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f30:	2370      	movs	r3, #112	; 0x70
 8004f32:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f34:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f36:	428b      	cmp	r3, r1
 8004f38:	d12a      	bne.n	8004f90 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f3a:	21fe      	movs	r1, #254	; 0xfe
 8004f3c:	01c9      	lsls	r1, r1, #7
 8004f3e:	4011      	ands	r1, r2
 8004f40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f42:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d125      	bne.n	8004f94 <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f48:	23f8      	movs	r3, #248	; 0xf8
 8004f4a:	039b      	lsls	r3, r3, #14
 8004f4c:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004f50:	428b      	cmp	r3, r1
 8004f52:	d121      	bne.n	8004f98 <HAL_RCC_OscConfig+0x498>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f54:	23e0      	movs	r3, #224	; 0xe0
 8004f56:	051b      	lsls	r3, r3, #20
 8004f58:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004f5c:	428b      	cmp	r3, r1
 8004f5e:	d11d      	bne.n	8004f9c <HAL_RCC_OscConfig+0x49c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004f60:	0f52      	lsrs	r2, r2, #29
 8004f62:	0752      	lsls	r2, r2, #29
 8004f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d11a      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
    return HAL_ERROR;
 8004f6e:	2001      	movs	r0, #1
}
 8004f70:	b002      	add	sp, #8
 8004f72:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004f74:	2001      	movs	r0, #1
 8004f76:	e7fb      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8004f78:	2001      	movs	r0, #1
 8004f7a:	e7f9      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	e7f7      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8004f80:	2001      	movs	r0, #1
 8004f82:	e7f5      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 8004f84:	2000      	movs	r0, #0
 8004f86:	e7f3      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 8004f88:	2001      	movs	r0, #1
 8004f8a:	e7f1      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	e7ef      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
 8004f90:	2001      	movs	r0, #1
 8004f92:	e7ed      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
 8004f94:	2001      	movs	r0, #1
 8004f96:	e7eb      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
 8004f98:	2001      	movs	r0, #1
 8004f9a:	e7e9      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	e7e7      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
 8004fa0:	2001      	movs	r0, #1
 8004fa2:	e7e5      	b.n	8004f70 <HAL_RCC_OscConfig+0x470>
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	feffffff 	.word	0xfeffffff
 8004fac:	efffffff 	.word	0xefffffff
 8004fb0:	11c1808c 	.word	0x11c1808c
 8004fb4:	eefefffc 	.word	0xeefefffc

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fba:	4b2a      	ldr	r3, [pc, #168]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2238      	movs	r2, #56	; 0x38
 8004fc0:	421a      	tst	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004fc4:	4b27      	ldr	r3, [pc, #156]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	0ad2      	lsrs	r2, r2, #11
 8004fca:	2307      	movs	r3, #7
 8004fcc:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004fce:	4826      	ldr	r0, [pc, #152]	; (8005068 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004fd0:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004fd2:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fd4:	4b23      	ldr	r3, [pc, #140]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	2338      	movs	r3, #56	; 0x38
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d03b      	beq.n	8005058 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fe0:	4b20      	ldr	r3, [pc, #128]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	2338      	movs	r3, #56	; 0x38
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b10      	cmp	r3, #16
 8004fea:	d00d      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004fec:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	2338      	movs	r3, #56	; 0x38
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d031      	beq.n	800505c <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	2338      	movs	r3, #56	; 0x38
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b18      	cmp	r3, #24
 8005002:	d026      	beq.n	8005052 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8005004:	2000      	movs	r0, #0
  return sysclockfreq;
 8005006:	e7e4      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 800500a:	68d1      	ldr	r1, [r2, #12]
 800500c:	3b0d      	subs	r3, #13
 800500e:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005010:	68d2      	ldr	r2, [r2, #12]
 8005012:	0912      	lsrs	r2, r2, #4
 8005014:	2107      	movs	r1, #7
 8005016:	4011      	ands	r1, r2
 8005018:	3101      	adds	r1, #1
    switch (pllsource)
 800501a:	2b03      	cmp	r3, #3
 800501c:	d00f      	beq.n	800503e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800501e:	4812      	ldr	r0, [pc, #72]	; (8005068 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005020:	f7fb f88c 	bl	800013c <__udivsi3>
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	0a12      	lsrs	r2, r2, #8
 800502a:	237f      	movs	r3, #127	; 0x7f
 800502c:	4013      	ands	r3, r2
 800502e:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005030:	4b0c      	ldr	r3, [pc, #48]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8005032:	68d9      	ldr	r1, [r3, #12]
 8005034:	0f49      	lsrs	r1, r1, #29
 8005036:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8005038:	f7fb f880 	bl	800013c <__udivsi3>
 800503c:	e7c9      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800503e:	480b      	ldr	r0, [pc, #44]	; (800506c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005040:	f7fb f87c 	bl	800013c <__udivsi3>
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <HAL_RCC_GetSysClockFreq+0xac>)
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	0a12      	lsrs	r2, r2, #8
 800504a:	237f      	movs	r3, #127	; 0x7f
 800504c:	4013      	ands	r3, r2
 800504e:	4358      	muls	r0, r3
        break;
 8005050:	e7ee      	b.n	8005030 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8005052:	20fa      	movs	r0, #250	; 0xfa
 8005054:	01c0      	lsls	r0, r0, #7
 8005056:	e7bc      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8005058:	4804      	ldr	r0, [pc, #16]	; (800506c <HAL_RCC_GetSysClockFreq+0xb4>)
 800505a:	e7ba      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 800505c:	2080      	movs	r0, #128	; 0x80
 800505e:	0200      	lsls	r0, r0, #8
 8005060:	e7b7      	b.n	8004fd2 <HAL_RCC_GetSysClockFreq+0x1a>
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	40021000 	.word	0x40021000
 8005068:	00f42400 	.word	0x00f42400
 800506c:	007a1200 	.word	0x007a1200

08005070 <HAL_RCC_ClockConfig>:
{
 8005070:	b570      	push	{r4, r5, r6, lr}
 8005072:	0004      	movs	r4, r0
 8005074:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005076:	2800      	cmp	r0, #0
 8005078:	d100      	bne.n	800507c <HAL_RCC_ClockConfig+0xc>
 800507a:	e0aa      	b.n	80051d2 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800507c:	4b57      	ldr	r3, [pc, #348]	; (80051dc <HAL_RCC_ClockConfig+0x16c>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2307      	movs	r3, #7
 8005082:	4013      	ands	r3, r2
 8005084:	428b      	cmp	r3, r1
 8005086:	d321      	bcc.n	80050cc <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	079a      	lsls	r2, r3, #30
 800508c:	d50e      	bpl.n	80050ac <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508e:	075b      	lsls	r3, r3, #29
 8005090:	d505      	bpl.n	800509e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005092:	4a53      	ldr	r2, [pc, #332]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005094:	6891      	ldr	r1, [r2, #8]
 8005096:	23e0      	movs	r3, #224	; 0xe0
 8005098:	01db      	lsls	r3, r3, #7
 800509a:	430b      	orrs	r3, r1
 800509c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800509e:	4a50      	ldr	r2, [pc, #320]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 80050a0:	6893      	ldr	r3, [r2, #8]
 80050a2:	4950      	ldr	r1, [pc, #320]	; (80051e4 <HAL_RCC_ClockConfig+0x174>)
 80050a4:	400b      	ands	r3, r1
 80050a6:	68a1      	ldr	r1, [r4, #8]
 80050a8:	430b      	orrs	r3, r1
 80050aa:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07db      	lsls	r3, r3, #31
 80050b0:	d554      	bpl.n	800515c <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b2:	6863      	ldr	r3, [r4, #4]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d020      	beq.n	80050fa <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d03b      	beq.n	8005134 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d13f      	bne.n	8005140 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050c0:	4a47      	ldr	r2, [pc, #284]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	0552      	lsls	r2, r2, #21
 80050c6:	d41c      	bmi.n	8005102 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80050c8:	2001      	movs	r0, #1
 80050ca:	e06a      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050cc:	4a43      	ldr	r2, [pc, #268]	; (80051dc <HAL_RCC_ClockConfig+0x16c>)
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	2107      	movs	r1, #7
 80050d2:	438b      	bics	r3, r1
 80050d4:	432b      	orrs	r3, r5
 80050d6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80050d8:	f7fe fd3e 	bl	8003b58 <HAL_GetTick>
 80050dc:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80050de:	4b3f      	ldr	r3, [pc, #252]	; (80051dc <HAL_RCC_ClockConfig+0x16c>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	2307      	movs	r3, #7
 80050e4:	4013      	ands	r3, r2
 80050e6:	42ab      	cmp	r3, r5
 80050e8:	d0ce      	beq.n	8005088 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ea:	f7fe fd35 	bl	8003b58 <HAL_GetTick>
 80050ee:	1b80      	subs	r0, r0, r6
 80050f0:	4a3d      	ldr	r2, [pc, #244]	; (80051e8 <HAL_RCC_ClockConfig+0x178>)
 80050f2:	4290      	cmp	r0, r2
 80050f4:	d9f3      	bls.n	80050de <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 80050f6:	2003      	movs	r0, #3
 80050f8:	e053      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050fa:	4a39      	ldr	r2, [pc, #228]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	0392      	lsls	r2, r2, #14
 8005100:	d569      	bpl.n	80051d6 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005102:	4937      	ldr	r1, [pc, #220]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005104:	688a      	ldr	r2, [r1, #8]
 8005106:	2007      	movs	r0, #7
 8005108:	4382      	bics	r2, r0
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800510e:	f7fe fd23 	bl	8003b58 <HAL_GetTick>
 8005112:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005114:	4b32      	ldr	r3, [pc, #200]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2238      	movs	r2, #56	; 0x38
 800511a:	401a      	ands	r2, r3
 800511c:	6863      	ldr	r3, [r4, #4]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	429a      	cmp	r2, r3
 8005122:	d01b      	beq.n	800515c <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fe fd18 	bl	8003b58 <HAL_GetTick>
 8005128:	1b80      	subs	r0, r0, r6
 800512a:	4b2f      	ldr	r3, [pc, #188]	; (80051e8 <HAL_RCC_ClockConfig+0x178>)
 800512c:	4298      	cmp	r0, r3
 800512e:	d9f1      	bls.n	8005114 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8005130:	2003      	movs	r0, #3
 8005132:	e036      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005134:	4a2a      	ldr	r2, [pc, #168]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	0192      	lsls	r2, r2, #6
 800513a:	d4e2      	bmi.n	8005102 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800513c:	2001      	movs	r0, #1
 800513e:	e030      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005140:	2b03      	cmp	r3, #3
 8005142:	d005      	beq.n	8005150 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005144:	4a26      	ldr	r2, [pc, #152]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005146:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005148:	0792      	lsls	r2, r2, #30
 800514a:	d4da      	bmi.n	8005102 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800514c:	2001      	movs	r0, #1
 800514e:	e028      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005150:	4a23      	ldr	r2, [pc, #140]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005152:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8005154:	0792      	lsls	r2, r2, #30
 8005156:	d4d4      	bmi.n	8005102 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8005158:	2001      	movs	r0, #1
 800515a:	e022      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800515c:	4b1f      	ldr	r3, [pc, #124]	; (80051dc <HAL_RCC_ClockConfig+0x16c>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	2307      	movs	r3, #7
 8005162:	4013      	ands	r3, r2
 8005164:	42ab      	cmp	r3, r5
 8005166:	d81d      	bhi.n	80051a4 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	075b      	lsls	r3, r3, #29
 800516c:	d506      	bpl.n	800517c <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800516e:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005170:	6893      	ldr	r3, [r2, #8]
 8005172:	491e      	ldr	r1, [pc, #120]	; (80051ec <HAL_RCC_ClockConfig+0x17c>)
 8005174:	400b      	ands	r3, r1
 8005176:	68e1      	ldr	r1, [r4, #12]
 8005178:	430b      	orrs	r3, r1
 800517a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800517c:	f7ff ff1c 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8005180:	4b17      	ldr	r3, [pc, #92]	; (80051e0 <HAL_RCC_ClockConfig+0x170>)
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	0a12      	lsrs	r2, r2, #8
 8005186:	230f      	movs	r3, #15
 8005188:	4013      	ands	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_RCC_ClockConfig+0x180>)
 800518e:	589a      	ldr	r2, [r3, r2]
 8005190:	231f      	movs	r3, #31
 8005192:	4013      	ands	r3, r2
 8005194:	40d8      	lsrs	r0, r3
 8005196:	4b17      	ldr	r3, [pc, #92]	; (80051f4 <HAL_RCC_ClockConfig+0x184>)
 8005198:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800519a:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <HAL_RCC_ClockConfig+0x188>)
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	f7fe fc8f 	bl	8003ac0 <HAL_InitTick>
}
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a4:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <HAL_RCC_ClockConfig+0x16c>)
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	2107      	movs	r1, #7
 80051aa:	438b      	bics	r3, r1
 80051ac:	432b      	orrs	r3, r5
 80051ae:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80051b0:	f7fe fcd2 	bl	8003b58 <HAL_GetTick>
 80051b4:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_RCC_ClockConfig+0x16c>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	2307      	movs	r3, #7
 80051bc:	4013      	ands	r3, r2
 80051be:	42ab      	cmp	r3, r5
 80051c0:	d0d2      	beq.n	8005168 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c2:	f7fe fcc9 	bl	8003b58 <HAL_GetTick>
 80051c6:	1b80      	subs	r0, r0, r6
 80051c8:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <HAL_RCC_ClockConfig+0x178>)
 80051ca:	4298      	cmp	r0, r3
 80051cc:	d9f3      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 80051ce:	2003      	movs	r0, #3
 80051d0:	e7e7      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 80051d2:	2001      	movs	r0, #1
 80051d4:	e7e5      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 80051d6:	2001      	movs	r0, #1
 80051d8:	e7e3      	b.n	80051a2 <HAL_RCC_ClockConfig+0x132>
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	40022000 	.word	0x40022000
 80051e0:	40021000 	.word	0x40021000
 80051e4:	fffff0ff 	.word	0xfffff0ff
 80051e8:	00001388 	.word	0x00001388
 80051ec:	ffff8fff 	.word	0xffff8fff
 80051f0:	080092c4 	.word	0x080092c4
 80051f4:	20000000 	.word	0x20000000
 80051f8:	20000008 	.word	0x20000008

080051fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80051fc:	4b01      	ldr	r3, [pc, #4]	; (8005204 <HAL_RCC_GetHCLKFreq+0x8>)
 80051fe:	6818      	ldr	r0, [r3, #0]
}
 8005200:	4770      	bx	lr
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	20000000 	.word	0x20000000

08005208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005208:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800520a:	f7ff fff7 	bl	80051fc <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800520e:	4b06      	ldr	r3, [pc, #24]	; (8005228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	0b12      	lsrs	r2, r2, #12
 8005214:	2307      	movs	r3, #7
 8005216:	4013      	ands	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4a04      	ldr	r2, [pc, #16]	; (800522c <HAL_RCC_GetPCLK1Freq+0x24>)
 800521c:	589a      	ldr	r2, [r3, r2]
 800521e:	231f      	movs	r3, #31
 8005220:	4013      	ands	r3, r2
 8005222:	40d8      	lsrs	r0, r3
}
 8005224:	bd10      	pop	{r4, pc}
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	40021000 	.word	0x40021000
 800522c:	08009304 	.word	0x08009304

08005230 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005232:	b083      	sub	sp, #12
 8005234:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005236:	6803      	ldr	r3, [r0, #0]
 8005238:	039b      	lsls	r3, r3, #14
 800523a:	d562      	bpl.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523c:	4b81      	ldr	r3, [pc, #516]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	d41e      	bmi.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005244:	4a7f      	ldr	r2, [pc, #508]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005246:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005248:	2080      	movs	r0, #128	; 0x80
 800524a:	0540      	lsls	r0, r0, #21
 800524c:	4301      	orrs	r1, r0
 800524e:	63d1      	str	r1, [r2, #60]	; 0x3c
 8005250:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8005252:	4003      	ands	r3, r0
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005258:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800525a:	4a7b      	ldr	r2, [pc, #492]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800525c:	6811      	ldr	r1, [r2, #0]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	430b      	orrs	r3, r1
 8005264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005266:	f7fe fc77 	bl	8003b58 <HAL_GetTick>
 800526a:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800526c:	4b76      	ldr	r3, [pc, #472]	; (8005448 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	05db      	lsls	r3, r3, #23
 8005272:	d408      	bmi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005274:	f7fe fc70 	bl	8003b58 <HAL_GetTick>
 8005278:	1b40      	subs	r0, r0, r5
 800527a:	2802      	cmp	r0, #2
 800527c:	d9f6      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 800527e:	2503      	movs	r5, #3
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2600      	movs	r6, #0
 8005284:	e7e9      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005286:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 8005288:	2d00      	cmp	r5, #0
 800528a:	d123      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800528c:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800528e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005290:	22c0      	movs	r2, #192	; 0xc0
 8005292:	0092      	lsls	r2, r2, #2
 8005294:	000b      	movs	r3, r1
 8005296:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005298:	4211      	tst	r1, r2
 800529a:	d010      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800529c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800529e:	429a      	cmp	r2, r3
 80052a0:	d00d      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052a2:	4a68      	ldr	r2, [pc, #416]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80052a4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80052a6:	4969      	ldr	r1, [pc, #420]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80052a8:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052aa:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	0249      	lsls	r1, r1, #9
 80052b0:	4301      	orrs	r1, r0
 80052b2:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052b4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80052b6:	4866      	ldr	r0, [pc, #408]	; (8005450 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80052b8:	4001      	ands	r1, r0
 80052ba:	65d1      	str	r1, [r2, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052bc:	65d3      	str	r3, [r2, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052be:	07db      	lsls	r3, r3, #31
 80052c0:	d410      	bmi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 80052c2:	2d00      	cmp	r5, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c6:	4a5f      	ldr	r2, [pc, #380]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80052c8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80052ca:	4960      	ldr	r1, [pc, #384]	; (800544c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80052cc:	400b      	ands	r3, r1
 80052ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80052d0:	430b      	orrs	r3, r1
 80052d2:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052d4:	2e01      	cmp	r6, #1
 80052d6:	d115      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d8:	4a5a      	ldr	r2, [pc, #360]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80052da:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80052dc:	495d      	ldr	r1, [pc, #372]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80052de:	400b      	ands	r3, r1
 80052e0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80052e2:	e00f      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 80052e4:	f7fe fc38 	bl	8003b58 <HAL_GetTick>
 80052e8:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ea:	4b56      	ldr	r3, [pc, #344]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80052ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ee:	079b      	lsls	r3, r3, #30
 80052f0:	d4e7      	bmi.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fe fc31 	bl	8003b58 <HAL_GetTick>
 80052f6:	1bc0      	subs	r0, r0, r7
 80052f8:	4b57      	ldr	r3, [pc, #348]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80052fa:	4298      	cmp	r0, r3
 80052fc:	d9f5      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 80052fe:	2503      	movs	r5, #3
 8005300:	e7df      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005302:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	07db      	lsls	r3, r3, #31
 8005308:	d506      	bpl.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800530a:	4a4e      	ldr	r2, [pc, #312]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800530c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800530e:	2103      	movs	r1, #3
 8005310:	438b      	bics	r3, r1
 8005312:	6861      	ldr	r1, [r4, #4]
 8005314:	430b      	orrs	r3, r1
 8005316:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	079b      	lsls	r3, r3, #30
 800531c:	d506      	bpl.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800531e:	4a49      	ldr	r2, [pc, #292]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005320:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005322:	210c      	movs	r1, #12
 8005324:	438b      	bics	r3, r1
 8005326:	68a1      	ldr	r1, [r4, #8]
 8005328:	430b      	orrs	r3, r1
 800532a:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	06db      	lsls	r3, r3, #27
 8005330:	d506      	bpl.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005332:	4a44      	ldr	r2, [pc, #272]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005334:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005336:	4949      	ldr	r1, [pc, #292]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005338:	400b      	ands	r3, r1
 800533a:	68e1      	ldr	r1, [r4, #12]
 800533c:	430b      	orrs	r3, r1
 800533e:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	059b      	lsls	r3, r3, #22
 8005344:	d506      	bpl.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005346:	4a3f      	ldr	r2, [pc, #252]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005348:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800534a:	4945      	ldr	r1, [pc, #276]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800534c:	400b      	ands	r3, r1
 800534e:	69a1      	ldr	r1, [r4, #24]
 8005350:	430b      	orrs	r3, r1
 8005352:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	055b      	lsls	r3, r3, #21
 8005358:	d506      	bpl.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800535a:	4a3a      	ldr	r2, [pc, #232]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800535c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800535e:	4941      	ldr	r1, [pc, #260]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005360:	400b      	ands	r3, r1
 8005362:	69e1      	ldr	r1, [r4, #28]
 8005364:	430b      	orrs	r3, r1
 8005366:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	069b      	lsls	r3, r3, #26
 800536c:	d506      	bpl.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800536e:	4a35      	ldr	r2, [pc, #212]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005370:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005372:	493d      	ldr	r1, [pc, #244]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005374:	400b      	ands	r3, r1
 8005376:	6921      	ldr	r1, [r4, #16]
 8005378:	430b      	orrs	r3, r1
 800537a:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	045b      	lsls	r3, r3, #17
 8005380:	d50b      	bpl.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005382:	4a30      	ldr	r2, [pc, #192]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005384:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	6a21      	ldr	r1, [r4, #32]
 800538c:	430b      	orrs	r3, r1
 800538e:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	05db      	lsls	r3, r3, #23
 8005394:	6a22      	ldr	r2, [r4, #32]
 8005396:	429a      	cmp	r2, r3
 8005398:	d039      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	031b      	lsls	r3, r3, #12
 800539e:	d506      	bpl.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80053a0:	4a28      	ldr	r2, [pc, #160]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80053a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	438b      	bics	r3, r1
 80053a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80053aa:	430b      	orrs	r3, r1
 80053ac:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	029b      	lsls	r3, r3, #10
 80053b2:	d50b      	bpl.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80053b4:	4a23      	ldr	r2, [pc, #140]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80053b6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053b8:	492c      	ldr	r1, [pc, #176]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80053ba:	400b      	ands	r3, r1
 80053bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80053be:	430b      	orrs	r3, r1
 80053c0:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	03db      	lsls	r3, r3, #15
 80053c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d027      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	025b      	lsls	r3, r3, #9
 80053d0:	d50b      	bpl.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80053d2:	4a1c      	ldr	r2, [pc, #112]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80053d4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053d6:	4926      	ldr	r1, [pc, #152]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80053d8:	400b      	ands	r3, r1
 80053da:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053dc:	430b      	orrs	r3, r1
 80053de:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	045b      	lsls	r3, r3, #17
 80053e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d01f      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	051b      	lsls	r3, r3, #20
 80053ee:	d50b      	bpl.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80053f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80053f4:	491f      	ldr	r1, [pc, #124]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80053f6:	400b      	ands	r3, r1
 80053f8:	6961      	ldr	r1, [r4, #20]
 80053fa:	430b      	orrs	r3, r1
 80053fc:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80053fe:	6962      	ldr	r2, [r4, #20]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	01db      	lsls	r3, r3, #7
 8005404:	429a      	cmp	r2, r3
 8005406:	d015      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x204>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8005408:	0028      	movs	r0, r5
 800540a:	b003      	add	sp, #12
 800540c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800540e:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005410:	68d1      	ldr	r1, [r2, #12]
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	025b      	lsls	r3, r3, #9
 8005416:	430b      	orrs	r3, r1
 8005418:	60d3      	str	r3, [r2, #12]
 800541a:	e7be      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800541c:	4a09      	ldr	r2, [pc, #36]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800541e:	68d1      	ldr	r1, [r2, #12]
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	045b      	lsls	r3, r3, #17
 8005424:	430b      	orrs	r3, r1
 8005426:	60d3      	str	r3, [r2, #12]
 8005428:	e7d0      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800542a:	4a06      	ldr	r2, [pc, #24]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800542c:	68d1      	ldr	r1, [r2, #12]
 800542e:	430b      	orrs	r3, r1
 8005430:	60d3      	str	r3, [r2, #12]
 8005432:	e7da      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005434:	4a03      	ldr	r2, [pc, #12]	; (8005444 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8005436:	68d1      	ldr	r1, [r2, #12]
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	025b      	lsls	r3, r3, #9
 800543c:	430b      	orrs	r3, r1
 800543e:	60d3      	str	r3, [r2, #12]
 8005440:	e7e2      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	40021000 	.word	0x40021000
 8005448:	40007000 	.word	0x40007000
 800544c:	fffffcff 	.word	0xfffffcff
 8005450:	fffeffff 	.word	0xfffeffff
 8005454:	efffffff 	.word	0xefffffff
 8005458:	00001388 	.word	0x00001388
 800545c:	fffff3ff 	.word	0xfffff3ff
 8005460:	fff3ffff 	.word	0xfff3ffff
 8005464:	ffcfffff 	.word	0xffcfffff
 8005468:	ffffcfff 	.word	0xffffcfff
 800546c:	ffbfffff 	.word	0xffbfffff
 8005470:	feffffff 	.word	0xfeffffff
 8005474:	ffff3fff 	.word	0xffff3fff

08005478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	1e04      	subs	r4, r0, #0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800547c:	d100      	bne.n	8005480 <HAL_SPI_Init+0x8>
 800547e:	e078      	b.n	8005572 <HAL_SPI_Init+0xfa>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005480:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005482:	2b00      	cmp	r3, #0
 8005484:	d107      	bne.n	8005496 <HAL_SPI_Init+0x1e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005486:	3305      	adds	r3, #5
 8005488:	33ff      	adds	r3, #255	; 0xff
 800548a:	6842      	ldr	r2, [r0, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d005      	beq.n	800549c <HAL_SPI_Init+0x24>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005490:	2300      	movs	r3, #0
 8005492:	61c3      	str	r3, [r0, #28]
 8005494:	e002      	b.n	800549c <HAL_SPI_Init+0x24>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005496:	2300      	movs	r3, #0
 8005498:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800549a:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800549c:	2300      	movs	r3, #0
 800549e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a0:	335d      	adds	r3, #93	; 0x5d
 80054a2:	5ce3      	ldrb	r3, [r4, r3]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d05a      	beq.n	800555e <HAL_SPI_Init+0xe6>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054a8:	235d      	movs	r3, #93	; 0x5d
 80054aa:	2202      	movs	r2, #2
 80054ac:	54e2      	strb	r2, [r4, r3]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ae:	6822      	ldr	r2, [r4, #0]
 80054b0:	6813      	ldr	r3, [r2, #0]
 80054b2:	2140      	movs	r1, #64	; 0x40
 80054b4:	438b      	bics	r3, r1
 80054b6:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054b8:	68e3      	ldr	r3, [r4, #12]
 80054ba:	22e0      	movs	r2, #224	; 0xe0
 80054bc:	00d2      	lsls	r2, r2, #3
 80054be:	4293      	cmp	r3, r2
 80054c0:	d954      	bls.n	800556c <HAL_SPI_Init+0xf4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054c2:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054c4:	21f0      	movs	r1, #240	; 0xf0
 80054c6:	0109      	lsls	r1, r1, #4
 80054c8:	428b      	cmp	r3, r1
 80054ca:	d005      	beq.n	80054d8 <HAL_SPI_Init+0x60>
 80054cc:	21e0      	movs	r1, #224	; 0xe0
 80054ce:	00c9      	lsls	r1, r1, #3
 80054d0:	428b      	cmp	r3, r1
 80054d2:	d001      	beq.n	80054d8 <HAL_SPI_Init+0x60>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054d8:	2382      	movs	r3, #130	; 0x82
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	6861      	ldr	r1, [r4, #4]
 80054de:	400b      	ands	r3, r1
 80054e0:	2184      	movs	r1, #132	; 0x84
 80054e2:	0209      	lsls	r1, r1, #8
 80054e4:	68a0      	ldr	r0, [r4, #8]
 80054e6:	4001      	ands	r1, r0
 80054e8:	430b      	orrs	r3, r1
 80054ea:	2102      	movs	r1, #2
 80054ec:	6920      	ldr	r0, [r4, #16]
 80054ee:	4001      	ands	r1, r0
 80054f0:	430b      	orrs	r3, r1
 80054f2:	2101      	movs	r1, #1
 80054f4:	6960      	ldr	r0, [r4, #20]
 80054f6:	4008      	ands	r0, r1
 80054f8:	4303      	orrs	r3, r0
 80054fa:	2080      	movs	r0, #128	; 0x80
 80054fc:	0080      	lsls	r0, r0, #2
 80054fe:	69a5      	ldr	r5, [r4, #24]
 8005500:	4028      	ands	r0, r5
 8005502:	4303      	orrs	r3, r0
 8005504:	2038      	movs	r0, #56	; 0x38
 8005506:	69e5      	ldr	r5, [r4, #28]
 8005508:	4028      	ands	r0, r5
 800550a:	4303      	orrs	r3, r0
 800550c:	2080      	movs	r0, #128	; 0x80
 800550e:	6a25      	ldr	r5, [r4, #32]
 8005510:	4028      	ands	r0, r5
 8005512:	4303      	orrs	r3, r0
 8005514:	2080      	movs	r0, #128	; 0x80
 8005516:	0180      	lsls	r0, r0, #6
 8005518:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800551a:	4028      	ands	r0, r5
 800551c:	4303      	orrs	r3, r0
 800551e:	6820      	ldr	r0, [r4, #0]
 8005520:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005522:	8b60      	ldrh	r0, [r4, #26]
 8005524:	2304      	movs	r3, #4
 8005526:	4003      	ands	r3, r0
 8005528:	2010      	movs	r0, #16
 800552a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800552c:	4028      	ands	r0, r5
 800552e:	4303      	orrs	r3, r0
 8005530:	2008      	movs	r0, #8
 8005532:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005534:	4028      	ands	r0, r5
 8005536:	4303      	orrs	r3, r0
 8005538:	20f0      	movs	r0, #240	; 0xf0
 800553a:	0100      	lsls	r0, r0, #4
 800553c:	68e5      	ldr	r5, [r4, #12]
 800553e:	4028      	ands	r0, r5
 8005540:	4303      	orrs	r3, r0
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	6043      	str	r3, [r0, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	69d3      	ldr	r3, [r2, #28]
 800554c:	480a      	ldr	r0, [pc, #40]	; (8005578 <HAL_SPI_Init+0x100>)
 800554e:	4003      	ands	r3, r0
 8005550:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005552:	2300      	movs	r3, #0
 8005554:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005556:	335d      	adds	r3, #93	; 0x5d
 8005558:	54e1      	strb	r1, [r4, r3]

  return HAL_OK;
 800555a:	2000      	movs	r0, #0
}
 800555c:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 800555e:	335c      	adds	r3, #92	; 0x5c
 8005560:	2200      	movs	r2, #0
 8005562:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8005564:	0020      	movs	r0, r4
 8005566:	f7fe f911 	bl	800378c <HAL_SPI_MspInit>
 800556a:	e79d      	b.n	80054a8 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800556c:	2280      	movs	r2, #128	; 0x80
 800556e:	0152      	lsls	r2, r2, #5
 8005570:	e7a8      	b.n	80054c4 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8005572:	2001      	movs	r0, #1
 8005574:	e7f2      	b.n	800555c <HAL_SPI_Init+0xe4>
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	fffff7ff 	.word	0xfffff7ff

0800557c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800557e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005580:	6a04      	ldr	r4, [r0, #32]
 8005582:	2501      	movs	r5, #1
 8005584:	43ac      	bics	r4, r5
 8005586:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005588:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800558a:	35ef      	adds	r5, #239	; 0xef
 800558c:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800558e:	0112      	lsls	r2, r2, #4
 8005590:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005592:	240a      	movs	r4, #10
 8005594:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8005596:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005598:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800559a:	6203      	str	r3, [r0, #32]
}
 800559c:	bd30      	pop	{r4, r5, pc}
	...

080055a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a0:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a2:	6a03      	ldr	r3, [r0, #32]
 80055a4:	2410      	movs	r4, #16
 80055a6:	43a3      	bics	r3, r4
 80055a8:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055aa:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80055ac:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055ae:	4d05      	ldr	r5, [pc, #20]	; (80055c4 <TIM_TI2_ConfigInputStage+0x24>)
 80055b0:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b2:	0312      	lsls	r2, r2, #12
 80055b4:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b6:	24a0      	movs	r4, #160	; 0xa0
 80055b8:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ba:	0109      	lsls	r1, r1, #4
 80055bc:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80055c0:	6201      	str	r1, [r0, #32]
}
 80055c2:	bd30      	pop	{r4, r5, pc}
 80055c4:	ffff0fff 	.word	0xffff0fff

080055c8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055c8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ca:	4a03      	ldr	r2, [pc, #12]	; (80055d8 <TIM_ITRx_SetConfig+0x10>)
 80055cc:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ce:	430b      	orrs	r3, r1
 80055d0:	2107      	movs	r1, #7
 80055d2:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055d4:	6083      	str	r3, [r0, #8]
}
 80055d6:	4770      	bx	lr
 80055d8:	ffcfff8f 	.word	0xffcfff8f

080055dc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80055dc:	233d      	movs	r3, #61	; 0x3d
 80055de:	5cc3      	ldrb	r3, [r0, r3]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d129      	bne.n	8005638 <HAL_TIM_Base_Start_IT+0x5c>
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	333c      	adds	r3, #60	; 0x3c
 80055e6:	2202      	movs	r2, #2
 80055e8:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ea:	6802      	ldr	r2, [r0, #0]
 80055ec:	68d3      	ldr	r3, [r2, #12]
 80055ee:	2101      	movs	r1, #1
 80055f0:	430b      	orrs	r3, r1
 80055f2:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055f4:	6803      	ldr	r3, [r0, #0]
 80055f6:	4a13      	ldr	r2, [pc, #76]	; (8005644 <HAL_TIM_Base_Start_IT+0x68>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00f      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x40>
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	05d2      	lsls	r2, r2, #23
 8005600:	4293      	cmp	r3, r2
 8005602:	d00b      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x40>
 8005604:	4a10      	ldr	r2, [pc, #64]	; (8005648 <HAL_TIM_Base_Start_IT+0x6c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d008      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x40>
 800560a:	4a10      	ldr	r2, [pc, #64]	; (800564c <HAL_TIM_Base_Start_IT+0x70>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d005      	beq.n	800561c <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	2101      	movs	r1, #1
 8005614:	430a      	orrs	r2, r1
 8005616:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005618:	2000      	movs	r0, #0
 800561a:	e00e      	b.n	800563a <HAL_TIM_Base_Start_IT+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	490c      	ldr	r1, [pc, #48]	; (8005650 <HAL_TIM_Base_Start_IT+0x74>)
 8005620:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005622:	2a06      	cmp	r2, #6
 8005624:	d00a      	beq.n	800563c <HAL_TIM_Base_Start_IT+0x60>
 8005626:	3907      	subs	r1, #7
 8005628:	428a      	cmp	r2, r1
 800562a:	d009      	beq.n	8005640 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	2101      	movs	r1, #1
 8005630:	430a      	orrs	r2, r1
 8005632:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005634:	2000      	movs	r0, #0
 8005636:	e000      	b.n	800563a <HAL_TIM_Base_Start_IT+0x5e>
    return HAL_ERROR;
 8005638:	2001      	movs	r0, #1
}
 800563a:	4770      	bx	lr
  return HAL_OK;
 800563c:	2000      	movs	r0, #0
 800563e:	e7fc      	b.n	800563a <HAL_TIM_Base_Start_IT+0x5e>
 8005640:	2000      	movs	r0, #0
 8005642:	e7fa      	b.n	800563a <HAL_TIM_Base_Start_IT+0x5e>
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40000400 	.word	0x40000400
 800564c:	40014000 	.word	0x40014000
 8005650:	00010007 	.word	0x00010007

08005654 <HAL_TIM_PeriodElapsedCallback>:
}
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_IC_CaptureCallback>:
}
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800565a:	4770      	bx	lr

0800565c <HAL_TIM_TriggerCallback>:
}
 800565c:	4770      	bx	lr
	...

08005660 <HAL_TIM_IRQHandler>:
{
 8005660:	b510      	push	{r4, lr}
 8005662:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005664:	6803      	ldr	r3, [r0, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	0792      	lsls	r2, r2, #30
 800566a:	d50f      	bpl.n	800568c <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	0792      	lsls	r2, r2, #30
 8005670:	d50c      	bpl.n	800568c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005672:	2203      	movs	r2, #3
 8005674:	4252      	negs	r2, r2
 8005676:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005678:	2301      	movs	r3, #1
 800567a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567c:	6803      	ldr	r3, [r0, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	079b      	lsls	r3, r3, #30
 8005682:	d06a      	beq.n	800575a <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 8005684:	f7ff ffe8 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005688:	2300      	movs	r3, #0
 800568a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	0752      	lsls	r2, r2, #29
 8005692:	d512      	bpl.n	80056ba <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	0752      	lsls	r2, r2, #29
 8005698:	d50f      	bpl.n	80056ba <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800569a:	2205      	movs	r2, #5
 800569c:	4252      	negs	r2, r2
 800569e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a0:	2302      	movs	r3, #2
 80056a2:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	23c0      	movs	r3, #192	; 0xc0
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	421a      	tst	r2, r3
 80056ae:	d05a      	beq.n	8005766 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80056b0:	0020      	movs	r0, r4
 80056b2:	f7ff ffd1 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	2300      	movs	r3, #0
 80056b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	691a      	ldr	r2, [r3, #16]
 80056be:	0712      	lsls	r2, r2, #28
 80056c0:	d510      	bpl.n	80056e4 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	0712      	lsls	r2, r2, #28
 80056c6:	d50d      	bpl.n	80056e4 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c8:	2209      	movs	r2, #9
 80056ca:	4252      	negs	r2, r2
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ce:	2304      	movs	r3, #4
 80056d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	079b      	lsls	r3, r3, #30
 80056d8:	d04c      	beq.n	8005774 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 80056da:	0020      	movs	r0, r4
 80056dc:	f7ff ffbc 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e0:	2300      	movs	r3, #0
 80056e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	06d2      	lsls	r2, r2, #27
 80056ea:	d512      	bpl.n	8005712 <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	06d2      	lsls	r2, r2, #27
 80056f0:	d50f      	bpl.n	8005712 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f2:	2211      	movs	r2, #17
 80056f4:	4252      	negs	r2, r2
 80056f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056f8:	2308      	movs	r3, #8
 80056fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	23c0      	movs	r3, #192	; 0xc0
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	421a      	tst	r2, r3
 8005706:	d03c      	beq.n	8005782 <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8005708:	0020      	movs	r0, r4
 800570a:	f7ff ffa5 	bl	8005658 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	2300      	movs	r3, #0
 8005710:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	691a      	ldr	r2, [r3, #16]
 8005716:	07d2      	lsls	r2, r2, #31
 8005718:	d502      	bpl.n	8005720 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	07d2      	lsls	r2, r2, #31
 800571e:	d437      	bmi.n	8005790 <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	0612      	lsls	r2, r2, #24
 8005726:	d502      	bpl.n	800572e <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	0612      	lsls	r2, r2, #24
 800572c:	d437      	bmi.n	800579e <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800572e:	6823      	ldr	r3, [r4, #0]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	05d2      	lsls	r2, r2, #23
 8005734:	d502      	bpl.n	800573c <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	0612      	lsls	r2, r2, #24
 800573a:	d437      	bmi.n	80057ac <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	0652      	lsls	r2, r2, #25
 8005742:	d502      	bpl.n	800574a <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	0652      	lsls	r2, r2, #25
 8005748:	d436      	bmi.n	80057b8 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	0692      	lsls	r2, r2, #26
 8005750:	d502      	bpl.n	8005758 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	0692      	lsls	r2, r2, #26
 8005756:	d436      	bmi.n	80057c6 <HAL_TIM_IRQHandler+0x166>
}
 8005758:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	f7ff ff7c 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575e:	0020      	movs	r0, r4
 8005760:	f7ff ff7b 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 8005764:	e790      	b.n	8005688 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	0020      	movs	r0, r4
 8005768:	f7ff ff75 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	0020      	movs	r0, r4
 800576e:	f7ff ff74 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 8005772:	e7a0      	b.n	80056b6 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005774:	0020      	movs	r0, r4
 8005776:	f7ff ff6e 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577a:	0020      	movs	r0, r4
 800577c:	f7ff ff6d 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 8005780:	e7ae      	b.n	80056e0 <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005782:	0020      	movs	r0, r4
 8005784:	f7ff ff67 	bl	8005656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005788:	0020      	movs	r0, r4
 800578a:	f7ff ff66 	bl	800565a <HAL_TIM_PWM_PulseFinishedCallback>
 800578e:	e7be      	b.n	800570e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005790:	2202      	movs	r2, #2
 8005792:	4252      	negs	r2, r2
 8005794:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005796:	0020      	movs	r0, r4
 8005798:	f7ff ff5c 	bl	8005654 <HAL_TIM_PeriodElapsedCallback>
 800579c:	e7c0      	b.n	8005720 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800579e:	2281      	movs	r2, #129	; 0x81
 80057a0:	4252      	negs	r2, r2
 80057a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80057a4:	0020      	movs	r0, r4
 80057a6:	f000 f96a 	bl	8005a7e <HAL_TIMEx_BreakCallback>
 80057aa:	e7c0      	b.n	800572e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057ac:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <HAL_TIM_IRQHandler+0x174>)
 80057ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80057b0:	0020      	movs	r0, r4
 80057b2:	f000 f965 	bl	8005a80 <HAL_TIMEx_Break2Callback>
 80057b6:	e7c1      	b.n	800573c <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057b8:	2241      	movs	r2, #65	; 0x41
 80057ba:	4252      	negs	r2, r2
 80057bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80057be:	0020      	movs	r0, r4
 80057c0:	f7ff ff4c 	bl	800565c <HAL_TIM_TriggerCallback>
 80057c4:	e7c1      	b.n	800574a <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c6:	2221      	movs	r2, #33	; 0x21
 80057c8:	4252      	negs	r2, r2
 80057ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80057cc:	0020      	movs	r0, r4
 80057ce:	f000 f955 	bl	8005a7c <HAL_TIMEx_CommutCallback>
}
 80057d2:	e7c1      	b.n	8005758 <HAL_TIM_IRQHandler+0xf8>
 80057d4:	fffffeff 	.word	0xfffffeff

080057d8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80057d8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057da:	4a21      	ldr	r2, [pc, #132]	; (8005860 <TIM_Base_SetConfig+0x88>)
 80057dc:	4290      	cmp	r0, r2
 80057de:	d006      	beq.n	80057ee <TIM_Base_SetConfig+0x16>
 80057e0:	2280      	movs	r2, #128	; 0x80
 80057e2:	05d2      	lsls	r2, r2, #23
 80057e4:	4290      	cmp	r0, r2
 80057e6:	d002      	beq.n	80057ee <TIM_Base_SetConfig+0x16>
 80057e8:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <TIM_Base_SetConfig+0x8c>)
 80057ea:	4290      	cmp	r0, r2
 80057ec:	d103      	bne.n	80057f6 <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ee:	2270      	movs	r2, #112	; 0x70
 80057f0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80057f2:	684a      	ldr	r2, [r1, #4]
 80057f4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057f6:	4a1a      	ldr	r2, [pc, #104]	; (8005860 <TIM_Base_SetConfig+0x88>)
 80057f8:	4290      	cmp	r0, r2
 80057fa:	d012      	beq.n	8005822 <TIM_Base_SetConfig+0x4a>
 80057fc:	2280      	movs	r2, #128	; 0x80
 80057fe:	05d2      	lsls	r2, r2, #23
 8005800:	4290      	cmp	r0, r2
 8005802:	d00e      	beq.n	8005822 <TIM_Base_SetConfig+0x4a>
 8005804:	4a17      	ldr	r2, [pc, #92]	; (8005864 <TIM_Base_SetConfig+0x8c>)
 8005806:	4290      	cmp	r0, r2
 8005808:	d00b      	beq.n	8005822 <TIM_Base_SetConfig+0x4a>
 800580a:	4a17      	ldr	r2, [pc, #92]	; (8005868 <TIM_Base_SetConfig+0x90>)
 800580c:	4290      	cmp	r0, r2
 800580e:	d008      	beq.n	8005822 <TIM_Base_SetConfig+0x4a>
 8005810:	4a16      	ldr	r2, [pc, #88]	; (800586c <TIM_Base_SetConfig+0x94>)
 8005812:	4290      	cmp	r0, r2
 8005814:	d005      	beq.n	8005822 <TIM_Base_SetConfig+0x4a>
 8005816:	4a16      	ldr	r2, [pc, #88]	; (8005870 <TIM_Base_SetConfig+0x98>)
 8005818:	4290      	cmp	r0, r2
 800581a:	d002      	beq.n	8005822 <TIM_Base_SetConfig+0x4a>
 800581c:	4a15      	ldr	r2, [pc, #84]	; (8005874 <TIM_Base_SetConfig+0x9c>)
 800581e:	4290      	cmp	r0, r2
 8005820:	d103      	bne.n	800582a <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005822:	4a15      	ldr	r2, [pc, #84]	; (8005878 <TIM_Base_SetConfig+0xa0>)
 8005824:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	68ca      	ldr	r2, [r1, #12]
 8005828:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	4393      	bics	r3, r2
 800582e:	694a      	ldr	r2, [r1, #20]
 8005830:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005832:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005834:	688b      	ldr	r3, [r1, #8]
 8005836:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005838:	680b      	ldr	r3, [r1, #0]
 800583a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800583c:	4b08      	ldr	r3, [pc, #32]	; (8005860 <TIM_Base_SetConfig+0x88>)
 800583e:	4298      	cmp	r0, r3
 8005840:	d008      	beq.n	8005854 <TIM_Base_SetConfig+0x7c>
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <TIM_Base_SetConfig+0x94>)
 8005844:	4298      	cmp	r0, r3
 8005846:	d005      	beq.n	8005854 <TIM_Base_SetConfig+0x7c>
 8005848:	4b09      	ldr	r3, [pc, #36]	; (8005870 <TIM_Base_SetConfig+0x98>)
 800584a:	4298      	cmp	r0, r3
 800584c:	d002      	beq.n	8005854 <TIM_Base_SetConfig+0x7c>
 800584e:	4b09      	ldr	r3, [pc, #36]	; (8005874 <TIM_Base_SetConfig+0x9c>)
 8005850:	4298      	cmp	r0, r3
 8005852:	d101      	bne.n	8005858 <TIM_Base_SetConfig+0x80>
    TIMx->RCR = Structure->RepetitionCounter;
 8005854:	690b      	ldr	r3, [r1, #16]
 8005856:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005858:	2301      	movs	r3, #1
 800585a:	6143      	str	r3, [r0, #20]
}
 800585c:	4770      	bx	lr
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	40012c00 	.word	0x40012c00
 8005864:	40000400 	.word	0x40000400
 8005868:	40002000 	.word	0x40002000
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800
 8005878:	fffffcff 	.word	0xfffffcff

0800587c <HAL_TIM_Base_Init>:
{
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8005880:	d02a      	beq.n	80058d8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005882:	233d      	movs	r3, #61	; 0x3d
 8005884:	5cc3      	ldrb	r3, [r0, r3]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d020      	beq.n	80058cc <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800588a:	253d      	movs	r5, #61	; 0x3d
 800588c:	2302      	movs	r3, #2
 800588e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	0021      	movs	r1, r4
 8005892:	c901      	ldmia	r1!, {r0}
 8005894:	f7ff ffa0 	bl	80057d8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005898:	2301      	movs	r3, #1
 800589a:	2248      	movs	r2, #72	; 0x48
 800589c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589e:	3a0a      	subs	r2, #10
 80058a0:	54a3      	strb	r3, [r4, r2]
 80058a2:	3201      	adds	r2, #1
 80058a4:	54a3      	strb	r3, [r4, r2]
 80058a6:	3201      	adds	r2, #1
 80058a8:	54a3      	strb	r3, [r4, r2]
 80058aa:	3201      	adds	r2, #1
 80058ac:	54a3      	strb	r3, [r4, r2]
 80058ae:	3201      	adds	r2, #1
 80058b0:	54a3      	strb	r3, [r4, r2]
 80058b2:	3201      	adds	r2, #1
 80058b4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b6:	3201      	adds	r2, #1
 80058b8:	54a3      	strb	r3, [r4, r2]
 80058ba:	3201      	adds	r2, #1
 80058bc:	54a3      	strb	r3, [r4, r2]
 80058be:	3201      	adds	r2, #1
 80058c0:	54a3      	strb	r3, [r4, r2]
 80058c2:	3201      	adds	r2, #1
 80058c4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80058c6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80058c8:	2000      	movs	r0, #0
}
 80058ca:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80058cc:	333c      	adds	r3, #60	; 0x3c
 80058ce:	2200      	movs	r2, #0
 80058d0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80058d2:	f7fd ff89 	bl	80037e8 <HAL_TIM_Base_MspInit>
 80058d6:	e7d8      	b.n	800588a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80058d8:	2001      	movs	r0, #1
 80058da:	e7f6      	b.n	80058ca <HAL_TIM_Base_Init+0x4e>

080058dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058dc:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e0:	4d03      	ldr	r5, [pc, #12]	; (80058f0 <TIM_ETR_SetConfig+0x14>)
 80058e2:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	4313      	orrs	r3, r2
 80058e8:	430b      	orrs	r3, r1
 80058ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ec:	6083      	str	r3, [r0, #8]
}
 80058ee:	bd30      	pop	{r4, r5, pc}
 80058f0:	ffff00ff 	.word	0xffff00ff

080058f4 <HAL_TIM_ConfigClockSource>:
{
 80058f4:	b510      	push	{r4, lr}
 80058f6:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80058f8:	233c      	movs	r3, #60	; 0x3c
 80058fa:	5cc3      	ldrb	r3, [r0, r3]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d100      	bne.n	8005902 <HAL_TIM_ConfigClockSource+0xe>
 8005900:	e078      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x100>
 8005902:	233c      	movs	r3, #60	; 0x3c
 8005904:	2201      	movs	r2, #1
 8005906:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	3301      	adds	r3, #1
 800590a:	3201      	adds	r2, #1
 800590c:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 800590e:	6802      	ldr	r2, [r0, #0]
 8005910:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005912:	4839      	ldr	r0, [pc, #228]	; (80059f8 <HAL_TIM_ConfigClockSource+0x104>)
 8005914:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8005916:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8005918:	680b      	ldr	r3, [r1, #0]
 800591a:	2b60      	cmp	r3, #96	; 0x60
 800591c:	d050      	beq.n	80059c0 <HAL_TIM_ConfigClockSource+0xcc>
 800591e:	d82a      	bhi.n	8005976 <HAL_TIM_ConfigClockSource+0x82>
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d058      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0xe2>
 8005924:	d90c      	bls.n	8005940 <HAL_TIM_ConfigClockSource+0x4c>
 8005926:	2b50      	cmp	r3, #80	; 0x50
 8005928:	d123      	bne.n	8005972 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	68ca      	ldr	r2, [r1, #12]
 800592c:	6849      	ldr	r1, [r1, #4]
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	f7ff fe24 	bl	800557c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005934:	2150      	movs	r1, #80	; 0x50
 8005936:	6820      	ldr	r0, [r4, #0]
 8005938:	f7ff fe46 	bl	80055c8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800593c:	2000      	movs	r0, #0
      break;
 800593e:	e005      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8005940:	2b20      	cmp	r3, #32
 8005942:	d00e      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x6e>
 8005944:	d909      	bls.n	800595a <HAL_TIM_ConfigClockSource+0x66>
 8005946:	2b30      	cmp	r3, #48	; 0x30
 8005948:	d00b      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 800594a:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800594c:	233d      	movs	r3, #61	; 0x3d
 800594e:	2201      	movs	r2, #1
 8005950:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8005952:	3b01      	subs	r3, #1
 8005954:	2200      	movs	r2, #0
 8005956:	54e2      	strb	r2, [r4, r3]
}
 8005958:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x6e>
 800595e:	2b10      	cmp	r3, #16
 8005960:	d105      	bne.n	800596e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005962:	0019      	movs	r1, r3
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	f7ff fe2f 	bl	80055c8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2000      	movs	r0, #0
      break;
 800596c:	e7ee      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 800596e:	2001      	movs	r0, #1
 8005970:	e7ec      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
 8005972:	2001      	movs	r0, #1
 8005974:	e7ea      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	0152      	lsls	r2, r2, #5
 800597a:	4293      	cmp	r3, r2
 800597c:	d036      	beq.n	80059ec <HAL_TIM_ConfigClockSource+0xf8>
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	0192      	lsls	r2, r2, #6
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 8005986:	68cb      	ldr	r3, [r1, #12]
 8005988:	684a      	ldr	r2, [r1, #4]
 800598a:	6889      	ldr	r1, [r1, #8]
 800598c:	6820      	ldr	r0, [r4, #0]
 800598e:	f7ff ffa5 	bl	80058dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	6891      	ldr	r1, [r2, #8]
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	01db      	lsls	r3, r3, #7
 800599a:	430b      	orrs	r3, r1
 800599c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2000      	movs	r0, #0
      break;
 80059a0:	e7d4      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80059a2:	2b70      	cmp	r3, #112	; 0x70
 80059a4:	d124      	bne.n	80059f0 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 80059a6:	68cb      	ldr	r3, [r1, #12]
 80059a8:	684a      	ldr	r2, [r1, #4]
 80059aa:	6889      	ldr	r1, [r1, #8]
 80059ac:	6820      	ldr	r0, [r4, #0]
 80059ae:	f7ff ff95 	bl	80058dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80059b2:	6822      	ldr	r2, [r4, #0]
 80059b4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059b6:	2177      	movs	r1, #119	; 0x77
 80059b8:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80059ba:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80059bc:	2000      	movs	r0, #0
      break;
 80059be:	e7c5      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c0:	68ca      	ldr	r2, [r1, #12]
 80059c2:	6849      	ldr	r1, [r1, #4]
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	f7ff fdeb 	bl	80055a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059ca:	2160      	movs	r1, #96	; 0x60
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	f7ff fdfb 	bl	80055c8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80059d2:	2000      	movs	r0, #0
      break;
 80059d4:	e7ba      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d6:	68ca      	ldr	r2, [r1, #12]
 80059d8:	6849      	ldr	r1, [r1, #4]
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	f7ff fdce 	bl	800557c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059e0:	2140      	movs	r1, #64	; 0x40
 80059e2:	6820      	ldr	r0, [r4, #0]
 80059e4:	f7ff fdf0 	bl	80055c8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80059e8:	2000      	movs	r0, #0
      break;
 80059ea:	e7af      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80059ec:	2000      	movs	r0, #0
 80059ee:	e7ad      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 80059f0:	2001      	movs	r0, #1
 80059f2:	e7ab      	b.n	800594c <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 80059f4:	2002      	movs	r0, #2
 80059f6:	e7af      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x64>
 80059f8:	ffce0088 	.word	0xffce0088

080059fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059fc:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fe:	233c      	movs	r3, #60	; 0x3c
 8005a00:	5cc3      	ldrb	r3, [r0, r3]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d030      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8005a06:	233c      	movs	r3, #60	; 0x3c
 8005a08:	2201      	movs	r2, #1
 8005a0a:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	3201      	adds	r2, #1
 8005a10:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a12:	6802      	ldr	r2, [r0, #0]
 8005a14:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a16:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a18:	4d14      	ldr	r5, [pc, #80]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8005a1a:	42aa      	cmp	r2, r5
 8005a1c:	d01f      	beq.n	8005a5e <HAL_TIMEx_MasterConfigSynchronization+0x62>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1e:	2570      	movs	r5, #112	; 0x70
 8005a20:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a22:	680d      	ldr	r5, [r1, #0]
 8005a24:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a26:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a28:	6803      	ldr	r3, [r0, #0]
 8005a2a:	4a10      	ldr	r2, [pc, #64]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	05d2      	lsls	r2, r2, #23
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d005      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005a38:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d002      	beq.n	8005a44 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8005a3e:	4a0d      	ldr	r2, [pc, #52]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d104      	bne.n	8005a4e <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a44:	2280      	movs	r2, #128	; 0x80
 8005a46:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a48:	688a      	ldr	r2, [r1, #8]
 8005a4a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a4c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a4e:	233d      	movs	r3, #61	; 0x3d
 8005a50:	2201      	movs	r2, #1
 8005a52:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005a54:	3b01      	subs	r3, #1
 8005a56:	2200      	movs	r2, #0
 8005a58:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005a5a:	2000      	movs	r0, #0
}
 8005a5c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a5e:	4d06      	ldr	r5, [pc, #24]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8005a60:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a62:	684d      	ldr	r5, [r1, #4]
 8005a64:	432b      	orrs	r3, r5
 8005a66:	e7da      	b.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8005a68:	2002      	movs	r0, #2
 8005a6a:	e7f7      	b.n	8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	ff0fffff 	.word	0xff0fffff

08005a7c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a80:	4770      	bx	lr
	...

08005a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	0004      	movs	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a88:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a8a:	6883      	ldr	r3, [r0, #8]
 8005a8c:	6902      	ldr	r2, [r0, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	6942      	ldr	r2, [r0, #20]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	69c2      	ldr	r2, [r0, #28]
 8005a96:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a98:	680a      	ldr	r2, [r1, #0]
 8005a9a:	48aa      	ldr	r0, [pc, #680]	; (8005d44 <UART_SetConfig+0x2c0>)
 8005a9c:	4002      	ands	r2, r0
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa2:	6822      	ldr	r2, [r4, #0]
 8005aa4:	6853      	ldr	r3, [r2, #4]
 8005aa6:	49a8      	ldr	r1, [pc, #672]	; (8005d48 <UART_SetConfig+0x2c4>)
 8005aa8:	400b      	ands	r3, r1
 8005aaa:	68e1      	ldr	r1, [r4, #12]
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ab0:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	4ba5      	ldr	r3, [pc, #660]	; (8005d4c <UART_SetConfig+0x2c8>)
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d001      	beq.n	8005abe <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005aba:	6a23      	ldr	r3, [r4, #32]
 8005abc:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005abe:	6893      	ldr	r3, [r2, #8]
 8005ac0:	48a3      	ldr	r0, [pc, #652]	; (8005d50 <UART_SetConfig+0x2cc>)
 8005ac2:	4003      	ands	r3, r0
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005acc:	210f      	movs	r1, #15
 8005ace:	438b      	bics	r3, r1
 8005ad0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	4b9e      	ldr	r3, [pc, #632]	; (8005d54 <UART_SetConfig+0x2d0>)
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d00e      	beq.n	8005afc <UART_SetConfig+0x78>
 8005ade:	4b9e      	ldr	r3, [pc, #632]	; (8005d58 <UART_SetConfig+0x2d4>)
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d048      	beq.n	8005b76 <UART_SetConfig+0xf2>
 8005ae4:	4b9d      	ldr	r3, [pc, #628]	; (8005d5c <UART_SetConfig+0x2d8>)
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d100      	bne.n	8005aec <UART_SetConfig+0x68>
 8005aea:	e07b      	b.n	8005be4 <UART_SetConfig+0x160>
 8005aec:	4b9c      	ldr	r3, [pc, #624]	; (8005d60 <UART_SetConfig+0x2dc>)
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d07a      	beq.n	8005be8 <UART_SetConfig+0x164>
 8005af2:	4b96      	ldr	r3, [pc, #600]	; (8005d4c <UART_SetConfig+0x2c8>)
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d04f      	beq.n	8005b98 <UART_SetConfig+0x114>
 8005af8:	2310      	movs	r3, #16
 8005afa:	e00b      	b.n	8005b14 <UART_SetConfig+0x90>
 8005afc:	4b99      	ldr	r3, [pc, #612]	; (8005d64 <UART_SetConfig+0x2e0>)
 8005afe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b00:	2303      	movs	r3, #3
 8005b02:	400b      	ands	r3, r1
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d05f      	beq.n	8005bc8 <UART_SetConfig+0x144>
 8005b08:	d831      	bhi.n	8005b6e <UART_SetConfig+0xea>
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d05e      	beq.n	8005bcc <UART_SetConfig+0x148>
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d15e      	bne.n	8005bd0 <UART_SetConfig+0x14c>
 8005b12:	3303      	adds	r3, #3

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b14:	498d      	ldr	r1, [pc, #564]	; (8005d4c <UART_SetConfig+0x2c8>)
 8005b16:	428a      	cmp	r2, r1
 8005b18:	d070      	beq.n	8005bfc <UART_SetConfig+0x178>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1a:	69e0      	ldr	r0, [r4, #28]
 8005b1c:	2280      	movs	r2, #128	; 0x80
 8005b1e:	0212      	lsls	r2, r2, #8
 8005b20:	4290      	cmp	r0, r2
 8005b22:	d100      	bne.n	8005b26 <UART_SetConfig+0xa2>
 8005b24:	e0b4      	b.n	8005c90 <UART_SetConfig+0x20c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d100      	bne.n	8005b2c <UART_SetConfig+0xa8>
 8005b2a:	e0fd      	b.n	8005d28 <UART_SetConfig+0x2a4>
 8005b2c:	d900      	bls.n	8005b30 <UART_SetConfig+0xac>
 8005b2e:	e0e5      	b.n	8005cfc <UART_SetConfig+0x278>
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d100      	bne.n	8005b36 <UART_SetConfig+0xb2>
 8005b34:	e0f1      	b.n	8005d1a <UART_SetConfig+0x296>
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d000      	beq.n	8005b3c <UART_SetConfig+0xb8>
 8005b3a:	e0dd      	b.n	8005cf8 <UART_SetConfig+0x274>
 8005b3c:	488a      	ldr	r0, [pc, #552]	; (8005d68 <UART_SetConfig+0x2e4>)
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4a8a      	ldr	r2, [pc, #552]	; (8005d6c <UART_SetConfig+0x2e8>)
 8005b44:	5a99      	ldrh	r1, [r3, r2]
 8005b46:	f7fa faf9 	bl	800013c <__udivsi3>
 8005b4a:	6863      	ldr	r3, [r4, #4]
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	18c0      	adds	r0, r0, r3
 8005b50:	6861      	ldr	r1, [r4, #4]
 8005b52:	f7fa faf3 	bl	800013c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b56:	0002      	movs	r2, r0
 8005b58:	3a10      	subs	r2, #16
 8005b5a:	4b85      	ldr	r3, [pc, #532]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d900      	bls.n	8005b62 <UART_SetConfig+0xde>
 8005b60:	e0ed      	b.n	8005d3e <UART_SetConfig+0x2ba>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	0400      	lsls	r0, r0, #16
 8005b66:	0c00      	lsrs	r0, r0, #16
 8005b68:	60d8      	str	r0, [r3, #12]
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e0cc      	b.n	8005d08 <UART_SetConfig+0x284>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d130      	bne.n	8005bd4 <UART_SetConfig+0x150>
 8005b72:	3305      	adds	r3, #5
 8005b74:	e7ce      	b.n	8005b14 <UART_SetConfig+0x90>
 8005b76:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <UART_SetConfig+0x2e0>)
 8005b78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b7a:	230c      	movs	r3, #12
 8005b7c:	400b      	ands	r3, r1
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d02a      	beq.n	8005bd8 <UART_SetConfig+0x154>
 8005b82:	d805      	bhi.n	8005b90 <UART_SetConfig+0x10c>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d029      	beq.n	8005bdc <UART_SetConfig+0x158>
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d0c3      	beq.n	8005b14 <UART_SetConfig+0x90>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	e7c1      	b.n	8005b14 <UART_SetConfig+0x90>
 8005b90:	2b0c      	cmp	r3, #12
 8005b92:	d125      	bne.n	8005be0 <UART_SetConfig+0x15c>
 8005b94:	3b04      	subs	r3, #4
 8005b96:	e7bd      	b.n	8005b14 <UART_SetConfig+0x90>
 8005b98:	4b72      	ldr	r3, [pc, #456]	; (8005d64 <UART_SetConfig+0x2e0>)
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	21c0      	movs	r1, #192	; 0xc0
 8005b9e:	0109      	lsls	r1, r1, #4
 8005ba0:	400b      	ands	r3, r1
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	0109      	lsls	r1, r1, #4
 8005ba6:	428b      	cmp	r3, r1
 8005ba8:	d020      	beq.n	8005bec <UART_SetConfig+0x168>
 8005baa:	d807      	bhi.n	8005bbc <UART_SetConfig+0x138>
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01f      	beq.n	8005bf0 <UART_SetConfig+0x16c>
 8005bb0:	2180      	movs	r1, #128	; 0x80
 8005bb2:	00c9      	lsls	r1, r1, #3
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	d11d      	bne.n	8005bf4 <UART_SetConfig+0x170>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	e7ab      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bbc:	21c0      	movs	r1, #192	; 0xc0
 8005bbe:	0109      	lsls	r1, r1, #4
 8005bc0:	428b      	cmp	r3, r1
 8005bc2:	d119      	bne.n	8005bf8 <UART_SetConfig+0x174>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	e7a5      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e7a3      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e7a1      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	e79f      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	e79d      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e79b      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e799      	b.n	8005b14 <UART_SetConfig+0x90>
 8005be0:	2310      	movs	r3, #16
 8005be2:	e797      	b.n	8005b14 <UART_SetConfig+0x90>
 8005be4:	2300      	movs	r3, #0
 8005be6:	e795      	b.n	8005b14 <UART_SetConfig+0x90>
 8005be8:	2300      	movs	r3, #0
 8005bea:	e793      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e791      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e78f      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bf4:	2310      	movs	r3, #16
 8005bf6:	e78d      	b.n	8005b14 <UART_SetConfig+0x90>
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	e78b      	b.n	8005b14 <UART_SetConfig+0x90>
    switch (clocksource)
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d043      	beq.n	8005c88 <UART_SetConfig+0x204>
 8005c00:	d834      	bhi.n	8005c6c <UART_SetConfig+0x1e8>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d039      	beq.n	8005c7a <UART_SetConfig+0x1f6>
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d12e      	bne.n	8005c68 <UART_SetConfig+0x1e4>
        pclk = (uint32_t) HSI_VALUE;
 8005c0a:	4d57      	ldr	r5, [pc, #348]	; (8005d68 <UART_SetConfig+0x2e4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4a56      	ldr	r2, [pc, #344]	; (8005d6c <UART_SetConfig+0x2e8>)
 8005c12:	5a9f      	ldrh	r7, [r3, r2]
 8005c14:	0039      	movs	r1, r7
 8005c16:	0028      	movs	r0, r5
 8005c18:	f7fa fa90 	bl	800013c <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c1c:	6866      	ldr	r6, [r4, #4]
 8005c1e:	0073      	lsls	r3, r6, #1
 8005c20:	199b      	adds	r3, r3, r6
 8005c22:	4283      	cmp	r3, r0
 8005c24:	d900      	bls.n	8005c28 <UART_SetConfig+0x1a4>
 8005c26:	e082      	b.n	8005d2e <UART_SetConfig+0x2aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c28:	0333      	lsls	r3, r6, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c2a:	4283      	cmp	r3, r0
 8005c2c:	d200      	bcs.n	8005c30 <UART_SetConfig+0x1ac>
 8005c2e:	e080      	b.n	8005d32 <UART_SetConfig+0x2ae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c30:	003a      	movs	r2, r7
 8005c32:	2300      	movs	r3, #0
 8005c34:	0028      	movs	r0, r5
 8005c36:	2100      	movs	r1, #0
 8005c38:	f7fa fc34 	bl	80004a4 <__aeabi_uldivmod>
 8005c3c:	0e05      	lsrs	r5, r0, #24
 8005c3e:	020b      	lsls	r3, r1, #8
 8005c40:	432b      	orrs	r3, r5
 8005c42:	0202      	lsls	r2, r0, #8
 8005c44:	0870      	lsrs	r0, r6, #1
 8005c46:	2100      	movs	r1, #0
 8005c48:	1880      	adds	r0, r0, r2
 8005c4a:	4159      	adcs	r1, r3
 8005c4c:	0032      	movs	r2, r6
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f7fa fc28 	bl	80004a4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c54:	4b47      	ldr	r3, [pc, #284]	; (8005d74 <UART_SetConfig+0x2f0>)
 8005c56:	18c2      	adds	r2, r0, r3
 8005c58:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <UART_SetConfig+0x2f4>)
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d900      	bls.n	8005c60 <UART_SetConfig+0x1dc>
 8005c5e:	e06a      	b.n	8005d36 <UART_SetConfig+0x2b2>
          huart->Instance->BRR = usartdiv;
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	60d8      	str	r0, [r3, #12]
 8005c64:	2000      	movs	r0, #0
 8005c66:	e04f      	b.n	8005d08 <UART_SetConfig+0x284>
    switch (clocksource)
 8005c68:	2001      	movs	r0, #1
 8005c6a:	e04d      	b.n	8005d08 <UART_SetConfig+0x284>
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d102      	bne.n	8005c76 <UART_SetConfig+0x1f2>
 8005c70:	2580      	movs	r5, #128	; 0x80
 8005c72:	022d      	lsls	r5, r5, #8
 8005c74:	e7ca      	b.n	8005c0c <UART_SetConfig+0x188>
 8005c76:	2001      	movs	r0, #1
 8005c78:	e046      	b.n	8005d08 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c7a:	f7ff fac5 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
 8005c7e:	0005      	movs	r5, r0
    if (pclk != 0U)
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	d1c3      	bne.n	8005c0c <UART_SetConfig+0x188>
 8005c84:	2000      	movs	r0, #0
 8005c86:	e03f      	b.n	8005d08 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetSysClockFreq();
 8005c88:	f7ff f996 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8005c8c:	0005      	movs	r5, r0
        break;
 8005c8e:	e7f7      	b.n	8005c80 <UART_SetConfig+0x1fc>
    switch (clocksource)
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d02e      	beq.n	8005cf2 <UART_SetConfig+0x26e>
 8005c94:	d823      	bhi.n	8005cde <UART_SetConfig+0x25a>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d025      	beq.n	8005ce6 <UART_SetConfig+0x262>
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d11d      	bne.n	8005cda <UART_SetConfig+0x256>
 8005c9e:	4832      	ldr	r0, [pc, #200]	; (8005d68 <UART_SetConfig+0x2e4>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4a31      	ldr	r2, [pc, #196]	; (8005d6c <UART_SetConfig+0x2e8>)
 8005ca6:	5a99      	ldrh	r1, [r3, r2]
 8005ca8:	f7fa fa48 	bl	800013c <__udivsi3>
 8005cac:	0040      	lsls	r0, r0, #1
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	18c0      	adds	r0, r0, r3
 8005cb4:	6861      	ldr	r1, [r4, #4]
 8005cb6:	f7fa fa41 	bl	800013c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cba:	0002      	movs	r2, r0
 8005cbc:	3a10      	subs	r2, #16
 8005cbe:	4b2c      	ldr	r3, [pc, #176]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d83a      	bhi.n	8005d3a <UART_SetConfig+0x2b6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cc4:	b282      	uxth	r2, r0
 8005cc6:	230f      	movs	r3, #15
 8005cc8:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cca:	0840      	lsrs	r0, r0, #1
 8005ccc:	3b08      	subs	r3, #8
 8005cce:	4018      	ands	r0, r3
 8005cd0:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	60d8      	str	r0, [r3, #12]
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e016      	b.n	8005d08 <UART_SetConfig+0x284>
    switch (clocksource)
 8005cda:	2001      	movs	r0, #1
 8005cdc:	e014      	b.n	8005d08 <UART_SetConfig+0x284>
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d0de      	beq.n	8005ca0 <UART_SetConfig+0x21c>
 8005ce2:	2001      	movs	r0, #1
 8005ce4:	e010      	b.n	8005d08 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce6:	f7ff fa8f 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d1d8      	bne.n	8005ca0 <UART_SetConfig+0x21c>
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e00a      	b.n	8005d08 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf2:	f7ff f961 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
        break;
 8005cf6:	e7f8      	b.n	8005cea <UART_SetConfig+0x266>
    switch (clocksource)
 8005cf8:	2001      	movs	r0, #1
 8005cfa:	e005      	b.n	8005d08 <UART_SetConfig+0x284>
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d102      	bne.n	8005d06 <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 8005d00:	2080      	movs	r0, #128	; 0x80
 8005d02:	0200      	lsls	r0, r0, #8
 8005d04:	e71b      	b.n	8005b3e <UART_SetConfig+0xba>
    switch (clocksource)
 8005d06:	2001      	movs	r0, #1
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	226a      	movs	r2, #106	; 0x6a
 8005d0c:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8005d0e:	3a02      	subs	r2, #2
 8005d10:	52a3      	strh	r3, [r4, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8005d16:	67a3      	str	r3, [r4, #120]	; 0x78

  return ret;
}
 8005d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d1a:	f7ff fa75 	bl	8005208 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d000      	beq.n	8005d24 <UART_SetConfig+0x2a0>
 8005d22:	e70c      	b.n	8005b3e <UART_SetConfig+0xba>
 8005d24:	2000      	movs	r0, #0
 8005d26:	e7ef      	b.n	8005d08 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetSysClockFreq();
 8005d28:	f7ff f946 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
        break;
 8005d2c:	e7f7      	b.n	8005d1e <UART_SetConfig+0x29a>
        ret = HAL_ERROR;
 8005d2e:	2001      	movs	r0, #1
 8005d30:	e7ea      	b.n	8005d08 <UART_SetConfig+0x284>
 8005d32:	2001      	movs	r0, #1
 8005d34:	e7e8      	b.n	8005d08 <UART_SetConfig+0x284>
          ret = HAL_ERROR;
 8005d36:	2001      	movs	r0, #1
 8005d38:	e7e6      	b.n	8005d08 <UART_SetConfig+0x284>
        ret = HAL_ERROR;
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7e4      	b.n	8005d08 <UART_SetConfig+0x284>
        ret = HAL_ERROR;
 8005d3e:	2001      	movs	r0, #1
 8005d40:	e7e2      	b.n	8005d08 <UART_SetConfig+0x284>
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	cfff69f3 	.word	0xcfff69f3
 8005d48:	ffffcfff 	.word	0xffffcfff
 8005d4c:	40008000 	.word	0x40008000
 8005d50:	11fff4ff 	.word	0x11fff4ff
 8005d54:	40013800 	.word	0x40013800
 8005d58:	40004400 	.word	0x40004400
 8005d5c:	40004800 	.word	0x40004800
 8005d60:	40004c00 	.word	0x40004c00
 8005d64:	40021000 	.word	0x40021000
 8005d68:	00f42400 	.word	0x00f42400
 8005d6c:	08009324 	.word	0x08009324
 8005d70:	0000ffef 	.word	0x0000ffef
 8005d74:	fffffd00 	.word	0xfffffd00
 8005d78:	000ffcff 	.word	0x000ffcff

08005d7c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005d7e:	07db      	lsls	r3, r3, #31
 8005d80:	d506      	bpl.n	8005d90 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d82:	6802      	ldr	r2, [r0, #0]
 8005d84:	6853      	ldr	r3, [r2, #4]
 8005d86:	492c      	ldr	r1, [pc, #176]	; (8005e38 <UART_AdvFeatureConfig+0xbc>)
 8005d88:	400b      	ands	r3, r1
 8005d8a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005d8c:	430b      	orrs	r3, r1
 8005d8e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d90:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005d92:	079b      	lsls	r3, r3, #30
 8005d94:	d506      	bpl.n	8005da4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d96:	6802      	ldr	r2, [r0, #0]
 8005d98:	6853      	ldr	r3, [r2, #4]
 8005d9a:	4928      	ldr	r1, [pc, #160]	; (8005e3c <UART_AdvFeatureConfig+0xc0>)
 8005d9c:	400b      	ands	r3, r1
 8005d9e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005da4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005da6:	075b      	lsls	r3, r3, #29
 8005da8:	d506      	bpl.n	8005db8 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005daa:	6802      	ldr	r2, [r0, #0]
 8005dac:	6853      	ldr	r3, [r2, #4]
 8005dae:	4924      	ldr	r1, [pc, #144]	; (8005e40 <UART_AdvFeatureConfig+0xc4>)
 8005db0:	400b      	ands	r3, r1
 8005db2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005db4:	430b      	orrs	r3, r1
 8005db6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005db8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dba:	071b      	lsls	r3, r3, #28
 8005dbc:	d506      	bpl.n	8005dcc <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dbe:	6802      	ldr	r2, [r0, #0]
 8005dc0:	6853      	ldr	r3, [r2, #4]
 8005dc2:	4920      	ldr	r1, [pc, #128]	; (8005e44 <UART_AdvFeatureConfig+0xc8>)
 8005dc4:	400b      	ands	r3, r1
 8005dc6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dcc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005dce:	06db      	lsls	r3, r3, #27
 8005dd0:	d506      	bpl.n	8005de0 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd2:	6802      	ldr	r2, [r0, #0]
 8005dd4:	6893      	ldr	r3, [r2, #8]
 8005dd6:	491c      	ldr	r1, [pc, #112]	; (8005e48 <UART_AdvFeatureConfig+0xcc>)
 8005dd8:	400b      	ands	r3, r1
 8005dda:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005de0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005de2:	069b      	lsls	r3, r3, #26
 8005de4:	d506      	bpl.n	8005df4 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005de6:	6802      	ldr	r2, [r0, #0]
 8005de8:	6893      	ldr	r3, [r2, #8]
 8005dea:	4918      	ldr	r1, [pc, #96]	; (8005e4c <UART_AdvFeatureConfig+0xd0>)
 8005dec:	400b      	ands	r3, r1
 8005dee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005df0:	430b      	orrs	r3, r1
 8005df2:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005df4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005df6:	065b      	lsls	r3, r3, #25
 8005df8:	d50b      	bpl.n	8005e12 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dfa:	6802      	ldr	r2, [r0, #0]
 8005dfc:	6853      	ldr	r3, [r2, #4]
 8005dfe:	4914      	ldr	r1, [pc, #80]	; (8005e50 <UART_AdvFeatureConfig+0xd4>)
 8005e00:	400b      	ands	r3, r1
 8005e02:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005e04:	430b      	orrs	r3, r1
 8005e06:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e08:	2380      	movs	r3, #128	; 0x80
 8005e0a:	035b      	lsls	r3, r3, #13
 8005e0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e14:	061b      	lsls	r3, r3, #24
 8005e16:	d506      	bpl.n	8005e26 <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e18:	6802      	ldr	r2, [r0, #0]
 8005e1a:	6853      	ldr	r3, [r2, #4]
 8005e1c:	490d      	ldr	r1, [pc, #52]	; (8005e54 <UART_AdvFeatureConfig+0xd8>)
 8005e1e:	400b      	ands	r3, r1
 8005e20:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005e22:	430b      	orrs	r3, r1
 8005e24:	6053      	str	r3, [r2, #4]
  }
}
 8005e26:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e28:	6802      	ldr	r2, [r0, #0]
 8005e2a:	6853      	ldr	r3, [r2, #4]
 8005e2c:	490a      	ldr	r1, [pc, #40]	; (8005e58 <UART_AdvFeatureConfig+0xdc>)
 8005e2e:	400b      	ands	r3, r1
 8005e30:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005e32:	430b      	orrs	r3, r1
 8005e34:	6053      	str	r3, [r2, #4]
 8005e36:	e7ec      	b.n	8005e12 <UART_AdvFeatureConfig+0x96>
 8005e38:	fffdffff 	.word	0xfffdffff
 8005e3c:	fffeffff 	.word	0xfffeffff
 8005e40:	fffbffff 	.word	0xfffbffff
 8005e44:	ffff7fff 	.word	0xffff7fff
 8005e48:	ffffefff 	.word	0xffffefff
 8005e4c:	ffffdfff 	.word	0xffffdfff
 8005e50:	ffefffff 	.word	0xffefffff
 8005e54:	fff7ffff 	.word	0xfff7ffff
 8005e58:	ff9fffff 	.word	0xff9fffff

08005e5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	46ce      	mov	lr, r9
 8005e60:	4647      	mov	r7, r8
 8005e62:	b580      	push	{r7, lr}
 8005e64:	0006      	movs	r6, r0
 8005e66:	000d      	movs	r5, r1
 8005e68:	0017      	movs	r7, r2
 8005e6a:	4699      	mov	r9, r3
 8005e6c:	9b08      	ldr	r3, [sp, #32]
 8005e6e:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e70:	6833      	ldr	r3, [r6, #0]
 8005e72:	69dc      	ldr	r4, [r3, #28]
 8005e74:	402c      	ands	r4, r5
 8005e76:	1b64      	subs	r4, r4, r5
 8005e78:	4263      	negs	r3, r4
 8005e7a:	415c      	adcs	r4, r3
 8005e7c:	42bc      	cmp	r4, r7
 8005e7e:	d157      	bne.n	8005f30 <UART_WaitOnFlagUntilTimeout+0xd4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e80:	4643      	mov	r3, r8
 8005e82:	3301      	adds	r3, #1
 8005e84:	d0f4      	beq.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x14>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7fd fe67 	bl	8003b58 <HAL_GetTick>
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	1ac0      	subs	r0, r0, r3
 8005e8e:	4540      	cmp	r0, r8
 8005e90:	d82e      	bhi.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x94>
 8005e92:	4643      	mov	r3, r8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d02b      	beq.n	8005ef0 <UART_WaitOnFlagUntilTimeout+0x94>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005e98:	6833      	ldr	r3, [r6, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	0752      	lsls	r2, r2, #29
 8005e9e:	d5e7      	bpl.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x14>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ea0:	69da      	ldr	r2, [r3, #28]
 8005ea2:	0512      	lsls	r2, r2, #20
 8005ea4:	d5e4      	bpl.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x14>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	0112      	lsls	r2, r2, #4
 8005eaa:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eac:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f382 8810 	msr	PRIMASK, r2

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005eb6:	6831      	ldr	r1, [r6, #0]
 8005eb8:	680b      	ldr	r3, [r1, #0]
 8005eba:	4c20      	ldr	r4, [pc, #128]	; (8005f3c <UART_WaitOnFlagUntilTimeout+0xe0>)
 8005ebc:	4023      	ands	r3, r4
 8005ebe:	600b      	str	r3, [r1, #0]
 8005ec0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ec4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec8:	f382 8810 	msr	PRIMASK, r2
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ecc:	6831      	ldr	r1, [r6, #0]
 8005ece:	688b      	ldr	r3, [r1, #8]
 8005ed0:	4393      	bics	r3, r2
 8005ed2:	608b      	str	r3, [r1, #8]
 8005ed4:	f380 8810 	msr	PRIMASK, r0

          huart->gState = HAL_UART_STATE_READY;
 8005ed8:	2320      	movs	r3, #32
 8005eda:	3287      	adds	r2, #135	; 0x87
 8005edc:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005ede:	3204      	adds	r2, #4
 8005ee0:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ee2:	3204      	adds	r2, #4
 8005ee4:	50b3      	str	r3, [r6, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ee6:	3364      	adds	r3, #100	; 0x64
 8005ee8:	2200      	movs	r2, #0
 8005eea:	54f2      	strb	r2, [r6, r3]

          return HAL_TIMEOUT;
 8005eec:	2003      	movs	r0, #3
 8005eee:	e020      	b.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ef0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005efa:	6831      	ldr	r1, [r6, #0]
 8005efc:	680b      	ldr	r3, [r1, #0]
 8005efe:	4c0f      	ldr	r4, [pc, #60]	; (8005f3c <UART_WaitOnFlagUntilTimeout+0xe0>)
 8005f00:	4023      	ands	r3, r4
 8005f02:	600b      	str	r3, [r1, #0]
 8005f04:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f08:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	6831      	ldr	r1, [r6, #0]
 8005f12:	688b      	ldr	r3, [r1, #8]
 8005f14:	4393      	bics	r3, r2
 8005f16:	608b      	str	r3, [r1, #8]
 8005f18:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	3287      	adds	r2, #135	; 0x87
 8005f20:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005f22:	3204      	adds	r2, #4
 8005f24:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 8005f26:	3364      	adds	r3, #100	; 0x64
 8005f28:	2200      	movs	r2, #0
 8005f2a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8005f2c:	2003      	movs	r0, #3
 8005f2e:	e000      	b.n	8005f32 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
      }
    }
  }
  return HAL_OK;
 8005f30:	2000      	movs	r0, #0
}
 8005f32:	bcc0      	pop	{r6, r7}
 8005f34:	46b9      	mov	r9, r7
 8005f36:	46b0      	mov	r8, r6
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	fffffe5f 	.word	0xfffffe5f

08005f40 <HAL_UART_Transmit>:
{
 8005f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f42:	46c6      	mov	lr, r8
 8005f44:	b500      	push	{lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	0004      	movs	r4, r0
 8005f4a:	000d      	movs	r5, r1
 8005f4c:	4690      	mov	r8, r2
 8005f4e:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005f50:	2388      	movs	r3, #136	; 0x88
 8005f52:	58c3      	ldr	r3, [r0, r3]
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d15c      	bne.n	8006012 <HAL_UART_Transmit+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	d05f      	beq.n	800601c <HAL_UART_Transmit+0xdc>
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	d05f      	beq.n	8006020 <HAL_UART_Transmit+0xe0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	015b      	lsls	r3, r3, #5
 8005f64:	6882      	ldr	r2, [r0, #8]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d104      	bne.n	8005f74 <HAL_UART_Transmit+0x34>
 8005f6a:	6903      	ldr	r3, [r0, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f70:	07cb      	lsls	r3, r1, #31
 8005f72:	d457      	bmi.n	8006024 <HAL_UART_Transmit+0xe4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	2390      	movs	r3, #144	; 0x90
 8005f76:	2200      	movs	r2, #0
 8005f78:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f7a:	3b08      	subs	r3, #8
 8005f7c:	3221      	adds	r2, #33	; 0x21
 8005f7e:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8005f80:	f7fd fdea 	bl	8003b58 <HAL_GetTick>
 8005f84:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8005f86:	2354      	movs	r3, #84	; 0x54
 8005f88:	4642      	mov	r2, r8
 8005f8a:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	015b      	lsls	r3, r3, #5
 8005f94:	68a2      	ldr	r2, [r4, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d002      	beq.n	8005fa0 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4698      	mov	r8, r3
 8005f9e:	e013      	b.n	8005fc8 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d025      	beq.n	8005ff2 <HAL_UART_Transmit+0xb2>
      pdata16bits = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4698      	mov	r8, r3
 8005faa:	e00d      	b.n	8005fc8 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fac:	4643      	mov	r3, r8
 8005fae:	881b      	ldrh	r3, [r3, #0]
 8005fb0:	6822      	ldr	r2, [r4, #0]
 8005fb2:	05db      	lsls	r3, r3, #23
 8005fb4:	0ddb      	lsrs	r3, r3, #23
 8005fb6:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8005fb8:	2302      	movs	r3, #2
 8005fba:	469c      	mov	ip, r3
 8005fbc:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8005fbe:	2356      	movs	r3, #86	; 0x56
 8005fc0:	5ae2      	ldrh	r2, [r4, r3]
 8005fc2:	3a01      	subs	r2, #1
 8005fc4:	b292      	uxth	r2, r2
 8005fc6:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8005fc8:	2356      	movs	r3, #86	; 0x56
 8005fca:	5ae3      	ldrh	r3, [r4, r3]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d012      	beq.n	8005ff8 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd2:	9600      	str	r6, [sp, #0]
 8005fd4:	003b      	movs	r3, r7
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	0020      	movs	r0, r4
 8005fdc:	f7ff ff3e 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d121      	bne.n	8006028 <HAL_UART_Transmit+0xe8>
      if (pdata8bits == NULL)
 8005fe4:	2d00      	cmp	r5, #0
 8005fe6:	d0e1      	beq.n	8005fac <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe8:	782a      	ldrb	r2, [r5, #0]
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fee:	3501      	adds	r5, #1
 8005ff0:	e7e5      	b.n	8005fbe <HAL_UART_Transmit+0x7e>
      pdata16bits = (const uint16_t *) pData;
 8005ff2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005ff4:	2500      	movs	r5, #0
 8005ff6:	e7e7      	b.n	8005fc8 <HAL_UART_Transmit+0x88>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ff8:	9600      	str	r6, [sp, #0]
 8005ffa:	003b      	movs	r3, r7
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2140      	movs	r1, #64	; 0x40
 8006000:	0020      	movs	r0, r4
 8006002:	f7ff ff2b 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 8006006:	2800      	cmp	r0, #0
 8006008:	d110      	bne.n	800602c <HAL_UART_Transmit+0xec>
    huart->gState = HAL_UART_STATE_READY;
 800600a:	2388      	movs	r3, #136	; 0x88
 800600c:	2220      	movs	r2, #32
 800600e:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8006010:	e000      	b.n	8006014 <HAL_UART_Transmit+0xd4>
    return HAL_BUSY;
 8006012:	2002      	movs	r0, #2
}
 8006014:	b002      	add	sp, #8
 8006016:	bc80      	pop	{r7}
 8006018:	46b8      	mov	r8, r7
 800601a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800601c:	2001      	movs	r0, #1
 800601e:	e7f9      	b.n	8006014 <HAL_UART_Transmit+0xd4>
 8006020:	2001      	movs	r0, #1
 8006022:	e7f7      	b.n	8006014 <HAL_UART_Transmit+0xd4>
        return  HAL_ERROR;
 8006024:	2001      	movs	r0, #1
 8006026:	e7f5      	b.n	8006014 <HAL_UART_Transmit+0xd4>
        return HAL_TIMEOUT;
 8006028:	2003      	movs	r0, #3
 800602a:	e7f3      	b.n	8006014 <HAL_UART_Transmit+0xd4>
      return HAL_TIMEOUT;
 800602c:	2003      	movs	r0, #3
 800602e:	e7f1      	b.n	8006014 <HAL_UART_Transmit+0xd4>

08006030 <UART_CheckIdleState>:
{
 8006030:	b530      	push	{r4, r5, lr}
 8006032:	b083      	sub	sp, #12
 8006034:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006036:	2390      	movs	r3, #144	; 0x90
 8006038:	2200      	movs	r2, #0
 800603a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800603c:	f7fd fd8c 	bl	8003b58 <HAL_GetTick>
 8006040:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	0713      	lsls	r3, r2, #28
 8006048:	d410      	bmi.n	800606c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	075b      	lsls	r3, r3, #29
 8006050:	d419      	bmi.n	8006086 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8006052:	2320      	movs	r3, #32
 8006054:	2288      	movs	r2, #136	; 0x88
 8006056:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	3204      	adds	r2, #4
 800605a:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605c:	2300      	movs	r3, #0
 800605e:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006060:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8006062:	3a08      	subs	r2, #8
 8006064:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8006066:	2000      	movs	r0, #0
}
 8006068:	b003      	add	sp, #12
 800606a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <UART_CheckIdleState+0x70>)
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	0003      	movs	r3, r0
 8006074:	2200      	movs	r2, #0
 8006076:	0389      	lsls	r1, r1, #14
 8006078:	0020      	movs	r0, r4
 800607a:	f7ff feef 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 800607e:	2800      	cmp	r0, #0
 8006080:	d0e3      	beq.n	800604a <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8006082:	2003      	movs	r0, #3
 8006084:	e7f0      	b.n	8006068 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <UART_CheckIdleState+0x70>)
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	002b      	movs	r3, r5
 800608e:	2200      	movs	r2, #0
 8006090:	03c9      	lsls	r1, r1, #15
 8006092:	0020      	movs	r0, r4
 8006094:	f7ff fee2 	bl	8005e5c <UART_WaitOnFlagUntilTimeout>
 8006098:	2800      	cmp	r0, #0
 800609a:	d0da      	beq.n	8006052 <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 800609c:	2003      	movs	r0, #3
 800609e:	e7e3      	b.n	8006068 <UART_CheckIdleState+0x38>
 80060a0:	01ffffff 	.word	0x01ffffff

080060a4 <HAL_UART_Init>:
{
 80060a4:	b510      	push	{r4, lr}
 80060a6:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80060a8:	d030      	beq.n	800610c <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 80060aa:	2388      	movs	r3, #136	; 0x88
 80060ac:	58c3      	ldr	r3, [r0, r3]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d022      	beq.n	80060f8 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80060b2:	2388      	movs	r3, #136	; 0x88
 80060b4:	2224      	movs	r2, #36	; 0x24
 80060b6:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	6813      	ldr	r3, [r2, #0]
 80060bc:	2101      	movs	r1, #1
 80060be:	438b      	bics	r3, r1
 80060c0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060c2:	0020      	movs	r0, r4
 80060c4:	f7ff fcde 	bl	8005a84 <UART_SetConfig>
 80060c8:	2801      	cmp	r0, #1
 80060ca:	d014      	beq.n	80060f6 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d118      	bne.n	8006104 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	6853      	ldr	r3, [r2, #4]
 80060d6:	490e      	ldr	r1, [pc, #56]	; (8006110 <HAL_UART_Init+0x6c>)
 80060d8:	400b      	ands	r3, r1
 80060da:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060dc:	6822      	ldr	r2, [r4, #0]
 80060de:	6893      	ldr	r3, [r2, #8]
 80060e0:	212a      	movs	r1, #42	; 0x2a
 80060e2:	438b      	bics	r3, r1
 80060e4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	6813      	ldr	r3, [r2, #0]
 80060ea:	3929      	subs	r1, #41	; 0x29
 80060ec:	430b      	orrs	r3, r1
 80060ee:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80060f0:	0020      	movs	r0, r4
 80060f2:	f7ff ff9d 	bl	8006030 <UART_CheckIdleState>
}
 80060f6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80060f8:	3384      	adds	r3, #132	; 0x84
 80060fa:	2200      	movs	r2, #0
 80060fc:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80060fe:	f7fd fba3 	bl	8003848 <HAL_UART_MspInit>
 8006102:	e7d6      	b.n	80060b2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8006104:	0020      	movs	r0, r4
 8006106:	f7ff fe39 	bl	8005d7c <UART_AdvFeatureConfig>
 800610a:	e7e2      	b.n	80060d2 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800610c:	2001      	movs	r0, #1
 800610e:	e7f2      	b.n	80060f6 <HAL_UART_Init+0x52>
 8006110:	ffffb7ff 	.word	0xffffb7ff

08006114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006116:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006118:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 800611e:	3301      	adds	r3, #1
 8006120:	226a      	movs	r2, #106	; 0x6a
 8006122:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8006124:	3a02      	subs	r2, #2
 8006126:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800612a:	6802      	ldr	r2, [r0, #0]
 800612c:	6895      	ldr	r5, [r2, #8]
 800612e:	0e6d      	lsrs	r5, r5, #25
 8006130:	2307      	movs	r3, #7
 8006132:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006134:	6892      	ldr	r2, [r2, #8]
 8006136:	0f52      	lsrs	r2, r2, #29
 8006138:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800613a:	4f08      	ldr	r7, [pc, #32]	; (800615c <UARTEx_SetNbDataToProcess+0x48>)
 800613c:	5cf8      	ldrb	r0, [r7, r3]
 800613e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006140:	4e07      	ldr	r6, [pc, #28]	; (8006160 <UARTEx_SetNbDataToProcess+0x4c>)
 8006142:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006144:	f7fa f884 	bl	8000250 <__divsi3>
 8006148:	236a      	movs	r3, #106	; 0x6a
 800614a:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800614c:	5d78      	ldrb	r0, [r7, r5]
 800614e:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006150:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006152:	f7fa f87d 	bl	8000250 <__divsi3>
 8006156:	2368      	movs	r3, #104	; 0x68
 8006158:	52e0      	strh	r0, [r4, r3]
}
 800615a:	e7e5      	b.n	8006128 <UARTEx_SetNbDataToProcess+0x14>
 800615c:	08009344 	.word	0x08009344
 8006160:	0800933c 	.word	0x0800933c

08006164 <HAL_UARTEx_DisableFifoMode>:
{
 8006164:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8006166:	2384      	movs	r3, #132	; 0x84
 8006168:	5cc3      	ldrb	r3, [r0, r3]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d015      	beq.n	800619a <HAL_UARTEx_DisableFifoMode+0x36>
 800616e:	2484      	movs	r4, #132	; 0x84
 8006170:	2601      	movs	r6, #1
 8006172:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8006174:	2588      	movs	r5, #136	; 0x88
 8006176:	2324      	movs	r3, #36	; 0x24
 8006178:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617a:	6802      	ldr	r2, [r0, #0]
 800617c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800617e:	6811      	ldr	r1, [r2, #0]
 8006180:	43b1      	bics	r1, r6
 8006182:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006184:	4a06      	ldr	r2, [pc, #24]	; (80061a0 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8006186:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006188:	2200      	movs	r2, #0
 800618a:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800618c:	6801      	ldr	r1, [r0, #0]
 800618e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006190:	2320      	movs	r3, #32
 8006192:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8006194:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8006196:	2000      	movs	r0, #0
}
 8006198:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800619a:	2002      	movs	r0, #2
 800619c:	e7fc      	b.n	8006198 <HAL_UARTEx_DisableFifoMode+0x34>
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	dfffffff 	.word	0xdfffffff

080061a4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	0004      	movs	r4, r0
 80061a8:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 80061aa:	2384      	movs	r3, #132	; 0x84
 80061ac:	5cc3      	ldrb	r3, [r0, r3]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d01b      	beq.n	80061ea <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80061b2:	2584      	movs	r5, #132	; 0x84
 80061b4:	2001      	movs	r0, #1
 80061b6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80061b8:	2688      	movs	r6, #136	; 0x88
 80061ba:	2324      	movs	r3, #36	; 0x24
 80061bc:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	4381      	bics	r1, r0
 80061c6:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061c8:	6820      	ldr	r0, [r4, #0]
 80061ca:	6883      	ldr	r3, [r0, #8]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	08d9      	lsrs	r1, r3, #3
 80061d0:	4311      	orrs	r1, r2
 80061d2:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 80061d4:	0020      	movs	r0, r4
 80061d6:	f7ff ff9d 	bl	8006114 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80061de:	2320      	movs	r3, #32
 80061e0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80061e2:	2300      	movs	r3, #0
 80061e4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80061e6:	2000      	movs	r0, #0
}
 80061e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80061ea:	2002      	movs	r0, #2
 80061ec:	e7fc      	b.n	80061e8 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080061f0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	0004      	movs	r4, r0
 80061f4:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80061f6:	2284      	movs	r2, #132	; 0x84
 80061f8:	5c82      	ldrb	r2, [r0, r2]
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	d01b      	beq.n	8006236 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80061fe:	2584      	movs	r5, #132	; 0x84
 8006200:	2001      	movs	r0, #1
 8006202:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8006204:	2688      	movs	r6, #136	; 0x88
 8006206:	2224      	movs	r2, #36	; 0x24
 8006208:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800620e:	6811      	ldr	r1, [r2, #0]
 8006210:	4381      	bics	r1, r0
 8006212:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006214:	6822      	ldr	r2, [r4, #0]
 8006216:	6891      	ldr	r1, [r2, #8]
 8006218:	4808      	ldr	r0, [pc, #32]	; (800623c <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 800621a:	4001      	ands	r1, r0
 800621c:	4319      	orrs	r1, r3
 800621e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006220:	0020      	movs	r0, r4
 8006222:	f7ff ff77 	bl	8006114 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800622a:	2320      	movs	r3, #32
 800622c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800622e:	2300      	movs	r3, #0
 8006230:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8006232:	2000      	movs	r0, #0
}
 8006234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8006236:	2002      	movs	r0, #2
 8006238:	e7fc      	b.n	8006234 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	f1ffffff 	.word	0xf1ffffff

08006240 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006240:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006242:	4906      	ldr	r1, [pc, #24]	; (800625c <MX_FATFS_Init+0x1c>)
 8006244:	4806      	ldr	r0, [pc, #24]	; (8006260 <MX_FATFS_Init+0x20>)
 8006246:	f000 f849 	bl	80062dc <FATFS_LinkDriver>
 800624a:	2800      	cmp	r0, #0
 800624c:	d103      	bne.n	8006256 <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 800624e:	4b05      	ldr	r3, [pc, #20]	; (8006264 <MX_FATFS_Init+0x24>)
 8006250:	2201      	movs	r2, #1
 8006252:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8006254:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 8006256:	2001      	movs	r0, #1
 8006258:	4240      	negs	r0, r0
 800625a:	e7fb      	b.n	8006254 <MX_FATFS_Init+0x14>
 800625c:	200008ac 	.word	0x200008ac
 8006260:	20000010 	.word	0x20000010
 8006264:	200008a8 	.word	0x200008a8

08006268 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006268:	4b02      	ldr	r3, [pc, #8]	; (8006274 <USER_initialize+0xc>)
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800626e:	7818      	ldrb	r0, [r3, #0]
 8006270:	b2c0      	uxtb	r0, r0
  /* USER CODE END INIT */
}
 8006272:	4770      	bx	lr
 8006274:	2000000c 	.word	0x2000000c

08006278 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006278:	4b02      	ldr	r3, [pc, #8]	; (8006284 <USER_status+0xc>)
 800627a:	2201      	movs	r2, #1
 800627c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800627e:	7818      	ldrb	r0, [r3, #0]
 8006280:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 8006282:	4770      	bx	lr
 8006284:	2000000c 	.word	0x2000000c

08006288 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8006288:	2000      	movs	r0, #0
 800628a:	4770      	bx	lr

0800628c <USER_write>:
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 800628c:	2000      	movs	r0, #0
 800628e:	4770      	bx	lr

08006290 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8006290:	2001      	movs	r0, #1
 8006292:	4770      	bx	lr

08006294 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	0004      	movs	r4, r0
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006298:	4b0f      	ldr	r3, [pc, #60]	; (80062d8 <FATFS_LinkDriverEx+0x44>)
 800629a:	7a5b      	ldrb	r3, [r3, #9]
 800629c:	b2d8      	uxtb	r0, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d117      	bne.n	80062d2 <FATFS_LinkDriverEx+0x3e>
  {
    disk.is_initialized[disk.nbr] = 0;
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <FATFS_LinkDriverEx+0x44>)
 80062a4:	7a5d      	ldrb	r5, [r3, #9]
 80062a6:	b2ed      	uxtb	r5, r5
 80062a8:	2600      	movs	r6, #0
 80062aa:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 80062ac:	7a5d      	ldrb	r5, [r3, #9]
 80062ae:	00ad      	lsls	r5, r5, #2
 80062b0:	195d      	adds	r5, r3, r5
 80062b2:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80062b4:	7a5c      	ldrb	r4, [r3, #9]
 80062b6:	191c      	adds	r4, r3, r4
 80062b8:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 80062ba:	7a5a      	ldrb	r2, [r3, #9]
 80062bc:	1c54      	adds	r4, r2, #1
 80062be:	b2e4      	uxtb	r4, r4
 80062c0:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 80062c2:	3230      	adds	r2, #48	; 0x30
 80062c4:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80062c6:	233a      	movs	r3, #58	; 0x3a
 80062c8:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80062ca:	3b0b      	subs	r3, #11
 80062cc:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80062ce:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 80062d0:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t ret = 1;
 80062d2:	2001      	movs	r0, #1
 80062d4:	e7fc      	b.n	80062d0 <FATFS_LinkDriverEx+0x3c>
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	200008b0 	.word	0x200008b0

080062dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80062dc:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 80062de:	2200      	movs	r2, #0
 80062e0:	f7ff ffd8 	bl	8006294 <FATFS_LinkDriverEx>
}
 80062e4:	bd10      	pop	{r4, pc}
	...

080062e8 <__errno>:
 80062e8:	4b01      	ldr	r3, [pc, #4]	; (80062f0 <__errno+0x8>)
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	4770      	bx	lr
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	20000024 	.word	0x20000024

080062f4 <__libc_init_array>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	2600      	movs	r6, #0
 80062f8:	4d0c      	ldr	r5, [pc, #48]	; (800632c <__libc_init_array+0x38>)
 80062fa:	4c0d      	ldr	r4, [pc, #52]	; (8006330 <__libc_init_array+0x3c>)
 80062fc:	1b64      	subs	r4, r4, r5
 80062fe:	10a4      	asrs	r4, r4, #2
 8006300:	42a6      	cmp	r6, r4
 8006302:	d109      	bne.n	8006318 <__libc_init_array+0x24>
 8006304:	2600      	movs	r6, #0
 8006306:	f002 fe85 	bl	8009014 <_init>
 800630a:	4d0a      	ldr	r5, [pc, #40]	; (8006334 <__libc_init_array+0x40>)
 800630c:	4c0a      	ldr	r4, [pc, #40]	; (8006338 <__libc_init_array+0x44>)
 800630e:	1b64      	subs	r4, r4, r5
 8006310:	10a4      	asrs	r4, r4, #2
 8006312:	42a6      	cmp	r6, r4
 8006314:	d105      	bne.n	8006322 <__libc_init_array+0x2e>
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	00b3      	lsls	r3, r6, #2
 800631a:	58eb      	ldr	r3, [r5, r3]
 800631c:	4798      	blx	r3
 800631e:	3601      	adds	r6, #1
 8006320:	e7ee      	b.n	8006300 <__libc_init_array+0xc>
 8006322:	00b3      	lsls	r3, r6, #2
 8006324:	58eb      	ldr	r3, [r5, r3]
 8006326:	4798      	blx	r3
 8006328:	3601      	adds	r6, #1
 800632a:	e7f2      	b.n	8006312 <__libc_init_array+0x1e>
 800632c:	0800972c 	.word	0x0800972c
 8006330:	0800972c 	.word	0x0800972c
 8006334:	0800972c 	.word	0x0800972c
 8006338:	08009730 	.word	0x08009730

0800633c <memcpy>:
 800633c:	2300      	movs	r3, #0
 800633e:	b510      	push	{r4, lr}
 8006340:	429a      	cmp	r2, r3
 8006342:	d100      	bne.n	8006346 <memcpy+0xa>
 8006344:	bd10      	pop	{r4, pc}
 8006346:	5ccc      	ldrb	r4, [r1, r3]
 8006348:	54c4      	strb	r4, [r0, r3]
 800634a:	3301      	adds	r3, #1
 800634c:	e7f8      	b.n	8006340 <memcpy+0x4>

0800634e <memset>:
 800634e:	0003      	movs	r3, r0
 8006350:	1882      	adds	r2, r0, r2
 8006352:	4293      	cmp	r3, r2
 8006354:	d100      	bne.n	8006358 <memset+0xa>
 8006356:	4770      	bx	lr
 8006358:	7019      	strb	r1, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	e7f9      	b.n	8006352 <memset+0x4>

0800635e <__cvt>:
 800635e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006360:	001e      	movs	r6, r3
 8006362:	2300      	movs	r3, #0
 8006364:	0014      	movs	r4, r2
 8006366:	b08b      	sub	sp, #44	; 0x2c
 8006368:	429e      	cmp	r6, r3
 800636a:	da04      	bge.n	8006376 <__cvt+0x18>
 800636c:	2180      	movs	r1, #128	; 0x80
 800636e:	0609      	lsls	r1, r1, #24
 8006370:	1873      	adds	r3, r6, r1
 8006372:	001e      	movs	r6, r3
 8006374:	232d      	movs	r3, #45	; 0x2d
 8006376:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006378:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800637a:	7013      	strb	r3, [r2, #0]
 800637c:	2320      	movs	r3, #32
 800637e:	2203      	movs	r2, #3
 8006380:	439f      	bics	r7, r3
 8006382:	2f46      	cmp	r7, #70	; 0x46
 8006384:	d007      	beq.n	8006396 <__cvt+0x38>
 8006386:	003b      	movs	r3, r7
 8006388:	3b45      	subs	r3, #69	; 0x45
 800638a:	4259      	negs	r1, r3
 800638c:	414b      	adcs	r3, r1
 800638e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006390:	3a01      	subs	r2, #1
 8006392:	18cb      	adds	r3, r1, r3
 8006394:	9310      	str	r3, [sp, #64]	; 0x40
 8006396:	ab09      	add	r3, sp, #36	; 0x24
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	ab08      	add	r3, sp, #32
 800639c:	9303      	str	r3, [sp, #12]
 800639e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063a0:	9200      	str	r2, [sp, #0]
 80063a2:	9302      	str	r3, [sp, #8]
 80063a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063a6:	0022      	movs	r2, r4
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	0033      	movs	r3, r6
 80063ac:	f000 fe36 	bl	800701c <_dtoa_r>
 80063b0:	0005      	movs	r5, r0
 80063b2:	2f47      	cmp	r7, #71	; 0x47
 80063b4:	d102      	bne.n	80063bc <__cvt+0x5e>
 80063b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063b8:	07db      	lsls	r3, r3, #31
 80063ba:	d528      	bpl.n	800640e <__cvt+0xb0>
 80063bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063be:	18eb      	adds	r3, r5, r3
 80063c0:	9307      	str	r3, [sp, #28]
 80063c2:	2f46      	cmp	r7, #70	; 0x46
 80063c4:	d114      	bne.n	80063f0 <__cvt+0x92>
 80063c6:	782b      	ldrb	r3, [r5, #0]
 80063c8:	2b30      	cmp	r3, #48	; 0x30
 80063ca:	d10c      	bne.n	80063e6 <__cvt+0x88>
 80063cc:	2200      	movs	r2, #0
 80063ce:	2300      	movs	r3, #0
 80063d0:	0020      	movs	r0, r4
 80063d2:	0031      	movs	r1, r6
 80063d4:	f7fa f838 	bl	8000448 <__aeabi_dcmpeq>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d104      	bne.n	80063e6 <__cvt+0x88>
 80063dc:	2301      	movs	r3, #1
 80063de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063e8:	9a07      	ldr	r2, [sp, #28]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	18d3      	adds	r3, r2, r3
 80063ee:	9307      	str	r3, [sp, #28]
 80063f0:	2200      	movs	r2, #0
 80063f2:	2300      	movs	r3, #0
 80063f4:	0020      	movs	r0, r4
 80063f6:	0031      	movs	r1, r6
 80063f8:	f7fa f826 	bl	8000448 <__aeabi_dcmpeq>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d001      	beq.n	8006404 <__cvt+0xa6>
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	9309      	str	r3, [sp, #36]	; 0x24
 8006404:	2230      	movs	r2, #48	; 0x30
 8006406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006408:	9907      	ldr	r1, [sp, #28]
 800640a:	428b      	cmp	r3, r1
 800640c:	d306      	bcc.n	800641c <__cvt+0xbe>
 800640e:	0028      	movs	r0, r5
 8006410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006412:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006414:	1b5b      	subs	r3, r3, r5
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	b00b      	add	sp, #44	; 0x2c
 800641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800641c:	1c59      	adds	r1, r3, #1
 800641e:	9109      	str	r1, [sp, #36]	; 0x24
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e7f0      	b.n	8006406 <__cvt+0xa8>

08006424 <__exponent>:
 8006424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006426:	1c83      	adds	r3, r0, #2
 8006428:	b087      	sub	sp, #28
 800642a:	9303      	str	r3, [sp, #12]
 800642c:	0005      	movs	r5, r0
 800642e:	000c      	movs	r4, r1
 8006430:	232b      	movs	r3, #43	; 0x2b
 8006432:	7002      	strb	r2, [r0, #0]
 8006434:	2900      	cmp	r1, #0
 8006436:	da01      	bge.n	800643c <__exponent+0x18>
 8006438:	424c      	negs	r4, r1
 800643a:	3302      	adds	r3, #2
 800643c:	706b      	strb	r3, [r5, #1]
 800643e:	2c09      	cmp	r4, #9
 8006440:	dd31      	ble.n	80064a6 <__exponent+0x82>
 8006442:	270a      	movs	r7, #10
 8006444:	ab04      	add	r3, sp, #16
 8006446:	1dde      	adds	r6, r3, #7
 8006448:	0020      	movs	r0, r4
 800644a:	0039      	movs	r1, r7
 800644c:	9601      	str	r6, [sp, #4]
 800644e:	f7f9 ffe5 	bl	800041c <__aeabi_idivmod>
 8006452:	3e01      	subs	r6, #1
 8006454:	3130      	adds	r1, #48	; 0x30
 8006456:	0020      	movs	r0, r4
 8006458:	7031      	strb	r1, [r6, #0]
 800645a:	0039      	movs	r1, r7
 800645c:	9402      	str	r4, [sp, #8]
 800645e:	f7f9 fef7 	bl	8000250 <__divsi3>
 8006462:	9b02      	ldr	r3, [sp, #8]
 8006464:	0004      	movs	r4, r0
 8006466:	2b63      	cmp	r3, #99	; 0x63
 8006468:	dcee      	bgt.n	8006448 <__exponent+0x24>
 800646a:	9b01      	ldr	r3, [sp, #4]
 800646c:	3430      	adds	r4, #48	; 0x30
 800646e:	1e9a      	subs	r2, r3, #2
 8006470:	0013      	movs	r3, r2
 8006472:	9903      	ldr	r1, [sp, #12]
 8006474:	7014      	strb	r4, [r2, #0]
 8006476:	a804      	add	r0, sp, #16
 8006478:	3007      	adds	r0, #7
 800647a:	4298      	cmp	r0, r3
 800647c:	d80e      	bhi.n	800649c <__exponent+0x78>
 800647e:	ab04      	add	r3, sp, #16
 8006480:	3307      	adds	r3, #7
 8006482:	2000      	movs	r0, #0
 8006484:	429a      	cmp	r2, r3
 8006486:	d804      	bhi.n	8006492 <__exponent+0x6e>
 8006488:	ab04      	add	r3, sp, #16
 800648a:	3009      	adds	r0, #9
 800648c:	18c0      	adds	r0, r0, r3
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	1ac0      	subs	r0, r0, r3
 8006492:	9b03      	ldr	r3, [sp, #12]
 8006494:	1818      	adds	r0, r3, r0
 8006496:	1b40      	subs	r0, r0, r5
 8006498:	b007      	add	sp, #28
 800649a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649c:	7818      	ldrb	r0, [r3, #0]
 800649e:	3301      	adds	r3, #1
 80064a0:	7008      	strb	r0, [r1, #0]
 80064a2:	3101      	adds	r1, #1
 80064a4:	e7e7      	b.n	8006476 <__exponent+0x52>
 80064a6:	2330      	movs	r3, #48	; 0x30
 80064a8:	18e4      	adds	r4, r4, r3
 80064aa:	70ab      	strb	r3, [r5, #2]
 80064ac:	1d28      	adds	r0, r5, #4
 80064ae:	70ec      	strb	r4, [r5, #3]
 80064b0:	e7f1      	b.n	8006496 <__exponent+0x72>
	...

080064b4 <_printf_float>:
 80064b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b6:	b095      	sub	sp, #84	; 0x54
 80064b8:	000c      	movs	r4, r1
 80064ba:	9209      	str	r2, [sp, #36]	; 0x24
 80064bc:	001e      	movs	r6, r3
 80064be:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80064c0:	0007      	movs	r7, r0
 80064c2:	f001 fd93 	bl	8007fec <_localeconv_r>
 80064c6:	6803      	ldr	r3, [r0, #0]
 80064c8:	0018      	movs	r0, r3
 80064ca:	930c      	str	r3, [sp, #48]	; 0x30
 80064cc:	f7f9 fe1a 	bl	8000104 <strlen>
 80064d0:	2300      	movs	r3, #0
 80064d2:	9312      	str	r3, [sp, #72]	; 0x48
 80064d4:	7e23      	ldrb	r3, [r4, #24]
 80064d6:	2207      	movs	r2, #7
 80064d8:	930a      	str	r3, [sp, #40]	; 0x28
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	900e      	str	r0, [sp, #56]	; 0x38
 80064de:	930d      	str	r3, [sp, #52]	; 0x34
 80064e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	05c9      	lsls	r1, r1, #23
 80064e6:	d547      	bpl.n	8006578 <_printf_float+0xc4>
 80064e8:	189b      	adds	r3, r3, r2
 80064ea:	4393      	bics	r3, r2
 80064ec:	001a      	movs	r2, r3
 80064ee:	3208      	adds	r2, #8
 80064f0:	602a      	str	r2, [r5, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	64a2      	str	r2, [r4, #72]	; 0x48
 80064f8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80064fa:	2201      	movs	r2, #1
 80064fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80064fe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006500:	930b      	str	r3, [sp, #44]	; 0x2c
 8006502:	006b      	lsls	r3, r5, #1
 8006504:	085b      	lsrs	r3, r3, #1
 8006506:	930f      	str	r3, [sp, #60]	; 0x3c
 8006508:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800650a:	4ba7      	ldr	r3, [pc, #668]	; (80067a8 <_printf_float+0x2f4>)
 800650c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800650e:	4252      	negs	r2, r2
 8006510:	f7fc fc0a 	bl	8002d28 <__aeabi_dcmpun>
 8006514:	2800      	cmp	r0, #0
 8006516:	d131      	bne.n	800657c <_printf_float+0xc8>
 8006518:	2201      	movs	r2, #1
 800651a:	4ba3      	ldr	r3, [pc, #652]	; (80067a8 <_printf_float+0x2f4>)
 800651c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800651e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006520:	4252      	negs	r2, r2
 8006522:	f7f9 ffa1 	bl	8000468 <__aeabi_dcmple>
 8006526:	2800      	cmp	r0, #0
 8006528:	d128      	bne.n	800657c <_printf_float+0xc8>
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	0029      	movs	r1, r5
 8006530:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006532:	f7f9 ff8f 	bl	8000454 <__aeabi_dcmplt>
 8006536:	2800      	cmp	r0, #0
 8006538:	d003      	beq.n	8006542 <_printf_float+0x8e>
 800653a:	0023      	movs	r3, r4
 800653c:	222d      	movs	r2, #45	; 0x2d
 800653e:	3343      	adds	r3, #67	; 0x43
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006544:	4d99      	ldr	r5, [pc, #612]	; (80067ac <_printf_float+0x2f8>)
 8006546:	2b47      	cmp	r3, #71	; 0x47
 8006548:	d900      	bls.n	800654c <_printf_float+0x98>
 800654a:	4d99      	ldr	r5, [pc, #612]	; (80067b0 <_printf_float+0x2fc>)
 800654c:	2303      	movs	r3, #3
 800654e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006550:	6123      	str	r3, [r4, #16]
 8006552:	3301      	adds	r3, #1
 8006554:	439a      	bics	r2, r3
 8006556:	2300      	movs	r3, #0
 8006558:	6022      	str	r2, [r4, #0]
 800655a:	930b      	str	r3, [sp, #44]	; 0x2c
 800655c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800655e:	0021      	movs	r1, r4
 8006560:	0038      	movs	r0, r7
 8006562:	9600      	str	r6, [sp, #0]
 8006564:	aa13      	add	r2, sp, #76	; 0x4c
 8006566:	f000 f9e7 	bl	8006938 <_printf_common>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d000      	beq.n	8006570 <_printf_float+0xbc>
 800656e:	e0a2      	b.n	80066b6 <_printf_float+0x202>
 8006570:	2001      	movs	r0, #1
 8006572:	4240      	negs	r0, r0
 8006574:	b015      	add	sp, #84	; 0x54
 8006576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006578:	3307      	adds	r3, #7
 800657a:	e7b6      	b.n	80064ea <_printf_float+0x36>
 800657c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800657e:	002b      	movs	r3, r5
 8006580:	0010      	movs	r0, r2
 8006582:	0029      	movs	r1, r5
 8006584:	f7fc fbd0 	bl	8002d28 <__aeabi_dcmpun>
 8006588:	2800      	cmp	r0, #0
 800658a:	d00b      	beq.n	80065a4 <_printf_float+0xf0>
 800658c:	2d00      	cmp	r5, #0
 800658e:	da03      	bge.n	8006598 <_printf_float+0xe4>
 8006590:	0023      	movs	r3, r4
 8006592:	222d      	movs	r2, #45	; 0x2d
 8006594:	3343      	adds	r3, #67	; 0x43
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800659a:	4d86      	ldr	r5, [pc, #536]	; (80067b4 <_printf_float+0x300>)
 800659c:	2b47      	cmp	r3, #71	; 0x47
 800659e:	d9d5      	bls.n	800654c <_printf_float+0x98>
 80065a0:	4d85      	ldr	r5, [pc, #532]	; (80067b8 <_printf_float+0x304>)
 80065a2:	e7d3      	b.n	800654c <_printf_float+0x98>
 80065a4:	2220      	movs	r2, #32
 80065a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	4391      	bics	r1, r2
 80065ac:	910f      	str	r1, [sp, #60]	; 0x3c
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	d149      	bne.n	8006646 <_printf_float+0x192>
 80065b2:	3307      	adds	r3, #7
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4313      	orrs	r3, r2
 80065be:	2200      	movs	r2, #0
 80065c0:	9206      	str	r2, [sp, #24]
 80065c2:	aa12      	add	r2, sp, #72	; 0x48
 80065c4:	9205      	str	r2, [sp, #20]
 80065c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c8:	a908      	add	r1, sp, #32
 80065ca:	9204      	str	r2, [sp, #16]
 80065cc:	aa11      	add	r2, sp, #68	; 0x44
 80065ce:	9203      	str	r2, [sp, #12]
 80065d0:	2223      	movs	r2, #35	; 0x23
 80065d2:	6023      	str	r3, [r4, #0]
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	6863      	ldr	r3, [r4, #4]
 80065d8:	1852      	adds	r2, r2, r1
 80065da:	9202      	str	r2, [sp, #8]
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	0038      	movs	r0, r7
 80065e0:	002b      	movs	r3, r5
 80065e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065e4:	f7ff febb 	bl	800635e <__cvt>
 80065e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065ea:	0005      	movs	r5, r0
 80065ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80065ee:	2b47      	cmp	r3, #71	; 0x47
 80065f0:	d108      	bne.n	8006604 <_printf_float+0x150>
 80065f2:	1ccb      	adds	r3, r1, #3
 80065f4:	db02      	blt.n	80065fc <_printf_float+0x148>
 80065f6:	6863      	ldr	r3, [r4, #4]
 80065f8:	4299      	cmp	r1, r3
 80065fa:	dd48      	ble.n	800668e <_printf_float+0x1da>
 80065fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065fe:	3b02      	subs	r3, #2
 8006600:	b2db      	uxtb	r3, r3
 8006602:	930a      	str	r3, [sp, #40]	; 0x28
 8006604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006606:	2b65      	cmp	r3, #101	; 0x65
 8006608:	d824      	bhi.n	8006654 <_printf_float+0x1a0>
 800660a:	0020      	movs	r0, r4
 800660c:	001a      	movs	r2, r3
 800660e:	3901      	subs	r1, #1
 8006610:	3050      	adds	r0, #80	; 0x50
 8006612:	9111      	str	r1, [sp, #68]	; 0x44
 8006614:	f7ff ff06 	bl	8006424 <__exponent>
 8006618:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800661a:	900b      	str	r0, [sp, #44]	; 0x2c
 800661c:	1813      	adds	r3, r2, r0
 800661e:	6123      	str	r3, [r4, #16]
 8006620:	2a01      	cmp	r2, #1
 8006622:	dc02      	bgt.n	800662a <_printf_float+0x176>
 8006624:	6822      	ldr	r2, [r4, #0]
 8006626:	07d2      	lsls	r2, r2, #31
 8006628:	d501      	bpl.n	800662e <_printf_float+0x17a>
 800662a:	3301      	adds	r3, #1
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	2323      	movs	r3, #35	; 0x23
 8006630:	aa08      	add	r2, sp, #32
 8006632:	189b      	adds	r3, r3, r2
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d100      	bne.n	800663c <_printf_float+0x188>
 800663a:	e78f      	b.n	800655c <_printf_float+0xa8>
 800663c:	0023      	movs	r3, r4
 800663e:	222d      	movs	r2, #45	; 0x2d
 8006640:	3343      	adds	r3, #67	; 0x43
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	e78a      	b.n	800655c <_printf_float+0xa8>
 8006646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006648:	2a47      	cmp	r2, #71	; 0x47
 800664a:	d1b4      	bne.n	80065b6 <_printf_float+0x102>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1b2      	bne.n	80065b6 <_printf_float+0x102>
 8006650:	3301      	adds	r3, #1
 8006652:	e7af      	b.n	80065b4 <_printf_float+0x100>
 8006654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006656:	2b66      	cmp	r3, #102	; 0x66
 8006658:	d11b      	bne.n	8006692 <_printf_float+0x1de>
 800665a:	6863      	ldr	r3, [r4, #4]
 800665c:	2900      	cmp	r1, #0
 800665e:	dd0d      	ble.n	800667c <_printf_float+0x1c8>
 8006660:	6121      	str	r1, [r4, #16]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d102      	bne.n	800666c <_printf_float+0x1b8>
 8006666:	6822      	ldr	r2, [r4, #0]
 8006668:	07d2      	lsls	r2, r2, #31
 800666a:	d502      	bpl.n	8006672 <_printf_float+0x1be>
 800666c:	3301      	adds	r3, #1
 800666e:	1859      	adds	r1, r3, r1
 8006670:	6121      	str	r1, [r4, #16]
 8006672:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006674:	65a3      	str	r3, [r4, #88]	; 0x58
 8006676:	2300      	movs	r3, #0
 8006678:	930b      	str	r3, [sp, #44]	; 0x2c
 800667a:	e7d8      	b.n	800662e <_printf_float+0x17a>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <_printf_float+0x1d4>
 8006680:	2201      	movs	r2, #1
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	4211      	tst	r1, r2
 8006686:	d000      	beq.n	800668a <_printf_float+0x1d6>
 8006688:	1c9a      	adds	r2, r3, #2
 800668a:	6122      	str	r2, [r4, #16]
 800668c:	e7f1      	b.n	8006672 <_printf_float+0x1be>
 800668e:	2367      	movs	r3, #103	; 0x67
 8006690:	930a      	str	r3, [sp, #40]	; 0x28
 8006692:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006694:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006696:	4293      	cmp	r3, r2
 8006698:	db06      	blt.n	80066a8 <_printf_float+0x1f4>
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	07d2      	lsls	r2, r2, #31
 80066a0:	d5e7      	bpl.n	8006672 <_printf_float+0x1be>
 80066a2:	3301      	adds	r3, #1
 80066a4:	6123      	str	r3, [r4, #16]
 80066a6:	e7e4      	b.n	8006672 <_printf_float+0x1be>
 80066a8:	2101      	movs	r1, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	dc01      	bgt.n	80066b2 <_printf_float+0x1fe>
 80066ae:	1849      	adds	r1, r1, r1
 80066b0:	1ac9      	subs	r1, r1, r3
 80066b2:	1852      	adds	r2, r2, r1
 80066b4:	e7e9      	b.n	800668a <_printf_float+0x1d6>
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	0553      	lsls	r3, r2, #21
 80066ba:	d407      	bmi.n	80066cc <_printf_float+0x218>
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	002a      	movs	r2, r5
 80066c0:	0038      	movs	r0, r7
 80066c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066c4:	47b0      	blx	r6
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d128      	bne.n	800671c <_printf_float+0x268>
 80066ca:	e751      	b.n	8006570 <_printf_float+0xbc>
 80066cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ce:	2b65      	cmp	r3, #101	; 0x65
 80066d0:	d800      	bhi.n	80066d4 <_printf_float+0x220>
 80066d2:	e0e1      	b.n	8006898 <_printf_float+0x3e4>
 80066d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80066d6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80066d8:	2200      	movs	r2, #0
 80066da:	2300      	movs	r3, #0
 80066dc:	f7f9 feb4 	bl	8000448 <__aeabi_dcmpeq>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d031      	beq.n	8006748 <_printf_float+0x294>
 80066e4:	2301      	movs	r3, #1
 80066e6:	0038      	movs	r0, r7
 80066e8:	4a34      	ldr	r2, [pc, #208]	; (80067bc <_printf_float+0x308>)
 80066ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066ec:	47b0      	blx	r6
 80066ee:	1c43      	adds	r3, r0, #1
 80066f0:	d100      	bne.n	80066f4 <_printf_float+0x240>
 80066f2:	e73d      	b.n	8006570 <_printf_float+0xbc>
 80066f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066f8:	4293      	cmp	r3, r2
 80066fa:	db02      	blt.n	8006702 <_printf_float+0x24e>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	07db      	lsls	r3, r3, #31
 8006700:	d50c      	bpl.n	800671c <_printf_float+0x268>
 8006702:	0038      	movs	r0, r7
 8006704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006708:	9909      	ldr	r1, [sp, #36]	; 0x24
 800670a:	47b0      	blx	r6
 800670c:	2500      	movs	r5, #0
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	d100      	bne.n	8006714 <_printf_float+0x260>
 8006712:	e72d      	b.n	8006570 <_printf_float+0xbc>
 8006714:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006716:	3b01      	subs	r3, #1
 8006718:	42ab      	cmp	r3, r5
 800671a:	dc0a      	bgt.n	8006732 <_printf_float+0x27e>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d500      	bpl.n	8006724 <_printf_float+0x270>
 8006722:	e106      	b.n	8006932 <_printf_float+0x47e>
 8006724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006726:	68e0      	ldr	r0, [r4, #12]
 8006728:	4298      	cmp	r0, r3
 800672a:	db00      	blt.n	800672e <_printf_float+0x27a>
 800672c:	e722      	b.n	8006574 <_printf_float+0xc0>
 800672e:	0018      	movs	r0, r3
 8006730:	e720      	b.n	8006574 <_printf_float+0xc0>
 8006732:	0022      	movs	r2, r4
 8006734:	2301      	movs	r3, #1
 8006736:	0038      	movs	r0, r7
 8006738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673a:	321a      	adds	r2, #26
 800673c:	47b0      	blx	r6
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	d100      	bne.n	8006744 <_printf_float+0x290>
 8006742:	e715      	b.n	8006570 <_printf_float+0xbc>
 8006744:	3501      	adds	r5, #1
 8006746:	e7e5      	b.n	8006714 <_printf_float+0x260>
 8006748:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800674a:	2b00      	cmp	r3, #0
 800674c:	dc38      	bgt.n	80067c0 <_printf_float+0x30c>
 800674e:	2301      	movs	r3, #1
 8006750:	0038      	movs	r0, r7
 8006752:	4a1a      	ldr	r2, [pc, #104]	; (80067bc <_printf_float+0x308>)
 8006754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006756:	47b0      	blx	r6
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	d100      	bne.n	800675e <_printf_float+0x2aa>
 800675c:	e708      	b.n	8006570 <_printf_float+0xbc>
 800675e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006760:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006762:	4313      	orrs	r3, r2
 8006764:	d102      	bne.n	800676c <_printf_float+0x2b8>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	07db      	lsls	r3, r3, #31
 800676a:	d5d7      	bpl.n	800671c <_printf_float+0x268>
 800676c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676e:	0038      	movs	r0, r7
 8006770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006772:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006774:	47b0      	blx	r6
 8006776:	1c43      	adds	r3, r0, #1
 8006778:	d100      	bne.n	800677c <_printf_float+0x2c8>
 800677a:	e6f9      	b.n	8006570 <_printf_float+0xbc>
 800677c:	2300      	movs	r3, #0
 800677e:	930a      	str	r3, [sp, #40]	; 0x28
 8006780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006782:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006784:	425b      	negs	r3, r3
 8006786:	4293      	cmp	r3, r2
 8006788:	dc01      	bgt.n	800678e <_printf_float+0x2da>
 800678a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800678c:	e797      	b.n	80066be <_printf_float+0x20a>
 800678e:	0022      	movs	r2, r4
 8006790:	2301      	movs	r3, #1
 8006792:	0038      	movs	r0, r7
 8006794:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006796:	321a      	adds	r2, #26
 8006798:	47b0      	blx	r6
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	d100      	bne.n	80067a0 <_printf_float+0x2ec>
 800679e:	e6e7      	b.n	8006570 <_printf_float+0xbc>
 80067a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a2:	3301      	adds	r3, #1
 80067a4:	e7eb      	b.n	800677e <_printf_float+0x2ca>
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	7fefffff 	.word	0x7fefffff
 80067ac:	08009350 	.word	0x08009350
 80067b0:	08009354 	.word	0x08009354
 80067b4:	08009358 	.word	0x08009358
 80067b8:	0800935c 	.word	0x0800935c
 80067bc:	08009360 	.word	0x08009360
 80067c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067c4:	920a      	str	r2, [sp, #40]	; 0x28
 80067c6:	429a      	cmp	r2, r3
 80067c8:	dd00      	ble.n	80067cc <_printf_float+0x318>
 80067ca:	930a      	str	r3, [sp, #40]	; 0x28
 80067cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	dc3c      	bgt.n	800684c <_printf_float+0x398>
 80067d2:	2300      	movs	r3, #0
 80067d4:	930d      	str	r3, [sp, #52]	; 0x34
 80067d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d8:	43db      	mvns	r3, r3
 80067da:	17db      	asrs	r3, r3, #31
 80067dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80067de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80067e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80067e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e6:	4013      	ands	r3, r2
 80067e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067ee:	4293      	cmp	r3, r2
 80067f0:	dc34      	bgt.n	800685c <_printf_float+0x3a8>
 80067f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067f6:	4293      	cmp	r3, r2
 80067f8:	db3d      	blt.n	8006876 <_printf_float+0x3c2>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	07db      	lsls	r3, r3, #31
 80067fe:	d43a      	bmi.n	8006876 <_printf_float+0x3c2>
 8006800:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006804:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	1a52      	subs	r2, r2, r1
 800680a:	920a      	str	r2, [sp, #40]	; 0x28
 800680c:	429a      	cmp	r2, r3
 800680e:	dd00      	ble.n	8006812 <_printf_float+0x35e>
 8006810:	930a      	str	r3, [sp, #40]	; 0x28
 8006812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006814:	2b00      	cmp	r3, #0
 8006816:	dc36      	bgt.n	8006886 <_printf_float+0x3d2>
 8006818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681a:	2500      	movs	r5, #0
 800681c:	43db      	mvns	r3, r3
 800681e:	17db      	asrs	r3, r3, #31
 8006820:	930b      	str	r3, [sp, #44]	; 0x2c
 8006822:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006824:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006826:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800682c:	400a      	ands	r2, r1
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	42ab      	cmp	r3, r5
 8006832:	dc00      	bgt.n	8006836 <_printf_float+0x382>
 8006834:	e772      	b.n	800671c <_printf_float+0x268>
 8006836:	0022      	movs	r2, r4
 8006838:	2301      	movs	r3, #1
 800683a:	0038      	movs	r0, r7
 800683c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800683e:	321a      	adds	r2, #26
 8006840:	47b0      	blx	r6
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	d100      	bne.n	8006848 <_printf_float+0x394>
 8006846:	e693      	b.n	8006570 <_printf_float+0xbc>
 8006848:	3501      	adds	r5, #1
 800684a:	e7ea      	b.n	8006822 <_printf_float+0x36e>
 800684c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684e:	002a      	movs	r2, r5
 8006850:	0038      	movs	r0, r7
 8006852:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006854:	47b0      	blx	r6
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d1bb      	bne.n	80067d2 <_printf_float+0x31e>
 800685a:	e689      	b.n	8006570 <_printf_float+0xbc>
 800685c:	0022      	movs	r2, r4
 800685e:	2301      	movs	r3, #1
 8006860:	0038      	movs	r0, r7
 8006862:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006864:	321a      	adds	r2, #26
 8006866:	47b0      	blx	r6
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	d100      	bne.n	800686e <_printf_float+0x3ba>
 800686c:	e680      	b.n	8006570 <_printf_float+0xbc>
 800686e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006870:	3301      	adds	r3, #1
 8006872:	930d      	str	r3, [sp, #52]	; 0x34
 8006874:	e7b3      	b.n	80067de <_printf_float+0x32a>
 8006876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006878:	0038      	movs	r0, r7
 800687a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800687c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800687e:	47b0      	blx	r6
 8006880:	1c43      	adds	r3, r0, #1
 8006882:	d1bd      	bne.n	8006800 <_printf_float+0x34c>
 8006884:	e674      	b.n	8006570 <_printf_float+0xbc>
 8006886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006888:	0038      	movs	r0, r7
 800688a:	18ea      	adds	r2, r5, r3
 800688c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006890:	47b0      	blx	r6
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	d1c0      	bne.n	8006818 <_printf_float+0x364>
 8006896:	e66b      	b.n	8006570 <_printf_float+0xbc>
 8006898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800689a:	2b01      	cmp	r3, #1
 800689c:	dc02      	bgt.n	80068a4 <_printf_float+0x3f0>
 800689e:	2301      	movs	r3, #1
 80068a0:	421a      	tst	r2, r3
 80068a2:	d034      	beq.n	800690e <_printf_float+0x45a>
 80068a4:	2301      	movs	r3, #1
 80068a6:	002a      	movs	r2, r5
 80068a8:	0038      	movs	r0, r7
 80068aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ac:	47b0      	blx	r6
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	d100      	bne.n	80068b4 <_printf_float+0x400>
 80068b2:	e65d      	b.n	8006570 <_printf_float+0xbc>
 80068b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b6:	0038      	movs	r0, r7
 80068b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068bc:	47b0      	blx	r6
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d100      	bne.n	80068c4 <_printf_float+0x410>
 80068c2:	e655      	b.n	8006570 <_printf_float+0xbc>
 80068c4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80068c6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80068c8:	2200      	movs	r2, #0
 80068ca:	2300      	movs	r3, #0
 80068cc:	f7f9 fdbc 	bl	8000448 <__aeabi_dcmpeq>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d11a      	bne.n	800690a <_printf_float+0x456>
 80068d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068d6:	1c6a      	adds	r2, r5, #1
 80068d8:	3b01      	subs	r3, #1
 80068da:	0038      	movs	r0, r7
 80068dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068de:	47b0      	blx	r6
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d10e      	bne.n	8006902 <_printf_float+0x44e>
 80068e4:	e644      	b.n	8006570 <_printf_float+0xbc>
 80068e6:	0022      	movs	r2, r4
 80068e8:	2301      	movs	r3, #1
 80068ea:	0038      	movs	r0, r7
 80068ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068ee:	321a      	adds	r2, #26
 80068f0:	47b0      	blx	r6
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d100      	bne.n	80068f8 <_printf_float+0x444>
 80068f6:	e63b      	b.n	8006570 <_printf_float+0xbc>
 80068f8:	3501      	adds	r5, #1
 80068fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068fc:	3b01      	subs	r3, #1
 80068fe:	42ab      	cmp	r3, r5
 8006900:	dcf1      	bgt.n	80068e6 <_printf_float+0x432>
 8006902:	0022      	movs	r2, r4
 8006904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006906:	3250      	adds	r2, #80	; 0x50
 8006908:	e6da      	b.n	80066c0 <_printf_float+0x20c>
 800690a:	2500      	movs	r5, #0
 800690c:	e7f5      	b.n	80068fa <_printf_float+0x446>
 800690e:	002a      	movs	r2, r5
 8006910:	e7e3      	b.n	80068da <_printf_float+0x426>
 8006912:	0022      	movs	r2, r4
 8006914:	2301      	movs	r3, #1
 8006916:	0038      	movs	r0, r7
 8006918:	9909      	ldr	r1, [sp, #36]	; 0x24
 800691a:	3219      	adds	r2, #25
 800691c:	47b0      	blx	r6
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	d100      	bne.n	8006924 <_printf_float+0x470>
 8006922:	e625      	b.n	8006570 <_printf_float+0xbc>
 8006924:	3501      	adds	r5, #1
 8006926:	68e3      	ldr	r3, [r4, #12]
 8006928:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	42ab      	cmp	r3, r5
 800692e:	dcf0      	bgt.n	8006912 <_printf_float+0x45e>
 8006930:	e6f8      	b.n	8006724 <_printf_float+0x270>
 8006932:	2500      	movs	r5, #0
 8006934:	e7f7      	b.n	8006926 <_printf_float+0x472>
 8006936:	46c0      	nop			; (mov r8, r8)

08006938 <_printf_common>:
 8006938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800693a:	0015      	movs	r5, r2
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	688a      	ldr	r2, [r1, #8]
 8006940:	690b      	ldr	r3, [r1, #16]
 8006942:	000c      	movs	r4, r1
 8006944:	9000      	str	r0, [sp, #0]
 8006946:	4293      	cmp	r3, r2
 8006948:	da00      	bge.n	800694c <_printf_common+0x14>
 800694a:	0013      	movs	r3, r2
 800694c:	0022      	movs	r2, r4
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	3243      	adds	r2, #67	; 0x43
 8006952:	7812      	ldrb	r2, [r2, #0]
 8006954:	2a00      	cmp	r2, #0
 8006956:	d001      	beq.n	800695c <_printf_common+0x24>
 8006958:	3301      	adds	r3, #1
 800695a:	602b      	str	r3, [r5, #0]
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	069b      	lsls	r3, r3, #26
 8006960:	d502      	bpl.n	8006968 <_printf_common+0x30>
 8006962:	682b      	ldr	r3, [r5, #0]
 8006964:	3302      	adds	r3, #2
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	2306      	movs	r3, #6
 800696c:	0017      	movs	r7, r2
 800696e:	401f      	ands	r7, r3
 8006970:	421a      	tst	r2, r3
 8006972:	d027      	beq.n	80069c4 <_printf_common+0x8c>
 8006974:	0023      	movs	r3, r4
 8006976:	3343      	adds	r3, #67	; 0x43
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	1e5a      	subs	r2, r3, #1
 800697c:	4193      	sbcs	r3, r2
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	0692      	lsls	r2, r2, #26
 8006982:	d430      	bmi.n	80069e6 <_printf_common+0xae>
 8006984:	0022      	movs	r2, r4
 8006986:	9901      	ldr	r1, [sp, #4]
 8006988:	9800      	ldr	r0, [sp, #0]
 800698a:	9e08      	ldr	r6, [sp, #32]
 800698c:	3243      	adds	r2, #67	; 0x43
 800698e:	47b0      	blx	r6
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d025      	beq.n	80069e0 <_printf_common+0xa8>
 8006994:	2306      	movs	r3, #6
 8006996:	6820      	ldr	r0, [r4, #0]
 8006998:	682a      	ldr	r2, [r5, #0]
 800699a:	68e1      	ldr	r1, [r4, #12]
 800699c:	2500      	movs	r5, #0
 800699e:	4003      	ands	r3, r0
 80069a0:	2b04      	cmp	r3, #4
 80069a2:	d103      	bne.n	80069ac <_printf_common+0x74>
 80069a4:	1a8d      	subs	r5, r1, r2
 80069a6:	43eb      	mvns	r3, r5
 80069a8:	17db      	asrs	r3, r3, #31
 80069aa:	401d      	ands	r5, r3
 80069ac:	68a3      	ldr	r3, [r4, #8]
 80069ae:	6922      	ldr	r2, [r4, #16]
 80069b0:	4293      	cmp	r3, r2
 80069b2:	dd01      	ble.n	80069b8 <_printf_common+0x80>
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	18ed      	adds	r5, r5, r3
 80069b8:	2700      	movs	r7, #0
 80069ba:	42bd      	cmp	r5, r7
 80069bc:	d120      	bne.n	8006a00 <_printf_common+0xc8>
 80069be:	2000      	movs	r0, #0
 80069c0:	e010      	b.n	80069e4 <_printf_common+0xac>
 80069c2:	3701      	adds	r7, #1
 80069c4:	68e3      	ldr	r3, [r4, #12]
 80069c6:	682a      	ldr	r2, [r5, #0]
 80069c8:	1a9b      	subs	r3, r3, r2
 80069ca:	42bb      	cmp	r3, r7
 80069cc:	ddd2      	ble.n	8006974 <_printf_common+0x3c>
 80069ce:	0022      	movs	r2, r4
 80069d0:	2301      	movs	r3, #1
 80069d2:	9901      	ldr	r1, [sp, #4]
 80069d4:	9800      	ldr	r0, [sp, #0]
 80069d6:	9e08      	ldr	r6, [sp, #32]
 80069d8:	3219      	adds	r2, #25
 80069da:	47b0      	blx	r6
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d1f0      	bne.n	80069c2 <_printf_common+0x8a>
 80069e0:	2001      	movs	r0, #1
 80069e2:	4240      	negs	r0, r0
 80069e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069e6:	2030      	movs	r0, #48	; 0x30
 80069e8:	18e1      	adds	r1, r4, r3
 80069ea:	3143      	adds	r1, #67	; 0x43
 80069ec:	7008      	strb	r0, [r1, #0]
 80069ee:	0021      	movs	r1, r4
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	3145      	adds	r1, #69	; 0x45
 80069f4:	7809      	ldrb	r1, [r1, #0]
 80069f6:	18a2      	adds	r2, r4, r2
 80069f8:	3243      	adds	r2, #67	; 0x43
 80069fa:	3302      	adds	r3, #2
 80069fc:	7011      	strb	r1, [r2, #0]
 80069fe:	e7c1      	b.n	8006984 <_printf_common+0x4c>
 8006a00:	0022      	movs	r2, r4
 8006a02:	2301      	movs	r3, #1
 8006a04:	9901      	ldr	r1, [sp, #4]
 8006a06:	9800      	ldr	r0, [sp, #0]
 8006a08:	9e08      	ldr	r6, [sp, #32]
 8006a0a:	321a      	adds	r2, #26
 8006a0c:	47b0      	blx	r6
 8006a0e:	1c43      	adds	r3, r0, #1
 8006a10:	d0e6      	beq.n	80069e0 <_printf_common+0xa8>
 8006a12:	3701      	adds	r7, #1
 8006a14:	e7d1      	b.n	80069ba <_printf_common+0x82>
	...

08006a18 <_printf_i>:
 8006a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a1a:	b08b      	sub	sp, #44	; 0x2c
 8006a1c:	9206      	str	r2, [sp, #24]
 8006a1e:	000a      	movs	r2, r1
 8006a20:	3243      	adds	r2, #67	; 0x43
 8006a22:	9307      	str	r3, [sp, #28]
 8006a24:	9005      	str	r0, [sp, #20]
 8006a26:	9204      	str	r2, [sp, #16]
 8006a28:	7e0a      	ldrb	r2, [r1, #24]
 8006a2a:	000c      	movs	r4, r1
 8006a2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a2e:	2a78      	cmp	r2, #120	; 0x78
 8006a30:	d807      	bhi.n	8006a42 <_printf_i+0x2a>
 8006a32:	2a62      	cmp	r2, #98	; 0x62
 8006a34:	d809      	bhi.n	8006a4a <_printf_i+0x32>
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	d100      	bne.n	8006a3c <_printf_i+0x24>
 8006a3a:	e0c1      	b.n	8006bc0 <_printf_i+0x1a8>
 8006a3c:	2a58      	cmp	r2, #88	; 0x58
 8006a3e:	d100      	bne.n	8006a42 <_printf_i+0x2a>
 8006a40:	e08c      	b.n	8006b5c <_printf_i+0x144>
 8006a42:	0026      	movs	r6, r4
 8006a44:	3642      	adds	r6, #66	; 0x42
 8006a46:	7032      	strb	r2, [r6, #0]
 8006a48:	e022      	b.n	8006a90 <_printf_i+0x78>
 8006a4a:	0010      	movs	r0, r2
 8006a4c:	3863      	subs	r0, #99	; 0x63
 8006a4e:	2815      	cmp	r0, #21
 8006a50:	d8f7      	bhi.n	8006a42 <_printf_i+0x2a>
 8006a52:	f7f9 fb69 	bl	8000128 <__gnu_thumb1_case_shi>
 8006a56:	0016      	.short	0x0016
 8006a58:	fff6001f 	.word	0xfff6001f
 8006a5c:	fff6fff6 	.word	0xfff6fff6
 8006a60:	001ffff6 	.word	0x001ffff6
 8006a64:	fff6fff6 	.word	0xfff6fff6
 8006a68:	fff6fff6 	.word	0xfff6fff6
 8006a6c:	003600a8 	.word	0x003600a8
 8006a70:	fff6009a 	.word	0xfff6009a
 8006a74:	00b9fff6 	.word	0x00b9fff6
 8006a78:	0036fff6 	.word	0x0036fff6
 8006a7c:	fff6fff6 	.word	0xfff6fff6
 8006a80:	009e      	.short	0x009e
 8006a82:	0026      	movs	r6, r4
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	3642      	adds	r6, #66	; 0x42
 8006a88:	1d11      	adds	r1, r2, #4
 8006a8a:	6019      	str	r1, [r3, #0]
 8006a8c:	6813      	ldr	r3, [r2, #0]
 8006a8e:	7033      	strb	r3, [r6, #0]
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0a7      	b.n	8006be4 <_printf_i+0x1cc>
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	1d0a      	adds	r2, r1, #4
 8006a9a:	0605      	lsls	r5, r0, #24
 8006a9c:	d50b      	bpl.n	8006ab6 <_printf_i+0x9e>
 8006a9e:	680d      	ldr	r5, [r1, #0]
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	da03      	bge.n	8006aae <_printf_i+0x96>
 8006aa6:	232d      	movs	r3, #45	; 0x2d
 8006aa8:	9a04      	ldr	r2, [sp, #16]
 8006aaa:	426d      	negs	r5, r5
 8006aac:	7013      	strb	r3, [r2, #0]
 8006aae:	4b61      	ldr	r3, [pc, #388]	; (8006c34 <_printf_i+0x21c>)
 8006ab0:	270a      	movs	r7, #10
 8006ab2:	9303      	str	r3, [sp, #12]
 8006ab4:	e01b      	b.n	8006aee <_printf_i+0xd6>
 8006ab6:	680d      	ldr	r5, [r1, #0]
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	0641      	lsls	r1, r0, #25
 8006abc:	d5f1      	bpl.n	8006aa2 <_printf_i+0x8a>
 8006abe:	b22d      	sxth	r5, r5
 8006ac0:	e7ef      	b.n	8006aa2 <_printf_i+0x8a>
 8006ac2:	680d      	ldr	r5, [r1, #0]
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	1d08      	adds	r0, r1, #4
 8006ac8:	6018      	str	r0, [r3, #0]
 8006aca:	062e      	lsls	r6, r5, #24
 8006acc:	d501      	bpl.n	8006ad2 <_printf_i+0xba>
 8006ace:	680d      	ldr	r5, [r1, #0]
 8006ad0:	e003      	b.n	8006ada <_printf_i+0xc2>
 8006ad2:	066d      	lsls	r5, r5, #25
 8006ad4:	d5fb      	bpl.n	8006ace <_printf_i+0xb6>
 8006ad6:	680d      	ldr	r5, [r1, #0]
 8006ad8:	b2ad      	uxth	r5, r5
 8006ada:	4b56      	ldr	r3, [pc, #344]	; (8006c34 <_printf_i+0x21c>)
 8006adc:	2708      	movs	r7, #8
 8006ade:	9303      	str	r3, [sp, #12]
 8006ae0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ae2:	d000      	beq.n	8006ae6 <_printf_i+0xce>
 8006ae4:	3702      	adds	r7, #2
 8006ae6:	0023      	movs	r3, r4
 8006ae8:	2200      	movs	r2, #0
 8006aea:	3343      	adds	r3, #67	; 0x43
 8006aec:	701a      	strb	r2, [r3, #0]
 8006aee:	6863      	ldr	r3, [r4, #4]
 8006af0:	60a3      	str	r3, [r4, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	db03      	blt.n	8006afe <_printf_i+0xe6>
 8006af6:	2204      	movs	r2, #4
 8006af8:	6821      	ldr	r1, [r4, #0]
 8006afa:	4391      	bics	r1, r2
 8006afc:	6021      	str	r1, [r4, #0]
 8006afe:	2d00      	cmp	r5, #0
 8006b00:	d102      	bne.n	8006b08 <_printf_i+0xf0>
 8006b02:	9e04      	ldr	r6, [sp, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00c      	beq.n	8006b22 <_printf_i+0x10a>
 8006b08:	9e04      	ldr	r6, [sp, #16]
 8006b0a:	0028      	movs	r0, r5
 8006b0c:	0039      	movs	r1, r7
 8006b0e:	f7f9 fb9b 	bl	8000248 <__aeabi_uidivmod>
 8006b12:	9b03      	ldr	r3, [sp, #12]
 8006b14:	3e01      	subs	r6, #1
 8006b16:	5c5b      	ldrb	r3, [r3, r1]
 8006b18:	7033      	strb	r3, [r6, #0]
 8006b1a:	002b      	movs	r3, r5
 8006b1c:	0005      	movs	r5, r0
 8006b1e:	429f      	cmp	r7, r3
 8006b20:	d9f3      	bls.n	8006b0a <_printf_i+0xf2>
 8006b22:	2f08      	cmp	r7, #8
 8006b24:	d109      	bne.n	8006b3a <_printf_i+0x122>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	07db      	lsls	r3, r3, #31
 8006b2a:	d506      	bpl.n	8006b3a <_printf_i+0x122>
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	6922      	ldr	r2, [r4, #16]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	dc02      	bgt.n	8006b3a <_printf_i+0x122>
 8006b34:	2330      	movs	r3, #48	; 0x30
 8006b36:	3e01      	subs	r6, #1
 8006b38:	7033      	strb	r3, [r6, #0]
 8006b3a:	9b04      	ldr	r3, [sp, #16]
 8006b3c:	1b9b      	subs	r3, r3, r6
 8006b3e:	6123      	str	r3, [r4, #16]
 8006b40:	9b07      	ldr	r3, [sp, #28]
 8006b42:	0021      	movs	r1, r4
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	9805      	ldr	r0, [sp, #20]
 8006b48:	9b06      	ldr	r3, [sp, #24]
 8006b4a:	aa09      	add	r2, sp, #36	; 0x24
 8006b4c:	f7ff fef4 	bl	8006938 <_printf_common>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d14c      	bne.n	8006bee <_printf_i+0x1d6>
 8006b54:	2001      	movs	r0, #1
 8006b56:	4240      	negs	r0, r0
 8006b58:	b00b      	add	sp, #44	; 0x2c
 8006b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5c:	3145      	adds	r1, #69	; 0x45
 8006b5e:	700a      	strb	r2, [r1, #0]
 8006b60:	4a34      	ldr	r2, [pc, #208]	; (8006c34 <_printf_i+0x21c>)
 8006b62:	9203      	str	r2, [sp, #12]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	6821      	ldr	r1, [r4, #0]
 8006b68:	ca20      	ldmia	r2!, {r5}
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	0608      	lsls	r0, r1, #24
 8006b6e:	d516      	bpl.n	8006b9e <_printf_i+0x186>
 8006b70:	07cb      	lsls	r3, r1, #31
 8006b72:	d502      	bpl.n	8006b7a <_printf_i+0x162>
 8006b74:	2320      	movs	r3, #32
 8006b76:	4319      	orrs	r1, r3
 8006b78:	6021      	str	r1, [r4, #0]
 8006b7a:	2710      	movs	r7, #16
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	d1b2      	bne.n	8006ae6 <_printf_i+0xce>
 8006b80:	2320      	movs	r3, #32
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	439a      	bics	r2, r3
 8006b86:	6022      	str	r2, [r4, #0]
 8006b88:	e7ad      	b.n	8006ae6 <_printf_i+0xce>
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	6809      	ldr	r1, [r1, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	6022      	str	r2, [r4, #0]
 8006b92:	0022      	movs	r2, r4
 8006b94:	2178      	movs	r1, #120	; 0x78
 8006b96:	3245      	adds	r2, #69	; 0x45
 8006b98:	7011      	strb	r1, [r2, #0]
 8006b9a:	4a27      	ldr	r2, [pc, #156]	; (8006c38 <_printf_i+0x220>)
 8006b9c:	e7e1      	b.n	8006b62 <_printf_i+0x14a>
 8006b9e:	0648      	lsls	r0, r1, #25
 8006ba0:	d5e6      	bpl.n	8006b70 <_printf_i+0x158>
 8006ba2:	b2ad      	uxth	r5, r5
 8006ba4:	e7e4      	b.n	8006b70 <_printf_i+0x158>
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	680d      	ldr	r5, [r1, #0]
 8006baa:	1d10      	adds	r0, r2, #4
 8006bac:	6949      	ldr	r1, [r1, #20]
 8006bae:	6018      	str	r0, [r3, #0]
 8006bb0:	6813      	ldr	r3, [r2, #0]
 8006bb2:	062e      	lsls	r6, r5, #24
 8006bb4:	d501      	bpl.n	8006bba <_printf_i+0x1a2>
 8006bb6:	6019      	str	r1, [r3, #0]
 8006bb8:	e002      	b.n	8006bc0 <_printf_i+0x1a8>
 8006bba:	066d      	lsls	r5, r5, #25
 8006bbc:	d5fb      	bpl.n	8006bb6 <_printf_i+0x19e>
 8006bbe:	8019      	strh	r1, [r3, #0]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9e04      	ldr	r6, [sp, #16]
 8006bc4:	6123      	str	r3, [r4, #16]
 8006bc6:	e7bb      	b.n	8006b40 <_printf_i+0x128>
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	1d11      	adds	r1, r2, #4
 8006bcc:	6019      	str	r1, [r3, #0]
 8006bce:	6816      	ldr	r6, [r2, #0]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	0030      	movs	r0, r6
 8006bd4:	6862      	ldr	r2, [r4, #4]
 8006bd6:	f001 fa87 	bl	80080e8 <memchr>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d001      	beq.n	8006be2 <_printf_i+0x1ca>
 8006bde:	1b80      	subs	r0, r0, r6
 8006be0:	6060      	str	r0, [r4, #4]
 8006be2:	6863      	ldr	r3, [r4, #4]
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9a04      	ldr	r2, [sp, #16]
 8006bea:	7013      	strb	r3, [r2, #0]
 8006bec:	e7a8      	b.n	8006b40 <_printf_i+0x128>
 8006bee:	6923      	ldr	r3, [r4, #16]
 8006bf0:	0032      	movs	r2, r6
 8006bf2:	9906      	ldr	r1, [sp, #24]
 8006bf4:	9805      	ldr	r0, [sp, #20]
 8006bf6:	9d07      	ldr	r5, [sp, #28]
 8006bf8:	47a8      	blx	r5
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	d0aa      	beq.n	8006b54 <_printf_i+0x13c>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	079b      	lsls	r3, r3, #30
 8006c02:	d415      	bmi.n	8006c30 <_printf_i+0x218>
 8006c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c06:	68e0      	ldr	r0, [r4, #12]
 8006c08:	4298      	cmp	r0, r3
 8006c0a:	daa5      	bge.n	8006b58 <_printf_i+0x140>
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	e7a3      	b.n	8006b58 <_printf_i+0x140>
 8006c10:	0022      	movs	r2, r4
 8006c12:	2301      	movs	r3, #1
 8006c14:	9906      	ldr	r1, [sp, #24]
 8006c16:	9805      	ldr	r0, [sp, #20]
 8006c18:	9e07      	ldr	r6, [sp, #28]
 8006c1a:	3219      	adds	r2, #25
 8006c1c:	47b0      	blx	r6
 8006c1e:	1c43      	adds	r3, r0, #1
 8006c20:	d098      	beq.n	8006b54 <_printf_i+0x13c>
 8006c22:	3501      	adds	r5, #1
 8006c24:	68e3      	ldr	r3, [r4, #12]
 8006c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	42ab      	cmp	r3, r5
 8006c2c:	dcf0      	bgt.n	8006c10 <_printf_i+0x1f8>
 8006c2e:	e7e9      	b.n	8006c04 <_printf_i+0x1ec>
 8006c30:	2500      	movs	r5, #0
 8006c32:	e7f7      	b.n	8006c24 <_printf_i+0x20c>
 8006c34:	08009362 	.word	0x08009362
 8006c38:	08009373 	.word	0x08009373

08006c3c <iprintf>:
 8006c3c:	b40f      	push	{r0, r1, r2, r3}
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <iprintf+0x30>)
 8006c40:	b513      	push	{r0, r1, r4, lr}
 8006c42:	681c      	ldr	r4, [r3, #0]
 8006c44:	2c00      	cmp	r4, #0
 8006c46:	d005      	beq.n	8006c54 <iprintf+0x18>
 8006c48:	69a3      	ldr	r3, [r4, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d102      	bne.n	8006c54 <iprintf+0x18>
 8006c4e:	0020      	movs	r0, r4
 8006c50:	f001 f92c 	bl	8007eac <__sinit>
 8006c54:	ab05      	add	r3, sp, #20
 8006c56:	0020      	movs	r0, r4
 8006c58:	9a04      	ldr	r2, [sp, #16]
 8006c5a:	68a1      	ldr	r1, [r4, #8]
 8006c5c:	9301      	str	r3, [sp, #4]
 8006c5e:	f001 ff21 	bl	8008aa4 <_vfiprintf_r>
 8006c62:	bc16      	pop	{r1, r2, r4}
 8006c64:	bc08      	pop	{r3}
 8006c66:	b004      	add	sp, #16
 8006c68:	4718      	bx	r3
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	20000024 	.word	0x20000024

08006c70 <_puts_r>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	0005      	movs	r5, r0
 8006c74:	000e      	movs	r6, r1
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d004      	beq.n	8006c84 <_puts_r+0x14>
 8006c7a:	6983      	ldr	r3, [r0, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <_puts_r+0x14>
 8006c80:	f001 f914 	bl	8007eac <__sinit>
 8006c84:	69ab      	ldr	r3, [r5, #24]
 8006c86:	68ac      	ldr	r4, [r5, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <_puts_r+0x22>
 8006c8c:	0028      	movs	r0, r5
 8006c8e:	f001 f90d 	bl	8007eac <__sinit>
 8006c92:	4b2d      	ldr	r3, [pc, #180]	; (8006d48 <_puts_r+0xd8>)
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d122      	bne.n	8006cde <_puts_r+0x6e>
 8006c98:	686c      	ldr	r4, [r5, #4]
 8006c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c9c:	07db      	lsls	r3, r3, #31
 8006c9e:	d405      	bmi.n	8006cac <_puts_r+0x3c>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	059b      	lsls	r3, r3, #22
 8006ca4:	d402      	bmi.n	8006cac <_puts_r+0x3c>
 8006ca6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ca8:	f001 f9a5 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	071b      	lsls	r3, r3, #28
 8006cb0:	d502      	bpl.n	8006cb8 <_puts_r+0x48>
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d129      	bne.n	8006d0c <_puts_r+0x9c>
 8006cb8:	0021      	movs	r1, r4
 8006cba:	0028      	movs	r0, r5
 8006cbc:	f000 f8aa 	bl	8006e14 <__swsetup_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d023      	beq.n	8006d0c <_puts_r+0x9c>
 8006cc4:	2501      	movs	r5, #1
 8006cc6:	426d      	negs	r5, r5
 8006cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cca:	07db      	lsls	r3, r3, #31
 8006ccc:	d405      	bmi.n	8006cda <_puts_r+0x6a>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	059b      	lsls	r3, r3, #22
 8006cd2:	d402      	bmi.n	8006cda <_puts_r+0x6a>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd6:	f001 f98f 	bl	8007ff8 <__retarget_lock_release_recursive>
 8006cda:	0028      	movs	r0, r5
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
 8006cde:	4b1b      	ldr	r3, [pc, #108]	; (8006d4c <_puts_r+0xdc>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	d101      	bne.n	8006ce8 <_puts_r+0x78>
 8006ce4:	68ac      	ldr	r4, [r5, #8]
 8006ce6:	e7d8      	b.n	8006c9a <_puts_r+0x2a>
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <_puts_r+0xe0>)
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d1d5      	bne.n	8006c9a <_puts_r+0x2a>
 8006cee:	68ec      	ldr	r4, [r5, #12]
 8006cf0:	e7d3      	b.n	8006c9a <_puts_r+0x2a>
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	60a3      	str	r3, [r4, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da04      	bge.n	8006d04 <_puts_r+0x94>
 8006cfa:	69a2      	ldr	r2, [r4, #24]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	dc16      	bgt.n	8006d2e <_puts_r+0xbe>
 8006d00:	290a      	cmp	r1, #10
 8006d02:	d014      	beq.n	8006d2e <_puts_r+0xbe>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	6022      	str	r2, [r4, #0]
 8006d0a:	7019      	strb	r1, [r3, #0]
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	7831      	ldrb	r1, [r6, #0]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	2900      	cmp	r1, #0
 8006d14:	d1ed      	bne.n	8006cf2 <_puts_r+0x82>
 8006d16:	60a3      	str	r3, [r4, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da0f      	bge.n	8006d3c <_puts_r+0xcc>
 8006d1c:	0028      	movs	r0, r5
 8006d1e:	0022      	movs	r2, r4
 8006d20:	310a      	adds	r1, #10
 8006d22:	f000 f821 	bl	8006d68 <__swbuf_r>
 8006d26:	250a      	movs	r5, #10
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d1cd      	bne.n	8006cc8 <_puts_r+0x58>
 8006d2c:	e7ca      	b.n	8006cc4 <_puts_r+0x54>
 8006d2e:	0022      	movs	r2, r4
 8006d30:	0028      	movs	r0, r5
 8006d32:	f000 f819 	bl	8006d68 <__swbuf_r>
 8006d36:	1c43      	adds	r3, r0, #1
 8006d38:	d1e8      	bne.n	8006d0c <_puts_r+0x9c>
 8006d3a:	e7c3      	b.n	8006cc4 <_puts_r+0x54>
 8006d3c:	250a      	movs	r5, #10
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	6022      	str	r2, [r4, #0]
 8006d44:	701d      	strb	r5, [r3, #0]
 8006d46:	e7bf      	b.n	8006cc8 <_puts_r+0x58>
 8006d48:	08009434 	.word	0x08009434
 8006d4c:	08009454 	.word	0x08009454
 8006d50:	08009414 	.word	0x08009414

08006d54 <puts>:
 8006d54:	b510      	push	{r4, lr}
 8006d56:	4b03      	ldr	r3, [pc, #12]	; (8006d64 <puts+0x10>)
 8006d58:	0001      	movs	r1, r0
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	f7ff ff88 	bl	8006c70 <_puts_r>
 8006d60:	bd10      	pop	{r4, pc}
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	20000024 	.word	0x20000024

08006d68 <__swbuf_r>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	0005      	movs	r5, r0
 8006d6c:	000e      	movs	r6, r1
 8006d6e:	0014      	movs	r4, r2
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d004      	beq.n	8006d7e <__swbuf_r+0x16>
 8006d74:	6983      	ldr	r3, [r0, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <__swbuf_r+0x16>
 8006d7a:	f001 f897 	bl	8007eac <__sinit>
 8006d7e:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <__swbuf_r+0xa0>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	d12e      	bne.n	8006de2 <__swbuf_r+0x7a>
 8006d84:	686c      	ldr	r4, [r5, #4]
 8006d86:	69a3      	ldr	r3, [r4, #24]
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	071b      	lsls	r3, r3, #28
 8006d8e:	d532      	bpl.n	8006df6 <__swbuf_r+0x8e>
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d02f      	beq.n	8006df6 <__swbuf_r+0x8e>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	b2f7      	uxtb	r7, r6
 8006d9c:	1a98      	subs	r0, r3, r2
 8006d9e:	6963      	ldr	r3, [r4, #20]
 8006da0:	b2f6      	uxtb	r6, r6
 8006da2:	4283      	cmp	r3, r0
 8006da4:	dc05      	bgt.n	8006db2 <__swbuf_r+0x4a>
 8006da6:	0021      	movs	r1, r4
 8006da8:	0028      	movs	r0, r5
 8006daa:	f000 ffdd 	bl	8007d68 <_fflush_r>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d127      	bne.n	8006e02 <__swbuf_r+0x9a>
 8006db2:	68a3      	ldr	r3, [r4, #8]
 8006db4:	3001      	adds	r0, #1
 8006db6:	3b01      	subs	r3, #1
 8006db8:	60a3      	str	r3, [r4, #8]
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	6022      	str	r2, [r4, #0]
 8006dc0:	701f      	strb	r7, [r3, #0]
 8006dc2:	6963      	ldr	r3, [r4, #20]
 8006dc4:	4283      	cmp	r3, r0
 8006dc6:	d004      	beq.n	8006dd2 <__swbuf_r+0x6a>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	07db      	lsls	r3, r3, #31
 8006dcc:	d507      	bpl.n	8006dde <__swbuf_r+0x76>
 8006dce:	2e0a      	cmp	r6, #10
 8006dd0:	d105      	bne.n	8006dde <__swbuf_r+0x76>
 8006dd2:	0021      	movs	r1, r4
 8006dd4:	0028      	movs	r0, r5
 8006dd6:	f000 ffc7 	bl	8007d68 <_fflush_r>
 8006dda:	2800      	cmp	r0, #0
 8006ddc:	d111      	bne.n	8006e02 <__swbuf_r+0x9a>
 8006dde:	0030      	movs	r0, r6
 8006de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de2:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <__swbuf_r+0xa4>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d101      	bne.n	8006dec <__swbuf_r+0x84>
 8006de8:	68ac      	ldr	r4, [r5, #8]
 8006dea:	e7cc      	b.n	8006d86 <__swbuf_r+0x1e>
 8006dec:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <__swbuf_r+0xa8>)
 8006dee:	429c      	cmp	r4, r3
 8006df0:	d1c9      	bne.n	8006d86 <__swbuf_r+0x1e>
 8006df2:	68ec      	ldr	r4, [r5, #12]
 8006df4:	e7c7      	b.n	8006d86 <__swbuf_r+0x1e>
 8006df6:	0021      	movs	r1, r4
 8006df8:	0028      	movs	r0, r5
 8006dfa:	f000 f80b 	bl	8006e14 <__swsetup_r>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d0c9      	beq.n	8006d96 <__swbuf_r+0x2e>
 8006e02:	2601      	movs	r6, #1
 8006e04:	4276      	negs	r6, r6
 8006e06:	e7ea      	b.n	8006dde <__swbuf_r+0x76>
 8006e08:	08009434 	.word	0x08009434
 8006e0c:	08009454 	.word	0x08009454
 8006e10:	08009414 	.word	0x08009414

08006e14 <__swsetup_r>:
 8006e14:	4b37      	ldr	r3, [pc, #220]	; (8006ef4 <__swsetup_r+0xe0>)
 8006e16:	b570      	push	{r4, r5, r6, lr}
 8006e18:	681d      	ldr	r5, [r3, #0]
 8006e1a:	0006      	movs	r6, r0
 8006e1c:	000c      	movs	r4, r1
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	d005      	beq.n	8006e2e <__swsetup_r+0x1a>
 8006e22:	69ab      	ldr	r3, [r5, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <__swsetup_r+0x1a>
 8006e28:	0028      	movs	r0, r5
 8006e2a:	f001 f83f 	bl	8007eac <__sinit>
 8006e2e:	4b32      	ldr	r3, [pc, #200]	; (8006ef8 <__swsetup_r+0xe4>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	d10f      	bne.n	8006e54 <__swsetup_r+0x40>
 8006e34:	686c      	ldr	r4, [r5, #4]
 8006e36:	230c      	movs	r3, #12
 8006e38:	5ee2      	ldrsh	r2, [r4, r3]
 8006e3a:	b293      	uxth	r3, r2
 8006e3c:	0711      	lsls	r1, r2, #28
 8006e3e:	d42d      	bmi.n	8006e9c <__swsetup_r+0x88>
 8006e40:	06d9      	lsls	r1, r3, #27
 8006e42:	d411      	bmi.n	8006e68 <__swsetup_r+0x54>
 8006e44:	2309      	movs	r3, #9
 8006e46:	2001      	movs	r0, #1
 8006e48:	6033      	str	r3, [r6, #0]
 8006e4a:	3337      	adds	r3, #55	; 0x37
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	81a3      	strh	r3, [r4, #12]
 8006e50:	4240      	negs	r0, r0
 8006e52:	bd70      	pop	{r4, r5, r6, pc}
 8006e54:	4b29      	ldr	r3, [pc, #164]	; (8006efc <__swsetup_r+0xe8>)
 8006e56:	429c      	cmp	r4, r3
 8006e58:	d101      	bne.n	8006e5e <__swsetup_r+0x4a>
 8006e5a:	68ac      	ldr	r4, [r5, #8]
 8006e5c:	e7eb      	b.n	8006e36 <__swsetup_r+0x22>
 8006e5e:	4b28      	ldr	r3, [pc, #160]	; (8006f00 <__swsetup_r+0xec>)
 8006e60:	429c      	cmp	r4, r3
 8006e62:	d1e8      	bne.n	8006e36 <__swsetup_r+0x22>
 8006e64:	68ec      	ldr	r4, [r5, #12]
 8006e66:	e7e6      	b.n	8006e36 <__swsetup_r+0x22>
 8006e68:	075b      	lsls	r3, r3, #29
 8006e6a:	d513      	bpl.n	8006e94 <__swsetup_r+0x80>
 8006e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d008      	beq.n	8006e84 <__swsetup_r+0x70>
 8006e72:	0023      	movs	r3, r4
 8006e74:	3344      	adds	r3, #68	; 0x44
 8006e76:	4299      	cmp	r1, r3
 8006e78:	d002      	beq.n	8006e80 <__swsetup_r+0x6c>
 8006e7a:	0030      	movs	r0, r6
 8006e7c:	f001 fd08 	bl	8008890 <_free_r>
 8006e80:	2300      	movs	r3, #0
 8006e82:	6363      	str	r3, [r4, #52]	; 0x34
 8006e84:	2224      	movs	r2, #36	; 0x24
 8006e86:	89a3      	ldrh	r3, [r4, #12]
 8006e88:	4393      	bics	r3, r2
 8006e8a:	81a3      	strh	r3, [r4, #12]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	6063      	str	r3, [r4, #4]
 8006e90:	6923      	ldr	r3, [r4, #16]
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	2308      	movs	r3, #8
 8006e96:	89a2      	ldrh	r2, [r4, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	6923      	ldr	r3, [r4, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10b      	bne.n	8006eba <__swsetup_r+0xa6>
 8006ea2:	21a0      	movs	r1, #160	; 0xa0
 8006ea4:	2280      	movs	r2, #128	; 0x80
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	0089      	lsls	r1, r1, #2
 8006eaa:	0092      	lsls	r2, r2, #2
 8006eac:	400b      	ands	r3, r1
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d003      	beq.n	8006eba <__swsetup_r+0xa6>
 8006eb2:	0021      	movs	r1, r4
 8006eb4:	0030      	movs	r0, r6
 8006eb6:	f001 f8c9 	bl	800804c <__smakebuf_r>
 8006eba:	220c      	movs	r2, #12
 8006ebc:	5ea3      	ldrsh	r3, [r4, r2]
 8006ebe:	2001      	movs	r0, #1
 8006ec0:	001a      	movs	r2, r3
 8006ec2:	b299      	uxth	r1, r3
 8006ec4:	4002      	ands	r2, r0
 8006ec6:	4203      	tst	r3, r0
 8006ec8:	d00f      	beq.n	8006eea <__swsetup_r+0xd6>
 8006eca:	2200      	movs	r2, #0
 8006ecc:	60a2      	str	r2, [r4, #8]
 8006ece:	6962      	ldr	r2, [r4, #20]
 8006ed0:	4252      	negs	r2, r2
 8006ed2:	61a2      	str	r2, [r4, #24]
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	6922      	ldr	r2, [r4, #16]
 8006ed8:	4282      	cmp	r2, r0
 8006eda:	d1ba      	bne.n	8006e52 <__swsetup_r+0x3e>
 8006edc:	060a      	lsls	r2, r1, #24
 8006ede:	d5b8      	bpl.n	8006e52 <__swsetup_r+0x3e>
 8006ee0:	2240      	movs	r2, #64	; 0x40
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	3801      	subs	r0, #1
 8006ee8:	e7b3      	b.n	8006e52 <__swsetup_r+0x3e>
 8006eea:	0788      	lsls	r0, r1, #30
 8006eec:	d400      	bmi.n	8006ef0 <__swsetup_r+0xdc>
 8006eee:	6962      	ldr	r2, [r4, #20]
 8006ef0:	60a2      	str	r2, [r4, #8]
 8006ef2:	e7ef      	b.n	8006ed4 <__swsetup_r+0xc0>
 8006ef4:	20000024 	.word	0x20000024
 8006ef8:	08009434 	.word	0x08009434
 8006efc:	08009454 	.word	0x08009454
 8006f00:	08009414 	.word	0x08009414

08006f04 <quorem>:
 8006f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f06:	0006      	movs	r6, r0
 8006f08:	690b      	ldr	r3, [r1, #16]
 8006f0a:	6932      	ldr	r2, [r6, #16]
 8006f0c:	b087      	sub	sp, #28
 8006f0e:	2000      	movs	r0, #0
 8006f10:	9103      	str	r1, [sp, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	db65      	blt.n	8006fe2 <quorem+0xde>
 8006f16:	3b01      	subs	r3, #1
 8006f18:	009c      	lsls	r4, r3, #2
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	000b      	movs	r3, r1
 8006f1e:	3314      	adds	r3, #20
 8006f20:	9305      	str	r3, [sp, #20]
 8006f22:	191b      	adds	r3, r3, r4
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	0033      	movs	r3, r6
 8006f28:	3314      	adds	r3, #20
 8006f2a:	9302      	str	r3, [sp, #8]
 8006f2c:	191c      	adds	r4, r3, r4
 8006f2e:	9b04      	ldr	r3, [sp, #16]
 8006f30:	6827      	ldr	r7, [r4, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	0038      	movs	r0, r7
 8006f36:	1c5d      	adds	r5, r3, #1
 8006f38:	0029      	movs	r1, r5
 8006f3a:	9301      	str	r3, [sp, #4]
 8006f3c:	f7f9 f8fe 	bl	800013c <__udivsi3>
 8006f40:	9001      	str	r0, [sp, #4]
 8006f42:	42af      	cmp	r7, r5
 8006f44:	d324      	bcc.n	8006f90 <quorem+0x8c>
 8006f46:	2500      	movs	r5, #0
 8006f48:	46ac      	mov	ip, r5
 8006f4a:	9802      	ldr	r0, [sp, #8]
 8006f4c:	9f05      	ldr	r7, [sp, #20]
 8006f4e:	cf08      	ldmia	r7!, {r3}
 8006f50:	9a01      	ldr	r2, [sp, #4]
 8006f52:	b299      	uxth	r1, r3
 8006f54:	4351      	muls	r1, r2
 8006f56:	0c1b      	lsrs	r3, r3, #16
 8006f58:	4353      	muls	r3, r2
 8006f5a:	1949      	adds	r1, r1, r5
 8006f5c:	0c0a      	lsrs	r2, r1, #16
 8006f5e:	189b      	adds	r3, r3, r2
 8006f60:	6802      	ldr	r2, [r0, #0]
 8006f62:	b289      	uxth	r1, r1
 8006f64:	b292      	uxth	r2, r2
 8006f66:	4462      	add	r2, ip
 8006f68:	1a52      	subs	r2, r2, r1
 8006f6a:	6801      	ldr	r1, [r0, #0]
 8006f6c:	0c1d      	lsrs	r5, r3, #16
 8006f6e:	0c09      	lsrs	r1, r1, #16
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	1acb      	subs	r3, r1, r3
 8006f74:	1411      	asrs	r1, r2, #16
 8006f76:	185b      	adds	r3, r3, r1
 8006f78:	1419      	asrs	r1, r3, #16
 8006f7a:	b292      	uxth	r2, r2
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	468c      	mov	ip, r1
 8006f84:	c004      	stmia	r0!, {r2}
 8006f86:	42bb      	cmp	r3, r7
 8006f88:	d2e1      	bcs.n	8006f4e <quorem+0x4a>
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d030      	beq.n	8006ff2 <quorem+0xee>
 8006f90:	0030      	movs	r0, r6
 8006f92:	9903      	ldr	r1, [sp, #12]
 8006f94:	f001 fb38 	bl	8008608 <__mcmp>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	db21      	blt.n	8006fe0 <quorem+0xdc>
 8006f9c:	0030      	movs	r0, r6
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	9903      	ldr	r1, [sp, #12]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	9301      	str	r3, [sp, #4]
 8006fa8:	3014      	adds	r0, #20
 8006faa:	3114      	adds	r1, #20
 8006fac:	6803      	ldr	r3, [r0, #0]
 8006fae:	c920      	ldmia	r1!, {r5}
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	1914      	adds	r4, r2, r4
 8006fb4:	b2aa      	uxth	r2, r5
 8006fb6:	1aa2      	subs	r2, r4, r2
 8006fb8:	0c1b      	lsrs	r3, r3, #16
 8006fba:	0c2d      	lsrs	r5, r5, #16
 8006fbc:	1414      	asrs	r4, r2, #16
 8006fbe:	1b5b      	subs	r3, r3, r5
 8006fc0:	191b      	adds	r3, r3, r4
 8006fc2:	141c      	asrs	r4, r3, #16
 8006fc4:	b292      	uxth	r2, r2
 8006fc6:	041b      	lsls	r3, r3, #16
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	c008      	stmia	r0!, {r3}
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	428b      	cmp	r3, r1
 8006fd0:	d2ec      	bcs.n	8006fac <quorem+0xa8>
 8006fd2:	9b00      	ldr	r3, [sp, #0]
 8006fd4:	9a02      	ldr	r2, [sp, #8]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	18d3      	adds	r3, r2, r3
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	2a00      	cmp	r2, #0
 8006fde:	d015      	beq.n	800700c <quorem+0x108>
 8006fe0:	9801      	ldr	r0, [sp, #4]
 8006fe2:	b007      	add	sp, #28
 8006fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d106      	bne.n	8006ffa <quorem+0xf6>
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	3c04      	subs	r4, #4
 8006ff6:	42a3      	cmp	r3, r4
 8006ff8:	d3f5      	bcc.n	8006fe6 <quorem+0xe2>
 8006ffa:	9b00      	ldr	r3, [sp, #0]
 8006ffc:	6133      	str	r3, [r6, #16]
 8006ffe:	e7c7      	b.n	8006f90 <quorem+0x8c>
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	2a00      	cmp	r2, #0
 8007004:	d106      	bne.n	8007014 <quorem+0x110>
 8007006:	9a00      	ldr	r2, [sp, #0]
 8007008:	3a01      	subs	r2, #1
 800700a:	9200      	str	r2, [sp, #0]
 800700c:	9a02      	ldr	r2, [sp, #8]
 800700e:	3b04      	subs	r3, #4
 8007010:	429a      	cmp	r2, r3
 8007012:	d3f5      	bcc.n	8007000 <quorem+0xfc>
 8007014:	9b00      	ldr	r3, [sp, #0]
 8007016:	6133      	str	r3, [r6, #16]
 8007018:	e7e2      	b.n	8006fe0 <quorem+0xdc>
	...

0800701c <_dtoa_r>:
 800701c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701e:	b09d      	sub	sp, #116	; 0x74
 8007020:	9202      	str	r2, [sp, #8]
 8007022:	9303      	str	r3, [sp, #12]
 8007024:	9b02      	ldr	r3, [sp, #8]
 8007026:	9c03      	ldr	r4, [sp, #12]
 8007028:	9308      	str	r3, [sp, #32]
 800702a:	9409      	str	r4, [sp, #36]	; 0x24
 800702c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800702e:	0007      	movs	r7, r0
 8007030:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007032:	2c00      	cmp	r4, #0
 8007034:	d10e      	bne.n	8007054 <_dtoa_r+0x38>
 8007036:	2010      	movs	r0, #16
 8007038:	f001 f84c 	bl	80080d4 <malloc>
 800703c:	1e02      	subs	r2, r0, #0
 800703e:	6278      	str	r0, [r7, #36]	; 0x24
 8007040:	d104      	bne.n	800704c <_dtoa_r+0x30>
 8007042:	21ea      	movs	r1, #234	; 0xea
 8007044:	4bc7      	ldr	r3, [pc, #796]	; (8007364 <_dtoa_r+0x348>)
 8007046:	48c8      	ldr	r0, [pc, #800]	; (8007368 <_dtoa_r+0x34c>)
 8007048:	f001 fed8 	bl	8008dfc <__assert_func>
 800704c:	6044      	str	r4, [r0, #4]
 800704e:	6084      	str	r4, [r0, #8]
 8007050:	6004      	str	r4, [r0, #0]
 8007052:	60c4      	str	r4, [r0, #12]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	6819      	ldr	r1, [r3, #0]
 8007058:	2900      	cmp	r1, #0
 800705a:	d00a      	beq.n	8007072 <_dtoa_r+0x56>
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	2301      	movs	r3, #1
 8007060:	4093      	lsls	r3, r2
 8007062:	604a      	str	r2, [r1, #4]
 8007064:	608b      	str	r3, [r1, #8]
 8007066:	0038      	movs	r0, r7
 8007068:	f001 f88e 	bl	8008188 <_Bfree>
 800706c:	2200      	movs	r2, #0
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	9b03      	ldr	r3, [sp, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	da20      	bge.n	80070ba <_dtoa_r+0x9e>
 8007078:	2301      	movs	r3, #1
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	9b03      	ldr	r3, [sp, #12]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	9309      	str	r3, [sp, #36]	; 0x24
 8007084:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007086:	4bb9      	ldr	r3, [pc, #740]	; (800736c <_dtoa_r+0x350>)
 8007088:	4ab8      	ldr	r2, [pc, #736]	; (800736c <_dtoa_r+0x350>)
 800708a:	402b      	ands	r3, r5
 800708c:	4293      	cmp	r3, r2
 800708e:	d117      	bne.n	80070c0 <_dtoa_r+0xa4>
 8007090:	4bb7      	ldr	r3, [pc, #732]	; (8007370 <_dtoa_r+0x354>)
 8007092:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007094:	0328      	lsls	r0, r5, #12
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	9b02      	ldr	r3, [sp, #8]
 800709a:	0b00      	lsrs	r0, r0, #12
 800709c:	4318      	orrs	r0, r3
 800709e:	d101      	bne.n	80070a4 <_dtoa_r+0x88>
 80070a0:	f000 fdbf 	bl	8007c22 <_dtoa_r+0xc06>
 80070a4:	48b3      	ldr	r0, [pc, #716]	; (8007374 <_dtoa_r+0x358>)
 80070a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070a8:	9006      	str	r0, [sp, #24]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <_dtoa_r+0x98>
 80070ae:	4bb2      	ldr	r3, [pc, #712]	; (8007378 <_dtoa_r+0x35c>)
 80070b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	9806      	ldr	r0, [sp, #24]
 80070b6:	b01d      	add	sp, #116	; 0x74
 80070b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ba:	2300      	movs	r3, #0
 80070bc:	602b      	str	r3, [r5, #0]
 80070be:	e7e1      	b.n	8007084 <_dtoa_r+0x68>
 80070c0:	9b08      	ldr	r3, [sp, #32]
 80070c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80070c4:	9312      	str	r3, [sp, #72]	; 0x48
 80070c6:	9413      	str	r4, [sp, #76]	; 0x4c
 80070c8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80070ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 f9ba 	bl	8000448 <__aeabi_dcmpeq>
 80070d4:	1e04      	subs	r4, r0, #0
 80070d6:	d009      	beq.n	80070ec <_dtoa_r+0xd0>
 80070d8:	2301      	movs	r3, #1
 80070da:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	4ba7      	ldr	r3, [pc, #668]	; (800737c <_dtoa_r+0x360>)
 80070e0:	9306      	str	r3, [sp, #24]
 80070e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0e5      	beq.n	80070b4 <_dtoa_r+0x98>
 80070e8:	4ba5      	ldr	r3, [pc, #660]	; (8007380 <_dtoa_r+0x364>)
 80070ea:	e7e1      	b.n	80070b0 <_dtoa_r+0x94>
 80070ec:	ab1a      	add	r3, sp, #104	; 0x68
 80070ee:	9301      	str	r3, [sp, #4]
 80070f0:	ab1b      	add	r3, sp, #108	; 0x6c
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	0038      	movs	r0, r7
 80070f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070fa:	f001 fb39 	bl	8008770 <__d2b>
 80070fe:	006e      	lsls	r6, r5, #1
 8007100:	9005      	str	r0, [sp, #20]
 8007102:	0d76      	lsrs	r6, r6, #21
 8007104:	d100      	bne.n	8007108 <_dtoa_r+0xec>
 8007106:	e07c      	b.n	8007202 <_dtoa_r+0x1e6>
 8007108:	9812      	ldr	r0, [sp, #72]	; 0x48
 800710a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800710c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800710e:	4a9d      	ldr	r2, [pc, #628]	; (8007384 <_dtoa_r+0x368>)
 8007110:	031b      	lsls	r3, r3, #12
 8007112:	0b1b      	lsrs	r3, r3, #12
 8007114:	431a      	orrs	r2, r3
 8007116:	0011      	movs	r1, r2
 8007118:	4b9b      	ldr	r3, [pc, #620]	; (8007388 <_dtoa_r+0x36c>)
 800711a:	9418      	str	r4, [sp, #96]	; 0x60
 800711c:	18f6      	adds	r6, r6, r3
 800711e:	2200      	movs	r2, #0
 8007120:	4b9a      	ldr	r3, [pc, #616]	; (800738c <_dtoa_r+0x370>)
 8007122:	f7fb fa6f 	bl	8002604 <__aeabi_dsub>
 8007126:	4a9a      	ldr	r2, [pc, #616]	; (8007390 <_dtoa_r+0x374>)
 8007128:	4b9a      	ldr	r3, [pc, #616]	; (8007394 <_dtoa_r+0x378>)
 800712a:	f7fa ffff 	bl	800212c <__aeabi_dmul>
 800712e:	4a9a      	ldr	r2, [pc, #616]	; (8007398 <_dtoa_r+0x37c>)
 8007130:	4b9a      	ldr	r3, [pc, #616]	; (800739c <_dtoa_r+0x380>)
 8007132:	f7fa f8bd 	bl	80012b0 <__aeabi_dadd>
 8007136:	0004      	movs	r4, r0
 8007138:	0030      	movs	r0, r6
 800713a:	000d      	movs	r5, r1
 800713c:	f7fb fe48 	bl	8002dd0 <__aeabi_i2d>
 8007140:	4a97      	ldr	r2, [pc, #604]	; (80073a0 <_dtoa_r+0x384>)
 8007142:	4b98      	ldr	r3, [pc, #608]	; (80073a4 <_dtoa_r+0x388>)
 8007144:	f7fa fff2 	bl	800212c <__aeabi_dmul>
 8007148:	0002      	movs	r2, r0
 800714a:	000b      	movs	r3, r1
 800714c:	0020      	movs	r0, r4
 800714e:	0029      	movs	r1, r5
 8007150:	f7fa f8ae 	bl	80012b0 <__aeabi_dadd>
 8007154:	0004      	movs	r4, r0
 8007156:	000d      	movs	r5, r1
 8007158:	f7fb fe04 	bl	8002d64 <__aeabi_d2iz>
 800715c:	2200      	movs	r2, #0
 800715e:	9002      	str	r0, [sp, #8]
 8007160:	2300      	movs	r3, #0
 8007162:	0020      	movs	r0, r4
 8007164:	0029      	movs	r1, r5
 8007166:	f7f9 f975 	bl	8000454 <__aeabi_dcmplt>
 800716a:	2800      	cmp	r0, #0
 800716c:	d00b      	beq.n	8007186 <_dtoa_r+0x16a>
 800716e:	9802      	ldr	r0, [sp, #8]
 8007170:	f7fb fe2e 	bl	8002dd0 <__aeabi_i2d>
 8007174:	002b      	movs	r3, r5
 8007176:	0022      	movs	r2, r4
 8007178:	f7f9 f966 	bl	8000448 <__aeabi_dcmpeq>
 800717c:	4243      	negs	r3, r0
 800717e:	4158      	adcs	r0, r3
 8007180:	9b02      	ldr	r3, [sp, #8]
 8007182:	1a1b      	subs	r3, r3, r0
 8007184:	9302      	str	r3, [sp, #8]
 8007186:	2301      	movs	r3, #1
 8007188:	9316      	str	r3, [sp, #88]	; 0x58
 800718a:	9b02      	ldr	r3, [sp, #8]
 800718c:	2b16      	cmp	r3, #22
 800718e:	d80f      	bhi.n	80071b0 <_dtoa_r+0x194>
 8007190:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007192:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007194:	00da      	lsls	r2, r3, #3
 8007196:	4b84      	ldr	r3, [pc, #528]	; (80073a8 <_dtoa_r+0x38c>)
 8007198:	189b      	adds	r3, r3, r2
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f7f9 f959 	bl	8000454 <__aeabi_dcmplt>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d049      	beq.n	800723a <_dtoa_r+0x21e>
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	3b01      	subs	r3, #1
 80071aa:	9302      	str	r3, [sp, #8]
 80071ac:	2300      	movs	r3, #0
 80071ae:	9316      	str	r3, [sp, #88]	; 0x58
 80071b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80071b2:	1b9e      	subs	r6, r3, r6
 80071b4:	2300      	movs	r3, #0
 80071b6:	930a      	str	r3, [sp, #40]	; 0x28
 80071b8:	0033      	movs	r3, r6
 80071ba:	3b01      	subs	r3, #1
 80071bc:	930d      	str	r3, [sp, #52]	; 0x34
 80071be:	d504      	bpl.n	80071ca <_dtoa_r+0x1ae>
 80071c0:	2301      	movs	r3, #1
 80071c2:	1b9b      	subs	r3, r3, r6
 80071c4:	930a      	str	r3, [sp, #40]	; 0x28
 80071c6:	2300      	movs	r3, #0
 80071c8:	930d      	str	r3, [sp, #52]	; 0x34
 80071ca:	9b02      	ldr	r3, [sp, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	db36      	blt.n	800723e <_dtoa_r+0x222>
 80071d0:	9a02      	ldr	r2, [sp, #8]
 80071d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d4:	4694      	mov	ip, r2
 80071d6:	4463      	add	r3, ip
 80071d8:	930d      	str	r3, [sp, #52]	; 0x34
 80071da:	2300      	movs	r3, #0
 80071dc:	9215      	str	r2, [sp, #84]	; 0x54
 80071de:	930e      	str	r3, [sp, #56]	; 0x38
 80071e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071e2:	2401      	movs	r4, #1
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	d864      	bhi.n	80072b2 <_dtoa_r+0x296>
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	dd02      	ble.n	80071f2 <_dtoa_r+0x1d6>
 80071ec:	2400      	movs	r4, #0
 80071ee:	3b04      	subs	r3, #4
 80071f0:	9322      	str	r3, [sp, #136]	; 0x88
 80071f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071f4:	1e98      	subs	r0, r3, #2
 80071f6:	2803      	cmp	r0, #3
 80071f8:	d864      	bhi.n	80072c4 <_dtoa_r+0x2a8>
 80071fa:	f7f8 ff8b 	bl	8000114 <__gnu_thumb1_case_uqi>
 80071fe:	3829      	.short	0x3829
 8007200:	5836      	.short	0x5836
 8007202:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007204:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007206:	189e      	adds	r6, r3, r2
 8007208:	4b68      	ldr	r3, [pc, #416]	; (80073ac <_dtoa_r+0x390>)
 800720a:	18f2      	adds	r2, r6, r3
 800720c:	2a20      	cmp	r2, #32
 800720e:	dd0f      	ble.n	8007230 <_dtoa_r+0x214>
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	409d      	lsls	r5, r3
 8007216:	4b66      	ldr	r3, [pc, #408]	; (80073b0 <_dtoa_r+0x394>)
 8007218:	9802      	ldr	r0, [sp, #8]
 800721a:	18f3      	adds	r3, r6, r3
 800721c:	40d8      	lsrs	r0, r3
 800721e:	4328      	orrs	r0, r5
 8007220:	f7fb fe06 	bl	8002e30 <__aeabi_ui2d>
 8007224:	2301      	movs	r3, #1
 8007226:	4c63      	ldr	r4, [pc, #396]	; (80073b4 <_dtoa_r+0x398>)
 8007228:	3e01      	subs	r6, #1
 800722a:	1909      	adds	r1, r1, r4
 800722c:	9318      	str	r3, [sp, #96]	; 0x60
 800722e:	e776      	b.n	800711e <_dtoa_r+0x102>
 8007230:	2320      	movs	r3, #32
 8007232:	9802      	ldr	r0, [sp, #8]
 8007234:	1a9b      	subs	r3, r3, r2
 8007236:	4098      	lsls	r0, r3
 8007238:	e7f2      	b.n	8007220 <_dtoa_r+0x204>
 800723a:	9016      	str	r0, [sp, #88]	; 0x58
 800723c:	e7b8      	b.n	80071b0 <_dtoa_r+0x194>
 800723e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007240:	9a02      	ldr	r2, [sp, #8]
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	930a      	str	r3, [sp, #40]	; 0x28
 8007246:	4253      	negs	r3, r2
 8007248:	930e      	str	r3, [sp, #56]	; 0x38
 800724a:	2300      	movs	r3, #0
 800724c:	9315      	str	r3, [sp, #84]	; 0x54
 800724e:	e7c7      	b.n	80071e0 <_dtoa_r+0x1c4>
 8007250:	2300      	movs	r3, #0
 8007252:	930f      	str	r3, [sp, #60]	; 0x3c
 8007254:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007256:	930c      	str	r3, [sp, #48]	; 0x30
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dc13      	bgt.n	8007286 <_dtoa_r+0x26a>
 800725e:	2301      	movs	r3, #1
 8007260:	001a      	movs	r2, r3
 8007262:	930c      	str	r3, [sp, #48]	; 0x30
 8007264:	9307      	str	r3, [sp, #28]
 8007266:	9223      	str	r2, [sp, #140]	; 0x8c
 8007268:	e00d      	b.n	8007286 <_dtoa_r+0x26a>
 800726a:	2301      	movs	r3, #1
 800726c:	e7f1      	b.n	8007252 <_dtoa_r+0x236>
 800726e:	2300      	movs	r3, #0
 8007270:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007272:	930f      	str	r3, [sp, #60]	; 0x3c
 8007274:	4694      	mov	ip, r2
 8007276:	9b02      	ldr	r3, [sp, #8]
 8007278:	4463      	add	r3, ip
 800727a:	930c      	str	r3, [sp, #48]	; 0x30
 800727c:	3301      	adds	r3, #1
 800727e:	9307      	str	r3, [sp, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	dc00      	bgt.n	8007286 <_dtoa_r+0x26a>
 8007284:	2301      	movs	r3, #1
 8007286:	2200      	movs	r2, #0
 8007288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800728a:	6042      	str	r2, [r0, #4]
 800728c:	3204      	adds	r2, #4
 800728e:	0015      	movs	r5, r2
 8007290:	3514      	adds	r5, #20
 8007292:	6841      	ldr	r1, [r0, #4]
 8007294:	429d      	cmp	r5, r3
 8007296:	d919      	bls.n	80072cc <_dtoa_r+0x2b0>
 8007298:	0038      	movs	r0, r7
 800729a:	f000 ff31 	bl	8008100 <_Balloc>
 800729e:	9006      	str	r0, [sp, #24]
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d117      	bne.n	80072d4 <_dtoa_r+0x2b8>
 80072a4:	21d5      	movs	r1, #213	; 0xd5
 80072a6:	0002      	movs	r2, r0
 80072a8:	4b43      	ldr	r3, [pc, #268]	; (80073b8 <_dtoa_r+0x39c>)
 80072aa:	0049      	lsls	r1, r1, #1
 80072ac:	e6cb      	b.n	8007046 <_dtoa_r+0x2a>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e7de      	b.n	8007270 <_dtoa_r+0x254>
 80072b2:	2300      	movs	r3, #0
 80072b4:	940f      	str	r4, [sp, #60]	; 0x3c
 80072b6:	9322      	str	r3, [sp, #136]	; 0x88
 80072b8:	3b01      	subs	r3, #1
 80072ba:	930c      	str	r3, [sp, #48]	; 0x30
 80072bc:	9307      	str	r3, [sp, #28]
 80072be:	2200      	movs	r2, #0
 80072c0:	3313      	adds	r3, #19
 80072c2:	e7d0      	b.n	8007266 <_dtoa_r+0x24a>
 80072c4:	2301      	movs	r3, #1
 80072c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80072c8:	3b02      	subs	r3, #2
 80072ca:	e7f6      	b.n	80072ba <_dtoa_r+0x29e>
 80072cc:	3101      	adds	r1, #1
 80072ce:	6041      	str	r1, [r0, #4]
 80072d0:	0052      	lsls	r2, r2, #1
 80072d2:	e7dc      	b.n	800728e <_dtoa_r+0x272>
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	9a06      	ldr	r2, [sp, #24]
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	9b07      	ldr	r3, [sp, #28]
 80072dc:	2b0e      	cmp	r3, #14
 80072de:	d900      	bls.n	80072e2 <_dtoa_r+0x2c6>
 80072e0:	e0eb      	b.n	80074ba <_dtoa_r+0x49e>
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d100      	bne.n	80072e8 <_dtoa_r+0x2cc>
 80072e6:	e0e8      	b.n	80074ba <_dtoa_r+0x49e>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dd68      	ble.n	80073c0 <_dtoa_r+0x3a4>
 80072ee:	001a      	movs	r2, r3
 80072f0:	210f      	movs	r1, #15
 80072f2:	4b2d      	ldr	r3, [pc, #180]	; (80073a8 <_dtoa_r+0x38c>)
 80072f4:	400a      	ands	r2, r1
 80072f6:	00d2      	lsls	r2, r2, #3
 80072f8:	189b      	adds	r3, r3, r2
 80072fa:	681d      	ldr	r5, [r3, #0]
 80072fc:	685e      	ldr	r6, [r3, #4]
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	111c      	asrs	r4, r3, #4
 8007302:	2302      	movs	r3, #2
 8007304:	9310      	str	r3, [sp, #64]	; 0x40
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	05db      	lsls	r3, r3, #23
 800730a:	d50b      	bpl.n	8007324 <_dtoa_r+0x308>
 800730c:	4b2b      	ldr	r3, [pc, #172]	; (80073bc <_dtoa_r+0x3a0>)
 800730e:	400c      	ands	r4, r1
 8007310:	6a1a      	ldr	r2, [r3, #32]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007316:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007318:	f7fa fb06 	bl	8001928 <__aeabi_ddiv>
 800731c:	2303      	movs	r3, #3
 800731e:	9008      	str	r0, [sp, #32]
 8007320:	9109      	str	r1, [sp, #36]	; 0x24
 8007322:	9310      	str	r3, [sp, #64]	; 0x40
 8007324:	4b25      	ldr	r3, [pc, #148]	; (80073bc <_dtoa_r+0x3a0>)
 8007326:	9314      	str	r3, [sp, #80]	; 0x50
 8007328:	2c00      	cmp	r4, #0
 800732a:	d108      	bne.n	800733e <_dtoa_r+0x322>
 800732c:	9808      	ldr	r0, [sp, #32]
 800732e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007330:	002a      	movs	r2, r5
 8007332:	0033      	movs	r3, r6
 8007334:	f7fa faf8 	bl	8001928 <__aeabi_ddiv>
 8007338:	9008      	str	r0, [sp, #32]
 800733a:	9109      	str	r1, [sp, #36]	; 0x24
 800733c:	e05c      	b.n	80073f8 <_dtoa_r+0x3dc>
 800733e:	2301      	movs	r3, #1
 8007340:	421c      	tst	r4, r3
 8007342:	d00b      	beq.n	800735c <_dtoa_r+0x340>
 8007344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007346:	0028      	movs	r0, r5
 8007348:	3301      	adds	r3, #1
 800734a:	9310      	str	r3, [sp, #64]	; 0x40
 800734c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800734e:	0031      	movs	r1, r6
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f7fa feea 	bl	800212c <__aeabi_dmul>
 8007358:	0005      	movs	r5, r0
 800735a:	000e      	movs	r6, r1
 800735c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800735e:	1064      	asrs	r4, r4, #1
 8007360:	3308      	adds	r3, #8
 8007362:	e7e0      	b.n	8007326 <_dtoa_r+0x30a>
 8007364:	08009391 	.word	0x08009391
 8007368:	080093a8 	.word	0x080093a8
 800736c:	7ff00000 	.word	0x7ff00000
 8007370:	0000270f 	.word	0x0000270f
 8007374:	0800938d 	.word	0x0800938d
 8007378:	08009390 	.word	0x08009390
 800737c:	08009360 	.word	0x08009360
 8007380:	08009361 	.word	0x08009361
 8007384:	3ff00000 	.word	0x3ff00000
 8007388:	fffffc01 	.word	0xfffffc01
 800738c:	3ff80000 	.word	0x3ff80000
 8007390:	636f4361 	.word	0x636f4361
 8007394:	3fd287a7 	.word	0x3fd287a7
 8007398:	8b60c8b3 	.word	0x8b60c8b3
 800739c:	3fc68a28 	.word	0x3fc68a28
 80073a0:	509f79fb 	.word	0x509f79fb
 80073a4:	3fd34413 	.word	0x3fd34413
 80073a8:	080094f8 	.word	0x080094f8
 80073ac:	00000432 	.word	0x00000432
 80073b0:	00000412 	.word	0x00000412
 80073b4:	fe100000 	.word	0xfe100000
 80073b8:	08009403 	.word	0x08009403
 80073bc:	080094d0 	.word	0x080094d0
 80073c0:	2302      	movs	r3, #2
 80073c2:	9310      	str	r3, [sp, #64]	; 0x40
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d016      	beq.n	80073f8 <_dtoa_r+0x3dc>
 80073ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80073cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80073ce:	425c      	negs	r4, r3
 80073d0:	230f      	movs	r3, #15
 80073d2:	4ab6      	ldr	r2, [pc, #728]	; (80076ac <_dtoa_r+0x690>)
 80073d4:	4023      	ands	r3, r4
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	18d3      	adds	r3, r2, r3
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	f7fa fea5 	bl	800212c <__aeabi_dmul>
 80073e2:	2601      	movs	r6, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	9008      	str	r0, [sp, #32]
 80073e8:	9109      	str	r1, [sp, #36]	; 0x24
 80073ea:	4db1      	ldr	r5, [pc, #708]	; (80076b0 <_dtoa_r+0x694>)
 80073ec:	1124      	asrs	r4, r4, #4
 80073ee:	2c00      	cmp	r4, #0
 80073f0:	d000      	beq.n	80073f4 <_dtoa_r+0x3d8>
 80073f2:	e094      	b.n	800751e <_dtoa_r+0x502>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d19f      	bne.n	8007338 <_dtoa_r+0x31c>
 80073f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d100      	bne.n	8007400 <_dtoa_r+0x3e4>
 80073fe:	e09b      	b.n	8007538 <_dtoa_r+0x51c>
 8007400:	9c08      	ldr	r4, [sp, #32]
 8007402:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007404:	2200      	movs	r2, #0
 8007406:	0020      	movs	r0, r4
 8007408:	0029      	movs	r1, r5
 800740a:	4baa      	ldr	r3, [pc, #680]	; (80076b4 <_dtoa_r+0x698>)
 800740c:	f7f9 f822 	bl	8000454 <__aeabi_dcmplt>
 8007410:	2800      	cmp	r0, #0
 8007412:	d100      	bne.n	8007416 <_dtoa_r+0x3fa>
 8007414:	e090      	b.n	8007538 <_dtoa_r+0x51c>
 8007416:	9b07      	ldr	r3, [sp, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d100      	bne.n	800741e <_dtoa_r+0x402>
 800741c:	e08c      	b.n	8007538 <_dtoa_r+0x51c>
 800741e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007420:	2b00      	cmp	r3, #0
 8007422:	dd46      	ble.n	80074b2 <_dtoa_r+0x496>
 8007424:	9b02      	ldr	r3, [sp, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	0020      	movs	r0, r4
 800742a:	0029      	movs	r1, r5
 800742c:	1e5e      	subs	r6, r3, #1
 800742e:	4ba2      	ldr	r3, [pc, #648]	; (80076b8 <_dtoa_r+0x69c>)
 8007430:	f7fa fe7c 	bl	800212c <__aeabi_dmul>
 8007434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007436:	9008      	str	r0, [sp, #32]
 8007438:	9109      	str	r1, [sp, #36]	; 0x24
 800743a:	3301      	adds	r3, #1
 800743c:	9310      	str	r3, [sp, #64]	; 0x40
 800743e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007440:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007442:	9c08      	ldr	r4, [sp, #32]
 8007444:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007446:	9314      	str	r3, [sp, #80]	; 0x50
 8007448:	f7fb fcc2 	bl	8002dd0 <__aeabi_i2d>
 800744c:	0022      	movs	r2, r4
 800744e:	002b      	movs	r3, r5
 8007450:	f7fa fe6c 	bl	800212c <__aeabi_dmul>
 8007454:	2200      	movs	r2, #0
 8007456:	4b99      	ldr	r3, [pc, #612]	; (80076bc <_dtoa_r+0x6a0>)
 8007458:	f7f9 ff2a 	bl	80012b0 <__aeabi_dadd>
 800745c:	9010      	str	r0, [sp, #64]	; 0x40
 800745e:	9111      	str	r1, [sp, #68]	; 0x44
 8007460:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007464:	9208      	str	r2, [sp, #32]
 8007466:	9309      	str	r3, [sp, #36]	; 0x24
 8007468:	4a95      	ldr	r2, [pc, #596]	; (80076c0 <_dtoa_r+0x6a4>)
 800746a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800746c:	4694      	mov	ip, r2
 800746e:	4463      	add	r3, ip
 8007470:	9317      	str	r3, [sp, #92]	; 0x5c
 8007472:	9309      	str	r3, [sp, #36]	; 0x24
 8007474:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007476:	2b00      	cmp	r3, #0
 8007478:	d161      	bne.n	800753e <_dtoa_r+0x522>
 800747a:	2200      	movs	r2, #0
 800747c:	0020      	movs	r0, r4
 800747e:	0029      	movs	r1, r5
 8007480:	4b90      	ldr	r3, [pc, #576]	; (80076c4 <_dtoa_r+0x6a8>)
 8007482:	f7fb f8bf 	bl	8002604 <__aeabi_dsub>
 8007486:	9a08      	ldr	r2, [sp, #32]
 8007488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800748a:	0004      	movs	r4, r0
 800748c:	000d      	movs	r5, r1
 800748e:	f7f8 fff5 	bl	800047c <__aeabi_dcmpgt>
 8007492:	2800      	cmp	r0, #0
 8007494:	d000      	beq.n	8007498 <_dtoa_r+0x47c>
 8007496:	e2af      	b.n	80079f8 <_dtoa_r+0x9dc>
 8007498:	488b      	ldr	r0, [pc, #556]	; (80076c8 <_dtoa_r+0x6ac>)
 800749a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800749c:	4684      	mov	ip, r0
 800749e:	4461      	add	r1, ip
 80074a0:	000b      	movs	r3, r1
 80074a2:	0020      	movs	r0, r4
 80074a4:	0029      	movs	r1, r5
 80074a6:	9a08      	ldr	r2, [sp, #32]
 80074a8:	f7f8 ffd4 	bl	8000454 <__aeabi_dcmplt>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d000      	beq.n	80074b2 <_dtoa_r+0x496>
 80074b0:	e29f      	b.n	80079f2 <_dtoa_r+0x9d6>
 80074b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80074b4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80074b6:	9308      	str	r3, [sp, #32]
 80074b8:	9409      	str	r4, [sp, #36]	; 0x24
 80074ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	da00      	bge.n	80074c2 <_dtoa_r+0x4a6>
 80074c0:	e172      	b.n	80077a8 <_dtoa_r+0x78c>
 80074c2:	9a02      	ldr	r2, [sp, #8]
 80074c4:	2a0e      	cmp	r2, #14
 80074c6:	dd00      	ble.n	80074ca <_dtoa_r+0x4ae>
 80074c8:	e16e      	b.n	80077a8 <_dtoa_r+0x78c>
 80074ca:	4b78      	ldr	r3, [pc, #480]	; (80076ac <_dtoa_r+0x690>)
 80074cc:	00d2      	lsls	r2, r2, #3
 80074ce:	189b      	adds	r3, r3, r2
 80074d0:	685c      	ldr	r4, [r3, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	930a      	str	r3, [sp, #40]	; 0x28
 80074d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80074d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	db00      	blt.n	80074e0 <_dtoa_r+0x4c4>
 80074de:	e0f7      	b.n	80076d0 <_dtoa_r+0x6b4>
 80074e0:	9b07      	ldr	r3, [sp, #28]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dd00      	ble.n	80074e8 <_dtoa_r+0x4cc>
 80074e6:	e0f3      	b.n	80076d0 <_dtoa_r+0x6b4>
 80074e8:	d000      	beq.n	80074ec <_dtoa_r+0x4d0>
 80074ea:	e282      	b.n	80079f2 <_dtoa_r+0x9d6>
 80074ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074f0:	2200      	movs	r2, #0
 80074f2:	4b74      	ldr	r3, [pc, #464]	; (80076c4 <_dtoa_r+0x6a8>)
 80074f4:	f7fa fe1a 	bl	800212c <__aeabi_dmul>
 80074f8:	9a08      	ldr	r2, [sp, #32]
 80074fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074fc:	f7f8 ffc8 	bl	8000490 <__aeabi_dcmpge>
 8007500:	9e07      	ldr	r6, [sp, #28]
 8007502:	0035      	movs	r5, r6
 8007504:	2800      	cmp	r0, #0
 8007506:	d000      	beq.n	800750a <_dtoa_r+0x4ee>
 8007508:	e259      	b.n	80079be <_dtoa_r+0x9a2>
 800750a:	9b06      	ldr	r3, [sp, #24]
 800750c:	9a06      	ldr	r2, [sp, #24]
 800750e:	3301      	adds	r3, #1
 8007510:	9308      	str	r3, [sp, #32]
 8007512:	2331      	movs	r3, #49	; 0x31
 8007514:	7013      	strb	r3, [r2, #0]
 8007516:	9b02      	ldr	r3, [sp, #8]
 8007518:	3301      	adds	r3, #1
 800751a:	9302      	str	r3, [sp, #8]
 800751c:	e254      	b.n	80079c8 <_dtoa_r+0x9ac>
 800751e:	4234      	tst	r4, r6
 8007520:	d007      	beq.n	8007532 <_dtoa_r+0x516>
 8007522:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007524:	3301      	adds	r3, #1
 8007526:	9310      	str	r3, [sp, #64]	; 0x40
 8007528:	682a      	ldr	r2, [r5, #0]
 800752a:	686b      	ldr	r3, [r5, #4]
 800752c:	f7fa fdfe 	bl	800212c <__aeabi_dmul>
 8007530:	0033      	movs	r3, r6
 8007532:	1064      	asrs	r4, r4, #1
 8007534:	3508      	adds	r5, #8
 8007536:	e75a      	b.n	80073ee <_dtoa_r+0x3d2>
 8007538:	9e02      	ldr	r6, [sp, #8]
 800753a:	9b07      	ldr	r3, [sp, #28]
 800753c:	e780      	b.n	8007440 <_dtoa_r+0x424>
 800753e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007540:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007542:	1e5a      	subs	r2, r3, #1
 8007544:	4b59      	ldr	r3, [pc, #356]	; (80076ac <_dtoa_r+0x690>)
 8007546:	00d2      	lsls	r2, r2, #3
 8007548:	189b      	adds	r3, r3, r2
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2900      	cmp	r1, #0
 8007550:	d051      	beq.n	80075f6 <_dtoa_r+0x5da>
 8007552:	2000      	movs	r0, #0
 8007554:	495d      	ldr	r1, [pc, #372]	; (80076cc <_dtoa_r+0x6b0>)
 8007556:	f7fa f9e7 	bl	8001928 <__aeabi_ddiv>
 800755a:	9a08      	ldr	r2, [sp, #32]
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	f7fb f851 	bl	8002604 <__aeabi_dsub>
 8007562:	9a06      	ldr	r2, [sp, #24]
 8007564:	9b06      	ldr	r3, [sp, #24]
 8007566:	4694      	mov	ip, r2
 8007568:	9317      	str	r3, [sp, #92]	; 0x5c
 800756a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800756c:	9010      	str	r0, [sp, #64]	; 0x40
 800756e:	9111      	str	r1, [sp, #68]	; 0x44
 8007570:	4463      	add	r3, ip
 8007572:	9319      	str	r3, [sp, #100]	; 0x64
 8007574:	0029      	movs	r1, r5
 8007576:	0020      	movs	r0, r4
 8007578:	f7fb fbf4 	bl	8002d64 <__aeabi_d2iz>
 800757c:	9014      	str	r0, [sp, #80]	; 0x50
 800757e:	f7fb fc27 	bl	8002dd0 <__aeabi_i2d>
 8007582:	0002      	movs	r2, r0
 8007584:	000b      	movs	r3, r1
 8007586:	0020      	movs	r0, r4
 8007588:	0029      	movs	r1, r5
 800758a:	f7fb f83b 	bl	8002604 <__aeabi_dsub>
 800758e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007590:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007592:	3301      	adds	r3, #1
 8007594:	9308      	str	r3, [sp, #32]
 8007596:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007598:	0004      	movs	r4, r0
 800759a:	3330      	adds	r3, #48	; 0x30
 800759c:	7013      	strb	r3, [r2, #0]
 800759e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075a2:	000d      	movs	r5, r1
 80075a4:	f7f8 ff56 	bl	8000454 <__aeabi_dcmplt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d175      	bne.n	8007698 <_dtoa_r+0x67c>
 80075ac:	0022      	movs	r2, r4
 80075ae:	002b      	movs	r3, r5
 80075b0:	2000      	movs	r0, #0
 80075b2:	4940      	ldr	r1, [pc, #256]	; (80076b4 <_dtoa_r+0x698>)
 80075b4:	f7fb f826 	bl	8002604 <__aeabi_dsub>
 80075b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075bc:	f7f8 ff4a 	bl	8000454 <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d000      	beq.n	80075c6 <_dtoa_r+0x5aa>
 80075c4:	e0d2      	b.n	800776c <_dtoa_r+0x750>
 80075c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075c8:	9a08      	ldr	r2, [sp, #32]
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d100      	bne.n	80075d0 <_dtoa_r+0x5b4>
 80075ce:	e770      	b.n	80074b2 <_dtoa_r+0x496>
 80075d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075d4:	2200      	movs	r2, #0
 80075d6:	4b38      	ldr	r3, [pc, #224]	; (80076b8 <_dtoa_r+0x69c>)
 80075d8:	f7fa fda8 	bl	800212c <__aeabi_dmul>
 80075dc:	4b36      	ldr	r3, [pc, #216]	; (80076b8 <_dtoa_r+0x69c>)
 80075de:	9010      	str	r0, [sp, #64]	; 0x40
 80075e0:	9111      	str	r1, [sp, #68]	; 0x44
 80075e2:	2200      	movs	r2, #0
 80075e4:	0020      	movs	r0, r4
 80075e6:	0029      	movs	r1, r5
 80075e8:	f7fa fda0 	bl	800212c <__aeabi_dmul>
 80075ec:	9b08      	ldr	r3, [sp, #32]
 80075ee:	0004      	movs	r4, r0
 80075f0:	000d      	movs	r5, r1
 80075f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80075f4:	e7be      	b.n	8007574 <_dtoa_r+0x558>
 80075f6:	9808      	ldr	r0, [sp, #32]
 80075f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075fa:	f7fa fd97 	bl	800212c <__aeabi_dmul>
 80075fe:	9a06      	ldr	r2, [sp, #24]
 8007600:	9b06      	ldr	r3, [sp, #24]
 8007602:	4694      	mov	ip, r2
 8007604:	9308      	str	r3, [sp, #32]
 8007606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007608:	9010      	str	r0, [sp, #64]	; 0x40
 800760a:	9111      	str	r1, [sp, #68]	; 0x44
 800760c:	4463      	add	r3, ip
 800760e:	9319      	str	r3, [sp, #100]	; 0x64
 8007610:	0029      	movs	r1, r5
 8007612:	0020      	movs	r0, r4
 8007614:	f7fb fba6 	bl	8002d64 <__aeabi_d2iz>
 8007618:	9017      	str	r0, [sp, #92]	; 0x5c
 800761a:	f7fb fbd9 	bl	8002dd0 <__aeabi_i2d>
 800761e:	0002      	movs	r2, r0
 8007620:	000b      	movs	r3, r1
 8007622:	0020      	movs	r0, r4
 8007624:	0029      	movs	r1, r5
 8007626:	f7fa ffed 	bl	8002604 <__aeabi_dsub>
 800762a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800762c:	9a08      	ldr	r2, [sp, #32]
 800762e:	3330      	adds	r3, #48	; 0x30
 8007630:	7013      	strb	r3, [r2, #0]
 8007632:	0013      	movs	r3, r2
 8007634:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007636:	3301      	adds	r3, #1
 8007638:	0004      	movs	r4, r0
 800763a:	000d      	movs	r5, r1
 800763c:	9308      	str	r3, [sp, #32]
 800763e:	4293      	cmp	r3, r2
 8007640:	d12c      	bne.n	800769c <_dtoa_r+0x680>
 8007642:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007644:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007646:	9a06      	ldr	r2, [sp, #24]
 8007648:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800764a:	4694      	mov	ip, r2
 800764c:	4463      	add	r3, ip
 800764e:	2200      	movs	r2, #0
 8007650:	9308      	str	r3, [sp, #32]
 8007652:	4b1e      	ldr	r3, [pc, #120]	; (80076cc <_dtoa_r+0x6b0>)
 8007654:	f7f9 fe2c 	bl	80012b0 <__aeabi_dadd>
 8007658:	0002      	movs	r2, r0
 800765a:	000b      	movs	r3, r1
 800765c:	0020      	movs	r0, r4
 800765e:	0029      	movs	r1, r5
 8007660:	f7f8 ff0c 	bl	800047c <__aeabi_dcmpgt>
 8007664:	2800      	cmp	r0, #0
 8007666:	d000      	beq.n	800766a <_dtoa_r+0x64e>
 8007668:	e080      	b.n	800776c <_dtoa_r+0x750>
 800766a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800766c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800766e:	2000      	movs	r0, #0
 8007670:	4916      	ldr	r1, [pc, #88]	; (80076cc <_dtoa_r+0x6b0>)
 8007672:	f7fa ffc7 	bl	8002604 <__aeabi_dsub>
 8007676:	0002      	movs	r2, r0
 8007678:	000b      	movs	r3, r1
 800767a:	0020      	movs	r0, r4
 800767c:	0029      	movs	r1, r5
 800767e:	f7f8 fee9 	bl	8000454 <__aeabi_dcmplt>
 8007682:	2800      	cmp	r0, #0
 8007684:	d100      	bne.n	8007688 <_dtoa_r+0x66c>
 8007686:	e714      	b.n	80074b2 <_dtoa_r+0x496>
 8007688:	9b08      	ldr	r3, [sp, #32]
 800768a:	001a      	movs	r2, r3
 800768c:	3a01      	subs	r2, #1
 800768e:	9208      	str	r2, [sp, #32]
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	2a30      	cmp	r2, #48	; 0x30
 8007694:	d0f8      	beq.n	8007688 <_dtoa_r+0x66c>
 8007696:	9308      	str	r3, [sp, #32]
 8007698:	9602      	str	r6, [sp, #8]
 800769a:	e055      	b.n	8007748 <_dtoa_r+0x72c>
 800769c:	2200      	movs	r2, #0
 800769e:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <_dtoa_r+0x69c>)
 80076a0:	f7fa fd44 	bl	800212c <__aeabi_dmul>
 80076a4:	0004      	movs	r4, r0
 80076a6:	000d      	movs	r5, r1
 80076a8:	e7b2      	b.n	8007610 <_dtoa_r+0x5f4>
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	080094f8 	.word	0x080094f8
 80076b0:	080094d0 	.word	0x080094d0
 80076b4:	3ff00000 	.word	0x3ff00000
 80076b8:	40240000 	.word	0x40240000
 80076bc:	401c0000 	.word	0x401c0000
 80076c0:	fcc00000 	.word	0xfcc00000
 80076c4:	40140000 	.word	0x40140000
 80076c8:	7cc00000 	.word	0x7cc00000
 80076cc:	3fe00000 	.word	0x3fe00000
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	9e06      	ldr	r6, [sp, #24]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	199b      	adds	r3, r3, r6
 80076d8:	930c      	str	r3, [sp, #48]	; 0x30
 80076da:	9c08      	ldr	r4, [sp, #32]
 80076dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80076de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076e2:	0020      	movs	r0, r4
 80076e4:	0029      	movs	r1, r5
 80076e6:	f7fa f91f 	bl	8001928 <__aeabi_ddiv>
 80076ea:	f7fb fb3b 	bl	8002d64 <__aeabi_d2iz>
 80076ee:	9007      	str	r0, [sp, #28]
 80076f0:	f7fb fb6e 	bl	8002dd0 <__aeabi_i2d>
 80076f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f8:	f7fa fd18 	bl	800212c <__aeabi_dmul>
 80076fc:	0002      	movs	r2, r0
 80076fe:	000b      	movs	r3, r1
 8007700:	0020      	movs	r0, r4
 8007702:	0029      	movs	r1, r5
 8007704:	f7fa ff7e 	bl	8002604 <__aeabi_dsub>
 8007708:	0033      	movs	r3, r6
 800770a:	9a07      	ldr	r2, [sp, #28]
 800770c:	3601      	adds	r6, #1
 800770e:	3230      	adds	r2, #48	; 0x30
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007714:	9608      	str	r6, [sp, #32]
 8007716:	429a      	cmp	r2, r3
 8007718:	d139      	bne.n	800778e <_dtoa_r+0x772>
 800771a:	0002      	movs	r2, r0
 800771c:	000b      	movs	r3, r1
 800771e:	f7f9 fdc7 	bl	80012b0 <__aeabi_dadd>
 8007722:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007726:	0004      	movs	r4, r0
 8007728:	000d      	movs	r5, r1
 800772a:	f7f8 fea7 	bl	800047c <__aeabi_dcmpgt>
 800772e:	2800      	cmp	r0, #0
 8007730:	d11b      	bne.n	800776a <_dtoa_r+0x74e>
 8007732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007736:	0020      	movs	r0, r4
 8007738:	0029      	movs	r1, r5
 800773a:	f7f8 fe85 	bl	8000448 <__aeabi_dcmpeq>
 800773e:	2800      	cmp	r0, #0
 8007740:	d002      	beq.n	8007748 <_dtoa_r+0x72c>
 8007742:	9b07      	ldr	r3, [sp, #28]
 8007744:	07db      	lsls	r3, r3, #31
 8007746:	d410      	bmi.n	800776a <_dtoa_r+0x74e>
 8007748:	0038      	movs	r0, r7
 800774a:	9905      	ldr	r1, [sp, #20]
 800774c:	f000 fd1c 	bl	8008188 <_Bfree>
 8007750:	2300      	movs	r3, #0
 8007752:	9a08      	ldr	r2, [sp, #32]
 8007754:	9802      	ldr	r0, [sp, #8]
 8007756:	7013      	strb	r3, [r2, #0]
 8007758:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800775a:	3001      	adds	r0, #1
 800775c:	6018      	str	r0, [r3, #0]
 800775e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007760:	2b00      	cmp	r3, #0
 8007762:	d100      	bne.n	8007766 <_dtoa_r+0x74a>
 8007764:	e4a6      	b.n	80070b4 <_dtoa_r+0x98>
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	e4a4      	b.n	80070b4 <_dtoa_r+0x98>
 800776a:	9e02      	ldr	r6, [sp, #8]
 800776c:	9b08      	ldr	r3, [sp, #32]
 800776e:	9308      	str	r3, [sp, #32]
 8007770:	3b01      	subs	r3, #1
 8007772:	781a      	ldrb	r2, [r3, #0]
 8007774:	2a39      	cmp	r2, #57	; 0x39
 8007776:	d106      	bne.n	8007786 <_dtoa_r+0x76a>
 8007778:	9a06      	ldr	r2, [sp, #24]
 800777a:	429a      	cmp	r2, r3
 800777c:	d1f7      	bne.n	800776e <_dtoa_r+0x752>
 800777e:	2230      	movs	r2, #48	; 0x30
 8007780:	9906      	ldr	r1, [sp, #24]
 8007782:	3601      	adds	r6, #1
 8007784:	700a      	strb	r2, [r1, #0]
 8007786:	781a      	ldrb	r2, [r3, #0]
 8007788:	3201      	adds	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e784      	b.n	8007698 <_dtoa_r+0x67c>
 800778e:	2200      	movs	r2, #0
 8007790:	4baa      	ldr	r3, [pc, #680]	; (8007a3c <_dtoa_r+0xa20>)
 8007792:	f7fa fccb 	bl	800212c <__aeabi_dmul>
 8007796:	2200      	movs	r2, #0
 8007798:	2300      	movs	r3, #0
 800779a:	0004      	movs	r4, r0
 800779c:	000d      	movs	r5, r1
 800779e:	f7f8 fe53 	bl	8000448 <__aeabi_dcmpeq>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	d09b      	beq.n	80076de <_dtoa_r+0x6c2>
 80077a6:	e7cf      	b.n	8007748 <_dtoa_r+0x72c>
 80077a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80077aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80077ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80077ae:	2d00      	cmp	r5, #0
 80077b0:	d012      	beq.n	80077d8 <_dtoa_r+0x7bc>
 80077b2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80077b4:	2a01      	cmp	r2, #1
 80077b6:	dc66      	bgt.n	8007886 <_dtoa_r+0x86a>
 80077b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80077ba:	2a00      	cmp	r2, #0
 80077bc:	d05d      	beq.n	800787a <_dtoa_r+0x85e>
 80077be:	4aa0      	ldr	r2, [pc, #640]	; (8007a40 <_dtoa_r+0xa24>)
 80077c0:	189b      	adds	r3, r3, r2
 80077c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077c4:	2101      	movs	r1, #1
 80077c6:	18d2      	adds	r2, r2, r3
 80077c8:	920a      	str	r2, [sp, #40]	; 0x28
 80077ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077cc:	0038      	movs	r0, r7
 80077ce:	18d3      	adds	r3, r2, r3
 80077d0:	930d      	str	r3, [sp, #52]	; 0x34
 80077d2:	f000 fd89 	bl	80082e8 <__i2b>
 80077d6:	0005      	movs	r5, r0
 80077d8:	2c00      	cmp	r4, #0
 80077da:	dd0e      	ble.n	80077fa <_dtoa_r+0x7de>
 80077dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dd0b      	ble.n	80077fa <_dtoa_r+0x7de>
 80077e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077e4:	0023      	movs	r3, r4
 80077e6:	4294      	cmp	r4, r2
 80077e8:	dd00      	ble.n	80077ec <_dtoa_r+0x7d0>
 80077ea:	0013      	movs	r3, r2
 80077ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ee:	1ae4      	subs	r4, r4, r3
 80077f0:	1ad2      	subs	r2, r2, r3
 80077f2:	920a      	str	r2, [sp, #40]	; 0x28
 80077f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	930d      	str	r3, [sp, #52]	; 0x34
 80077fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01f      	beq.n	8007840 <_dtoa_r+0x824>
 8007800:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d054      	beq.n	80078b0 <_dtoa_r+0x894>
 8007806:	2e00      	cmp	r6, #0
 8007808:	dd11      	ble.n	800782e <_dtoa_r+0x812>
 800780a:	0029      	movs	r1, r5
 800780c:	0032      	movs	r2, r6
 800780e:	0038      	movs	r0, r7
 8007810:	f000 fe30 	bl	8008474 <__pow5mult>
 8007814:	9a05      	ldr	r2, [sp, #20]
 8007816:	0001      	movs	r1, r0
 8007818:	0005      	movs	r5, r0
 800781a:	0038      	movs	r0, r7
 800781c:	f000 fd7a 	bl	8008314 <__multiply>
 8007820:	9905      	ldr	r1, [sp, #20]
 8007822:	9014      	str	r0, [sp, #80]	; 0x50
 8007824:	0038      	movs	r0, r7
 8007826:	f000 fcaf 	bl	8008188 <_Bfree>
 800782a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800782c:	9305      	str	r3, [sp, #20]
 800782e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007830:	1b9a      	subs	r2, r3, r6
 8007832:	42b3      	cmp	r3, r6
 8007834:	d004      	beq.n	8007840 <_dtoa_r+0x824>
 8007836:	0038      	movs	r0, r7
 8007838:	9905      	ldr	r1, [sp, #20]
 800783a:	f000 fe1b 	bl	8008474 <__pow5mult>
 800783e:	9005      	str	r0, [sp, #20]
 8007840:	2101      	movs	r1, #1
 8007842:	0038      	movs	r0, r7
 8007844:	f000 fd50 	bl	80082e8 <__i2b>
 8007848:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800784a:	0006      	movs	r6, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd31      	ble.n	80078b4 <_dtoa_r+0x898>
 8007850:	001a      	movs	r2, r3
 8007852:	0001      	movs	r1, r0
 8007854:	0038      	movs	r0, r7
 8007856:	f000 fe0d 	bl	8008474 <__pow5mult>
 800785a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800785c:	0006      	movs	r6, r0
 800785e:	2b01      	cmp	r3, #1
 8007860:	dd2d      	ble.n	80078be <_dtoa_r+0x8a2>
 8007862:	2300      	movs	r3, #0
 8007864:	930e      	str	r3, [sp, #56]	; 0x38
 8007866:	6933      	ldr	r3, [r6, #16]
 8007868:	3303      	adds	r3, #3
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	18f3      	adds	r3, r6, r3
 800786e:	6858      	ldr	r0, [r3, #4]
 8007870:	f000 fcf2 	bl	8008258 <__hi0bits>
 8007874:	2320      	movs	r3, #32
 8007876:	1a18      	subs	r0, r3, r0
 8007878:	e039      	b.n	80078ee <_dtoa_r+0x8d2>
 800787a:	2336      	movs	r3, #54	; 0x36
 800787c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800787e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007880:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	e79d      	b.n	80077c2 <_dtoa_r+0x7a6>
 8007886:	9b07      	ldr	r3, [sp, #28]
 8007888:	1e5e      	subs	r6, r3, #1
 800788a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800788c:	42b3      	cmp	r3, r6
 800788e:	db07      	blt.n	80078a0 <_dtoa_r+0x884>
 8007890:	1b9e      	subs	r6, r3, r6
 8007892:	9b07      	ldr	r3, [sp, #28]
 8007894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007896:	2b00      	cmp	r3, #0
 8007898:	da93      	bge.n	80077c2 <_dtoa_r+0x7a6>
 800789a:	1ae4      	subs	r4, r4, r3
 800789c:	2300      	movs	r3, #0
 800789e:	e790      	b.n	80077c2 <_dtoa_r+0x7a6>
 80078a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078a4:	1af3      	subs	r3, r6, r3
 80078a6:	18d3      	adds	r3, r2, r3
 80078a8:	960e      	str	r6, [sp, #56]	; 0x38
 80078aa:	9315      	str	r3, [sp, #84]	; 0x54
 80078ac:	2600      	movs	r6, #0
 80078ae:	e7f0      	b.n	8007892 <_dtoa_r+0x876>
 80078b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078b2:	e7c0      	b.n	8007836 <_dtoa_r+0x81a>
 80078b4:	2300      	movs	r3, #0
 80078b6:	930e      	str	r3, [sp, #56]	; 0x38
 80078b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	dc13      	bgt.n	80078e6 <_dtoa_r+0x8ca>
 80078be:	2300      	movs	r3, #0
 80078c0:	930e      	str	r3, [sp, #56]	; 0x38
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10e      	bne.n	80078e6 <_dtoa_r+0x8ca>
 80078c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ca:	031b      	lsls	r3, r3, #12
 80078cc:	d10b      	bne.n	80078e6 <_dtoa_r+0x8ca>
 80078ce:	4b5d      	ldr	r3, [pc, #372]	; (8007a44 <_dtoa_r+0xa28>)
 80078d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078d2:	4213      	tst	r3, r2
 80078d4:	d007      	beq.n	80078e6 <_dtoa_r+0x8ca>
 80078d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d8:	3301      	adds	r3, #1
 80078da:	930a      	str	r3, [sp, #40]	; 0x28
 80078dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078de:	3301      	adds	r3, #1
 80078e0:	930d      	str	r3, [sp, #52]	; 0x34
 80078e2:	2301      	movs	r3, #1
 80078e4:	930e      	str	r3, [sp, #56]	; 0x38
 80078e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078e8:	2001      	movs	r0, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1bb      	bne.n	8007866 <_dtoa_r+0x84a>
 80078ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078f0:	221f      	movs	r2, #31
 80078f2:	1818      	adds	r0, r3, r0
 80078f4:	0003      	movs	r3, r0
 80078f6:	4013      	ands	r3, r2
 80078f8:	4210      	tst	r0, r2
 80078fa:	d046      	beq.n	800798a <_dtoa_r+0x96e>
 80078fc:	3201      	adds	r2, #1
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	2a04      	cmp	r2, #4
 8007902:	dd3f      	ble.n	8007984 <_dtoa_r+0x968>
 8007904:	221c      	movs	r2, #28
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800790a:	18e4      	adds	r4, r4, r3
 800790c:	18d2      	adds	r2, r2, r3
 800790e:	920a      	str	r2, [sp, #40]	; 0x28
 8007910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007912:	18d3      	adds	r3, r2, r3
 8007914:	930d      	str	r3, [sp, #52]	; 0x34
 8007916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007918:	2b00      	cmp	r3, #0
 800791a:	dd05      	ble.n	8007928 <_dtoa_r+0x90c>
 800791c:	001a      	movs	r2, r3
 800791e:	0038      	movs	r0, r7
 8007920:	9905      	ldr	r1, [sp, #20]
 8007922:	f000 fe03 	bl	800852c <__lshift>
 8007926:	9005      	str	r0, [sp, #20]
 8007928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800792a:	2b00      	cmp	r3, #0
 800792c:	dd05      	ble.n	800793a <_dtoa_r+0x91e>
 800792e:	0031      	movs	r1, r6
 8007930:	001a      	movs	r2, r3
 8007932:	0038      	movs	r0, r7
 8007934:	f000 fdfa 	bl	800852c <__lshift>
 8007938:	0006      	movs	r6, r0
 800793a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800793c:	2b00      	cmp	r3, #0
 800793e:	d026      	beq.n	800798e <_dtoa_r+0x972>
 8007940:	0031      	movs	r1, r6
 8007942:	9805      	ldr	r0, [sp, #20]
 8007944:	f000 fe60 	bl	8008608 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	da20      	bge.n	800798e <_dtoa_r+0x972>
 800794c:	9b02      	ldr	r3, [sp, #8]
 800794e:	220a      	movs	r2, #10
 8007950:	3b01      	subs	r3, #1
 8007952:	9302      	str	r3, [sp, #8]
 8007954:	0038      	movs	r0, r7
 8007956:	2300      	movs	r3, #0
 8007958:	9905      	ldr	r1, [sp, #20]
 800795a:	f000 fc39 	bl	80081d0 <__multadd>
 800795e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007960:	9005      	str	r0, [sp, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d100      	bne.n	8007968 <_dtoa_r+0x94c>
 8007966:	e166      	b.n	8007c36 <_dtoa_r+0xc1a>
 8007968:	2300      	movs	r3, #0
 800796a:	0029      	movs	r1, r5
 800796c:	220a      	movs	r2, #10
 800796e:	0038      	movs	r0, r7
 8007970:	f000 fc2e 	bl	80081d0 <__multadd>
 8007974:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007976:	0005      	movs	r5, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	dc47      	bgt.n	8007a0c <_dtoa_r+0x9f0>
 800797c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800797e:	2b02      	cmp	r3, #2
 8007980:	dc0d      	bgt.n	800799e <_dtoa_r+0x982>
 8007982:	e043      	b.n	8007a0c <_dtoa_r+0x9f0>
 8007984:	2a04      	cmp	r2, #4
 8007986:	d0c6      	beq.n	8007916 <_dtoa_r+0x8fa>
 8007988:	0013      	movs	r3, r2
 800798a:	331c      	adds	r3, #28
 800798c:	e7bc      	b.n	8007908 <_dtoa_r+0x8ec>
 800798e:	9b07      	ldr	r3, [sp, #28]
 8007990:	2b00      	cmp	r3, #0
 8007992:	dc35      	bgt.n	8007a00 <_dtoa_r+0x9e4>
 8007994:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007996:	2b02      	cmp	r3, #2
 8007998:	dd32      	ble.n	8007a00 <_dtoa_r+0x9e4>
 800799a:	9b07      	ldr	r3, [sp, #28]
 800799c:	930c      	str	r3, [sp, #48]	; 0x30
 800799e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10c      	bne.n	80079be <_dtoa_r+0x9a2>
 80079a4:	0031      	movs	r1, r6
 80079a6:	2205      	movs	r2, #5
 80079a8:	0038      	movs	r0, r7
 80079aa:	f000 fc11 	bl	80081d0 <__multadd>
 80079ae:	0006      	movs	r6, r0
 80079b0:	0001      	movs	r1, r0
 80079b2:	9805      	ldr	r0, [sp, #20]
 80079b4:	f000 fe28 	bl	8008608 <__mcmp>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	dd00      	ble.n	80079be <_dtoa_r+0x9a2>
 80079bc:	e5a5      	b.n	800750a <_dtoa_r+0x4ee>
 80079be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80079c0:	43db      	mvns	r3, r3
 80079c2:	9302      	str	r3, [sp, #8]
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	9308      	str	r3, [sp, #32]
 80079c8:	2400      	movs	r4, #0
 80079ca:	0031      	movs	r1, r6
 80079cc:	0038      	movs	r0, r7
 80079ce:	f000 fbdb 	bl	8008188 <_Bfree>
 80079d2:	2d00      	cmp	r5, #0
 80079d4:	d100      	bne.n	80079d8 <_dtoa_r+0x9bc>
 80079d6:	e6b7      	b.n	8007748 <_dtoa_r+0x72c>
 80079d8:	2c00      	cmp	r4, #0
 80079da:	d005      	beq.n	80079e8 <_dtoa_r+0x9cc>
 80079dc:	42ac      	cmp	r4, r5
 80079de:	d003      	beq.n	80079e8 <_dtoa_r+0x9cc>
 80079e0:	0021      	movs	r1, r4
 80079e2:	0038      	movs	r0, r7
 80079e4:	f000 fbd0 	bl	8008188 <_Bfree>
 80079e8:	0029      	movs	r1, r5
 80079ea:	0038      	movs	r0, r7
 80079ec:	f000 fbcc 	bl	8008188 <_Bfree>
 80079f0:	e6aa      	b.n	8007748 <_dtoa_r+0x72c>
 80079f2:	2600      	movs	r6, #0
 80079f4:	0035      	movs	r5, r6
 80079f6:	e7e2      	b.n	80079be <_dtoa_r+0x9a2>
 80079f8:	9602      	str	r6, [sp, #8]
 80079fa:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80079fc:	0035      	movs	r5, r6
 80079fe:	e584      	b.n	800750a <_dtoa_r+0x4ee>
 8007a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d100      	bne.n	8007a08 <_dtoa_r+0x9ec>
 8007a06:	e0ce      	b.n	8007ba6 <_dtoa_r+0xb8a>
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	930c      	str	r3, [sp, #48]	; 0x30
 8007a0c:	2c00      	cmp	r4, #0
 8007a0e:	dd05      	ble.n	8007a1c <_dtoa_r+0xa00>
 8007a10:	0029      	movs	r1, r5
 8007a12:	0022      	movs	r2, r4
 8007a14:	0038      	movs	r0, r7
 8007a16:	f000 fd89 	bl	800852c <__lshift>
 8007a1a:	0005      	movs	r5, r0
 8007a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a1e:	0028      	movs	r0, r5
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d022      	beq.n	8007a6a <_dtoa_r+0xa4e>
 8007a24:	0038      	movs	r0, r7
 8007a26:	6869      	ldr	r1, [r5, #4]
 8007a28:	f000 fb6a 	bl	8008100 <_Balloc>
 8007a2c:	1e04      	subs	r4, r0, #0
 8007a2e:	d10f      	bne.n	8007a50 <_dtoa_r+0xa34>
 8007a30:	0002      	movs	r2, r0
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <_dtoa_r+0xa2c>)
 8007a34:	4905      	ldr	r1, [pc, #20]	; (8007a4c <_dtoa_r+0xa30>)
 8007a36:	f7ff fb06 	bl	8007046 <_dtoa_r+0x2a>
 8007a3a:	46c0      	nop			; (mov r8, r8)
 8007a3c:	40240000 	.word	0x40240000
 8007a40:	00000433 	.word	0x00000433
 8007a44:	7ff00000 	.word	0x7ff00000
 8007a48:	08009403 	.word	0x08009403
 8007a4c:	000002ea 	.word	0x000002ea
 8007a50:	0029      	movs	r1, r5
 8007a52:	692b      	ldr	r3, [r5, #16]
 8007a54:	310c      	adds	r1, #12
 8007a56:	1c9a      	adds	r2, r3, #2
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	300c      	adds	r0, #12
 8007a5c:	f7fe fc6e 	bl	800633c <memcpy>
 8007a60:	2201      	movs	r2, #1
 8007a62:	0021      	movs	r1, r4
 8007a64:	0038      	movs	r0, r7
 8007a66:	f000 fd61 	bl	800852c <__lshift>
 8007a6a:	9b06      	ldr	r3, [sp, #24]
 8007a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a70:	3b01      	subs	r3, #1
 8007a72:	189b      	adds	r3, r3, r2
 8007a74:	2201      	movs	r2, #1
 8007a76:	002c      	movs	r4, r5
 8007a78:	0005      	movs	r5, r0
 8007a7a:	9314      	str	r3, [sp, #80]	; 0x50
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a82:	0031      	movs	r1, r6
 8007a84:	9805      	ldr	r0, [sp, #20]
 8007a86:	f7ff fa3d 	bl	8006f04 <quorem>
 8007a8a:	0003      	movs	r3, r0
 8007a8c:	0021      	movs	r1, r4
 8007a8e:	3330      	adds	r3, #48	; 0x30
 8007a90:	900d      	str	r0, [sp, #52]	; 0x34
 8007a92:	9805      	ldr	r0, [sp, #20]
 8007a94:	9307      	str	r3, [sp, #28]
 8007a96:	f000 fdb7 	bl	8008608 <__mcmp>
 8007a9a:	002a      	movs	r2, r5
 8007a9c:	900e      	str	r0, [sp, #56]	; 0x38
 8007a9e:	0031      	movs	r1, r6
 8007aa0:	0038      	movs	r0, r7
 8007aa2:	f000 fdcd 	bl	8008640 <__mdiff>
 8007aa6:	68c3      	ldr	r3, [r0, #12]
 8007aa8:	9008      	str	r0, [sp, #32]
 8007aaa:	9310      	str	r3, [sp, #64]	; 0x40
 8007aac:	2301      	movs	r3, #1
 8007aae:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d104      	bne.n	8007ac0 <_dtoa_r+0xaa4>
 8007ab6:	0001      	movs	r1, r0
 8007ab8:	9805      	ldr	r0, [sp, #20]
 8007aba:	f000 fda5 	bl	8008608 <__mcmp>
 8007abe:	900c      	str	r0, [sp, #48]	; 0x30
 8007ac0:	0038      	movs	r0, r7
 8007ac2:	9908      	ldr	r1, [sp, #32]
 8007ac4:	f000 fb60 	bl	8008188 <_Bfree>
 8007ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007acc:	3301      	adds	r3, #1
 8007ace:	9308      	str	r3, [sp, #32]
 8007ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	d10c      	bne.n	8007af4 <_dtoa_r+0xad8>
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	2b39      	cmp	r3, #57	; 0x39
 8007ade:	d026      	beq.n	8007b2e <_dtoa_r+0xb12>
 8007ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dd02      	ble.n	8007aec <_dtoa_r+0xad0>
 8007ae6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ae8:	3331      	adds	r3, #49	; 0x31
 8007aea:	9307      	str	r3, [sp, #28]
 8007aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aee:	9a07      	ldr	r2, [sp, #28]
 8007af0:	701a      	strb	r2, [r3, #0]
 8007af2:	e76a      	b.n	80079ca <_dtoa_r+0x9ae>
 8007af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	db04      	blt.n	8007b04 <_dtoa_r+0xae8>
 8007afa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007afc:	4313      	orrs	r3, r2
 8007afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b00:	4313      	orrs	r3, r2
 8007b02:	d11f      	bne.n	8007b44 <_dtoa_r+0xb28>
 8007b04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	ddf0      	ble.n	8007aec <_dtoa_r+0xad0>
 8007b0a:	9905      	ldr	r1, [sp, #20]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	0038      	movs	r0, r7
 8007b10:	f000 fd0c 	bl	800852c <__lshift>
 8007b14:	0031      	movs	r1, r6
 8007b16:	9005      	str	r0, [sp, #20]
 8007b18:	f000 fd76 	bl	8008608 <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dc03      	bgt.n	8007b28 <_dtoa_r+0xb0c>
 8007b20:	d1e4      	bne.n	8007aec <_dtoa_r+0xad0>
 8007b22:	9b07      	ldr	r3, [sp, #28]
 8007b24:	07db      	lsls	r3, r3, #31
 8007b26:	d5e1      	bpl.n	8007aec <_dtoa_r+0xad0>
 8007b28:	9b07      	ldr	r3, [sp, #28]
 8007b2a:	2b39      	cmp	r3, #57	; 0x39
 8007b2c:	d1db      	bne.n	8007ae6 <_dtoa_r+0xaca>
 8007b2e:	2339      	movs	r3, #57	; 0x39
 8007b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b32:	7013      	strb	r3, [r2, #0]
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	9308      	str	r3, [sp, #32]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	781a      	ldrb	r2, [r3, #0]
 8007b3c:	2a39      	cmp	r2, #57	; 0x39
 8007b3e:	d068      	beq.n	8007c12 <_dtoa_r+0xbf6>
 8007b40:	3201      	adds	r2, #1
 8007b42:	e7d5      	b.n	8007af0 <_dtoa_r+0xad4>
 8007b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd07      	ble.n	8007b5a <_dtoa_r+0xb3e>
 8007b4a:	9b07      	ldr	r3, [sp, #28]
 8007b4c:	2b39      	cmp	r3, #57	; 0x39
 8007b4e:	d0ee      	beq.n	8007b2e <_dtoa_r+0xb12>
 8007b50:	9b07      	ldr	r3, [sp, #28]
 8007b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b54:	3301      	adds	r3, #1
 8007b56:	7013      	strb	r3, [r2, #0]
 8007b58:	e737      	b.n	80079ca <_dtoa_r+0x9ae>
 8007b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5c:	9a07      	ldr	r2, [sp, #28]
 8007b5e:	701a      	strb	r2, [r3, #0]
 8007b60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d03e      	beq.n	8007be6 <_dtoa_r+0xbca>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	220a      	movs	r2, #10
 8007b6c:	9905      	ldr	r1, [sp, #20]
 8007b6e:	0038      	movs	r0, r7
 8007b70:	f000 fb2e 	bl	80081d0 <__multadd>
 8007b74:	2300      	movs	r3, #0
 8007b76:	9005      	str	r0, [sp, #20]
 8007b78:	220a      	movs	r2, #10
 8007b7a:	0021      	movs	r1, r4
 8007b7c:	0038      	movs	r0, r7
 8007b7e:	42ac      	cmp	r4, r5
 8007b80:	d106      	bne.n	8007b90 <_dtoa_r+0xb74>
 8007b82:	f000 fb25 	bl	80081d0 <__multadd>
 8007b86:	0004      	movs	r4, r0
 8007b88:	0005      	movs	r5, r0
 8007b8a:	9b08      	ldr	r3, [sp, #32]
 8007b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8007b8e:	e778      	b.n	8007a82 <_dtoa_r+0xa66>
 8007b90:	f000 fb1e 	bl	80081d0 <__multadd>
 8007b94:	0029      	movs	r1, r5
 8007b96:	0004      	movs	r4, r0
 8007b98:	2300      	movs	r3, #0
 8007b9a:	220a      	movs	r2, #10
 8007b9c:	0038      	movs	r0, r7
 8007b9e:	f000 fb17 	bl	80081d0 <__multadd>
 8007ba2:	0005      	movs	r5, r0
 8007ba4:	e7f1      	b.n	8007b8a <_dtoa_r+0xb6e>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	930c      	str	r3, [sp, #48]	; 0x30
 8007baa:	2400      	movs	r4, #0
 8007bac:	0031      	movs	r1, r6
 8007bae:	9805      	ldr	r0, [sp, #20]
 8007bb0:	f7ff f9a8 	bl	8006f04 <quorem>
 8007bb4:	9b06      	ldr	r3, [sp, #24]
 8007bb6:	3030      	adds	r0, #48	; 0x30
 8007bb8:	5518      	strb	r0, [r3, r4]
 8007bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bbc:	3401      	adds	r4, #1
 8007bbe:	9007      	str	r0, [sp, #28]
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	dd07      	ble.n	8007bd4 <_dtoa_r+0xbb8>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	220a      	movs	r2, #10
 8007bc8:	0038      	movs	r0, r7
 8007bca:	9905      	ldr	r1, [sp, #20]
 8007bcc:	f000 fb00 	bl	80081d0 <__multadd>
 8007bd0:	9005      	str	r0, [sp, #20]
 8007bd2:	e7eb      	b.n	8007bac <_dtoa_r+0xb90>
 8007bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	dd00      	ble.n	8007bde <_dtoa_r+0xbc2>
 8007bdc:	0018      	movs	r0, r3
 8007bde:	2400      	movs	r4, #0
 8007be0:	9b06      	ldr	r3, [sp, #24]
 8007be2:	181b      	adds	r3, r3, r0
 8007be4:	9308      	str	r3, [sp, #32]
 8007be6:	9905      	ldr	r1, [sp, #20]
 8007be8:	2201      	movs	r2, #1
 8007bea:	0038      	movs	r0, r7
 8007bec:	f000 fc9e 	bl	800852c <__lshift>
 8007bf0:	0031      	movs	r1, r6
 8007bf2:	9005      	str	r0, [sp, #20]
 8007bf4:	f000 fd08 	bl	8008608 <__mcmp>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	dc9b      	bgt.n	8007b34 <_dtoa_r+0xb18>
 8007bfc:	d102      	bne.n	8007c04 <_dtoa_r+0xbe8>
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	07db      	lsls	r3, r3, #31
 8007c02:	d497      	bmi.n	8007b34 <_dtoa_r+0xb18>
 8007c04:	9b08      	ldr	r3, [sp, #32]
 8007c06:	9308      	str	r3, [sp, #32]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	781a      	ldrb	r2, [r3, #0]
 8007c0c:	2a30      	cmp	r2, #48	; 0x30
 8007c0e:	d0fa      	beq.n	8007c06 <_dtoa_r+0xbea>
 8007c10:	e6db      	b.n	80079ca <_dtoa_r+0x9ae>
 8007c12:	9a06      	ldr	r2, [sp, #24]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d18e      	bne.n	8007b36 <_dtoa_r+0xb1a>
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	9302      	str	r3, [sp, #8]
 8007c1e:	2331      	movs	r3, #49	; 0x31
 8007c20:	e799      	b.n	8007b56 <_dtoa_r+0xb3a>
 8007c22:	4b09      	ldr	r3, [pc, #36]	; (8007c48 <_dtoa_r+0xc2c>)
 8007c24:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007c26:	9306      	str	r3, [sp, #24]
 8007c28:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <_dtoa_r+0xc30>)
 8007c2a:	2a00      	cmp	r2, #0
 8007c2c:	d001      	beq.n	8007c32 <_dtoa_r+0xc16>
 8007c2e:	f7ff fa3f 	bl	80070b0 <_dtoa_r+0x94>
 8007c32:	f7ff fa3f 	bl	80070b4 <_dtoa_r+0x98>
 8007c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dcb6      	bgt.n	8007baa <_dtoa_r+0xb8e>
 8007c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	dd00      	ble.n	8007c44 <_dtoa_r+0xc28>
 8007c42:	e6ac      	b.n	800799e <_dtoa_r+0x982>
 8007c44:	e7b1      	b.n	8007baa <_dtoa_r+0xb8e>
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	08009384 	.word	0x08009384
 8007c4c:	0800938c 	.word	0x0800938c

08007c50 <__sflush_r>:
 8007c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c52:	898b      	ldrh	r3, [r1, #12]
 8007c54:	0005      	movs	r5, r0
 8007c56:	000c      	movs	r4, r1
 8007c58:	071a      	lsls	r2, r3, #28
 8007c5a:	d45f      	bmi.n	8007d1c <__sflush_r+0xcc>
 8007c5c:	684a      	ldr	r2, [r1, #4]
 8007c5e:	2a00      	cmp	r2, #0
 8007c60:	dc04      	bgt.n	8007c6c <__sflush_r+0x1c>
 8007c62:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	dc01      	bgt.n	8007c6c <__sflush_r+0x1c>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007c6e:	2f00      	cmp	r7, #0
 8007c70:	d0fa      	beq.n	8007c68 <__sflush_r+0x18>
 8007c72:	2200      	movs	r2, #0
 8007c74:	2180      	movs	r1, #128	; 0x80
 8007c76:	682e      	ldr	r6, [r5, #0]
 8007c78:	602a      	str	r2, [r5, #0]
 8007c7a:	001a      	movs	r2, r3
 8007c7c:	0149      	lsls	r1, r1, #5
 8007c7e:	400a      	ands	r2, r1
 8007c80:	420b      	tst	r3, r1
 8007c82:	d034      	beq.n	8007cee <__sflush_r+0x9e>
 8007c84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	075b      	lsls	r3, r3, #29
 8007c8a:	d506      	bpl.n	8007c9a <__sflush_r+0x4a>
 8007c8c:	6863      	ldr	r3, [r4, #4]
 8007c8e:	1ac0      	subs	r0, r0, r3
 8007c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <__sflush_r+0x4a>
 8007c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c98:	1ac0      	subs	r0, r0, r3
 8007c9a:	0002      	movs	r2, r0
 8007c9c:	6a21      	ldr	r1, [r4, #32]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	0028      	movs	r0, r5
 8007ca2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007ca4:	47b8      	blx	r7
 8007ca6:	89a1      	ldrh	r1, [r4, #12]
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d106      	bne.n	8007cba <__sflush_r+0x6a>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	2b1d      	cmp	r3, #29
 8007cb0:	d831      	bhi.n	8007d16 <__sflush_r+0xc6>
 8007cb2:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <__sflush_r+0x114>)
 8007cb4:	40da      	lsrs	r2, r3
 8007cb6:	07d3      	lsls	r3, r2, #31
 8007cb8:	d52d      	bpl.n	8007d16 <__sflush_r+0xc6>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6063      	str	r3, [r4, #4]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	04cb      	lsls	r3, r1, #19
 8007cc4:	d505      	bpl.n	8007cd2 <__sflush_r+0x82>
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	d102      	bne.n	8007cd0 <__sflush_r+0x80>
 8007cca:	682b      	ldr	r3, [r5, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d100      	bne.n	8007cd2 <__sflush_r+0x82>
 8007cd0:	6560      	str	r0, [r4, #84]	; 0x54
 8007cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd4:	602e      	str	r6, [r5, #0]
 8007cd6:	2900      	cmp	r1, #0
 8007cd8:	d0c6      	beq.n	8007c68 <__sflush_r+0x18>
 8007cda:	0023      	movs	r3, r4
 8007cdc:	3344      	adds	r3, #68	; 0x44
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d002      	beq.n	8007ce8 <__sflush_r+0x98>
 8007ce2:	0028      	movs	r0, r5
 8007ce4:	f000 fdd4 	bl	8008890 <_free_r>
 8007ce8:	2000      	movs	r0, #0
 8007cea:	6360      	str	r0, [r4, #52]	; 0x34
 8007cec:	e7bd      	b.n	8007c6a <__sflush_r+0x1a>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	0028      	movs	r0, r5
 8007cf2:	6a21      	ldr	r1, [r4, #32]
 8007cf4:	47b8      	blx	r7
 8007cf6:	1c43      	adds	r3, r0, #1
 8007cf8:	d1c5      	bne.n	8007c86 <__sflush_r+0x36>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0c2      	beq.n	8007c86 <__sflush_r+0x36>
 8007d00:	2b1d      	cmp	r3, #29
 8007d02:	d001      	beq.n	8007d08 <__sflush_r+0xb8>
 8007d04:	2b16      	cmp	r3, #22
 8007d06:	d101      	bne.n	8007d0c <__sflush_r+0xbc>
 8007d08:	602e      	str	r6, [r5, #0]
 8007d0a:	e7ad      	b.n	8007c68 <__sflush_r+0x18>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	89a2      	ldrh	r2, [r4, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	81a3      	strh	r3, [r4, #12]
 8007d14:	e7a9      	b.n	8007c6a <__sflush_r+0x1a>
 8007d16:	2340      	movs	r3, #64	; 0x40
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	e7fa      	b.n	8007d12 <__sflush_r+0xc2>
 8007d1c:	690f      	ldr	r7, [r1, #16]
 8007d1e:	2f00      	cmp	r7, #0
 8007d20:	d0a2      	beq.n	8007c68 <__sflush_r+0x18>
 8007d22:	680a      	ldr	r2, [r1, #0]
 8007d24:	600f      	str	r7, [r1, #0]
 8007d26:	1bd2      	subs	r2, r2, r7
 8007d28:	9201      	str	r2, [sp, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	079b      	lsls	r3, r3, #30
 8007d2e:	d100      	bne.n	8007d32 <__sflush_r+0xe2>
 8007d30:	694a      	ldr	r2, [r1, #20]
 8007d32:	60a2      	str	r2, [r4, #8]
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	dc00      	bgt.n	8007d3c <__sflush_r+0xec>
 8007d3a:	e795      	b.n	8007c68 <__sflush_r+0x18>
 8007d3c:	003a      	movs	r2, r7
 8007d3e:	0028      	movs	r0, r5
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	6a21      	ldr	r1, [r4, #32]
 8007d44:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d46:	47b0      	blx	r6
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	dc06      	bgt.n	8007d5a <__sflush_r+0x10a>
 8007d4c:	2340      	movs	r3, #64	; 0x40
 8007d4e:	2001      	movs	r0, #1
 8007d50:	89a2      	ldrh	r2, [r4, #12]
 8007d52:	4240      	negs	r0, r0
 8007d54:	4313      	orrs	r3, r2
 8007d56:	81a3      	strh	r3, [r4, #12]
 8007d58:	e787      	b.n	8007c6a <__sflush_r+0x1a>
 8007d5a:	9b01      	ldr	r3, [sp, #4]
 8007d5c:	183f      	adds	r7, r7, r0
 8007d5e:	1a1b      	subs	r3, r3, r0
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	e7e7      	b.n	8007d34 <__sflush_r+0xe4>
 8007d64:	20400001 	.word	0x20400001

08007d68 <_fflush_r>:
 8007d68:	690b      	ldr	r3, [r1, #16]
 8007d6a:	b570      	push	{r4, r5, r6, lr}
 8007d6c:	0005      	movs	r5, r0
 8007d6e:	000c      	movs	r4, r1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d102      	bne.n	8007d7a <_fflush_r+0x12>
 8007d74:	2500      	movs	r5, #0
 8007d76:	0028      	movs	r0, r5
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d004      	beq.n	8007d88 <_fflush_r+0x20>
 8007d7e:	6983      	ldr	r3, [r0, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <_fflush_r+0x20>
 8007d84:	f000 f892 	bl	8007eac <__sinit>
 8007d88:	4b14      	ldr	r3, [pc, #80]	; (8007ddc <_fflush_r+0x74>)
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d11b      	bne.n	8007dc6 <_fflush_r+0x5e>
 8007d8e:	686c      	ldr	r4, [r5, #4]
 8007d90:	220c      	movs	r2, #12
 8007d92:	5ea3      	ldrsh	r3, [r4, r2]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0ed      	beq.n	8007d74 <_fflush_r+0xc>
 8007d98:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d9a:	07d2      	lsls	r2, r2, #31
 8007d9c:	d404      	bmi.n	8007da8 <_fflush_r+0x40>
 8007d9e:	059b      	lsls	r3, r3, #22
 8007da0:	d402      	bmi.n	8007da8 <_fflush_r+0x40>
 8007da2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007da4:	f000 f927 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8007da8:	0028      	movs	r0, r5
 8007daa:	0021      	movs	r1, r4
 8007dac:	f7ff ff50 	bl	8007c50 <__sflush_r>
 8007db0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007db2:	0005      	movs	r5, r0
 8007db4:	07db      	lsls	r3, r3, #31
 8007db6:	d4de      	bmi.n	8007d76 <_fflush_r+0xe>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	059b      	lsls	r3, r3, #22
 8007dbc:	d4db      	bmi.n	8007d76 <_fflush_r+0xe>
 8007dbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dc0:	f000 f91a 	bl	8007ff8 <__retarget_lock_release_recursive>
 8007dc4:	e7d7      	b.n	8007d76 <_fflush_r+0xe>
 8007dc6:	4b06      	ldr	r3, [pc, #24]	; (8007de0 <_fflush_r+0x78>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	d101      	bne.n	8007dd0 <_fflush_r+0x68>
 8007dcc:	68ac      	ldr	r4, [r5, #8]
 8007dce:	e7df      	b.n	8007d90 <_fflush_r+0x28>
 8007dd0:	4b04      	ldr	r3, [pc, #16]	; (8007de4 <_fflush_r+0x7c>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	d1dc      	bne.n	8007d90 <_fflush_r+0x28>
 8007dd6:	68ec      	ldr	r4, [r5, #12]
 8007dd8:	e7da      	b.n	8007d90 <_fflush_r+0x28>
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	08009434 	.word	0x08009434
 8007de0:	08009454 	.word	0x08009454
 8007de4:	08009414 	.word	0x08009414

08007de8 <std>:
 8007de8:	2300      	movs	r3, #0
 8007dea:	b510      	push	{r4, lr}
 8007dec:	0004      	movs	r4, r0
 8007dee:	6003      	str	r3, [r0, #0]
 8007df0:	6043      	str	r3, [r0, #4]
 8007df2:	6083      	str	r3, [r0, #8]
 8007df4:	8181      	strh	r1, [r0, #12]
 8007df6:	6643      	str	r3, [r0, #100]	; 0x64
 8007df8:	0019      	movs	r1, r3
 8007dfa:	81c2      	strh	r2, [r0, #14]
 8007dfc:	6103      	str	r3, [r0, #16]
 8007dfe:	6143      	str	r3, [r0, #20]
 8007e00:	6183      	str	r3, [r0, #24]
 8007e02:	2208      	movs	r2, #8
 8007e04:	305c      	adds	r0, #92	; 0x5c
 8007e06:	f7fe faa2 	bl	800634e <memset>
 8007e0a:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <std+0x38>)
 8007e0c:	6224      	str	r4, [r4, #32]
 8007e0e:	6263      	str	r3, [r4, #36]	; 0x24
 8007e10:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <std+0x3c>)
 8007e12:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <std+0x40>)
 8007e16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e18:	4b04      	ldr	r3, [pc, #16]	; (8007e2c <std+0x44>)
 8007e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e1c:	bd10      	pop	{r4, pc}
 8007e1e:	46c0      	nop			; (mov r8, r8)
 8007e20:	08008d3d 	.word	0x08008d3d
 8007e24:	08008d65 	.word	0x08008d65
 8007e28:	08008d9d 	.word	0x08008d9d
 8007e2c:	08008dc9 	.word	0x08008dc9

08007e30 <_cleanup_r>:
 8007e30:	b510      	push	{r4, lr}
 8007e32:	4902      	ldr	r1, [pc, #8]	; (8007e3c <_cleanup_r+0xc>)
 8007e34:	f000 f8ba 	bl	8007fac <_fwalk_reent>
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	08007d69 	.word	0x08007d69

08007e40 <__sfmoreglue>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	2568      	movs	r5, #104	; 0x68
 8007e44:	1e4a      	subs	r2, r1, #1
 8007e46:	4355      	muls	r5, r2
 8007e48:	000e      	movs	r6, r1
 8007e4a:	0029      	movs	r1, r5
 8007e4c:	3174      	adds	r1, #116	; 0x74
 8007e4e:	f000 fd8b 	bl	8008968 <_malloc_r>
 8007e52:	1e04      	subs	r4, r0, #0
 8007e54:	d008      	beq.n	8007e68 <__sfmoreglue+0x28>
 8007e56:	2100      	movs	r1, #0
 8007e58:	002a      	movs	r2, r5
 8007e5a:	6001      	str	r1, [r0, #0]
 8007e5c:	6046      	str	r6, [r0, #4]
 8007e5e:	300c      	adds	r0, #12
 8007e60:	60a0      	str	r0, [r4, #8]
 8007e62:	3268      	adds	r2, #104	; 0x68
 8007e64:	f7fe fa73 	bl	800634e <memset>
 8007e68:	0020      	movs	r0, r4
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}

08007e6c <__sfp_lock_acquire>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4802      	ldr	r0, [pc, #8]	; (8007e78 <__sfp_lock_acquire+0xc>)
 8007e70:	f000 f8c1 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	200008bd 	.word	0x200008bd

08007e7c <__sfp_lock_release>:
 8007e7c:	b510      	push	{r4, lr}
 8007e7e:	4802      	ldr	r0, [pc, #8]	; (8007e88 <__sfp_lock_release+0xc>)
 8007e80:	f000 f8ba 	bl	8007ff8 <__retarget_lock_release_recursive>
 8007e84:	bd10      	pop	{r4, pc}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	200008bd 	.word	0x200008bd

08007e8c <__sinit_lock_acquire>:
 8007e8c:	b510      	push	{r4, lr}
 8007e8e:	4802      	ldr	r0, [pc, #8]	; (8007e98 <__sinit_lock_acquire+0xc>)
 8007e90:	f000 f8b1 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8007e94:	bd10      	pop	{r4, pc}
 8007e96:	46c0      	nop			; (mov r8, r8)
 8007e98:	200008be 	.word	0x200008be

08007e9c <__sinit_lock_release>:
 8007e9c:	b510      	push	{r4, lr}
 8007e9e:	4802      	ldr	r0, [pc, #8]	; (8007ea8 <__sinit_lock_release+0xc>)
 8007ea0:	f000 f8aa 	bl	8007ff8 <__retarget_lock_release_recursive>
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	200008be 	.word	0x200008be

08007eac <__sinit>:
 8007eac:	b513      	push	{r0, r1, r4, lr}
 8007eae:	0004      	movs	r4, r0
 8007eb0:	f7ff ffec 	bl	8007e8c <__sinit_lock_acquire>
 8007eb4:	69a3      	ldr	r3, [r4, #24]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <__sinit+0x14>
 8007eba:	f7ff ffef 	bl	8007e9c <__sinit_lock_release>
 8007ebe:	bd13      	pop	{r0, r1, r4, pc}
 8007ec0:	64a3      	str	r3, [r4, #72]	; 0x48
 8007ec2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <__sinit+0x68>)
 8007ec8:	4a13      	ldr	r2, [pc, #76]	; (8007f18 <__sinit+0x6c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	d101      	bne.n	8007ed8 <__sinit+0x2c>
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	61a3      	str	r3, [r4, #24]
 8007ed8:	0020      	movs	r0, r4
 8007eda:	f000 f81f 	bl	8007f1c <__sfp>
 8007ede:	6060      	str	r0, [r4, #4]
 8007ee0:	0020      	movs	r0, r4
 8007ee2:	f000 f81b 	bl	8007f1c <__sfp>
 8007ee6:	60a0      	str	r0, [r4, #8]
 8007ee8:	0020      	movs	r0, r4
 8007eea:	f000 f817 	bl	8007f1c <__sfp>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2104      	movs	r1, #4
 8007ef2:	60e0      	str	r0, [r4, #12]
 8007ef4:	6860      	ldr	r0, [r4, #4]
 8007ef6:	f7ff ff77 	bl	8007de8 <std>
 8007efa:	2201      	movs	r2, #1
 8007efc:	2109      	movs	r1, #9
 8007efe:	68a0      	ldr	r0, [r4, #8]
 8007f00:	f7ff ff72 	bl	8007de8 <std>
 8007f04:	2202      	movs	r2, #2
 8007f06:	2112      	movs	r1, #18
 8007f08:	68e0      	ldr	r0, [r4, #12]
 8007f0a:	f7ff ff6d 	bl	8007de8 <std>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	61a3      	str	r3, [r4, #24]
 8007f12:	e7d2      	b.n	8007eba <__sinit+0xe>
 8007f14:	0800934c 	.word	0x0800934c
 8007f18:	08007e31 	.word	0x08007e31

08007f1c <__sfp>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	0007      	movs	r7, r0
 8007f20:	f7ff ffa4 	bl	8007e6c <__sfp_lock_acquire>
 8007f24:	4b1f      	ldr	r3, [pc, #124]	; (8007fa4 <__sfp+0x88>)
 8007f26:	681e      	ldr	r6, [r3, #0]
 8007f28:	69b3      	ldr	r3, [r6, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d102      	bne.n	8007f34 <__sfp+0x18>
 8007f2e:	0030      	movs	r0, r6
 8007f30:	f7ff ffbc 	bl	8007eac <__sinit>
 8007f34:	3648      	adds	r6, #72	; 0x48
 8007f36:	68b4      	ldr	r4, [r6, #8]
 8007f38:	6873      	ldr	r3, [r6, #4]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	d504      	bpl.n	8007f48 <__sfp+0x2c>
 8007f3e:	6833      	ldr	r3, [r6, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d022      	beq.n	8007f8a <__sfp+0x6e>
 8007f44:	6836      	ldr	r6, [r6, #0]
 8007f46:	e7f6      	b.n	8007f36 <__sfp+0x1a>
 8007f48:	220c      	movs	r2, #12
 8007f4a:	5ea5      	ldrsh	r5, [r4, r2]
 8007f4c:	2d00      	cmp	r5, #0
 8007f4e:	d11a      	bne.n	8007f86 <__sfp+0x6a>
 8007f50:	0020      	movs	r0, r4
 8007f52:	4b15      	ldr	r3, [pc, #84]	; (8007fa8 <__sfp+0x8c>)
 8007f54:	3058      	adds	r0, #88	; 0x58
 8007f56:	60e3      	str	r3, [r4, #12]
 8007f58:	6665      	str	r5, [r4, #100]	; 0x64
 8007f5a:	f000 f84b 	bl	8007ff4 <__retarget_lock_init_recursive>
 8007f5e:	f7ff ff8d 	bl	8007e7c <__sfp_lock_release>
 8007f62:	0020      	movs	r0, r4
 8007f64:	2208      	movs	r2, #8
 8007f66:	0029      	movs	r1, r5
 8007f68:	6025      	str	r5, [r4, #0]
 8007f6a:	60a5      	str	r5, [r4, #8]
 8007f6c:	6065      	str	r5, [r4, #4]
 8007f6e:	6125      	str	r5, [r4, #16]
 8007f70:	6165      	str	r5, [r4, #20]
 8007f72:	61a5      	str	r5, [r4, #24]
 8007f74:	305c      	adds	r0, #92	; 0x5c
 8007f76:	f7fe f9ea 	bl	800634e <memset>
 8007f7a:	6365      	str	r5, [r4, #52]	; 0x34
 8007f7c:	63a5      	str	r5, [r4, #56]	; 0x38
 8007f7e:	64a5      	str	r5, [r4, #72]	; 0x48
 8007f80:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007f82:	0020      	movs	r0, r4
 8007f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f86:	3468      	adds	r4, #104	; 0x68
 8007f88:	e7d7      	b.n	8007f3a <__sfp+0x1e>
 8007f8a:	2104      	movs	r1, #4
 8007f8c:	0038      	movs	r0, r7
 8007f8e:	f7ff ff57 	bl	8007e40 <__sfmoreglue>
 8007f92:	1e04      	subs	r4, r0, #0
 8007f94:	6030      	str	r0, [r6, #0]
 8007f96:	d1d5      	bne.n	8007f44 <__sfp+0x28>
 8007f98:	f7ff ff70 	bl	8007e7c <__sfp_lock_release>
 8007f9c:	230c      	movs	r3, #12
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	e7ef      	b.n	8007f82 <__sfp+0x66>
 8007fa2:	46c0      	nop			; (mov r8, r8)
 8007fa4:	0800934c 	.word	0x0800934c
 8007fa8:	ffff0001 	.word	0xffff0001

08007fac <_fwalk_reent>:
 8007fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fae:	0004      	movs	r4, r0
 8007fb0:	0006      	movs	r6, r0
 8007fb2:	2700      	movs	r7, #0
 8007fb4:	9101      	str	r1, [sp, #4]
 8007fb6:	3448      	adds	r4, #72	; 0x48
 8007fb8:	6863      	ldr	r3, [r4, #4]
 8007fba:	68a5      	ldr	r5, [r4, #8]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	d504      	bpl.n	8007fd0 <_fwalk_reent+0x24>
 8007fc6:	6824      	ldr	r4, [r4, #0]
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	d1f5      	bne.n	8007fb8 <_fwalk_reent+0xc>
 8007fcc:	0038      	movs	r0, r7
 8007fce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007fd0:	89ab      	ldrh	r3, [r5, #12]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d908      	bls.n	8007fe8 <_fwalk_reent+0x3c>
 8007fd6:	220e      	movs	r2, #14
 8007fd8:	5eab      	ldrsh	r3, [r5, r2]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	d004      	beq.n	8007fe8 <_fwalk_reent+0x3c>
 8007fde:	0029      	movs	r1, r5
 8007fe0:	0030      	movs	r0, r6
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	4798      	blx	r3
 8007fe6:	4307      	orrs	r7, r0
 8007fe8:	3568      	adds	r5, #104	; 0x68
 8007fea:	e7e8      	b.n	8007fbe <_fwalk_reent+0x12>

08007fec <_localeconv_r>:
 8007fec:	4800      	ldr	r0, [pc, #0]	; (8007ff0 <_localeconv_r+0x4>)
 8007fee:	4770      	bx	lr
 8007ff0:	20000178 	.word	0x20000178

08007ff4 <__retarget_lock_init_recursive>:
 8007ff4:	4770      	bx	lr

08007ff6 <__retarget_lock_acquire_recursive>:
 8007ff6:	4770      	bx	lr

08007ff8 <__retarget_lock_release_recursive>:
 8007ff8:	4770      	bx	lr
	...

08007ffc <__swhatbuf_r>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	000e      	movs	r6, r1
 8008000:	001d      	movs	r5, r3
 8008002:	230e      	movs	r3, #14
 8008004:	5ec9      	ldrsh	r1, [r1, r3]
 8008006:	0014      	movs	r4, r2
 8008008:	b096      	sub	sp, #88	; 0x58
 800800a:	2900      	cmp	r1, #0
 800800c:	da08      	bge.n	8008020 <__swhatbuf_r+0x24>
 800800e:	220c      	movs	r2, #12
 8008010:	5eb3      	ldrsh	r3, [r6, r2]
 8008012:	2200      	movs	r2, #0
 8008014:	602a      	str	r2, [r5, #0]
 8008016:	061b      	lsls	r3, r3, #24
 8008018:	d411      	bmi.n	800803e <__swhatbuf_r+0x42>
 800801a:	2380      	movs	r3, #128	; 0x80
 800801c:	00db      	lsls	r3, r3, #3
 800801e:	e00f      	b.n	8008040 <__swhatbuf_r+0x44>
 8008020:	466a      	mov	r2, sp
 8008022:	f000 ff2b 	bl	8008e7c <_fstat_r>
 8008026:	2800      	cmp	r0, #0
 8008028:	dbf1      	blt.n	800800e <__swhatbuf_r+0x12>
 800802a:	23f0      	movs	r3, #240	; 0xf0
 800802c:	9901      	ldr	r1, [sp, #4]
 800802e:	021b      	lsls	r3, r3, #8
 8008030:	4019      	ands	r1, r3
 8008032:	4b05      	ldr	r3, [pc, #20]	; (8008048 <__swhatbuf_r+0x4c>)
 8008034:	18c9      	adds	r1, r1, r3
 8008036:	424b      	negs	r3, r1
 8008038:	4159      	adcs	r1, r3
 800803a:	6029      	str	r1, [r5, #0]
 800803c:	e7ed      	b.n	800801a <__swhatbuf_r+0x1e>
 800803e:	2340      	movs	r3, #64	; 0x40
 8008040:	2000      	movs	r0, #0
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	b016      	add	sp, #88	; 0x58
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	ffffe000 	.word	0xffffe000

0800804c <__smakebuf_r>:
 800804c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800804e:	2602      	movs	r6, #2
 8008050:	898b      	ldrh	r3, [r1, #12]
 8008052:	0005      	movs	r5, r0
 8008054:	000c      	movs	r4, r1
 8008056:	4233      	tst	r3, r6
 8008058:	d006      	beq.n	8008068 <__smakebuf_r+0x1c>
 800805a:	0023      	movs	r3, r4
 800805c:	3347      	adds	r3, #71	; 0x47
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	6123      	str	r3, [r4, #16]
 8008062:	2301      	movs	r3, #1
 8008064:	6163      	str	r3, [r4, #20]
 8008066:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008068:	466a      	mov	r2, sp
 800806a:	ab01      	add	r3, sp, #4
 800806c:	f7ff ffc6 	bl	8007ffc <__swhatbuf_r>
 8008070:	9900      	ldr	r1, [sp, #0]
 8008072:	0007      	movs	r7, r0
 8008074:	0028      	movs	r0, r5
 8008076:	f000 fc77 	bl	8008968 <_malloc_r>
 800807a:	2800      	cmp	r0, #0
 800807c:	d108      	bne.n	8008090 <__smakebuf_r+0x44>
 800807e:	220c      	movs	r2, #12
 8008080:	5ea3      	ldrsh	r3, [r4, r2]
 8008082:	059a      	lsls	r2, r3, #22
 8008084:	d4ef      	bmi.n	8008066 <__smakebuf_r+0x1a>
 8008086:	2203      	movs	r2, #3
 8008088:	4393      	bics	r3, r2
 800808a:	431e      	orrs	r6, r3
 800808c:	81a6      	strh	r6, [r4, #12]
 800808e:	e7e4      	b.n	800805a <__smakebuf_r+0xe>
 8008090:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <__smakebuf_r+0x84>)
 8008092:	62ab      	str	r3, [r5, #40]	; 0x28
 8008094:	2380      	movs	r3, #128	; 0x80
 8008096:	89a2      	ldrh	r2, [r4, #12]
 8008098:	6020      	str	r0, [r4, #0]
 800809a:	4313      	orrs	r3, r2
 800809c:	81a3      	strh	r3, [r4, #12]
 800809e:	9b00      	ldr	r3, [sp, #0]
 80080a0:	6120      	str	r0, [r4, #16]
 80080a2:	6163      	str	r3, [r4, #20]
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00d      	beq.n	80080c6 <__smakebuf_r+0x7a>
 80080aa:	0028      	movs	r0, r5
 80080ac:	230e      	movs	r3, #14
 80080ae:	5ee1      	ldrsh	r1, [r4, r3]
 80080b0:	f000 fef6 	bl	8008ea0 <_isatty_r>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d006      	beq.n	80080c6 <__smakebuf_r+0x7a>
 80080b8:	2203      	movs	r2, #3
 80080ba:	89a3      	ldrh	r3, [r4, #12]
 80080bc:	4393      	bics	r3, r2
 80080be:	001a      	movs	r2, r3
 80080c0:	2301      	movs	r3, #1
 80080c2:	4313      	orrs	r3, r2
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	89a0      	ldrh	r0, [r4, #12]
 80080c8:	4307      	orrs	r7, r0
 80080ca:	81a7      	strh	r7, [r4, #12]
 80080cc:	e7cb      	b.n	8008066 <__smakebuf_r+0x1a>
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	08007e31 	.word	0x08007e31

080080d4 <malloc>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	4b03      	ldr	r3, [pc, #12]	; (80080e4 <malloc+0x10>)
 80080d8:	0001      	movs	r1, r0
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	f000 fc44 	bl	8008968 <_malloc_r>
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	20000024 	.word	0x20000024

080080e8 <memchr>:
 80080e8:	b2c9      	uxtb	r1, r1
 80080ea:	1882      	adds	r2, r0, r2
 80080ec:	4290      	cmp	r0, r2
 80080ee:	d101      	bne.n	80080f4 <memchr+0xc>
 80080f0:	2000      	movs	r0, #0
 80080f2:	4770      	bx	lr
 80080f4:	7803      	ldrb	r3, [r0, #0]
 80080f6:	428b      	cmp	r3, r1
 80080f8:	d0fb      	beq.n	80080f2 <memchr+0xa>
 80080fa:	3001      	adds	r0, #1
 80080fc:	e7f6      	b.n	80080ec <memchr+0x4>
	...

08008100 <_Balloc>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008104:	0006      	movs	r6, r0
 8008106:	000c      	movs	r4, r1
 8008108:	2d00      	cmp	r5, #0
 800810a:	d10e      	bne.n	800812a <_Balloc+0x2a>
 800810c:	2010      	movs	r0, #16
 800810e:	f7ff ffe1 	bl	80080d4 <malloc>
 8008112:	1e02      	subs	r2, r0, #0
 8008114:	6270      	str	r0, [r6, #36]	; 0x24
 8008116:	d104      	bne.n	8008122 <_Balloc+0x22>
 8008118:	2166      	movs	r1, #102	; 0x66
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <_Balloc+0x80>)
 800811c:	4819      	ldr	r0, [pc, #100]	; (8008184 <_Balloc+0x84>)
 800811e:	f000 fe6d 	bl	8008dfc <__assert_func>
 8008122:	6045      	str	r5, [r0, #4]
 8008124:	6085      	str	r5, [r0, #8]
 8008126:	6005      	str	r5, [r0, #0]
 8008128:	60c5      	str	r5, [r0, #12]
 800812a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800812c:	68eb      	ldr	r3, [r5, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d013      	beq.n	800815a <_Balloc+0x5a>
 8008132:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008134:	00a2      	lsls	r2, r4, #2
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	189b      	adds	r3, r3, r2
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	2800      	cmp	r0, #0
 800813e:	d118      	bne.n	8008172 <_Balloc+0x72>
 8008140:	2101      	movs	r1, #1
 8008142:	000d      	movs	r5, r1
 8008144:	40a5      	lsls	r5, r4
 8008146:	1d6a      	adds	r2, r5, #5
 8008148:	0030      	movs	r0, r6
 800814a:	0092      	lsls	r2, r2, #2
 800814c:	f000 fb74 	bl	8008838 <_calloc_r>
 8008150:	2800      	cmp	r0, #0
 8008152:	d00c      	beq.n	800816e <_Balloc+0x6e>
 8008154:	6044      	str	r4, [r0, #4]
 8008156:	6085      	str	r5, [r0, #8]
 8008158:	e00d      	b.n	8008176 <_Balloc+0x76>
 800815a:	2221      	movs	r2, #33	; 0x21
 800815c:	2104      	movs	r1, #4
 800815e:	0030      	movs	r0, r6
 8008160:	f000 fb6a 	bl	8008838 <_calloc_r>
 8008164:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008166:	60e8      	str	r0, [r5, #12]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1e1      	bne.n	8008132 <_Balloc+0x32>
 800816e:	2000      	movs	r0, #0
 8008170:	bd70      	pop	{r4, r5, r6, pc}
 8008172:	6802      	ldr	r2, [r0, #0]
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	2300      	movs	r3, #0
 8008178:	6103      	str	r3, [r0, #16]
 800817a:	60c3      	str	r3, [r0, #12]
 800817c:	e7f8      	b.n	8008170 <_Balloc+0x70>
 800817e:	46c0      	nop			; (mov r8, r8)
 8008180:	08009391 	.word	0x08009391
 8008184:	08009474 	.word	0x08009474

08008188 <_Bfree>:
 8008188:	b570      	push	{r4, r5, r6, lr}
 800818a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800818c:	0005      	movs	r5, r0
 800818e:	000c      	movs	r4, r1
 8008190:	2e00      	cmp	r6, #0
 8008192:	d10e      	bne.n	80081b2 <_Bfree+0x2a>
 8008194:	2010      	movs	r0, #16
 8008196:	f7ff ff9d 	bl	80080d4 <malloc>
 800819a:	1e02      	subs	r2, r0, #0
 800819c:	6268      	str	r0, [r5, #36]	; 0x24
 800819e:	d104      	bne.n	80081aa <_Bfree+0x22>
 80081a0:	218a      	movs	r1, #138	; 0x8a
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <_Bfree+0x40>)
 80081a4:	4809      	ldr	r0, [pc, #36]	; (80081cc <_Bfree+0x44>)
 80081a6:	f000 fe29 	bl	8008dfc <__assert_func>
 80081aa:	6046      	str	r6, [r0, #4]
 80081ac:	6086      	str	r6, [r0, #8]
 80081ae:	6006      	str	r6, [r0, #0]
 80081b0:	60c6      	str	r6, [r0, #12]
 80081b2:	2c00      	cmp	r4, #0
 80081b4:	d007      	beq.n	80081c6 <_Bfree+0x3e>
 80081b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081b8:	6862      	ldr	r2, [r4, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	0092      	lsls	r2, r2, #2
 80081be:	189b      	adds	r3, r3, r2
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	6022      	str	r2, [r4, #0]
 80081c4:	601c      	str	r4, [r3, #0]
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
 80081c8:	08009391 	.word	0x08009391
 80081cc:	08009474 	.word	0x08009474

080081d0 <__multadd>:
 80081d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081d2:	000e      	movs	r6, r1
 80081d4:	9001      	str	r0, [sp, #4]
 80081d6:	000c      	movs	r4, r1
 80081d8:	001d      	movs	r5, r3
 80081da:	2000      	movs	r0, #0
 80081dc:	690f      	ldr	r7, [r1, #16]
 80081de:	3614      	adds	r6, #20
 80081e0:	6833      	ldr	r3, [r6, #0]
 80081e2:	3001      	adds	r0, #1
 80081e4:	b299      	uxth	r1, r3
 80081e6:	4351      	muls	r1, r2
 80081e8:	0c1b      	lsrs	r3, r3, #16
 80081ea:	4353      	muls	r3, r2
 80081ec:	1949      	adds	r1, r1, r5
 80081ee:	0c0d      	lsrs	r5, r1, #16
 80081f0:	195b      	adds	r3, r3, r5
 80081f2:	0c1d      	lsrs	r5, r3, #16
 80081f4:	b289      	uxth	r1, r1
 80081f6:	041b      	lsls	r3, r3, #16
 80081f8:	185b      	adds	r3, r3, r1
 80081fa:	c608      	stmia	r6!, {r3}
 80081fc:	4287      	cmp	r7, r0
 80081fe:	dcef      	bgt.n	80081e0 <__multadd+0x10>
 8008200:	2d00      	cmp	r5, #0
 8008202:	d022      	beq.n	800824a <__multadd+0x7a>
 8008204:	68a3      	ldr	r3, [r4, #8]
 8008206:	42bb      	cmp	r3, r7
 8008208:	dc19      	bgt.n	800823e <__multadd+0x6e>
 800820a:	6863      	ldr	r3, [r4, #4]
 800820c:	9801      	ldr	r0, [sp, #4]
 800820e:	1c59      	adds	r1, r3, #1
 8008210:	f7ff ff76 	bl	8008100 <_Balloc>
 8008214:	1e06      	subs	r6, r0, #0
 8008216:	d105      	bne.n	8008224 <__multadd+0x54>
 8008218:	0002      	movs	r2, r0
 800821a:	21b5      	movs	r1, #181	; 0xb5
 800821c:	4b0c      	ldr	r3, [pc, #48]	; (8008250 <__multadd+0x80>)
 800821e:	480d      	ldr	r0, [pc, #52]	; (8008254 <__multadd+0x84>)
 8008220:	f000 fdec 	bl	8008dfc <__assert_func>
 8008224:	0021      	movs	r1, r4
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	310c      	adds	r1, #12
 800822a:	1c9a      	adds	r2, r3, #2
 800822c:	0092      	lsls	r2, r2, #2
 800822e:	300c      	adds	r0, #12
 8008230:	f7fe f884 	bl	800633c <memcpy>
 8008234:	0021      	movs	r1, r4
 8008236:	9801      	ldr	r0, [sp, #4]
 8008238:	f7ff ffa6 	bl	8008188 <_Bfree>
 800823c:	0034      	movs	r4, r6
 800823e:	1d3b      	adds	r3, r7, #4
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	18e3      	adds	r3, r4, r3
 8008244:	605d      	str	r5, [r3, #4]
 8008246:	1c7b      	adds	r3, r7, #1
 8008248:	6123      	str	r3, [r4, #16]
 800824a:	0020      	movs	r0, r4
 800824c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	08009403 	.word	0x08009403
 8008254:	08009474 	.word	0x08009474

08008258 <__hi0bits>:
 8008258:	0003      	movs	r3, r0
 800825a:	0c02      	lsrs	r2, r0, #16
 800825c:	2000      	movs	r0, #0
 800825e:	4282      	cmp	r2, r0
 8008260:	d101      	bne.n	8008266 <__hi0bits+0xe>
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	3010      	adds	r0, #16
 8008266:	0e1a      	lsrs	r2, r3, #24
 8008268:	d101      	bne.n	800826e <__hi0bits+0x16>
 800826a:	3008      	adds	r0, #8
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	0f1a      	lsrs	r2, r3, #28
 8008270:	d101      	bne.n	8008276 <__hi0bits+0x1e>
 8008272:	3004      	adds	r0, #4
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	0f9a      	lsrs	r2, r3, #30
 8008278:	d101      	bne.n	800827e <__hi0bits+0x26>
 800827a:	3002      	adds	r0, #2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	2b00      	cmp	r3, #0
 8008280:	db03      	blt.n	800828a <__hi0bits+0x32>
 8008282:	3001      	adds	r0, #1
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	d400      	bmi.n	800828a <__hi0bits+0x32>
 8008288:	2020      	movs	r0, #32
 800828a:	4770      	bx	lr

0800828c <__lo0bits>:
 800828c:	6803      	ldr	r3, [r0, #0]
 800828e:	0002      	movs	r2, r0
 8008290:	2107      	movs	r1, #7
 8008292:	0018      	movs	r0, r3
 8008294:	4008      	ands	r0, r1
 8008296:	420b      	tst	r3, r1
 8008298:	d00d      	beq.n	80082b6 <__lo0bits+0x2a>
 800829a:	3906      	subs	r1, #6
 800829c:	2000      	movs	r0, #0
 800829e:	420b      	tst	r3, r1
 80082a0:	d105      	bne.n	80082ae <__lo0bits+0x22>
 80082a2:	3002      	adds	r0, #2
 80082a4:	4203      	tst	r3, r0
 80082a6:	d003      	beq.n	80082b0 <__lo0bits+0x24>
 80082a8:	40cb      	lsrs	r3, r1
 80082aa:	0008      	movs	r0, r1
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	4770      	bx	lr
 80082b0:	089b      	lsrs	r3, r3, #2
 80082b2:	6013      	str	r3, [r2, #0]
 80082b4:	e7fb      	b.n	80082ae <__lo0bits+0x22>
 80082b6:	b299      	uxth	r1, r3
 80082b8:	2900      	cmp	r1, #0
 80082ba:	d101      	bne.n	80082c0 <__lo0bits+0x34>
 80082bc:	2010      	movs	r0, #16
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	b2d9      	uxtb	r1, r3
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d101      	bne.n	80082ca <__lo0bits+0x3e>
 80082c6:	3008      	adds	r0, #8
 80082c8:	0a1b      	lsrs	r3, r3, #8
 80082ca:	0719      	lsls	r1, r3, #28
 80082cc:	d101      	bne.n	80082d2 <__lo0bits+0x46>
 80082ce:	3004      	adds	r0, #4
 80082d0:	091b      	lsrs	r3, r3, #4
 80082d2:	0799      	lsls	r1, r3, #30
 80082d4:	d101      	bne.n	80082da <__lo0bits+0x4e>
 80082d6:	3002      	adds	r0, #2
 80082d8:	089b      	lsrs	r3, r3, #2
 80082da:	07d9      	lsls	r1, r3, #31
 80082dc:	d4e9      	bmi.n	80082b2 <__lo0bits+0x26>
 80082de:	3001      	adds	r0, #1
 80082e0:	085b      	lsrs	r3, r3, #1
 80082e2:	d1e6      	bne.n	80082b2 <__lo0bits+0x26>
 80082e4:	2020      	movs	r0, #32
 80082e6:	e7e2      	b.n	80082ae <__lo0bits+0x22>

080082e8 <__i2b>:
 80082e8:	b510      	push	{r4, lr}
 80082ea:	000c      	movs	r4, r1
 80082ec:	2101      	movs	r1, #1
 80082ee:	f7ff ff07 	bl	8008100 <_Balloc>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d106      	bne.n	8008304 <__i2b+0x1c>
 80082f6:	21a0      	movs	r1, #160	; 0xa0
 80082f8:	0002      	movs	r2, r0
 80082fa:	4b04      	ldr	r3, [pc, #16]	; (800830c <__i2b+0x24>)
 80082fc:	4804      	ldr	r0, [pc, #16]	; (8008310 <__i2b+0x28>)
 80082fe:	0049      	lsls	r1, r1, #1
 8008300:	f000 fd7c 	bl	8008dfc <__assert_func>
 8008304:	2301      	movs	r3, #1
 8008306:	6144      	str	r4, [r0, #20]
 8008308:	6103      	str	r3, [r0, #16]
 800830a:	bd10      	pop	{r4, pc}
 800830c:	08009403 	.word	0x08009403
 8008310:	08009474 	.word	0x08009474

08008314 <__multiply>:
 8008314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008316:	690b      	ldr	r3, [r1, #16]
 8008318:	0014      	movs	r4, r2
 800831a:	6912      	ldr	r2, [r2, #16]
 800831c:	000d      	movs	r5, r1
 800831e:	b089      	sub	sp, #36	; 0x24
 8008320:	4293      	cmp	r3, r2
 8008322:	da01      	bge.n	8008328 <__multiply+0x14>
 8008324:	0025      	movs	r5, r4
 8008326:	000c      	movs	r4, r1
 8008328:	692f      	ldr	r7, [r5, #16]
 800832a:	6926      	ldr	r6, [r4, #16]
 800832c:	6869      	ldr	r1, [r5, #4]
 800832e:	19bb      	adds	r3, r7, r6
 8008330:	9302      	str	r3, [sp, #8]
 8008332:	68ab      	ldr	r3, [r5, #8]
 8008334:	19ba      	adds	r2, r7, r6
 8008336:	4293      	cmp	r3, r2
 8008338:	da00      	bge.n	800833c <__multiply+0x28>
 800833a:	3101      	adds	r1, #1
 800833c:	f7ff fee0 	bl	8008100 <_Balloc>
 8008340:	9001      	str	r0, [sp, #4]
 8008342:	2800      	cmp	r0, #0
 8008344:	d106      	bne.n	8008354 <__multiply+0x40>
 8008346:	215e      	movs	r1, #94	; 0x5e
 8008348:	0002      	movs	r2, r0
 800834a:	4b48      	ldr	r3, [pc, #288]	; (800846c <__multiply+0x158>)
 800834c:	4848      	ldr	r0, [pc, #288]	; (8008470 <__multiply+0x15c>)
 800834e:	31ff      	adds	r1, #255	; 0xff
 8008350:	f000 fd54 	bl	8008dfc <__assert_func>
 8008354:	9b01      	ldr	r3, [sp, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	3314      	adds	r3, #20
 800835a:	469c      	mov	ip, r3
 800835c:	19bb      	adds	r3, r7, r6
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4463      	add	r3, ip
 8008362:	9303      	str	r3, [sp, #12]
 8008364:	4663      	mov	r3, ip
 8008366:	9903      	ldr	r1, [sp, #12]
 8008368:	428b      	cmp	r3, r1
 800836a:	d32c      	bcc.n	80083c6 <__multiply+0xb2>
 800836c:	002b      	movs	r3, r5
 800836e:	0022      	movs	r2, r4
 8008370:	3314      	adds	r3, #20
 8008372:	00bf      	lsls	r7, r7, #2
 8008374:	3214      	adds	r2, #20
 8008376:	9306      	str	r3, [sp, #24]
 8008378:	00b6      	lsls	r6, r6, #2
 800837a:	19db      	adds	r3, r3, r7
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	1993      	adds	r3, r2, r6
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	2304      	movs	r3, #4
 8008384:	9305      	str	r3, [sp, #20]
 8008386:	002b      	movs	r3, r5
 8008388:	9904      	ldr	r1, [sp, #16]
 800838a:	3315      	adds	r3, #21
 800838c:	9200      	str	r2, [sp, #0]
 800838e:	4299      	cmp	r1, r3
 8008390:	d305      	bcc.n	800839e <__multiply+0x8a>
 8008392:	1b4b      	subs	r3, r1, r5
 8008394:	3b15      	subs	r3, #21
 8008396:	089b      	lsrs	r3, r3, #2
 8008398:	3301      	adds	r3, #1
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	9305      	str	r3, [sp, #20]
 800839e:	9b07      	ldr	r3, [sp, #28]
 80083a0:	9a00      	ldr	r2, [sp, #0]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d311      	bcc.n	80083ca <__multiply+0xb6>
 80083a6:	9b02      	ldr	r3, [sp, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dd06      	ble.n	80083ba <__multiply+0xa6>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	3b04      	subs	r3, #4
 80083b0:	9303      	str	r3, [sp, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d053      	beq.n	8008462 <__multiply+0x14e>
 80083ba:	9b01      	ldr	r3, [sp, #4]
 80083bc:	9a02      	ldr	r2, [sp, #8]
 80083be:	0018      	movs	r0, r3
 80083c0:	611a      	str	r2, [r3, #16]
 80083c2:	b009      	add	sp, #36	; 0x24
 80083c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083c6:	c304      	stmia	r3!, {r2}
 80083c8:	e7cd      	b.n	8008366 <__multiply+0x52>
 80083ca:	9b00      	ldr	r3, [sp, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	b298      	uxth	r0, r3
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d01b      	beq.n	800840c <__multiply+0xf8>
 80083d4:	4667      	mov	r7, ip
 80083d6:	2400      	movs	r4, #0
 80083d8:	9e06      	ldr	r6, [sp, #24]
 80083da:	ce02      	ldmia	r6!, {r1}
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	b28b      	uxth	r3, r1
 80083e0:	4343      	muls	r3, r0
 80083e2:	b292      	uxth	r2, r2
 80083e4:	189b      	adds	r3, r3, r2
 80083e6:	191b      	adds	r3, r3, r4
 80083e8:	0c0c      	lsrs	r4, r1, #16
 80083ea:	4344      	muls	r4, r0
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	0c11      	lsrs	r1, r2, #16
 80083f0:	1861      	adds	r1, r4, r1
 80083f2:	0c1c      	lsrs	r4, r3, #16
 80083f4:	1909      	adds	r1, r1, r4
 80083f6:	0c0c      	lsrs	r4, r1, #16
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	0409      	lsls	r1, r1, #16
 80083fc:	430b      	orrs	r3, r1
 80083fe:	c708      	stmia	r7!, {r3}
 8008400:	9b04      	ldr	r3, [sp, #16]
 8008402:	42b3      	cmp	r3, r6
 8008404:	d8e9      	bhi.n	80083da <__multiply+0xc6>
 8008406:	4663      	mov	r3, ip
 8008408:	9a05      	ldr	r2, [sp, #20]
 800840a:	509c      	str	r4, [r3, r2]
 800840c:	9b00      	ldr	r3, [sp, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	0c1e      	lsrs	r6, r3, #16
 8008412:	d020      	beq.n	8008456 <__multiply+0x142>
 8008414:	4663      	mov	r3, ip
 8008416:	002c      	movs	r4, r5
 8008418:	4660      	mov	r0, ip
 800841a:	2700      	movs	r7, #0
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3414      	adds	r4, #20
 8008420:	6822      	ldr	r2, [r4, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	b291      	uxth	r1, r2
 8008426:	4371      	muls	r1, r6
 8008428:	6802      	ldr	r2, [r0, #0]
 800842a:	0c12      	lsrs	r2, r2, #16
 800842c:	1889      	adds	r1, r1, r2
 800842e:	19cf      	adds	r7, r1, r7
 8008430:	0439      	lsls	r1, r7, #16
 8008432:	430b      	orrs	r3, r1
 8008434:	6003      	str	r3, [r0, #0]
 8008436:	cc02      	ldmia	r4!, {r1}
 8008438:	6843      	ldr	r3, [r0, #4]
 800843a:	0c09      	lsrs	r1, r1, #16
 800843c:	4371      	muls	r1, r6
 800843e:	b29b      	uxth	r3, r3
 8008440:	0c3f      	lsrs	r7, r7, #16
 8008442:	18cb      	adds	r3, r1, r3
 8008444:	9a04      	ldr	r2, [sp, #16]
 8008446:	19db      	adds	r3, r3, r7
 8008448:	0c1f      	lsrs	r7, r3, #16
 800844a:	3004      	adds	r0, #4
 800844c:	42a2      	cmp	r2, r4
 800844e:	d8e7      	bhi.n	8008420 <__multiply+0x10c>
 8008450:	4662      	mov	r2, ip
 8008452:	9905      	ldr	r1, [sp, #20]
 8008454:	5053      	str	r3, [r2, r1]
 8008456:	9b00      	ldr	r3, [sp, #0]
 8008458:	3304      	adds	r3, #4
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	2304      	movs	r3, #4
 800845e:	449c      	add	ip, r3
 8008460:	e79d      	b.n	800839e <__multiply+0x8a>
 8008462:	9b02      	ldr	r3, [sp, #8]
 8008464:	3b01      	subs	r3, #1
 8008466:	9302      	str	r3, [sp, #8]
 8008468:	e79d      	b.n	80083a6 <__multiply+0x92>
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	08009403 	.word	0x08009403
 8008470:	08009474 	.word	0x08009474

08008474 <__pow5mult>:
 8008474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008476:	2303      	movs	r3, #3
 8008478:	0015      	movs	r5, r2
 800847a:	0007      	movs	r7, r0
 800847c:	000e      	movs	r6, r1
 800847e:	401a      	ands	r2, r3
 8008480:	421d      	tst	r5, r3
 8008482:	d008      	beq.n	8008496 <__pow5mult+0x22>
 8008484:	4925      	ldr	r1, [pc, #148]	; (800851c <__pow5mult+0xa8>)
 8008486:	3a01      	subs	r2, #1
 8008488:	0092      	lsls	r2, r2, #2
 800848a:	5852      	ldr	r2, [r2, r1]
 800848c:	2300      	movs	r3, #0
 800848e:	0031      	movs	r1, r6
 8008490:	f7ff fe9e 	bl	80081d0 <__multadd>
 8008494:	0006      	movs	r6, r0
 8008496:	10ad      	asrs	r5, r5, #2
 8008498:	d03d      	beq.n	8008516 <__pow5mult+0xa2>
 800849a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800849c:	2c00      	cmp	r4, #0
 800849e:	d10f      	bne.n	80084c0 <__pow5mult+0x4c>
 80084a0:	2010      	movs	r0, #16
 80084a2:	f7ff fe17 	bl	80080d4 <malloc>
 80084a6:	1e02      	subs	r2, r0, #0
 80084a8:	6278      	str	r0, [r7, #36]	; 0x24
 80084aa:	d105      	bne.n	80084b8 <__pow5mult+0x44>
 80084ac:	21d7      	movs	r1, #215	; 0xd7
 80084ae:	4b1c      	ldr	r3, [pc, #112]	; (8008520 <__pow5mult+0xac>)
 80084b0:	481c      	ldr	r0, [pc, #112]	; (8008524 <__pow5mult+0xb0>)
 80084b2:	0049      	lsls	r1, r1, #1
 80084b4:	f000 fca2 	bl	8008dfc <__assert_func>
 80084b8:	6044      	str	r4, [r0, #4]
 80084ba:	6084      	str	r4, [r0, #8]
 80084bc:	6004      	str	r4, [r0, #0]
 80084be:	60c4      	str	r4, [r0, #12]
 80084c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c2:	689c      	ldr	r4, [r3, #8]
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	2c00      	cmp	r4, #0
 80084c8:	d108      	bne.n	80084dc <__pow5mult+0x68>
 80084ca:	0038      	movs	r0, r7
 80084cc:	4916      	ldr	r1, [pc, #88]	; (8008528 <__pow5mult+0xb4>)
 80084ce:	f7ff ff0b 	bl	80082e8 <__i2b>
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	0004      	movs	r4, r0
 80084d6:	6098      	str	r0, [r3, #8]
 80084d8:	2300      	movs	r3, #0
 80084da:	6003      	str	r3, [r0, #0]
 80084dc:	2301      	movs	r3, #1
 80084de:	421d      	tst	r5, r3
 80084e0:	d00a      	beq.n	80084f8 <__pow5mult+0x84>
 80084e2:	0031      	movs	r1, r6
 80084e4:	0022      	movs	r2, r4
 80084e6:	0038      	movs	r0, r7
 80084e8:	f7ff ff14 	bl	8008314 <__multiply>
 80084ec:	0031      	movs	r1, r6
 80084ee:	9001      	str	r0, [sp, #4]
 80084f0:	0038      	movs	r0, r7
 80084f2:	f7ff fe49 	bl	8008188 <_Bfree>
 80084f6:	9e01      	ldr	r6, [sp, #4]
 80084f8:	106d      	asrs	r5, r5, #1
 80084fa:	d00c      	beq.n	8008516 <__pow5mult+0xa2>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	2800      	cmp	r0, #0
 8008500:	d107      	bne.n	8008512 <__pow5mult+0x9e>
 8008502:	0022      	movs	r2, r4
 8008504:	0021      	movs	r1, r4
 8008506:	0038      	movs	r0, r7
 8008508:	f7ff ff04 	bl	8008314 <__multiply>
 800850c:	2300      	movs	r3, #0
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	6003      	str	r3, [r0, #0]
 8008512:	0004      	movs	r4, r0
 8008514:	e7e2      	b.n	80084dc <__pow5mult+0x68>
 8008516:	0030      	movs	r0, r6
 8008518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	080095c0 	.word	0x080095c0
 8008520:	08009391 	.word	0x08009391
 8008524:	08009474 	.word	0x08009474
 8008528:	00000271 	.word	0x00000271

0800852c <__lshift>:
 800852c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852e:	000c      	movs	r4, r1
 8008530:	0017      	movs	r7, r2
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	1155      	asrs	r5, r2, #5
 8008536:	b087      	sub	sp, #28
 8008538:	18eb      	adds	r3, r5, r3
 800853a:	9302      	str	r3, [sp, #8]
 800853c:	3301      	adds	r3, #1
 800853e:	9301      	str	r3, [sp, #4]
 8008540:	6849      	ldr	r1, [r1, #4]
 8008542:	68a3      	ldr	r3, [r4, #8]
 8008544:	9004      	str	r0, [sp, #16]
 8008546:	9a01      	ldr	r2, [sp, #4]
 8008548:	4293      	cmp	r3, r2
 800854a:	db10      	blt.n	800856e <__lshift+0x42>
 800854c:	9804      	ldr	r0, [sp, #16]
 800854e:	f7ff fdd7 	bl	8008100 <_Balloc>
 8008552:	2300      	movs	r3, #0
 8008554:	0002      	movs	r2, r0
 8008556:	0006      	movs	r6, r0
 8008558:	0019      	movs	r1, r3
 800855a:	3214      	adds	r2, #20
 800855c:	4298      	cmp	r0, r3
 800855e:	d10c      	bne.n	800857a <__lshift+0x4e>
 8008560:	21da      	movs	r1, #218	; 0xda
 8008562:	0002      	movs	r2, r0
 8008564:	4b26      	ldr	r3, [pc, #152]	; (8008600 <__lshift+0xd4>)
 8008566:	4827      	ldr	r0, [pc, #156]	; (8008604 <__lshift+0xd8>)
 8008568:	31ff      	adds	r1, #255	; 0xff
 800856a:	f000 fc47 	bl	8008dfc <__assert_func>
 800856e:	3101      	adds	r1, #1
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	e7e8      	b.n	8008546 <__lshift+0x1a>
 8008574:	0098      	lsls	r0, r3, #2
 8008576:	5011      	str	r1, [r2, r0]
 8008578:	3301      	adds	r3, #1
 800857a:	42ab      	cmp	r3, r5
 800857c:	dbfa      	blt.n	8008574 <__lshift+0x48>
 800857e:	43eb      	mvns	r3, r5
 8008580:	17db      	asrs	r3, r3, #31
 8008582:	401d      	ands	r5, r3
 8008584:	211f      	movs	r1, #31
 8008586:	0023      	movs	r3, r4
 8008588:	0038      	movs	r0, r7
 800858a:	00ad      	lsls	r5, r5, #2
 800858c:	1955      	adds	r5, r2, r5
 800858e:	6922      	ldr	r2, [r4, #16]
 8008590:	3314      	adds	r3, #20
 8008592:	0092      	lsls	r2, r2, #2
 8008594:	4008      	ands	r0, r1
 8008596:	4684      	mov	ip, r0
 8008598:	189a      	adds	r2, r3, r2
 800859a:	420f      	tst	r7, r1
 800859c:	d02a      	beq.n	80085f4 <__lshift+0xc8>
 800859e:	3101      	adds	r1, #1
 80085a0:	1a09      	subs	r1, r1, r0
 80085a2:	9105      	str	r1, [sp, #20]
 80085a4:	2100      	movs	r1, #0
 80085a6:	9503      	str	r5, [sp, #12]
 80085a8:	4667      	mov	r7, ip
 80085aa:	6818      	ldr	r0, [r3, #0]
 80085ac:	40b8      	lsls	r0, r7
 80085ae:	4301      	orrs	r1, r0
 80085b0:	9803      	ldr	r0, [sp, #12]
 80085b2:	c002      	stmia	r0!, {r1}
 80085b4:	cb02      	ldmia	r3!, {r1}
 80085b6:	9003      	str	r0, [sp, #12]
 80085b8:	9805      	ldr	r0, [sp, #20]
 80085ba:	40c1      	lsrs	r1, r0
 80085bc:	429a      	cmp	r2, r3
 80085be:	d8f3      	bhi.n	80085a8 <__lshift+0x7c>
 80085c0:	0020      	movs	r0, r4
 80085c2:	3015      	adds	r0, #21
 80085c4:	2304      	movs	r3, #4
 80085c6:	4282      	cmp	r2, r0
 80085c8:	d304      	bcc.n	80085d4 <__lshift+0xa8>
 80085ca:	1b13      	subs	r3, r2, r4
 80085cc:	3b15      	subs	r3, #21
 80085ce:	089b      	lsrs	r3, r3, #2
 80085d0:	3301      	adds	r3, #1
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	50e9      	str	r1, [r5, r3]
 80085d6:	2900      	cmp	r1, #0
 80085d8:	d002      	beq.n	80085e0 <__lshift+0xb4>
 80085da:	9b02      	ldr	r3, [sp, #8]
 80085dc:	3302      	adds	r3, #2
 80085de:	9301      	str	r3, [sp, #4]
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	9804      	ldr	r0, [sp, #16]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	0021      	movs	r1, r4
 80085e8:	6133      	str	r3, [r6, #16]
 80085ea:	f7ff fdcd 	bl	8008188 <_Bfree>
 80085ee:	0030      	movs	r0, r6
 80085f0:	b007      	add	sp, #28
 80085f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085f4:	cb02      	ldmia	r3!, {r1}
 80085f6:	c502      	stmia	r5!, {r1}
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d8fb      	bhi.n	80085f4 <__lshift+0xc8>
 80085fc:	e7f0      	b.n	80085e0 <__lshift+0xb4>
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	08009403 	.word	0x08009403
 8008604:	08009474 	.word	0x08009474

08008608 <__mcmp>:
 8008608:	6902      	ldr	r2, [r0, #16]
 800860a:	690b      	ldr	r3, [r1, #16]
 800860c:	b530      	push	{r4, r5, lr}
 800860e:	0004      	movs	r4, r0
 8008610:	1ad0      	subs	r0, r2, r3
 8008612:	429a      	cmp	r2, r3
 8008614:	d10d      	bne.n	8008632 <__mcmp+0x2a>
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	3414      	adds	r4, #20
 800861a:	3114      	adds	r1, #20
 800861c:	18e2      	adds	r2, r4, r3
 800861e:	18c9      	adds	r1, r1, r3
 8008620:	3a04      	subs	r2, #4
 8008622:	3904      	subs	r1, #4
 8008624:	6815      	ldr	r5, [r2, #0]
 8008626:	680b      	ldr	r3, [r1, #0]
 8008628:	429d      	cmp	r5, r3
 800862a:	d003      	beq.n	8008634 <__mcmp+0x2c>
 800862c:	2001      	movs	r0, #1
 800862e:	429d      	cmp	r5, r3
 8008630:	d303      	bcc.n	800863a <__mcmp+0x32>
 8008632:	bd30      	pop	{r4, r5, pc}
 8008634:	4294      	cmp	r4, r2
 8008636:	d3f3      	bcc.n	8008620 <__mcmp+0x18>
 8008638:	e7fb      	b.n	8008632 <__mcmp+0x2a>
 800863a:	4240      	negs	r0, r0
 800863c:	e7f9      	b.n	8008632 <__mcmp+0x2a>
	...

08008640 <__mdiff>:
 8008640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008642:	000e      	movs	r6, r1
 8008644:	0007      	movs	r7, r0
 8008646:	0011      	movs	r1, r2
 8008648:	0030      	movs	r0, r6
 800864a:	b087      	sub	sp, #28
 800864c:	0014      	movs	r4, r2
 800864e:	f7ff ffdb 	bl	8008608 <__mcmp>
 8008652:	1e05      	subs	r5, r0, #0
 8008654:	d110      	bne.n	8008678 <__mdiff+0x38>
 8008656:	0001      	movs	r1, r0
 8008658:	0038      	movs	r0, r7
 800865a:	f7ff fd51 	bl	8008100 <_Balloc>
 800865e:	1e02      	subs	r2, r0, #0
 8008660:	d104      	bne.n	800866c <__mdiff+0x2c>
 8008662:	4b40      	ldr	r3, [pc, #256]	; (8008764 <__mdiff+0x124>)
 8008664:	4940      	ldr	r1, [pc, #256]	; (8008768 <__mdiff+0x128>)
 8008666:	4841      	ldr	r0, [pc, #260]	; (800876c <__mdiff+0x12c>)
 8008668:	f000 fbc8 	bl	8008dfc <__assert_func>
 800866c:	2301      	movs	r3, #1
 800866e:	6145      	str	r5, [r0, #20]
 8008670:	6103      	str	r3, [r0, #16]
 8008672:	0010      	movs	r0, r2
 8008674:	b007      	add	sp, #28
 8008676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008678:	2301      	movs	r3, #1
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	2800      	cmp	r0, #0
 800867e:	db04      	blt.n	800868a <__mdiff+0x4a>
 8008680:	0023      	movs	r3, r4
 8008682:	0034      	movs	r4, r6
 8008684:	001e      	movs	r6, r3
 8008686:	2300      	movs	r3, #0
 8008688:	9301      	str	r3, [sp, #4]
 800868a:	0038      	movs	r0, r7
 800868c:	6861      	ldr	r1, [r4, #4]
 800868e:	f7ff fd37 	bl	8008100 <_Balloc>
 8008692:	1e02      	subs	r2, r0, #0
 8008694:	d103      	bne.n	800869e <__mdiff+0x5e>
 8008696:	2190      	movs	r1, #144	; 0x90
 8008698:	4b32      	ldr	r3, [pc, #200]	; (8008764 <__mdiff+0x124>)
 800869a:	0089      	lsls	r1, r1, #2
 800869c:	e7e3      	b.n	8008666 <__mdiff+0x26>
 800869e:	9b01      	ldr	r3, [sp, #4]
 80086a0:	2700      	movs	r7, #0
 80086a2:	60c3      	str	r3, [r0, #12]
 80086a4:	6920      	ldr	r0, [r4, #16]
 80086a6:	3414      	adds	r4, #20
 80086a8:	9401      	str	r4, [sp, #4]
 80086aa:	9b01      	ldr	r3, [sp, #4]
 80086ac:	0084      	lsls	r4, r0, #2
 80086ae:	191b      	adds	r3, r3, r4
 80086b0:	0034      	movs	r4, r6
 80086b2:	9302      	str	r3, [sp, #8]
 80086b4:	6933      	ldr	r3, [r6, #16]
 80086b6:	3414      	adds	r4, #20
 80086b8:	0099      	lsls	r1, r3, #2
 80086ba:	1863      	adds	r3, r4, r1
 80086bc:	9303      	str	r3, [sp, #12]
 80086be:	0013      	movs	r3, r2
 80086c0:	3314      	adds	r3, #20
 80086c2:	469c      	mov	ip, r3
 80086c4:	9305      	str	r3, [sp, #20]
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	9b04      	ldr	r3, [sp, #16]
 80086cc:	cc02      	ldmia	r4!, {r1}
 80086ce:	cb20      	ldmia	r3!, {r5}
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	b2ab      	uxth	r3, r5
 80086d4:	19df      	adds	r7, r3, r7
 80086d6:	b28b      	uxth	r3, r1
 80086d8:	1afb      	subs	r3, r7, r3
 80086da:	0c09      	lsrs	r1, r1, #16
 80086dc:	0c2d      	lsrs	r5, r5, #16
 80086de:	1a6d      	subs	r5, r5, r1
 80086e0:	1419      	asrs	r1, r3, #16
 80086e2:	186d      	adds	r5, r5, r1
 80086e4:	4661      	mov	r1, ip
 80086e6:	142f      	asrs	r7, r5, #16
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	042d      	lsls	r5, r5, #16
 80086ec:	432b      	orrs	r3, r5
 80086ee:	c108      	stmia	r1!, {r3}
 80086f0:	9b03      	ldr	r3, [sp, #12]
 80086f2:	468c      	mov	ip, r1
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	d8e8      	bhi.n	80086ca <__mdiff+0x8a>
 80086f8:	0031      	movs	r1, r6
 80086fa:	9c03      	ldr	r4, [sp, #12]
 80086fc:	3115      	adds	r1, #21
 80086fe:	2304      	movs	r3, #4
 8008700:	428c      	cmp	r4, r1
 8008702:	d304      	bcc.n	800870e <__mdiff+0xce>
 8008704:	1ba3      	subs	r3, r4, r6
 8008706:	3b15      	subs	r3, #21
 8008708:	089b      	lsrs	r3, r3, #2
 800870a:	3301      	adds	r3, #1
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	9901      	ldr	r1, [sp, #4]
 8008710:	18cc      	adds	r4, r1, r3
 8008712:	9905      	ldr	r1, [sp, #20]
 8008714:	0026      	movs	r6, r4
 8008716:	18cb      	adds	r3, r1, r3
 8008718:	469c      	mov	ip, r3
 800871a:	9902      	ldr	r1, [sp, #8]
 800871c:	428e      	cmp	r6, r1
 800871e:	d310      	bcc.n	8008742 <__mdiff+0x102>
 8008720:	9e02      	ldr	r6, [sp, #8]
 8008722:	1ee1      	subs	r1, r4, #3
 8008724:	2500      	movs	r5, #0
 8008726:	428e      	cmp	r6, r1
 8008728:	d304      	bcc.n	8008734 <__mdiff+0xf4>
 800872a:	0031      	movs	r1, r6
 800872c:	3103      	adds	r1, #3
 800872e:	1b0c      	subs	r4, r1, r4
 8008730:	08a4      	lsrs	r4, r4, #2
 8008732:	00a5      	lsls	r5, r4, #2
 8008734:	195b      	adds	r3, r3, r5
 8008736:	3b04      	subs	r3, #4
 8008738:	6819      	ldr	r1, [r3, #0]
 800873a:	2900      	cmp	r1, #0
 800873c:	d00f      	beq.n	800875e <__mdiff+0x11e>
 800873e:	6110      	str	r0, [r2, #16]
 8008740:	e797      	b.n	8008672 <__mdiff+0x32>
 8008742:	ce02      	ldmia	r6!, {r1}
 8008744:	b28d      	uxth	r5, r1
 8008746:	19ed      	adds	r5, r5, r7
 8008748:	0c0f      	lsrs	r7, r1, #16
 800874a:	1429      	asrs	r1, r5, #16
 800874c:	1879      	adds	r1, r7, r1
 800874e:	140f      	asrs	r7, r1, #16
 8008750:	b2ad      	uxth	r5, r5
 8008752:	0409      	lsls	r1, r1, #16
 8008754:	430d      	orrs	r5, r1
 8008756:	4661      	mov	r1, ip
 8008758:	c120      	stmia	r1!, {r5}
 800875a:	468c      	mov	ip, r1
 800875c:	e7dd      	b.n	800871a <__mdiff+0xda>
 800875e:	3801      	subs	r0, #1
 8008760:	e7e9      	b.n	8008736 <__mdiff+0xf6>
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	08009403 	.word	0x08009403
 8008768:	00000232 	.word	0x00000232
 800876c:	08009474 	.word	0x08009474

08008770 <__d2b>:
 8008770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008772:	2101      	movs	r1, #1
 8008774:	0014      	movs	r4, r2
 8008776:	001e      	movs	r6, r3
 8008778:	9f08      	ldr	r7, [sp, #32]
 800877a:	f7ff fcc1 	bl	8008100 <_Balloc>
 800877e:	1e05      	subs	r5, r0, #0
 8008780:	d105      	bne.n	800878e <__d2b+0x1e>
 8008782:	0002      	movs	r2, r0
 8008784:	4b26      	ldr	r3, [pc, #152]	; (8008820 <__d2b+0xb0>)
 8008786:	4927      	ldr	r1, [pc, #156]	; (8008824 <__d2b+0xb4>)
 8008788:	4827      	ldr	r0, [pc, #156]	; (8008828 <__d2b+0xb8>)
 800878a:	f000 fb37 	bl	8008dfc <__assert_func>
 800878e:	0333      	lsls	r3, r6, #12
 8008790:	0076      	lsls	r6, r6, #1
 8008792:	0b1b      	lsrs	r3, r3, #12
 8008794:	0d76      	lsrs	r6, r6, #21
 8008796:	d124      	bne.n	80087e2 <__d2b+0x72>
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	2c00      	cmp	r4, #0
 800879c:	d027      	beq.n	80087ee <__d2b+0x7e>
 800879e:	4668      	mov	r0, sp
 80087a0:	9400      	str	r4, [sp, #0]
 80087a2:	f7ff fd73 	bl	800828c <__lo0bits>
 80087a6:	9c00      	ldr	r4, [sp, #0]
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d01e      	beq.n	80087ea <__d2b+0x7a>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	2120      	movs	r1, #32
 80087b0:	001a      	movs	r2, r3
 80087b2:	1a09      	subs	r1, r1, r0
 80087b4:	408a      	lsls	r2, r1
 80087b6:	40c3      	lsrs	r3, r0
 80087b8:	4322      	orrs	r2, r4
 80087ba:	616a      	str	r2, [r5, #20]
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	9c01      	ldr	r4, [sp, #4]
 80087c0:	61ac      	str	r4, [r5, #24]
 80087c2:	1e63      	subs	r3, r4, #1
 80087c4:	419c      	sbcs	r4, r3
 80087c6:	3401      	adds	r4, #1
 80087c8:	612c      	str	r4, [r5, #16]
 80087ca:	2e00      	cmp	r6, #0
 80087cc:	d018      	beq.n	8008800 <__d2b+0x90>
 80087ce:	4b17      	ldr	r3, [pc, #92]	; (800882c <__d2b+0xbc>)
 80087d0:	18f6      	adds	r6, r6, r3
 80087d2:	2335      	movs	r3, #53	; 0x35
 80087d4:	1836      	adds	r6, r6, r0
 80087d6:	1a18      	subs	r0, r3, r0
 80087d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087da:	603e      	str	r6, [r7, #0]
 80087dc:	6018      	str	r0, [r3, #0]
 80087de:	0028      	movs	r0, r5
 80087e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087e2:	2280      	movs	r2, #128	; 0x80
 80087e4:	0352      	lsls	r2, r2, #13
 80087e6:	4313      	orrs	r3, r2
 80087e8:	e7d6      	b.n	8008798 <__d2b+0x28>
 80087ea:	616c      	str	r4, [r5, #20]
 80087ec:	e7e7      	b.n	80087be <__d2b+0x4e>
 80087ee:	a801      	add	r0, sp, #4
 80087f0:	f7ff fd4c 	bl	800828c <__lo0bits>
 80087f4:	2401      	movs	r4, #1
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	612c      	str	r4, [r5, #16]
 80087fa:	616b      	str	r3, [r5, #20]
 80087fc:	3020      	adds	r0, #32
 80087fe:	e7e4      	b.n	80087ca <__d2b+0x5a>
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <__d2b+0xc0>)
 8008802:	18c0      	adds	r0, r0, r3
 8008804:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <__d2b+0xc4>)
 8008806:	6038      	str	r0, [r7, #0]
 8008808:	18e3      	adds	r3, r4, r3
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	18eb      	adds	r3, r5, r3
 800880e:	6958      	ldr	r0, [r3, #20]
 8008810:	f7ff fd22 	bl	8008258 <__hi0bits>
 8008814:	0164      	lsls	r4, r4, #5
 8008816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008818:	1a24      	subs	r4, r4, r0
 800881a:	601c      	str	r4, [r3, #0]
 800881c:	e7df      	b.n	80087de <__d2b+0x6e>
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	08009403 	.word	0x08009403
 8008824:	0000030a 	.word	0x0000030a
 8008828:	08009474 	.word	0x08009474
 800882c:	fffffbcd 	.word	0xfffffbcd
 8008830:	fffffbce 	.word	0xfffffbce
 8008834:	3fffffff 	.word	0x3fffffff

08008838 <_calloc_r>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	0c13      	lsrs	r3, r2, #16
 800883c:	0c0d      	lsrs	r5, r1, #16
 800883e:	d11e      	bne.n	800887e <_calloc_r+0x46>
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10c      	bne.n	800885e <_calloc_r+0x26>
 8008844:	b289      	uxth	r1, r1
 8008846:	b294      	uxth	r4, r2
 8008848:	434c      	muls	r4, r1
 800884a:	0021      	movs	r1, r4
 800884c:	f000 f88c 	bl	8008968 <_malloc_r>
 8008850:	1e05      	subs	r5, r0, #0
 8008852:	d01b      	beq.n	800888c <_calloc_r+0x54>
 8008854:	0022      	movs	r2, r4
 8008856:	2100      	movs	r1, #0
 8008858:	f7fd fd79 	bl	800634e <memset>
 800885c:	e016      	b.n	800888c <_calloc_r+0x54>
 800885e:	1c1d      	adds	r5, r3, #0
 8008860:	1c0b      	adds	r3, r1, #0
 8008862:	b292      	uxth	r2, r2
 8008864:	b289      	uxth	r1, r1
 8008866:	b29c      	uxth	r4, r3
 8008868:	4351      	muls	r1, r2
 800886a:	b2ab      	uxth	r3, r5
 800886c:	4363      	muls	r3, r4
 800886e:	0c0c      	lsrs	r4, r1, #16
 8008870:	191c      	adds	r4, r3, r4
 8008872:	0c22      	lsrs	r2, r4, #16
 8008874:	d107      	bne.n	8008886 <_calloc_r+0x4e>
 8008876:	0424      	lsls	r4, r4, #16
 8008878:	b289      	uxth	r1, r1
 800887a:	430c      	orrs	r4, r1
 800887c:	e7e5      	b.n	800884a <_calloc_r+0x12>
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <_calloc_r+0x4e>
 8008882:	1c13      	adds	r3, r2, #0
 8008884:	e7ed      	b.n	8008862 <_calloc_r+0x2a>
 8008886:	230c      	movs	r3, #12
 8008888:	2500      	movs	r5, #0
 800888a:	6003      	str	r3, [r0, #0]
 800888c:	0028      	movs	r0, r5
 800888e:	bd70      	pop	{r4, r5, r6, pc}

08008890 <_free_r>:
 8008890:	b570      	push	{r4, r5, r6, lr}
 8008892:	0005      	movs	r5, r0
 8008894:	2900      	cmp	r1, #0
 8008896:	d010      	beq.n	80088ba <_free_r+0x2a>
 8008898:	1f0c      	subs	r4, r1, #4
 800889a:	6823      	ldr	r3, [r4, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	da00      	bge.n	80088a2 <_free_r+0x12>
 80088a0:	18e4      	adds	r4, r4, r3
 80088a2:	0028      	movs	r0, r5
 80088a4:	f000 fb34 	bl	8008f10 <__malloc_lock>
 80088a8:	4a1d      	ldr	r2, [pc, #116]	; (8008920 <_free_r+0x90>)
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d105      	bne.n	80088bc <_free_r+0x2c>
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	6014      	str	r4, [r2, #0]
 80088b4:	0028      	movs	r0, r5
 80088b6:	f000 fb33 	bl	8008f20 <__malloc_unlock>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	42a3      	cmp	r3, r4
 80088be:	d908      	bls.n	80088d2 <_free_r+0x42>
 80088c0:	6821      	ldr	r1, [r4, #0]
 80088c2:	1860      	adds	r0, r4, r1
 80088c4:	4283      	cmp	r3, r0
 80088c6:	d1f3      	bne.n	80088b0 <_free_r+0x20>
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	1841      	adds	r1, r0, r1
 80088ce:	6021      	str	r1, [r4, #0]
 80088d0:	e7ee      	b.n	80088b0 <_free_r+0x20>
 80088d2:	001a      	movs	r2, r3
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <_free_r+0x4e>
 80088da:	42a3      	cmp	r3, r4
 80088dc:	d9f9      	bls.n	80088d2 <_free_r+0x42>
 80088de:	6811      	ldr	r1, [r2, #0]
 80088e0:	1850      	adds	r0, r2, r1
 80088e2:	42a0      	cmp	r0, r4
 80088e4:	d10b      	bne.n	80088fe <_free_r+0x6e>
 80088e6:	6820      	ldr	r0, [r4, #0]
 80088e8:	1809      	adds	r1, r1, r0
 80088ea:	1850      	adds	r0, r2, r1
 80088ec:	6011      	str	r1, [r2, #0]
 80088ee:	4283      	cmp	r3, r0
 80088f0:	d1e0      	bne.n	80088b4 <_free_r+0x24>
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	1841      	adds	r1, r0, r1
 80088f8:	6011      	str	r1, [r2, #0]
 80088fa:	6053      	str	r3, [r2, #4]
 80088fc:	e7da      	b.n	80088b4 <_free_r+0x24>
 80088fe:	42a0      	cmp	r0, r4
 8008900:	d902      	bls.n	8008908 <_free_r+0x78>
 8008902:	230c      	movs	r3, #12
 8008904:	602b      	str	r3, [r5, #0]
 8008906:	e7d5      	b.n	80088b4 <_free_r+0x24>
 8008908:	6821      	ldr	r1, [r4, #0]
 800890a:	1860      	adds	r0, r4, r1
 800890c:	4283      	cmp	r3, r0
 800890e:	d103      	bne.n	8008918 <_free_r+0x88>
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	1841      	adds	r1, r0, r1
 8008916:	6021      	str	r1, [r4, #0]
 8008918:	6063      	str	r3, [r4, #4]
 800891a:	6054      	str	r4, [r2, #4]
 800891c:	e7ca      	b.n	80088b4 <_free_r+0x24>
 800891e:	46c0      	nop			; (mov r8, r8)
 8008920:	200008c0 	.word	0x200008c0

08008924 <sbrk_aligned>:
 8008924:	b570      	push	{r4, r5, r6, lr}
 8008926:	4e0f      	ldr	r6, [pc, #60]	; (8008964 <sbrk_aligned+0x40>)
 8008928:	000d      	movs	r5, r1
 800892a:	6831      	ldr	r1, [r6, #0]
 800892c:	0004      	movs	r4, r0
 800892e:	2900      	cmp	r1, #0
 8008930:	d102      	bne.n	8008938 <sbrk_aligned+0x14>
 8008932:	f000 f9f1 	bl	8008d18 <_sbrk_r>
 8008936:	6030      	str	r0, [r6, #0]
 8008938:	0029      	movs	r1, r5
 800893a:	0020      	movs	r0, r4
 800893c:	f000 f9ec 	bl	8008d18 <_sbrk_r>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d00a      	beq.n	800895a <sbrk_aligned+0x36>
 8008944:	2303      	movs	r3, #3
 8008946:	1cc5      	adds	r5, r0, #3
 8008948:	439d      	bics	r5, r3
 800894a:	42a8      	cmp	r0, r5
 800894c:	d007      	beq.n	800895e <sbrk_aligned+0x3a>
 800894e:	1a29      	subs	r1, r5, r0
 8008950:	0020      	movs	r0, r4
 8008952:	f000 f9e1 	bl	8008d18 <_sbrk_r>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	d101      	bne.n	800895e <sbrk_aligned+0x3a>
 800895a:	2501      	movs	r5, #1
 800895c:	426d      	negs	r5, r5
 800895e:	0028      	movs	r0, r5
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	200008c4 	.word	0x200008c4

08008968 <_malloc_r>:
 8008968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800896a:	2203      	movs	r2, #3
 800896c:	1ccb      	adds	r3, r1, #3
 800896e:	4393      	bics	r3, r2
 8008970:	3308      	adds	r3, #8
 8008972:	0006      	movs	r6, r0
 8008974:	001f      	movs	r7, r3
 8008976:	2b0c      	cmp	r3, #12
 8008978:	d232      	bcs.n	80089e0 <_malloc_r+0x78>
 800897a:	270c      	movs	r7, #12
 800897c:	42b9      	cmp	r1, r7
 800897e:	d831      	bhi.n	80089e4 <_malloc_r+0x7c>
 8008980:	0030      	movs	r0, r6
 8008982:	f000 fac5 	bl	8008f10 <__malloc_lock>
 8008986:	4d32      	ldr	r5, [pc, #200]	; (8008a50 <_malloc_r+0xe8>)
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	001c      	movs	r4, r3
 800898c:	2c00      	cmp	r4, #0
 800898e:	d12e      	bne.n	80089ee <_malloc_r+0x86>
 8008990:	0039      	movs	r1, r7
 8008992:	0030      	movs	r0, r6
 8008994:	f7ff ffc6 	bl	8008924 <sbrk_aligned>
 8008998:	0004      	movs	r4, r0
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d11e      	bne.n	80089dc <_malloc_r+0x74>
 800899e:	682c      	ldr	r4, [r5, #0]
 80089a0:	0025      	movs	r5, r4
 80089a2:	2d00      	cmp	r5, #0
 80089a4:	d14a      	bne.n	8008a3c <_malloc_r+0xd4>
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	0029      	movs	r1, r5
 80089aa:	18e3      	adds	r3, r4, r3
 80089ac:	0030      	movs	r0, r6
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	f000 f9b2 	bl	8008d18 <_sbrk_r>
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	4283      	cmp	r3, r0
 80089b8:	d143      	bne.n	8008a42 <_malloc_r+0xda>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	3703      	adds	r7, #3
 80089be:	1aff      	subs	r7, r7, r3
 80089c0:	2303      	movs	r3, #3
 80089c2:	439f      	bics	r7, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	2f0c      	cmp	r7, #12
 80089c8:	d200      	bcs.n	80089cc <_malloc_r+0x64>
 80089ca:	270c      	movs	r7, #12
 80089cc:	0039      	movs	r1, r7
 80089ce:	0030      	movs	r0, r6
 80089d0:	f7ff ffa8 	bl	8008924 <sbrk_aligned>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d034      	beq.n	8008a42 <_malloc_r+0xda>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	19df      	adds	r7, r3, r7
 80089dc:	6027      	str	r7, [r4, #0]
 80089de:	e013      	b.n	8008a08 <_malloc_r+0xa0>
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	dacb      	bge.n	800897c <_malloc_r+0x14>
 80089e4:	230c      	movs	r3, #12
 80089e6:	2500      	movs	r5, #0
 80089e8:	6033      	str	r3, [r6, #0]
 80089ea:	0028      	movs	r0, r5
 80089ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089ee:	6822      	ldr	r2, [r4, #0]
 80089f0:	1bd1      	subs	r1, r2, r7
 80089f2:	d420      	bmi.n	8008a36 <_malloc_r+0xce>
 80089f4:	290b      	cmp	r1, #11
 80089f6:	d917      	bls.n	8008a28 <_malloc_r+0xc0>
 80089f8:	19e2      	adds	r2, r4, r7
 80089fa:	6027      	str	r7, [r4, #0]
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d111      	bne.n	8008a24 <_malloc_r+0xbc>
 8008a00:	602a      	str	r2, [r5, #0]
 8008a02:	6863      	ldr	r3, [r4, #4]
 8008a04:	6011      	str	r1, [r2, #0]
 8008a06:	6053      	str	r3, [r2, #4]
 8008a08:	0030      	movs	r0, r6
 8008a0a:	0025      	movs	r5, r4
 8008a0c:	f000 fa88 	bl	8008f20 <__malloc_unlock>
 8008a10:	2207      	movs	r2, #7
 8008a12:	350b      	adds	r5, #11
 8008a14:	1d23      	adds	r3, r4, #4
 8008a16:	4395      	bics	r5, r2
 8008a18:	1aea      	subs	r2, r5, r3
 8008a1a:	429d      	cmp	r5, r3
 8008a1c:	d0e5      	beq.n	80089ea <_malloc_r+0x82>
 8008a1e:	1b5b      	subs	r3, r3, r5
 8008a20:	50a3      	str	r3, [r4, r2]
 8008a22:	e7e2      	b.n	80089ea <_malloc_r+0x82>
 8008a24:	605a      	str	r2, [r3, #4]
 8008a26:	e7ec      	b.n	8008a02 <_malloc_r+0x9a>
 8008a28:	6862      	ldr	r2, [r4, #4]
 8008a2a:	42a3      	cmp	r3, r4
 8008a2c:	d101      	bne.n	8008a32 <_malloc_r+0xca>
 8008a2e:	602a      	str	r2, [r5, #0]
 8008a30:	e7ea      	b.n	8008a08 <_malloc_r+0xa0>
 8008a32:	605a      	str	r2, [r3, #4]
 8008a34:	e7e8      	b.n	8008a08 <_malloc_r+0xa0>
 8008a36:	0023      	movs	r3, r4
 8008a38:	6864      	ldr	r4, [r4, #4]
 8008a3a:	e7a7      	b.n	800898c <_malloc_r+0x24>
 8008a3c:	002c      	movs	r4, r5
 8008a3e:	686d      	ldr	r5, [r5, #4]
 8008a40:	e7af      	b.n	80089a2 <_malloc_r+0x3a>
 8008a42:	230c      	movs	r3, #12
 8008a44:	0030      	movs	r0, r6
 8008a46:	6033      	str	r3, [r6, #0]
 8008a48:	f000 fa6a 	bl	8008f20 <__malloc_unlock>
 8008a4c:	e7cd      	b.n	80089ea <_malloc_r+0x82>
 8008a4e:	46c0      	nop			; (mov r8, r8)
 8008a50:	200008c0 	.word	0x200008c0

08008a54 <__sfputc_r>:
 8008a54:	6893      	ldr	r3, [r2, #8]
 8008a56:	b510      	push	{r4, lr}
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	6093      	str	r3, [r2, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	da04      	bge.n	8008a6a <__sfputc_r+0x16>
 8008a60:	6994      	ldr	r4, [r2, #24]
 8008a62:	42a3      	cmp	r3, r4
 8008a64:	db07      	blt.n	8008a76 <__sfputc_r+0x22>
 8008a66:	290a      	cmp	r1, #10
 8008a68:	d005      	beq.n	8008a76 <__sfputc_r+0x22>
 8008a6a:	6813      	ldr	r3, [r2, #0]
 8008a6c:	1c58      	adds	r0, r3, #1
 8008a6e:	6010      	str	r0, [r2, #0]
 8008a70:	7019      	strb	r1, [r3, #0]
 8008a72:	0008      	movs	r0, r1
 8008a74:	bd10      	pop	{r4, pc}
 8008a76:	f7fe f977 	bl	8006d68 <__swbuf_r>
 8008a7a:	0001      	movs	r1, r0
 8008a7c:	e7f9      	b.n	8008a72 <__sfputc_r+0x1e>

08008a7e <__sfputs_r>:
 8008a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a80:	0006      	movs	r6, r0
 8008a82:	000f      	movs	r7, r1
 8008a84:	0014      	movs	r4, r2
 8008a86:	18d5      	adds	r5, r2, r3
 8008a88:	42ac      	cmp	r4, r5
 8008a8a:	d101      	bne.n	8008a90 <__sfputs_r+0x12>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e007      	b.n	8008aa0 <__sfputs_r+0x22>
 8008a90:	7821      	ldrb	r1, [r4, #0]
 8008a92:	003a      	movs	r2, r7
 8008a94:	0030      	movs	r0, r6
 8008a96:	f7ff ffdd 	bl	8008a54 <__sfputc_r>
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d1f3      	bne.n	8008a88 <__sfputs_r+0xa>
 8008aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008aa4 <_vfiprintf_r>:
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa6:	b0a1      	sub	sp, #132	; 0x84
 8008aa8:	0006      	movs	r6, r0
 8008aaa:	000c      	movs	r4, r1
 8008aac:	001f      	movs	r7, r3
 8008aae:	9203      	str	r2, [sp, #12]
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d004      	beq.n	8008abe <_vfiprintf_r+0x1a>
 8008ab4:	6983      	ldr	r3, [r0, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <_vfiprintf_r+0x1a>
 8008aba:	f7ff f9f7 	bl	8007eac <__sinit>
 8008abe:	4b8e      	ldr	r3, [pc, #568]	; (8008cf8 <_vfiprintf_r+0x254>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	d11c      	bne.n	8008afe <_vfiprintf_r+0x5a>
 8008ac4:	6874      	ldr	r4, [r6, #4]
 8008ac6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ac8:	07db      	lsls	r3, r3, #31
 8008aca:	d405      	bmi.n	8008ad8 <_vfiprintf_r+0x34>
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	059b      	lsls	r3, r3, #22
 8008ad0:	d402      	bmi.n	8008ad8 <_vfiprintf_r+0x34>
 8008ad2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ad4:	f7ff fa8f 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8008ad8:	89a3      	ldrh	r3, [r4, #12]
 8008ada:	071b      	lsls	r3, r3, #28
 8008adc:	d502      	bpl.n	8008ae4 <_vfiprintf_r+0x40>
 8008ade:	6923      	ldr	r3, [r4, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d11d      	bne.n	8008b20 <_vfiprintf_r+0x7c>
 8008ae4:	0021      	movs	r1, r4
 8008ae6:	0030      	movs	r0, r6
 8008ae8:	f7fe f994 	bl	8006e14 <__swsetup_r>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d017      	beq.n	8008b20 <_vfiprintf_r+0x7c>
 8008af0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008af2:	07db      	lsls	r3, r3, #31
 8008af4:	d50d      	bpl.n	8008b12 <_vfiprintf_r+0x6e>
 8008af6:	2001      	movs	r0, #1
 8008af8:	4240      	negs	r0, r0
 8008afa:	b021      	add	sp, #132	; 0x84
 8008afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008afe:	4b7f      	ldr	r3, [pc, #508]	; (8008cfc <_vfiprintf_r+0x258>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	d101      	bne.n	8008b08 <_vfiprintf_r+0x64>
 8008b04:	68b4      	ldr	r4, [r6, #8]
 8008b06:	e7de      	b.n	8008ac6 <_vfiprintf_r+0x22>
 8008b08:	4b7d      	ldr	r3, [pc, #500]	; (8008d00 <_vfiprintf_r+0x25c>)
 8008b0a:	429c      	cmp	r4, r3
 8008b0c:	d1db      	bne.n	8008ac6 <_vfiprintf_r+0x22>
 8008b0e:	68f4      	ldr	r4, [r6, #12]
 8008b10:	e7d9      	b.n	8008ac6 <_vfiprintf_r+0x22>
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	059b      	lsls	r3, r3, #22
 8008b16:	d4ee      	bmi.n	8008af6 <_vfiprintf_r+0x52>
 8008b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b1a:	f7ff fa6d 	bl	8007ff8 <__retarget_lock_release_recursive>
 8008b1e:	e7ea      	b.n	8008af6 <_vfiprintf_r+0x52>
 8008b20:	2300      	movs	r3, #0
 8008b22:	ad08      	add	r5, sp, #32
 8008b24:	616b      	str	r3, [r5, #20]
 8008b26:	3320      	adds	r3, #32
 8008b28:	766b      	strb	r3, [r5, #25]
 8008b2a:	3310      	adds	r3, #16
 8008b2c:	76ab      	strb	r3, [r5, #26]
 8008b2e:	9707      	str	r7, [sp, #28]
 8008b30:	9f03      	ldr	r7, [sp, #12]
 8008b32:	783b      	ldrb	r3, [r7, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <_vfiprintf_r+0x98>
 8008b38:	2b25      	cmp	r3, #37	; 0x25
 8008b3a:	d14e      	bne.n	8008bda <_vfiprintf_r+0x136>
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	1afb      	subs	r3, r7, r3
 8008b40:	9305      	str	r3, [sp, #20]
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	429f      	cmp	r7, r3
 8008b46:	d00d      	beq.n	8008b64 <_vfiprintf_r+0xc0>
 8008b48:	9b05      	ldr	r3, [sp, #20]
 8008b4a:	0021      	movs	r1, r4
 8008b4c:	0030      	movs	r0, r6
 8008b4e:	9a03      	ldr	r2, [sp, #12]
 8008b50:	f7ff ff95 	bl	8008a7e <__sfputs_r>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d100      	bne.n	8008b5a <_vfiprintf_r+0xb6>
 8008b58:	e0b5      	b.n	8008cc6 <_vfiprintf_r+0x222>
 8008b5a:	696a      	ldr	r2, [r5, #20]
 8008b5c:	9b05      	ldr	r3, [sp, #20]
 8008b5e:	4694      	mov	ip, r2
 8008b60:	4463      	add	r3, ip
 8008b62:	616b      	str	r3, [r5, #20]
 8008b64:	783b      	ldrb	r3, [r7, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d100      	bne.n	8008b6c <_vfiprintf_r+0xc8>
 8008b6a:	e0ac      	b.n	8008cc6 <_vfiprintf_r+0x222>
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	1c7b      	adds	r3, r7, #1
 8008b70:	9303      	str	r3, [sp, #12]
 8008b72:	2300      	movs	r3, #0
 8008b74:	4252      	negs	r2, r2
 8008b76:	606a      	str	r2, [r5, #4]
 8008b78:	a904      	add	r1, sp, #16
 8008b7a:	3254      	adds	r2, #84	; 0x54
 8008b7c:	1852      	adds	r2, r2, r1
 8008b7e:	602b      	str	r3, [r5, #0]
 8008b80:	60eb      	str	r3, [r5, #12]
 8008b82:	60ab      	str	r3, [r5, #8]
 8008b84:	7013      	strb	r3, [r2, #0]
 8008b86:	65ab      	str	r3, [r5, #88]	; 0x58
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	2205      	movs	r2, #5
 8008b8c:	7819      	ldrb	r1, [r3, #0]
 8008b8e:	485d      	ldr	r0, [pc, #372]	; (8008d04 <_vfiprintf_r+0x260>)
 8008b90:	f7ff faaa 	bl	80080e8 <memchr>
 8008b94:	9b03      	ldr	r3, [sp, #12]
 8008b96:	1c5f      	adds	r7, r3, #1
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d120      	bne.n	8008bde <_vfiprintf_r+0x13a>
 8008b9c:	682a      	ldr	r2, [r5, #0]
 8008b9e:	06d3      	lsls	r3, r2, #27
 8008ba0:	d504      	bpl.n	8008bac <_vfiprintf_r+0x108>
 8008ba2:	2353      	movs	r3, #83	; 0x53
 8008ba4:	a904      	add	r1, sp, #16
 8008ba6:	185b      	adds	r3, r3, r1
 8008ba8:	2120      	movs	r1, #32
 8008baa:	7019      	strb	r1, [r3, #0]
 8008bac:	0713      	lsls	r3, r2, #28
 8008bae:	d504      	bpl.n	8008bba <_vfiprintf_r+0x116>
 8008bb0:	2353      	movs	r3, #83	; 0x53
 8008bb2:	a904      	add	r1, sp, #16
 8008bb4:	185b      	adds	r3, r3, r1
 8008bb6:	212b      	movs	r1, #43	; 0x2b
 8008bb8:	7019      	strb	r1, [r3, #0]
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc0:	d016      	beq.n	8008bf0 <_vfiprintf_r+0x14c>
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	68eb      	ldr	r3, [r5, #12]
 8008bc6:	9f03      	ldr	r7, [sp, #12]
 8008bc8:	783a      	ldrb	r2, [r7, #0]
 8008bca:	1c78      	adds	r0, r7, #1
 8008bcc:	3a30      	subs	r2, #48	; 0x30
 8008bce:	4684      	mov	ip, r0
 8008bd0:	2a09      	cmp	r2, #9
 8008bd2:	d94f      	bls.n	8008c74 <_vfiprintf_r+0x1d0>
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	d111      	bne.n	8008bfc <_vfiprintf_r+0x158>
 8008bd8:	e017      	b.n	8008c0a <_vfiprintf_r+0x166>
 8008bda:	3701      	adds	r7, #1
 8008bdc:	e7a9      	b.n	8008b32 <_vfiprintf_r+0x8e>
 8008bde:	4b49      	ldr	r3, [pc, #292]	; (8008d04 <_vfiprintf_r+0x260>)
 8008be0:	682a      	ldr	r2, [r5, #0]
 8008be2:	1ac0      	subs	r0, r0, r3
 8008be4:	2301      	movs	r3, #1
 8008be6:	4083      	lsls	r3, r0
 8008be8:	4313      	orrs	r3, r2
 8008bea:	602b      	str	r3, [r5, #0]
 8008bec:	9703      	str	r7, [sp, #12]
 8008bee:	e7cb      	b.n	8008b88 <_vfiprintf_r+0xe4>
 8008bf0:	9b07      	ldr	r3, [sp, #28]
 8008bf2:	1d19      	adds	r1, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	9107      	str	r1, [sp, #28]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	db01      	blt.n	8008c00 <_vfiprintf_r+0x15c>
 8008bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bfe:	e004      	b.n	8008c0a <_vfiprintf_r+0x166>
 8008c00:	425b      	negs	r3, r3
 8008c02:	60eb      	str	r3, [r5, #12]
 8008c04:	2302      	movs	r3, #2
 8008c06:	4313      	orrs	r3, r2
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	783b      	ldrb	r3, [r7, #0]
 8008c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0e:	d10a      	bne.n	8008c26 <_vfiprintf_r+0x182>
 8008c10:	787b      	ldrb	r3, [r7, #1]
 8008c12:	2b2a      	cmp	r3, #42	; 0x2a
 8008c14:	d137      	bne.n	8008c86 <_vfiprintf_r+0x1e2>
 8008c16:	9b07      	ldr	r3, [sp, #28]
 8008c18:	3702      	adds	r7, #2
 8008c1a:	1d1a      	adds	r2, r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	9207      	str	r2, [sp, #28]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db2d      	blt.n	8008c80 <_vfiprintf_r+0x1dc>
 8008c24:	9309      	str	r3, [sp, #36]	; 0x24
 8008c26:	2203      	movs	r2, #3
 8008c28:	7839      	ldrb	r1, [r7, #0]
 8008c2a:	4837      	ldr	r0, [pc, #220]	; (8008d08 <_vfiprintf_r+0x264>)
 8008c2c:	f7ff fa5c 	bl	80080e8 <memchr>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d007      	beq.n	8008c44 <_vfiprintf_r+0x1a0>
 8008c34:	4b34      	ldr	r3, [pc, #208]	; (8008d08 <_vfiprintf_r+0x264>)
 8008c36:	682a      	ldr	r2, [r5, #0]
 8008c38:	1ac0      	subs	r0, r0, r3
 8008c3a:	2340      	movs	r3, #64	; 0x40
 8008c3c:	4083      	lsls	r3, r0
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	3701      	adds	r7, #1
 8008c42:	602b      	str	r3, [r5, #0]
 8008c44:	7839      	ldrb	r1, [r7, #0]
 8008c46:	1c7b      	adds	r3, r7, #1
 8008c48:	2206      	movs	r2, #6
 8008c4a:	4830      	ldr	r0, [pc, #192]	; (8008d0c <_vfiprintf_r+0x268>)
 8008c4c:	9303      	str	r3, [sp, #12]
 8008c4e:	7629      	strb	r1, [r5, #24]
 8008c50:	f7ff fa4a 	bl	80080e8 <memchr>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d045      	beq.n	8008ce4 <_vfiprintf_r+0x240>
 8008c58:	4b2d      	ldr	r3, [pc, #180]	; (8008d10 <_vfiprintf_r+0x26c>)
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d127      	bne.n	8008cae <_vfiprintf_r+0x20a>
 8008c5e:	2207      	movs	r2, #7
 8008c60:	9b07      	ldr	r3, [sp, #28]
 8008c62:	3307      	adds	r3, #7
 8008c64:	4393      	bics	r3, r2
 8008c66:	3308      	adds	r3, #8
 8008c68:	9307      	str	r3, [sp, #28]
 8008c6a:	696b      	ldr	r3, [r5, #20]
 8008c6c:	9a04      	ldr	r2, [sp, #16]
 8008c6e:	189b      	adds	r3, r3, r2
 8008c70:	616b      	str	r3, [r5, #20]
 8008c72:	e75d      	b.n	8008b30 <_vfiprintf_r+0x8c>
 8008c74:	210a      	movs	r1, #10
 8008c76:	434b      	muls	r3, r1
 8008c78:	4667      	mov	r7, ip
 8008c7a:	189b      	adds	r3, r3, r2
 8008c7c:	3909      	subs	r1, #9
 8008c7e:	e7a3      	b.n	8008bc8 <_vfiprintf_r+0x124>
 8008c80:	2301      	movs	r3, #1
 8008c82:	425b      	negs	r3, r3
 8008c84:	e7ce      	b.n	8008c24 <_vfiprintf_r+0x180>
 8008c86:	2300      	movs	r3, #0
 8008c88:	001a      	movs	r2, r3
 8008c8a:	3701      	adds	r7, #1
 8008c8c:	606b      	str	r3, [r5, #4]
 8008c8e:	7839      	ldrb	r1, [r7, #0]
 8008c90:	1c78      	adds	r0, r7, #1
 8008c92:	3930      	subs	r1, #48	; 0x30
 8008c94:	4684      	mov	ip, r0
 8008c96:	2909      	cmp	r1, #9
 8008c98:	d903      	bls.n	8008ca2 <_vfiprintf_r+0x1fe>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0c3      	beq.n	8008c26 <_vfiprintf_r+0x182>
 8008c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8008ca0:	e7c1      	b.n	8008c26 <_vfiprintf_r+0x182>
 8008ca2:	230a      	movs	r3, #10
 8008ca4:	435a      	muls	r2, r3
 8008ca6:	4667      	mov	r7, ip
 8008ca8:	1852      	adds	r2, r2, r1
 8008caa:	3b09      	subs	r3, #9
 8008cac:	e7ef      	b.n	8008c8e <_vfiprintf_r+0x1ea>
 8008cae:	ab07      	add	r3, sp, #28
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	0022      	movs	r2, r4
 8008cb4:	0029      	movs	r1, r5
 8008cb6:	0030      	movs	r0, r6
 8008cb8:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <_vfiprintf_r+0x270>)
 8008cba:	f7fd fbfb 	bl	80064b4 <_printf_float>
 8008cbe:	9004      	str	r0, [sp, #16]
 8008cc0:	9b04      	ldr	r3, [sp, #16]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	d1d1      	bne.n	8008c6a <_vfiprintf_r+0x1c6>
 8008cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc8:	07db      	lsls	r3, r3, #31
 8008cca:	d405      	bmi.n	8008cd8 <_vfiprintf_r+0x234>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	059b      	lsls	r3, r3, #22
 8008cd0:	d402      	bmi.n	8008cd8 <_vfiprintf_r+0x234>
 8008cd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd4:	f7ff f990 	bl	8007ff8 <__retarget_lock_release_recursive>
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	065b      	lsls	r3, r3, #25
 8008cdc:	d500      	bpl.n	8008ce0 <_vfiprintf_r+0x23c>
 8008cde:	e70a      	b.n	8008af6 <_vfiprintf_r+0x52>
 8008ce0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008ce2:	e70a      	b.n	8008afa <_vfiprintf_r+0x56>
 8008ce4:	ab07      	add	r3, sp, #28
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	0022      	movs	r2, r4
 8008cea:	0029      	movs	r1, r5
 8008cec:	0030      	movs	r0, r6
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <_vfiprintf_r+0x270>)
 8008cf0:	f7fd fe92 	bl	8006a18 <_printf_i>
 8008cf4:	e7e3      	b.n	8008cbe <_vfiprintf_r+0x21a>
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	08009434 	.word	0x08009434
 8008cfc:	08009454 	.word	0x08009454
 8008d00:	08009414 	.word	0x08009414
 8008d04:	080095cc 	.word	0x080095cc
 8008d08:	080095d2 	.word	0x080095d2
 8008d0c:	080095d6 	.word	0x080095d6
 8008d10:	080064b5 	.word	0x080064b5
 8008d14:	08008a7f 	.word	0x08008a7f

08008d18 <_sbrk_r>:
 8008d18:	2300      	movs	r3, #0
 8008d1a:	b570      	push	{r4, r5, r6, lr}
 8008d1c:	4d06      	ldr	r5, [pc, #24]	; (8008d38 <_sbrk_r+0x20>)
 8008d1e:	0004      	movs	r4, r0
 8008d20:	0008      	movs	r0, r1
 8008d22:	602b      	str	r3, [r5, #0]
 8008d24:	f7fa fe7c 	bl	8003a20 <_sbrk>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d103      	bne.n	8008d34 <_sbrk_r+0x1c>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d000      	beq.n	8008d34 <_sbrk_r+0x1c>
 8008d32:	6023      	str	r3, [r4, #0]
 8008d34:	bd70      	pop	{r4, r5, r6, pc}
 8008d36:	46c0      	nop			; (mov r8, r8)
 8008d38:	200008c8 	.word	0x200008c8

08008d3c <__sread>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	000c      	movs	r4, r1
 8008d40:	250e      	movs	r5, #14
 8008d42:	5f49      	ldrsh	r1, [r1, r5]
 8008d44:	f000 f8f4 	bl	8008f30 <_read_r>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	db03      	blt.n	8008d54 <__sread+0x18>
 8008d4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008d4e:	181b      	adds	r3, r3, r0
 8008d50:	6563      	str	r3, [r4, #84]	; 0x54
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	4a02      	ldr	r2, [pc, #8]	; (8008d60 <__sread+0x24>)
 8008d58:	4013      	ands	r3, r2
 8008d5a:	81a3      	strh	r3, [r4, #12]
 8008d5c:	e7f9      	b.n	8008d52 <__sread+0x16>
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	ffffefff 	.word	0xffffefff

08008d64 <__swrite>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	001f      	movs	r7, r3
 8008d68:	898b      	ldrh	r3, [r1, #12]
 8008d6a:	0005      	movs	r5, r0
 8008d6c:	000c      	movs	r4, r1
 8008d6e:	0016      	movs	r6, r2
 8008d70:	05db      	lsls	r3, r3, #23
 8008d72:	d505      	bpl.n	8008d80 <__swrite+0x1c>
 8008d74:	230e      	movs	r3, #14
 8008d76:	5ec9      	ldrsh	r1, [r1, r3]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2302      	movs	r3, #2
 8008d7c:	f000 f8a2 	bl	8008ec4 <_lseek_r>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	4a05      	ldr	r2, [pc, #20]	; (8008d98 <__swrite+0x34>)
 8008d84:	0028      	movs	r0, r5
 8008d86:	4013      	ands	r3, r2
 8008d88:	81a3      	strh	r3, [r4, #12]
 8008d8a:	0032      	movs	r2, r6
 8008d8c:	230e      	movs	r3, #14
 8008d8e:	5ee1      	ldrsh	r1, [r4, r3]
 8008d90:	003b      	movs	r3, r7
 8008d92:	f000 f81f 	bl	8008dd4 <_write_r>
 8008d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d98:	ffffefff 	.word	0xffffefff

08008d9c <__sseek>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	000c      	movs	r4, r1
 8008da0:	250e      	movs	r5, #14
 8008da2:	5f49      	ldrsh	r1, [r1, r5]
 8008da4:	f000 f88e 	bl	8008ec4 <_lseek_r>
 8008da8:	89a3      	ldrh	r3, [r4, #12]
 8008daa:	1c42      	adds	r2, r0, #1
 8008dac:	d103      	bne.n	8008db6 <__sseek+0x1a>
 8008dae:	4a05      	ldr	r2, [pc, #20]	; (8008dc4 <__sseek+0x28>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	81a3      	strh	r3, [r4, #12]
 8008db4:	bd70      	pop	{r4, r5, r6, pc}
 8008db6:	2280      	movs	r2, #128	; 0x80
 8008db8:	0152      	lsls	r2, r2, #5
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	6560      	str	r0, [r4, #84]	; 0x54
 8008dc0:	e7f8      	b.n	8008db4 <__sseek+0x18>
 8008dc2:	46c0      	nop			; (mov r8, r8)
 8008dc4:	ffffefff 	.word	0xffffefff

08008dc8 <__sclose>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	230e      	movs	r3, #14
 8008dcc:	5ec9      	ldrsh	r1, [r1, r3]
 8008dce:	f000 f833 	bl	8008e38 <_close_r>
 8008dd2:	bd10      	pop	{r4, pc}

08008dd4 <_write_r>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	0004      	movs	r4, r0
 8008dd8:	0008      	movs	r0, r1
 8008dda:	0011      	movs	r1, r2
 8008ddc:	001a      	movs	r2, r3
 8008dde:	2300      	movs	r3, #0
 8008de0:	4d05      	ldr	r5, [pc, #20]	; (8008df8 <_write_r+0x24>)
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7fa fe02 	bl	80039ec <_write>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d103      	bne.n	8008df4 <_write_r+0x20>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d000      	beq.n	8008df4 <_write_r+0x20>
 8008df2:	6023      	str	r3, [r4, #0]
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	46c0      	nop			; (mov r8, r8)
 8008df8:	200008c8 	.word	0x200008c8

08008dfc <__assert_func>:
 8008dfc:	b530      	push	{r4, r5, lr}
 8008dfe:	0014      	movs	r4, r2
 8008e00:	001a      	movs	r2, r3
 8008e02:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <__assert_func+0x2c>)
 8008e04:	0005      	movs	r5, r0
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	b085      	sub	sp, #20
 8008e0a:	68d8      	ldr	r0, [r3, #12]
 8008e0c:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <__assert_func+0x30>)
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	d101      	bne.n	8008e16 <__assert_func+0x1a>
 8008e12:	4b07      	ldr	r3, [pc, #28]	; (8008e30 <__assert_func+0x34>)
 8008e14:	001c      	movs	r4, r3
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	9100      	str	r1, [sp, #0]
 8008e1a:	002b      	movs	r3, r5
 8008e1c:	4905      	ldr	r1, [pc, #20]	; (8008e34 <__assert_func+0x38>)
 8008e1e:	9402      	str	r4, [sp, #8]
 8008e20:	f000 f81c 	bl	8008e5c <fiprintf>
 8008e24:	f000 f8a5 	bl	8008f72 <abort>
 8008e28:	20000024 	.word	0x20000024
 8008e2c:	080095dd 	.word	0x080095dd
 8008e30:	08009618 	.word	0x08009618
 8008e34:	080095ea 	.word	0x080095ea

08008e38 <_close_r>:
 8008e38:	2300      	movs	r3, #0
 8008e3a:	b570      	push	{r4, r5, r6, lr}
 8008e3c:	4d06      	ldr	r5, [pc, #24]	; (8008e58 <_close_r+0x20>)
 8008e3e:	0004      	movs	r4, r0
 8008e40:	0008      	movs	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7fa fde0 	bl	8003a08 <_close>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d103      	bne.n	8008e54 <_close_r+0x1c>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d000      	beq.n	8008e54 <_close_r+0x1c>
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	bd70      	pop	{r4, r5, r6, pc}
 8008e56:	46c0      	nop			; (mov r8, r8)
 8008e58:	200008c8 	.word	0x200008c8

08008e5c <fiprintf>:
 8008e5c:	b40e      	push	{r1, r2, r3}
 8008e5e:	b503      	push	{r0, r1, lr}
 8008e60:	0001      	movs	r1, r0
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	4804      	ldr	r0, [pc, #16]	; (8008e78 <fiprintf+0x1c>)
 8008e66:	cb04      	ldmia	r3!, {r2}
 8008e68:	6800      	ldr	r0, [r0, #0]
 8008e6a:	9301      	str	r3, [sp, #4]
 8008e6c:	f7ff fe1a 	bl	8008aa4 <_vfiprintf_r>
 8008e70:	b002      	add	sp, #8
 8008e72:	bc08      	pop	{r3}
 8008e74:	b003      	add	sp, #12
 8008e76:	4718      	bx	r3
 8008e78:	20000024 	.word	0x20000024

08008e7c <_fstat_r>:
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	b570      	push	{r4, r5, r6, lr}
 8008e80:	4d06      	ldr	r5, [pc, #24]	; (8008e9c <_fstat_r+0x20>)
 8008e82:	0004      	movs	r4, r0
 8008e84:	0008      	movs	r0, r1
 8008e86:	0011      	movs	r1, r2
 8008e88:	602b      	str	r3, [r5, #0]
 8008e8a:	f7fa fdc0 	bl	8003a0e <_fstat>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d103      	bne.n	8008e9a <_fstat_r+0x1e>
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d000      	beq.n	8008e9a <_fstat_r+0x1e>
 8008e98:	6023      	str	r3, [r4, #0]
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	200008c8 	.word	0x200008c8

08008ea0 <_isatty_r>:
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	b570      	push	{r4, r5, r6, lr}
 8008ea4:	4d06      	ldr	r5, [pc, #24]	; (8008ec0 <_isatty_r+0x20>)
 8008ea6:	0004      	movs	r4, r0
 8008ea8:	0008      	movs	r0, r1
 8008eaa:	602b      	str	r3, [r5, #0]
 8008eac:	f7fa fdb4 	bl	8003a18 <_isatty>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d103      	bne.n	8008ebc <_isatty_r+0x1c>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d000      	beq.n	8008ebc <_isatty_r+0x1c>
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	bd70      	pop	{r4, r5, r6, pc}
 8008ebe:	46c0      	nop			; (mov r8, r8)
 8008ec0:	200008c8 	.word	0x200008c8

08008ec4 <_lseek_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	0004      	movs	r4, r0
 8008ec8:	0008      	movs	r0, r1
 8008eca:	0011      	movs	r1, r2
 8008ecc:	001a      	movs	r2, r3
 8008ece:	2300      	movs	r3, #0
 8008ed0:	4d05      	ldr	r5, [pc, #20]	; (8008ee8 <_lseek_r+0x24>)
 8008ed2:	602b      	str	r3, [r5, #0]
 8008ed4:	f7fa fda2 	bl	8003a1c <_lseek>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d103      	bne.n	8008ee4 <_lseek_r+0x20>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d000      	beq.n	8008ee4 <_lseek_r+0x20>
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	200008c8 	.word	0x200008c8

08008eec <__ascii_mbtowc>:
 8008eec:	b082      	sub	sp, #8
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d100      	bne.n	8008ef4 <__ascii_mbtowc+0x8>
 8008ef2:	a901      	add	r1, sp, #4
 8008ef4:	1e10      	subs	r0, r2, #0
 8008ef6:	d006      	beq.n	8008f06 <__ascii_mbtowc+0x1a>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <__ascii_mbtowc+0x1e>
 8008efc:	7813      	ldrb	r3, [r2, #0]
 8008efe:	600b      	str	r3, [r1, #0]
 8008f00:	7810      	ldrb	r0, [r2, #0]
 8008f02:	1e43      	subs	r3, r0, #1
 8008f04:	4198      	sbcs	r0, r3
 8008f06:	b002      	add	sp, #8
 8008f08:	4770      	bx	lr
 8008f0a:	2002      	movs	r0, #2
 8008f0c:	4240      	negs	r0, r0
 8008f0e:	e7fa      	b.n	8008f06 <__ascii_mbtowc+0x1a>

08008f10 <__malloc_lock>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	4802      	ldr	r0, [pc, #8]	; (8008f1c <__malloc_lock+0xc>)
 8008f14:	f7ff f86f 	bl	8007ff6 <__retarget_lock_acquire_recursive>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	200008bc 	.word	0x200008bc

08008f20 <__malloc_unlock>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	4802      	ldr	r0, [pc, #8]	; (8008f2c <__malloc_unlock+0xc>)
 8008f24:	f7ff f868 	bl	8007ff8 <__retarget_lock_release_recursive>
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	200008bc 	.word	0x200008bc

08008f30 <_read_r>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	0004      	movs	r4, r0
 8008f34:	0008      	movs	r0, r1
 8008f36:	0011      	movs	r1, r2
 8008f38:	001a      	movs	r2, r3
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4d05      	ldr	r5, [pc, #20]	; (8008f54 <_read_r+0x24>)
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7fa fd46 	bl	80039d0 <_read>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d103      	bne.n	8008f50 <_read_r+0x20>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d000      	beq.n	8008f50 <_read_r+0x20>
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	bd70      	pop	{r4, r5, r6, pc}
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	200008c8 	.word	0x200008c8

08008f58 <__ascii_wctomb>:
 8008f58:	0003      	movs	r3, r0
 8008f5a:	1e08      	subs	r0, r1, #0
 8008f5c:	d005      	beq.n	8008f6a <__ascii_wctomb+0x12>
 8008f5e:	2aff      	cmp	r2, #255	; 0xff
 8008f60:	d904      	bls.n	8008f6c <__ascii_wctomb+0x14>
 8008f62:	228a      	movs	r2, #138	; 0x8a
 8008f64:	2001      	movs	r0, #1
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	4240      	negs	r0, r0
 8008f6a:	4770      	bx	lr
 8008f6c:	2001      	movs	r0, #1
 8008f6e:	700a      	strb	r2, [r1, #0]
 8008f70:	e7fb      	b.n	8008f6a <__ascii_wctomb+0x12>

08008f72 <abort>:
 8008f72:	2006      	movs	r0, #6
 8008f74:	b510      	push	{r4, lr}
 8008f76:	f000 f82d 	bl	8008fd4 <raise>
 8008f7a:	2001      	movs	r0, #1
 8008f7c:	f7fa fd22 	bl	80039c4 <_exit>

08008f80 <_raise_r>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	0004      	movs	r4, r0
 8008f84:	000d      	movs	r5, r1
 8008f86:	291f      	cmp	r1, #31
 8008f88:	d904      	bls.n	8008f94 <_raise_r+0x14>
 8008f8a:	2316      	movs	r3, #22
 8008f8c:	6003      	str	r3, [r0, #0]
 8008f8e:	2001      	movs	r0, #1
 8008f90:	4240      	negs	r0, r0
 8008f92:	bd70      	pop	{r4, r5, r6, pc}
 8008f94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <_raise_r+0x24>
 8008f9a:	008a      	lsls	r2, r1, #2
 8008f9c:	189b      	adds	r3, r3, r2
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	2a00      	cmp	r2, #0
 8008fa2:	d108      	bne.n	8008fb6 <_raise_r+0x36>
 8008fa4:	0020      	movs	r0, r4
 8008fa6:	f000 f831 	bl	800900c <_getpid_r>
 8008faa:	002a      	movs	r2, r5
 8008fac:	0001      	movs	r1, r0
 8008fae:	0020      	movs	r0, r4
 8008fb0:	f000 f81a 	bl	8008fe8 <_kill_r>
 8008fb4:	e7ed      	b.n	8008f92 <_raise_r+0x12>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	2a01      	cmp	r2, #1
 8008fba:	d0ea      	beq.n	8008f92 <_raise_r+0x12>
 8008fbc:	1c51      	adds	r1, r2, #1
 8008fbe:	d103      	bne.n	8008fc8 <_raise_r+0x48>
 8008fc0:	2316      	movs	r3, #22
 8008fc2:	3001      	adds	r0, #1
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	e7e4      	b.n	8008f92 <_raise_r+0x12>
 8008fc8:	2400      	movs	r4, #0
 8008fca:	0028      	movs	r0, r5
 8008fcc:	601c      	str	r4, [r3, #0]
 8008fce:	4790      	blx	r2
 8008fd0:	0020      	movs	r0, r4
 8008fd2:	e7de      	b.n	8008f92 <_raise_r+0x12>

08008fd4 <raise>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	4b03      	ldr	r3, [pc, #12]	; (8008fe4 <raise+0x10>)
 8008fd8:	0001      	movs	r1, r0
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	f7ff ffd0 	bl	8008f80 <_raise_r>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	46c0      	nop			; (mov r8, r8)
 8008fe4:	20000024 	.word	0x20000024

08008fe8 <_kill_r>:
 8008fe8:	2300      	movs	r3, #0
 8008fea:	b570      	push	{r4, r5, r6, lr}
 8008fec:	4d06      	ldr	r5, [pc, #24]	; (8009008 <_kill_r+0x20>)
 8008fee:	0004      	movs	r4, r0
 8008ff0:	0008      	movs	r0, r1
 8008ff2:	0011      	movs	r1, r2
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	f7fa fcdd 	bl	80039b4 <_kill>
 8008ffa:	1c43      	adds	r3, r0, #1
 8008ffc:	d103      	bne.n	8009006 <_kill_r+0x1e>
 8008ffe:	682b      	ldr	r3, [r5, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d000      	beq.n	8009006 <_kill_r+0x1e>
 8009004:	6023      	str	r3, [r4, #0]
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	200008c8 	.word	0x200008c8

0800900c <_getpid_r>:
 800900c:	b510      	push	{r4, lr}
 800900e:	f7fa fccf 	bl	80039b0 <_getpid>
 8009012:	bd10      	pop	{r4, pc}

08009014 <_init>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901a:	bc08      	pop	{r3}
 800901c:	469e      	mov	lr, r3
 800901e:	4770      	bx	lr

08009020 <_fini>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009026:	bc08      	pop	{r3}
 8009028:	469e      	mov	lr, r3
 800902a:	4770      	bx	lr
