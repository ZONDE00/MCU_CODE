
MCU_CODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d718  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d34  0800d7d8  0800d7d8  0001d7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e50c  0800e50c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e50c  0800e50c  0001e50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e514  0800e514  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e514  0800e514  0001e514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e518  0800e518  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800e51c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f7c  200001f4  0800e710  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001170  0800e710  00021170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b51  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004732  00000000  00000000  00049d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001d8b8  00000000  00000000  0004e49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  0006bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  0006d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eb43  00000000  00000000  0006ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029ef0  00000000  00000000  0008d8ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b487b  00000000  00000000  000b779b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016c016  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055ec  00000000  00000000  0016c068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001f4 	.word	0x200001f4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d7bc 	.word	0x0800d7bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f8 	.word	0x200001f8
 8000100:	0800d7bc 	.word	0x0800d7bc

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fea1 	bl	8002194 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fdf1 	bl	8002044 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe93 	bl	8002194 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fe89 	bl	8002194 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fe19 	bl	80020c8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fe0f 	bl	80020c8 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_ldivmod>:
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d115      	bne.n	80004e8 <__aeabi_ldivmod+0x30>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	d113      	bne.n	80004e8 <__aeabi_ldivmod+0x30>
 80004c0:	2900      	cmp	r1, #0
 80004c2:	db06      	blt.n	80004d2 <__aeabi_ldivmod+0x1a>
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_ldivmod+0x12>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d006      	beq.n	80004d8 <__aeabi_ldivmod+0x20>
 80004ca:	2000      	movs	r0, #0
 80004cc:	43c0      	mvns	r0, r0
 80004ce:	0841      	lsrs	r1, r0, #1
 80004d0:	e002      	b.n	80004d8 <__aeabi_ldivmod+0x20>
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	0609      	lsls	r1, r1, #24
 80004d6:	2000      	movs	r0, #0
 80004d8:	b407      	push	{r0, r1, r2}
 80004da:	4802      	ldr	r0, [pc, #8]	; (80004e4 <__aeabi_ldivmod+0x2c>)
 80004dc:	a101      	add	r1, pc, #4	; (adr r1, 80004e4 <__aeabi_ldivmod+0x2c>)
 80004de:	1840      	adds	r0, r0, r1
 80004e0:	9002      	str	r0, [sp, #8]
 80004e2:	bd03      	pop	{r0, r1, pc}
 80004e4:	ffffff55 	.word	0xffffff55
 80004e8:	b403      	push	{r0, r1}
 80004ea:	4668      	mov	r0, sp
 80004ec:	b501      	push	{r0, lr}
 80004ee:	9802      	ldr	r0, [sp, #8]
 80004f0:	f000 f93e 	bl	8000770 <__gnu_ldivmod_helper>
 80004f4:	9b01      	ldr	r3, [sp, #4]
 80004f6:	469e      	mov	lr, r3
 80004f8:	b002      	add	sp, #8
 80004fa:	bc0c      	pop	{r2, r3}
 80004fc:	4770      	bx	lr
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_uldivmod>:
 8000500:	2b00      	cmp	r3, #0
 8000502:	d111      	bne.n	8000528 <__aeabi_uldivmod+0x28>
 8000504:	2a00      	cmp	r2, #0
 8000506:	d10f      	bne.n	8000528 <__aeabi_uldivmod+0x28>
 8000508:	2900      	cmp	r1, #0
 800050a:	d100      	bne.n	800050e <__aeabi_uldivmod+0xe>
 800050c:	2800      	cmp	r0, #0
 800050e:	d002      	beq.n	8000516 <__aeabi_uldivmod+0x16>
 8000510:	2100      	movs	r1, #0
 8000512:	43c9      	mvns	r1, r1
 8000514:	0008      	movs	r0, r1
 8000516:	b407      	push	{r0, r1, r2}
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <__aeabi_uldivmod+0x24>)
 800051a:	a102      	add	r1, pc, #8	; (adr r1, 8000524 <__aeabi_uldivmod+0x24>)
 800051c:	1840      	adds	r0, r0, r1
 800051e:	9002      	str	r0, [sp, #8]
 8000520:	bd03      	pop	{r0, r1, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	ffffff15 	.word	0xffffff15
 8000528:	b403      	push	{r0, r1}
 800052a:	4668      	mov	r0, sp
 800052c:	b501      	push	{r0, lr}
 800052e:	9802      	ldr	r0, [sp, #8]
 8000530:	f000 f852 	bl	80005d8 <__udivmoddi4>
 8000534:	9b01      	ldr	r3, [sp, #4]
 8000536:	469e      	mov	lr, r3
 8000538:	b002      	add	sp, #8
 800053a:	bc0c      	pop	{r2, r3}
 800053c:	4770      	bx	lr
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_lmul>:
 8000540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000542:	46ce      	mov	lr, r9
 8000544:	4647      	mov	r7, r8
 8000546:	b580      	push	{r7, lr}
 8000548:	0007      	movs	r7, r0
 800054a:	4699      	mov	r9, r3
 800054c:	0c3b      	lsrs	r3, r7, #16
 800054e:	469c      	mov	ip, r3
 8000550:	0413      	lsls	r3, r2, #16
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	001d      	movs	r5, r3
 8000556:	000e      	movs	r6, r1
 8000558:	4661      	mov	r1, ip
 800055a:	0400      	lsls	r0, r0, #16
 800055c:	0c14      	lsrs	r4, r2, #16
 800055e:	0c00      	lsrs	r0, r0, #16
 8000560:	4345      	muls	r5, r0
 8000562:	434b      	muls	r3, r1
 8000564:	4360      	muls	r0, r4
 8000566:	4361      	muls	r1, r4
 8000568:	18c0      	adds	r0, r0, r3
 800056a:	0c2c      	lsrs	r4, r5, #16
 800056c:	1820      	adds	r0, r4, r0
 800056e:	468c      	mov	ip, r1
 8000570:	4283      	cmp	r3, r0
 8000572:	d903      	bls.n	800057c <__aeabi_lmul+0x3c>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	025b      	lsls	r3, r3, #9
 8000578:	4698      	mov	r8, r3
 800057a:	44c4      	add	ip, r8
 800057c:	4649      	mov	r1, r9
 800057e:	4379      	muls	r1, r7
 8000580:	4372      	muls	r2, r6
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	4463      	add	r3, ip
 8000586:	042d      	lsls	r5, r5, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	18c9      	adds	r1, r1, r3
 800058c:	0400      	lsls	r0, r0, #16
 800058e:	1940      	adds	r0, r0, r5
 8000590:	1889      	adds	r1, r1, r2
 8000592:	bcc0      	pop	{r6, r7}
 8000594:	46b9      	mov	r9, r7
 8000596:	46b0      	mov	r8, r6
 8000598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)

0800059c <__aeabi_d2uiz>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2200      	movs	r2, #0
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005a2:	0004      	movs	r4, r0
 80005a4:	000d      	movs	r5, r1
 80005a6:	f7ff ff7d 	bl	80004a4 <__aeabi_dcmpge>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	d104      	bne.n	80005b8 <__aeabi_d2uiz+0x1c>
 80005ae:	0020      	movs	r0, r4
 80005b0:	0029      	movs	r1, r5
 80005b2:	f002 fc6f 	bl	8002e94 <__aeabi_d2iz>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <__aeabi_d2uiz+0x38>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	0020      	movs	r0, r4
 80005be:	0029      	movs	r1, r5
 80005c0:	f002 f8b8 	bl	8002734 <__aeabi_dsub>
 80005c4:	f002 fc66 	bl	8002e94 <__aeabi_d2iz>
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	061b      	lsls	r3, r3, #24
 80005cc:	469c      	mov	ip, r3
 80005ce:	4460      	add	r0, ip
 80005d0:	e7f1      	b.n	80005b6 <__aeabi_d2uiz+0x1a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	41e00000 	.word	0x41e00000

080005d8 <__udivmoddi4>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	4657      	mov	r7, sl
 80005dc:	464e      	mov	r6, r9
 80005de:	4645      	mov	r5, r8
 80005e0:	46de      	mov	lr, fp
 80005e2:	b5e0      	push	{r5, r6, r7, lr}
 80005e4:	0004      	movs	r4, r0
 80005e6:	000d      	movs	r5, r1
 80005e8:	4692      	mov	sl, r2
 80005ea:	4699      	mov	r9, r3
 80005ec:	b083      	sub	sp, #12
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d830      	bhi.n	8000654 <__udivmoddi4+0x7c>
 80005f2:	d02d      	beq.n	8000650 <__udivmoddi4+0x78>
 80005f4:	4649      	mov	r1, r9
 80005f6:	4650      	mov	r0, sl
 80005f8:	f002 fdc6 	bl	8003188 <__clzdi2>
 80005fc:	0029      	movs	r1, r5
 80005fe:	0006      	movs	r6, r0
 8000600:	0020      	movs	r0, r4
 8000602:	f002 fdc1 	bl	8003188 <__clzdi2>
 8000606:	1a33      	subs	r3, r6, r0
 8000608:	4698      	mov	r8, r3
 800060a:	3b20      	subs	r3, #32
 800060c:	469b      	mov	fp, r3
 800060e:	d433      	bmi.n	8000678 <__udivmoddi4+0xa0>
 8000610:	465a      	mov	r2, fp
 8000612:	4653      	mov	r3, sl
 8000614:	4093      	lsls	r3, r2
 8000616:	4642      	mov	r2, r8
 8000618:	001f      	movs	r7, r3
 800061a:	4653      	mov	r3, sl
 800061c:	4093      	lsls	r3, r2
 800061e:	001e      	movs	r6, r3
 8000620:	42af      	cmp	r7, r5
 8000622:	d83a      	bhi.n	800069a <__udivmoddi4+0xc2>
 8000624:	42af      	cmp	r7, r5
 8000626:	d100      	bne.n	800062a <__udivmoddi4+0x52>
 8000628:	e078      	b.n	800071c <__udivmoddi4+0x144>
 800062a:	465b      	mov	r3, fp
 800062c:	1ba4      	subs	r4, r4, r6
 800062e:	41bd      	sbcs	r5, r7
 8000630:	2b00      	cmp	r3, #0
 8000632:	da00      	bge.n	8000636 <__udivmoddi4+0x5e>
 8000634:	e075      	b.n	8000722 <__udivmoddi4+0x14a>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2301      	movs	r3, #1
 8000640:	465a      	mov	r2, fp
 8000642:	4093      	lsls	r3, r2
 8000644:	9301      	str	r3, [sp, #4]
 8000646:	2301      	movs	r3, #1
 8000648:	4642      	mov	r2, r8
 800064a:	4093      	lsls	r3, r2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	e028      	b.n	80006a2 <__udivmoddi4+0xca>
 8000650:	4282      	cmp	r2, r0
 8000652:	d9cf      	bls.n	80005f4 <__udivmoddi4+0x1c>
 8000654:	2200      	movs	r2, #0
 8000656:	2300      	movs	r3, #0
 8000658:	9200      	str	r2, [sp, #0]
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <__udivmoddi4+0x8e>
 8000662:	601c      	str	r4, [r3, #0]
 8000664:	605d      	str	r5, [r3, #4]
 8000666:	9800      	ldr	r0, [sp, #0]
 8000668:	9901      	ldr	r1, [sp, #4]
 800066a:	b003      	add	sp, #12
 800066c:	bcf0      	pop	{r4, r5, r6, r7}
 800066e:	46bb      	mov	fp, r7
 8000670:	46b2      	mov	sl, r6
 8000672:	46a9      	mov	r9, r5
 8000674:	46a0      	mov	r8, r4
 8000676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000678:	4642      	mov	r2, r8
 800067a:	2320      	movs	r3, #32
 800067c:	1a9b      	subs	r3, r3, r2
 800067e:	4652      	mov	r2, sl
 8000680:	40da      	lsrs	r2, r3
 8000682:	4641      	mov	r1, r8
 8000684:	0013      	movs	r3, r2
 8000686:	464a      	mov	r2, r9
 8000688:	408a      	lsls	r2, r1
 800068a:	0017      	movs	r7, r2
 800068c:	4642      	mov	r2, r8
 800068e:	431f      	orrs	r7, r3
 8000690:	4653      	mov	r3, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	001e      	movs	r6, r3
 8000696:	42af      	cmp	r7, r5
 8000698:	d9c4      	bls.n	8000624 <__udivmoddi4+0x4c>
 800069a:	2200      	movs	r2, #0
 800069c:	2300      	movs	r3, #0
 800069e:	9200      	str	r2, [sp, #0]
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	4643      	mov	r3, r8
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d0d9      	beq.n	800065c <__udivmoddi4+0x84>
 80006a8:	07fb      	lsls	r3, r7, #31
 80006aa:	0872      	lsrs	r2, r6, #1
 80006ac:	431a      	orrs	r2, r3
 80006ae:	4646      	mov	r6, r8
 80006b0:	087b      	lsrs	r3, r7, #1
 80006b2:	e00e      	b.n	80006d2 <__udivmoddi4+0xfa>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d101      	bne.n	80006bc <__udivmoddi4+0xe4>
 80006b8:	42a2      	cmp	r2, r4
 80006ba:	d80c      	bhi.n	80006d6 <__udivmoddi4+0xfe>
 80006bc:	1aa4      	subs	r4, r4, r2
 80006be:	419d      	sbcs	r5, r3
 80006c0:	2001      	movs	r0, #1
 80006c2:	1924      	adds	r4, r4, r4
 80006c4:	416d      	adcs	r5, r5
 80006c6:	2100      	movs	r1, #0
 80006c8:	3e01      	subs	r6, #1
 80006ca:	1824      	adds	r4, r4, r0
 80006cc:	414d      	adcs	r5, r1
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d006      	beq.n	80006e0 <__udivmoddi4+0x108>
 80006d2:	42ab      	cmp	r3, r5
 80006d4:	d9ee      	bls.n	80006b4 <__udivmoddi4+0xdc>
 80006d6:	3e01      	subs	r6, #1
 80006d8:	1924      	adds	r4, r4, r4
 80006da:	416d      	adcs	r5, r5
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d1f8      	bne.n	80006d2 <__udivmoddi4+0xfa>
 80006e0:	9800      	ldr	r0, [sp, #0]
 80006e2:	9901      	ldr	r1, [sp, #4]
 80006e4:	465b      	mov	r3, fp
 80006e6:	1900      	adds	r0, r0, r4
 80006e8:	4169      	adcs	r1, r5
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db24      	blt.n	8000738 <__udivmoddi4+0x160>
 80006ee:	002b      	movs	r3, r5
 80006f0:	465a      	mov	r2, fp
 80006f2:	4644      	mov	r4, r8
 80006f4:	40d3      	lsrs	r3, r2
 80006f6:	002a      	movs	r2, r5
 80006f8:	40e2      	lsrs	r2, r4
 80006fa:	001c      	movs	r4, r3
 80006fc:	465b      	mov	r3, fp
 80006fe:	0015      	movs	r5, r2
 8000700:	2b00      	cmp	r3, #0
 8000702:	db2a      	blt.n	800075a <__udivmoddi4+0x182>
 8000704:	0026      	movs	r6, r4
 8000706:	409e      	lsls	r6, r3
 8000708:	0033      	movs	r3, r6
 800070a:	0026      	movs	r6, r4
 800070c:	4647      	mov	r7, r8
 800070e:	40be      	lsls	r6, r7
 8000710:	0032      	movs	r2, r6
 8000712:	1a80      	subs	r0, r0, r2
 8000714:	4199      	sbcs	r1, r3
 8000716:	9000      	str	r0, [sp, #0]
 8000718:	9101      	str	r1, [sp, #4]
 800071a:	e79f      	b.n	800065c <__udivmoddi4+0x84>
 800071c:	42a3      	cmp	r3, r4
 800071e:	d8bc      	bhi.n	800069a <__udivmoddi4+0xc2>
 8000720:	e783      	b.n	800062a <__udivmoddi4+0x52>
 8000722:	4642      	mov	r2, r8
 8000724:	2320      	movs	r3, #32
 8000726:	2100      	movs	r1, #0
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	2200      	movs	r2, #0
 800072c:	9100      	str	r1, [sp, #0]
 800072e:	9201      	str	r2, [sp, #4]
 8000730:	2201      	movs	r2, #1
 8000732:	40da      	lsrs	r2, r3
 8000734:	9201      	str	r2, [sp, #4]
 8000736:	e786      	b.n	8000646 <__udivmoddi4+0x6e>
 8000738:	4642      	mov	r2, r8
 800073a:	2320      	movs	r3, #32
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	002a      	movs	r2, r5
 8000740:	4646      	mov	r6, r8
 8000742:	409a      	lsls	r2, r3
 8000744:	0023      	movs	r3, r4
 8000746:	40f3      	lsrs	r3, r6
 8000748:	4644      	mov	r4, r8
 800074a:	4313      	orrs	r3, r2
 800074c:	002a      	movs	r2, r5
 800074e:	40e2      	lsrs	r2, r4
 8000750:	001c      	movs	r4, r3
 8000752:	465b      	mov	r3, fp
 8000754:	0015      	movs	r5, r2
 8000756:	2b00      	cmp	r3, #0
 8000758:	dad4      	bge.n	8000704 <__udivmoddi4+0x12c>
 800075a:	4642      	mov	r2, r8
 800075c:	002f      	movs	r7, r5
 800075e:	2320      	movs	r3, #32
 8000760:	0026      	movs	r6, r4
 8000762:	4097      	lsls	r7, r2
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	40de      	lsrs	r6, r3
 8000768:	003b      	movs	r3, r7
 800076a:	4333      	orrs	r3, r6
 800076c:	e7cd      	b.n	800070a <__udivmoddi4+0x132>
 800076e:	46c0      	nop			; (mov r8, r8)

08000770 <__gnu_ldivmod_helper>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	46ce      	mov	lr, r9
 8000774:	4647      	mov	r7, r8
 8000776:	b580      	push	{r7, lr}
 8000778:	4691      	mov	r9, r2
 800077a:	4698      	mov	r8, r3
 800077c:	0004      	movs	r4, r0
 800077e:	000d      	movs	r5, r1
 8000780:	f002 fd0e 	bl	80031a0 <__divdi3>
 8000784:	0007      	movs	r7, r0
 8000786:	000e      	movs	r6, r1
 8000788:	0002      	movs	r2, r0
 800078a:	000b      	movs	r3, r1
 800078c:	4648      	mov	r0, r9
 800078e:	4641      	mov	r1, r8
 8000790:	f7ff fed6 	bl	8000540 <__aeabi_lmul>
 8000794:	1a24      	subs	r4, r4, r0
 8000796:	418d      	sbcs	r5, r1
 8000798:	9b08      	ldr	r3, [sp, #32]
 800079a:	0038      	movs	r0, r7
 800079c:	0031      	movs	r1, r6
 800079e:	601c      	str	r4, [r3, #0]
 80007a0:	605d      	str	r5, [r3, #4]
 80007a2:	bcc0      	pop	{r6, r7}
 80007a4:	46b9      	mov	r9, r7
 80007a6:	46b0      	mov	r8, r6
 80007a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)

080007ac <__aeabi_fadd>:
 80007ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ae:	46c6      	mov	lr, r8
 80007b0:	0243      	lsls	r3, r0, #9
 80007b2:	0a5b      	lsrs	r3, r3, #9
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	0045      	lsls	r5, r0, #1
 80007b8:	004f      	lsls	r7, r1, #1
 80007ba:	00da      	lsls	r2, r3, #3
 80007bc:	0fc4      	lsrs	r4, r0, #31
 80007be:	469c      	mov	ip, r3
 80007c0:	0a70      	lsrs	r0, r6, #9
 80007c2:	4690      	mov	r8, r2
 80007c4:	b500      	push	{lr}
 80007c6:	0e2d      	lsrs	r5, r5, #24
 80007c8:	0e3f      	lsrs	r7, r7, #24
 80007ca:	0fc9      	lsrs	r1, r1, #31
 80007cc:	09b6      	lsrs	r6, r6, #6
 80007ce:	428c      	cmp	r4, r1
 80007d0:	d04b      	beq.n	800086a <__aeabi_fadd+0xbe>
 80007d2:	1bea      	subs	r2, r5, r7
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	dd36      	ble.n	8000846 <__aeabi_fadd+0x9a>
 80007d8:	2f00      	cmp	r7, #0
 80007da:	d061      	beq.n	80008a0 <__aeabi_fadd+0xf4>
 80007dc:	2dff      	cmp	r5, #255	; 0xff
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x36>
 80007e0:	e0ad      	b.n	800093e <__aeabi_fadd+0x192>
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	04db      	lsls	r3, r3, #19
 80007e6:	431e      	orrs	r6, r3
 80007e8:	2a1b      	cmp	r2, #27
 80007ea:	dc00      	bgt.n	80007ee <__aeabi_fadd+0x42>
 80007ec:	e0d3      	b.n	8000996 <__aeabi_fadd+0x1ea>
 80007ee:	2001      	movs	r0, #1
 80007f0:	4643      	mov	r3, r8
 80007f2:	1a18      	subs	r0, r3, r0
 80007f4:	0143      	lsls	r3, r0, #5
 80007f6:	d400      	bmi.n	80007fa <__aeabi_fadd+0x4e>
 80007f8:	e08c      	b.n	8000914 <__aeabi_fadd+0x168>
 80007fa:	0180      	lsls	r0, r0, #6
 80007fc:	0987      	lsrs	r7, r0, #6
 80007fe:	0038      	movs	r0, r7
 8000800:	f002 fca4 	bl	800314c <__clzsi2>
 8000804:	3805      	subs	r0, #5
 8000806:	4087      	lsls	r7, r0
 8000808:	4285      	cmp	r5, r0
 800080a:	dc00      	bgt.n	800080e <__aeabi_fadd+0x62>
 800080c:	e0b6      	b.n	800097c <__aeabi_fadd+0x1d0>
 800080e:	1a2d      	subs	r5, r5, r0
 8000810:	48b3      	ldr	r0, [pc, #716]	; (8000ae0 <__aeabi_fadd+0x334>)
 8000812:	4038      	ands	r0, r7
 8000814:	0743      	lsls	r3, r0, #29
 8000816:	d004      	beq.n	8000822 <__aeabi_fadd+0x76>
 8000818:	230f      	movs	r3, #15
 800081a:	4003      	ands	r3, r0
 800081c:	2b04      	cmp	r3, #4
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0x76>
 8000820:	3004      	adds	r0, #4
 8000822:	0143      	lsls	r3, r0, #5
 8000824:	d400      	bmi.n	8000828 <__aeabi_fadd+0x7c>
 8000826:	e078      	b.n	800091a <__aeabi_fadd+0x16e>
 8000828:	1c6a      	adds	r2, r5, #1
 800082a:	2dfe      	cmp	r5, #254	; 0xfe
 800082c:	d065      	beq.n	80008fa <__aeabi_fadd+0x14e>
 800082e:	0180      	lsls	r0, r0, #6
 8000830:	0a43      	lsrs	r3, r0, #9
 8000832:	469c      	mov	ip, r3
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	4663      	mov	r3, ip
 8000838:	05d0      	lsls	r0, r2, #23
 800083a:	4318      	orrs	r0, r3
 800083c:	07e4      	lsls	r4, r4, #31
 800083e:	4320      	orrs	r0, r4
 8000840:	bc80      	pop	{r7}
 8000842:	46b8      	mov	r8, r7
 8000844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000846:	2a00      	cmp	r2, #0
 8000848:	d035      	beq.n	80008b6 <__aeabi_fadd+0x10a>
 800084a:	1b7a      	subs	r2, r7, r5
 800084c:	2d00      	cmp	r5, #0
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0xa6>
 8000850:	e0af      	b.n	80009b2 <__aeabi_fadd+0x206>
 8000852:	4643      	mov	r3, r8
 8000854:	2b00      	cmp	r3, #0
 8000856:	d100      	bne.n	800085a <__aeabi_fadd+0xae>
 8000858:	e0a7      	b.n	80009aa <__aeabi_fadd+0x1fe>
 800085a:	1e53      	subs	r3, r2, #1
 800085c:	2a01      	cmp	r2, #1
 800085e:	d100      	bne.n	8000862 <__aeabi_fadd+0xb6>
 8000860:	e12f      	b.n	8000ac2 <__aeabi_fadd+0x316>
 8000862:	2aff      	cmp	r2, #255	; 0xff
 8000864:	d069      	beq.n	800093a <__aeabi_fadd+0x18e>
 8000866:	001a      	movs	r2, r3
 8000868:	e0aa      	b.n	80009c0 <__aeabi_fadd+0x214>
 800086a:	1be9      	subs	r1, r5, r7
 800086c:	2900      	cmp	r1, #0
 800086e:	dd70      	ble.n	8000952 <__aeabi_fadd+0x1a6>
 8000870:	2f00      	cmp	r7, #0
 8000872:	d037      	beq.n	80008e4 <__aeabi_fadd+0x138>
 8000874:	2dff      	cmp	r5, #255	; 0xff
 8000876:	d062      	beq.n	800093e <__aeabi_fadd+0x192>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	04db      	lsls	r3, r3, #19
 800087c:	431e      	orrs	r6, r3
 800087e:	291b      	cmp	r1, #27
 8000880:	dc00      	bgt.n	8000884 <__aeabi_fadd+0xd8>
 8000882:	e0b0      	b.n	80009e6 <__aeabi_fadd+0x23a>
 8000884:	2001      	movs	r0, #1
 8000886:	4440      	add	r0, r8
 8000888:	0143      	lsls	r3, r0, #5
 800088a:	d543      	bpl.n	8000914 <__aeabi_fadd+0x168>
 800088c:	3501      	adds	r5, #1
 800088e:	2dff      	cmp	r5, #255	; 0xff
 8000890:	d033      	beq.n	80008fa <__aeabi_fadd+0x14e>
 8000892:	2301      	movs	r3, #1
 8000894:	4a93      	ldr	r2, [pc, #588]	; (8000ae4 <__aeabi_fadd+0x338>)
 8000896:	4003      	ands	r3, r0
 8000898:	0840      	lsrs	r0, r0, #1
 800089a:	4010      	ands	r0, r2
 800089c:	4318      	orrs	r0, r3
 800089e:	e7b9      	b.n	8000814 <__aeabi_fadd+0x68>
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fadd+0xfa>
 80008a4:	e083      	b.n	80009ae <__aeabi_fadd+0x202>
 80008a6:	1e51      	subs	r1, r2, #1
 80008a8:	2a01      	cmp	r2, #1
 80008aa:	d100      	bne.n	80008ae <__aeabi_fadd+0x102>
 80008ac:	e0d8      	b.n	8000a60 <__aeabi_fadd+0x2b4>
 80008ae:	2aff      	cmp	r2, #255	; 0xff
 80008b0:	d045      	beq.n	800093e <__aeabi_fadd+0x192>
 80008b2:	000a      	movs	r2, r1
 80008b4:	e798      	b.n	80007e8 <__aeabi_fadd+0x3c>
 80008b6:	27fe      	movs	r7, #254	; 0xfe
 80008b8:	1c6a      	adds	r2, r5, #1
 80008ba:	4217      	tst	r7, r2
 80008bc:	d000      	beq.n	80008c0 <__aeabi_fadd+0x114>
 80008be:	e086      	b.n	80009ce <__aeabi_fadd+0x222>
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fadd+0x11a>
 80008c4:	e0b7      	b.n	8000a36 <__aeabi_fadd+0x28a>
 80008c6:	4643      	mov	r3, r8
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d100      	bne.n	80008ce <__aeabi_fadd+0x122>
 80008cc:	e0f3      	b.n	8000ab6 <__aeabi_fadd+0x30a>
 80008ce:	2200      	movs	r2, #0
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0b0      	beq.n	8000836 <__aeabi_fadd+0x8a>
 80008d4:	1b98      	subs	r0, r3, r6
 80008d6:	0143      	lsls	r3, r0, #5
 80008d8:	d400      	bmi.n	80008dc <__aeabi_fadd+0x130>
 80008da:	e0fa      	b.n	8000ad2 <__aeabi_fadd+0x326>
 80008dc:	4643      	mov	r3, r8
 80008de:	000c      	movs	r4, r1
 80008e0:	1af0      	subs	r0, r6, r3
 80008e2:	e797      	b.n	8000814 <__aeabi_fadd+0x68>
 80008e4:	2e00      	cmp	r6, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x13e>
 80008e8:	e0c8      	b.n	8000a7c <__aeabi_fadd+0x2d0>
 80008ea:	1e4a      	subs	r2, r1, #1
 80008ec:	2901      	cmp	r1, #1
 80008ee:	d100      	bne.n	80008f2 <__aeabi_fadd+0x146>
 80008f0:	e0ae      	b.n	8000a50 <__aeabi_fadd+0x2a4>
 80008f2:	29ff      	cmp	r1, #255	; 0xff
 80008f4:	d023      	beq.n	800093e <__aeabi_fadd+0x192>
 80008f6:	0011      	movs	r1, r2
 80008f8:	e7c1      	b.n	800087e <__aeabi_fadd+0xd2>
 80008fa:	2300      	movs	r3, #0
 80008fc:	22ff      	movs	r2, #255	; 0xff
 80008fe:	469c      	mov	ip, r3
 8000900:	e799      	b.n	8000836 <__aeabi_fadd+0x8a>
 8000902:	21fe      	movs	r1, #254	; 0xfe
 8000904:	1c6a      	adds	r2, r5, #1
 8000906:	4211      	tst	r1, r2
 8000908:	d077      	beq.n	80009fa <__aeabi_fadd+0x24e>
 800090a:	2aff      	cmp	r2, #255	; 0xff
 800090c:	d0f5      	beq.n	80008fa <__aeabi_fadd+0x14e>
 800090e:	0015      	movs	r5, r2
 8000910:	4446      	add	r6, r8
 8000912:	0870      	lsrs	r0, r6, #1
 8000914:	0743      	lsls	r3, r0, #29
 8000916:	d000      	beq.n	800091a <__aeabi_fadd+0x16e>
 8000918:	e77e      	b.n	8000818 <__aeabi_fadd+0x6c>
 800091a:	08c3      	lsrs	r3, r0, #3
 800091c:	2dff      	cmp	r5, #255	; 0xff
 800091e:	d00e      	beq.n	800093e <__aeabi_fadd+0x192>
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	0a5b      	lsrs	r3, r3, #9
 8000924:	469c      	mov	ip, r3
 8000926:	b2ea      	uxtb	r2, r5
 8000928:	e785      	b.n	8000836 <__aeabi_fadd+0x8a>
 800092a:	2e00      	cmp	r6, #0
 800092c:	d007      	beq.n	800093e <__aeabi_fadd+0x192>
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	03d2      	lsls	r2, r2, #15
 8000932:	4213      	tst	r3, r2
 8000934:	d003      	beq.n	800093e <__aeabi_fadd+0x192>
 8000936:	4210      	tst	r0, r2
 8000938:	d101      	bne.n	800093e <__aeabi_fadd+0x192>
 800093a:	000c      	movs	r4, r1
 800093c:	0003      	movs	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0db      	beq.n	80008fa <__aeabi_fadd+0x14e>
 8000942:	2080      	movs	r0, #128	; 0x80
 8000944:	03c0      	lsls	r0, r0, #15
 8000946:	4318      	orrs	r0, r3
 8000948:	0240      	lsls	r0, r0, #9
 800094a:	0a43      	lsrs	r3, r0, #9
 800094c:	469c      	mov	ip, r3
 800094e:	22ff      	movs	r2, #255	; 0xff
 8000950:	e771      	b.n	8000836 <__aeabi_fadd+0x8a>
 8000952:	2900      	cmp	r1, #0
 8000954:	d0d5      	beq.n	8000902 <__aeabi_fadd+0x156>
 8000956:	1b7a      	subs	r2, r7, r5
 8000958:	2d00      	cmp	r5, #0
 800095a:	d160      	bne.n	8000a1e <__aeabi_fadd+0x272>
 800095c:	4643      	mov	r3, r8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d024      	beq.n	80009ac <__aeabi_fadd+0x200>
 8000962:	1e53      	subs	r3, r2, #1
 8000964:	2a01      	cmp	r2, #1
 8000966:	d073      	beq.n	8000a50 <__aeabi_fadd+0x2a4>
 8000968:	2aff      	cmp	r2, #255	; 0xff
 800096a:	d0e7      	beq.n	800093c <__aeabi_fadd+0x190>
 800096c:	001a      	movs	r2, r3
 800096e:	2a1b      	cmp	r2, #27
 8000970:	dc00      	bgt.n	8000974 <__aeabi_fadd+0x1c8>
 8000972:	e085      	b.n	8000a80 <__aeabi_fadd+0x2d4>
 8000974:	2001      	movs	r0, #1
 8000976:	003d      	movs	r5, r7
 8000978:	1980      	adds	r0, r0, r6
 800097a:	e785      	b.n	8000888 <__aeabi_fadd+0xdc>
 800097c:	2320      	movs	r3, #32
 800097e:	003a      	movs	r2, r7
 8000980:	1b45      	subs	r5, r0, r5
 8000982:	0038      	movs	r0, r7
 8000984:	3501      	adds	r5, #1
 8000986:	40ea      	lsrs	r2, r5
 8000988:	1b5d      	subs	r5, r3, r5
 800098a:	40a8      	lsls	r0, r5
 800098c:	1e43      	subs	r3, r0, #1
 800098e:	4198      	sbcs	r0, r3
 8000990:	2500      	movs	r5, #0
 8000992:	4310      	orrs	r0, r2
 8000994:	e73e      	b.n	8000814 <__aeabi_fadd+0x68>
 8000996:	2320      	movs	r3, #32
 8000998:	0030      	movs	r0, r6
 800099a:	1a9b      	subs	r3, r3, r2
 800099c:	0031      	movs	r1, r6
 800099e:	4098      	lsls	r0, r3
 80009a0:	40d1      	lsrs	r1, r2
 80009a2:	1e43      	subs	r3, r0, #1
 80009a4:	4198      	sbcs	r0, r3
 80009a6:	4308      	orrs	r0, r1
 80009a8:	e722      	b.n	80007f0 <__aeabi_fadd+0x44>
 80009aa:	000c      	movs	r4, r1
 80009ac:	0003      	movs	r3, r0
 80009ae:	0015      	movs	r5, r2
 80009b0:	e7b4      	b.n	800091c <__aeabi_fadd+0x170>
 80009b2:	2fff      	cmp	r7, #255	; 0xff
 80009b4:	d0c1      	beq.n	800093a <__aeabi_fadd+0x18e>
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	4640      	mov	r0, r8
 80009ba:	04db      	lsls	r3, r3, #19
 80009bc:	4318      	orrs	r0, r3
 80009be:	4680      	mov	r8, r0
 80009c0:	2a1b      	cmp	r2, #27
 80009c2:	dd51      	ble.n	8000a68 <__aeabi_fadd+0x2bc>
 80009c4:	2001      	movs	r0, #1
 80009c6:	000c      	movs	r4, r1
 80009c8:	003d      	movs	r5, r7
 80009ca:	1a30      	subs	r0, r6, r0
 80009cc:	e712      	b.n	80007f4 <__aeabi_fadd+0x48>
 80009ce:	4643      	mov	r3, r8
 80009d0:	1b9f      	subs	r7, r3, r6
 80009d2:	017b      	lsls	r3, r7, #5
 80009d4:	d42b      	bmi.n	8000a2e <__aeabi_fadd+0x282>
 80009d6:	2f00      	cmp	r7, #0
 80009d8:	d000      	beq.n	80009dc <__aeabi_fadd+0x230>
 80009da:	e710      	b.n	80007fe <__aeabi_fadd+0x52>
 80009dc:	2300      	movs	r3, #0
 80009de:	2400      	movs	r4, #0
 80009e0:	2200      	movs	r2, #0
 80009e2:	469c      	mov	ip, r3
 80009e4:	e727      	b.n	8000836 <__aeabi_fadd+0x8a>
 80009e6:	2320      	movs	r3, #32
 80009e8:	0032      	movs	r2, r6
 80009ea:	0030      	movs	r0, r6
 80009ec:	40ca      	lsrs	r2, r1
 80009ee:	1a59      	subs	r1, r3, r1
 80009f0:	4088      	lsls	r0, r1
 80009f2:	1e43      	subs	r3, r0, #1
 80009f4:	4198      	sbcs	r0, r3
 80009f6:	4310      	orrs	r0, r2
 80009f8:	e745      	b.n	8000886 <__aeabi_fadd+0xda>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	d14a      	bne.n	8000a94 <__aeabi_fadd+0x2e8>
 80009fe:	4643      	mov	r3, r8
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d063      	beq.n	8000acc <__aeabi_fadd+0x320>
 8000a04:	2200      	movs	r2, #0
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fadd+0x260>
 8000a0a:	e714      	b.n	8000836 <__aeabi_fadd+0x8a>
 8000a0c:	0030      	movs	r0, r6
 8000a0e:	4440      	add	r0, r8
 8000a10:	0143      	lsls	r3, r0, #5
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_fadd+0x26a>
 8000a14:	e77e      	b.n	8000914 <__aeabi_fadd+0x168>
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <__aeabi_fadd+0x334>)
 8000a18:	3501      	adds	r5, #1
 8000a1a:	4018      	ands	r0, r3
 8000a1c:	e77a      	b.n	8000914 <__aeabi_fadd+0x168>
 8000a1e:	2fff      	cmp	r7, #255	; 0xff
 8000a20:	d08c      	beq.n	800093c <__aeabi_fadd+0x190>
 8000a22:	2380      	movs	r3, #128	; 0x80
 8000a24:	4641      	mov	r1, r8
 8000a26:	04db      	lsls	r3, r3, #19
 8000a28:	4319      	orrs	r1, r3
 8000a2a:	4688      	mov	r8, r1
 8000a2c:	e79f      	b.n	800096e <__aeabi_fadd+0x1c2>
 8000a2e:	4643      	mov	r3, r8
 8000a30:	000c      	movs	r4, r1
 8000a32:	1af7      	subs	r7, r6, r3
 8000a34:	e6e3      	b.n	80007fe <__aeabi_fadd+0x52>
 8000a36:	4642      	mov	r2, r8
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d000      	beq.n	8000a3e <__aeabi_fadd+0x292>
 8000a3c:	e775      	b.n	800092a <__aeabi_fadd+0x17e>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_fadd+0x298>
 8000a42:	e77a      	b.n	800093a <__aeabi_fadd+0x18e>
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	03db      	lsls	r3, r3, #15
 8000a48:	2400      	movs	r4, #0
 8000a4a:	469c      	mov	ip, r3
 8000a4c:	22ff      	movs	r2, #255	; 0xff
 8000a4e:	e6f2      	b.n	8000836 <__aeabi_fadd+0x8a>
 8000a50:	0030      	movs	r0, r6
 8000a52:	4440      	add	r0, r8
 8000a54:	2501      	movs	r5, #1
 8000a56:	0143      	lsls	r3, r0, #5
 8000a58:	d400      	bmi.n	8000a5c <__aeabi_fadd+0x2b0>
 8000a5a:	e75b      	b.n	8000914 <__aeabi_fadd+0x168>
 8000a5c:	2502      	movs	r5, #2
 8000a5e:	e718      	b.n	8000892 <__aeabi_fadd+0xe6>
 8000a60:	4643      	mov	r3, r8
 8000a62:	2501      	movs	r5, #1
 8000a64:	1b98      	subs	r0, r3, r6
 8000a66:	e6c5      	b.n	80007f4 <__aeabi_fadd+0x48>
 8000a68:	2320      	movs	r3, #32
 8000a6a:	4644      	mov	r4, r8
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	40d4      	lsrs	r4, r2
 8000a70:	1a9a      	subs	r2, r3, r2
 8000a72:	4090      	lsls	r0, r2
 8000a74:	1e43      	subs	r3, r0, #1
 8000a76:	4198      	sbcs	r0, r3
 8000a78:	4320      	orrs	r0, r4
 8000a7a:	e7a4      	b.n	80009c6 <__aeabi_fadd+0x21a>
 8000a7c:	000d      	movs	r5, r1
 8000a7e:	e74d      	b.n	800091c <__aeabi_fadd+0x170>
 8000a80:	2320      	movs	r3, #32
 8000a82:	4641      	mov	r1, r8
 8000a84:	4640      	mov	r0, r8
 8000a86:	40d1      	lsrs	r1, r2
 8000a88:	1a9a      	subs	r2, r3, r2
 8000a8a:	4090      	lsls	r0, r2
 8000a8c:	1e43      	subs	r3, r0, #1
 8000a8e:	4198      	sbcs	r0, r3
 8000a90:	4308      	orrs	r0, r1
 8000a92:	e770      	b.n	8000976 <__aeabi_fadd+0x1ca>
 8000a94:	4642      	mov	r2, r8
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fadd+0x2f0>
 8000a9a:	e74f      	b.n	800093c <__aeabi_fadd+0x190>
 8000a9c:	2e00      	cmp	r6, #0
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fadd+0x2f6>
 8000aa0:	e74d      	b.n	800093e <__aeabi_fadd+0x192>
 8000aa2:	2280      	movs	r2, #128	; 0x80
 8000aa4:	03d2      	lsls	r2, r2, #15
 8000aa6:	4213      	tst	r3, r2
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fadd+0x300>
 8000aaa:	e748      	b.n	800093e <__aeabi_fadd+0x192>
 8000aac:	4210      	tst	r0, r2
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_fadd+0x306>
 8000ab0:	e745      	b.n	800093e <__aeabi_fadd+0x192>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	e743      	b.n	800093e <__aeabi_fadd+0x192>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d090      	beq.n	80009dc <__aeabi_fadd+0x230>
 8000aba:	000c      	movs	r4, r1
 8000abc:	4684      	mov	ip, r0
 8000abe:	2200      	movs	r2, #0
 8000ac0:	e6b9      	b.n	8000836 <__aeabi_fadd+0x8a>
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	000c      	movs	r4, r1
 8000ac6:	1af0      	subs	r0, r6, r3
 8000ac8:	3501      	adds	r5, #1
 8000aca:	e693      	b.n	80007f4 <__aeabi_fadd+0x48>
 8000acc:	4684      	mov	ip, r0
 8000ace:	2200      	movs	r2, #0
 8000ad0:	e6b1      	b.n	8000836 <__aeabi_fadd+0x8a>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d000      	beq.n	8000ad8 <__aeabi_fadd+0x32c>
 8000ad6:	e71d      	b.n	8000914 <__aeabi_fadd+0x168>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2400      	movs	r4, #0
 8000adc:	469c      	mov	ip, r3
 8000ade:	e6aa      	b.n	8000836 <__aeabi_fadd+0x8a>
 8000ae0:	fbffffff 	.word	0xfbffffff
 8000ae4:	7dffffff 	.word	0x7dffffff

08000ae8 <__aeabi_fdiv>:
 8000ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aea:	464f      	mov	r7, r9
 8000aec:	4646      	mov	r6, r8
 8000aee:	46d6      	mov	lr, sl
 8000af0:	0245      	lsls	r5, r0, #9
 8000af2:	b5c0      	push	{r6, r7, lr}
 8000af4:	0047      	lsls	r7, r0, #1
 8000af6:	1c0c      	adds	r4, r1, #0
 8000af8:	0a6d      	lsrs	r5, r5, #9
 8000afa:	0e3f      	lsrs	r7, r7, #24
 8000afc:	0fc6      	lsrs	r6, r0, #31
 8000afe:	2f00      	cmp	r7, #0
 8000b00:	d100      	bne.n	8000b04 <__aeabi_fdiv+0x1c>
 8000b02:	e070      	b.n	8000be6 <__aeabi_fdiv+0xfe>
 8000b04:	2fff      	cmp	r7, #255	; 0xff
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fdiv+0x22>
 8000b08:	e075      	b.n	8000bf6 <__aeabi_fdiv+0x10e>
 8000b0a:	00eb      	lsls	r3, r5, #3
 8000b0c:	2580      	movs	r5, #128	; 0x80
 8000b0e:	04ed      	lsls	r5, r5, #19
 8000b10:	431d      	orrs	r5, r3
 8000b12:	2300      	movs	r3, #0
 8000b14:	4699      	mov	r9, r3
 8000b16:	469a      	mov	sl, r3
 8000b18:	3f7f      	subs	r7, #127	; 0x7f
 8000b1a:	0260      	lsls	r0, r4, #9
 8000b1c:	0a43      	lsrs	r3, r0, #9
 8000b1e:	4698      	mov	r8, r3
 8000b20:	0063      	lsls	r3, r4, #1
 8000b22:	0e1b      	lsrs	r3, r3, #24
 8000b24:	0fe4      	lsrs	r4, r4, #31
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d04e      	beq.n	8000bc8 <__aeabi_fdiv+0xe0>
 8000b2a:	2bff      	cmp	r3, #255	; 0xff
 8000b2c:	d046      	beq.n	8000bbc <__aeabi_fdiv+0xd4>
 8000b2e:	4642      	mov	r2, r8
 8000b30:	00d0      	lsls	r0, r2, #3
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	04d2      	lsls	r2, r2, #19
 8000b36:	4302      	orrs	r2, r0
 8000b38:	4690      	mov	r8, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	3b7f      	subs	r3, #127	; 0x7f
 8000b3e:	0031      	movs	r1, r6
 8000b40:	1aff      	subs	r7, r7, r3
 8000b42:	464b      	mov	r3, r9
 8000b44:	4061      	eors	r1, r4
 8000b46:	b2c9      	uxtb	r1, r1
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d900      	bls.n	8000b50 <__aeabi_fdiv+0x68>
 8000b4e:	e0b5      	b.n	8000cbc <__aeabi_fdiv+0x1d4>
 8000b50:	486e      	ldr	r0, [pc, #440]	; (8000d0c <__aeabi_fdiv+0x224>)
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	58c3      	ldr	r3, [r0, r3]
 8000b56:	469f      	mov	pc, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4698      	mov	r8, r3
 8000b5c:	0026      	movs	r6, r4
 8000b5e:	4645      	mov	r5, r8
 8000b60:	4692      	mov	sl, r2
 8000b62:	4653      	mov	r3, sl
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fdiv+0x82>
 8000b68:	e089      	b.n	8000c7e <__aeabi_fdiv+0x196>
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_fdiv+0x88>
 8000b6e:	e09e      	b.n	8000cae <__aeabi_fdiv+0x1c6>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d018      	beq.n	8000ba6 <__aeabi_fdiv+0xbe>
 8000b74:	003b      	movs	r3, r7
 8000b76:	337f      	adds	r3, #127	; 0x7f
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	dd69      	ble.n	8000c50 <__aeabi_fdiv+0x168>
 8000b7c:	076a      	lsls	r2, r5, #29
 8000b7e:	d004      	beq.n	8000b8a <__aeabi_fdiv+0xa2>
 8000b80:	220f      	movs	r2, #15
 8000b82:	402a      	ands	r2, r5
 8000b84:	2a04      	cmp	r2, #4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_fdiv+0xa2>
 8000b88:	3504      	adds	r5, #4
 8000b8a:	012a      	lsls	r2, r5, #4
 8000b8c:	d503      	bpl.n	8000b96 <__aeabi_fdiv+0xae>
 8000b8e:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <__aeabi_fdiv+0x228>)
 8000b90:	401d      	ands	r5, r3
 8000b92:	003b      	movs	r3, r7
 8000b94:	3380      	adds	r3, #128	; 0x80
 8000b96:	2bfe      	cmp	r3, #254	; 0xfe
 8000b98:	dd00      	ble.n	8000b9c <__aeabi_fdiv+0xb4>
 8000b9a:	e070      	b.n	8000c7e <__aeabi_fdiv+0x196>
 8000b9c:	01ad      	lsls	r5, r5, #6
 8000b9e:	0a6d      	lsrs	r5, r5, #9
 8000ba0:	b2d8      	uxtb	r0, r3
 8000ba2:	e002      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000ba4:	000e      	movs	r6, r1
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	2500      	movs	r5, #0
 8000baa:	05c0      	lsls	r0, r0, #23
 8000bac:	4328      	orrs	r0, r5
 8000bae:	07f6      	lsls	r6, r6, #31
 8000bb0:	4330      	orrs	r0, r6
 8000bb2:	bce0      	pop	{r5, r6, r7}
 8000bb4:	46ba      	mov	sl, r7
 8000bb6:	46b1      	mov	r9, r6
 8000bb8:	46a8      	mov	r8, r5
 8000bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d13f      	bne.n	8000c42 <__aeabi_fdiv+0x15a>
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	3fff      	subs	r7, #255	; 0xff
 8000bc6:	e003      	b.n	8000bd0 <__aeabi_fdiv+0xe8>
 8000bc8:	4643      	mov	r3, r8
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d12d      	bne.n	8000c2a <__aeabi_fdiv+0x142>
 8000bce:	2201      	movs	r2, #1
 8000bd0:	0031      	movs	r1, r6
 8000bd2:	464b      	mov	r3, r9
 8000bd4:	4061      	eors	r1, r4
 8000bd6:	b2c9      	uxtb	r1, r1
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	2b0f      	cmp	r3, #15
 8000bdc:	d834      	bhi.n	8000c48 <__aeabi_fdiv+0x160>
 8000bde:	484d      	ldr	r0, [pc, #308]	; (8000d14 <__aeabi_fdiv+0x22c>)
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	58c3      	ldr	r3, [r0, r3]
 8000be4:	469f      	mov	pc, r3
 8000be6:	2d00      	cmp	r5, #0
 8000be8:	d113      	bne.n	8000c12 <__aeabi_fdiv+0x12a>
 8000bea:	2304      	movs	r3, #4
 8000bec:	4699      	mov	r9, r3
 8000bee:	3b03      	subs	r3, #3
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	469a      	mov	sl, r3
 8000bf4:	e791      	b.n	8000b1a <__aeabi_fdiv+0x32>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	d105      	bne.n	8000c06 <__aeabi_fdiv+0x11e>
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	4699      	mov	r9, r3
 8000bfe:	3b06      	subs	r3, #6
 8000c00:	27ff      	movs	r7, #255	; 0xff
 8000c02:	469a      	mov	sl, r3
 8000c04:	e789      	b.n	8000b1a <__aeabi_fdiv+0x32>
 8000c06:	230c      	movs	r3, #12
 8000c08:	4699      	mov	r9, r3
 8000c0a:	3b09      	subs	r3, #9
 8000c0c:	27ff      	movs	r7, #255	; 0xff
 8000c0e:	469a      	mov	sl, r3
 8000c10:	e783      	b.n	8000b1a <__aeabi_fdiv+0x32>
 8000c12:	0028      	movs	r0, r5
 8000c14:	f002 fa9a 	bl	800314c <__clzsi2>
 8000c18:	2776      	movs	r7, #118	; 0x76
 8000c1a:	1f43      	subs	r3, r0, #5
 8000c1c:	409d      	lsls	r5, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	427f      	negs	r7, r7
 8000c22:	4699      	mov	r9, r3
 8000c24:	469a      	mov	sl, r3
 8000c26:	1a3f      	subs	r7, r7, r0
 8000c28:	e777      	b.n	8000b1a <__aeabi_fdiv+0x32>
 8000c2a:	4640      	mov	r0, r8
 8000c2c:	f002 fa8e 	bl	800314c <__clzsi2>
 8000c30:	4642      	mov	r2, r8
 8000c32:	1f43      	subs	r3, r0, #5
 8000c34:	409a      	lsls	r2, r3
 8000c36:	2376      	movs	r3, #118	; 0x76
 8000c38:	425b      	negs	r3, r3
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	1a1b      	subs	r3, r3, r0
 8000c3e:	2200      	movs	r2, #0
 8000c40:	e77d      	b.n	8000b3e <__aeabi_fdiv+0x56>
 8000c42:	23ff      	movs	r3, #255	; 0xff
 8000c44:	2203      	movs	r2, #3
 8000c46:	e77a      	b.n	8000b3e <__aeabi_fdiv+0x56>
 8000c48:	000e      	movs	r6, r1
 8000c4a:	20ff      	movs	r0, #255	; 0xff
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	e7ac      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000c50:	2001      	movs	r0, #1
 8000c52:	1ac0      	subs	r0, r0, r3
 8000c54:	281b      	cmp	r0, #27
 8000c56:	dca6      	bgt.n	8000ba6 <__aeabi_fdiv+0xbe>
 8000c58:	379e      	adds	r7, #158	; 0x9e
 8000c5a:	002a      	movs	r2, r5
 8000c5c:	40bd      	lsls	r5, r7
 8000c5e:	40c2      	lsrs	r2, r0
 8000c60:	1e6b      	subs	r3, r5, #1
 8000c62:	419d      	sbcs	r5, r3
 8000c64:	4315      	orrs	r5, r2
 8000c66:	076b      	lsls	r3, r5, #29
 8000c68:	d004      	beq.n	8000c74 <__aeabi_fdiv+0x18c>
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	402b      	ands	r3, r5
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fdiv+0x18c>
 8000c72:	3504      	adds	r5, #4
 8000c74:	016b      	lsls	r3, r5, #5
 8000c76:	d544      	bpl.n	8000d02 <__aeabi_fdiv+0x21a>
 8000c78:	2001      	movs	r0, #1
 8000c7a:	2500      	movs	r5, #0
 8000c7c:	e795      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	2500      	movs	r5, #0
 8000c82:	e792      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000c84:	2580      	movs	r5, #128	; 0x80
 8000c86:	2600      	movs	r6, #0
 8000c88:	20ff      	movs	r0, #255	; 0xff
 8000c8a:	03ed      	lsls	r5, r5, #15
 8000c8c:	e78d      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000c8e:	2300      	movs	r3, #0
 8000c90:	4698      	mov	r8, r3
 8000c92:	2080      	movs	r0, #128	; 0x80
 8000c94:	03c0      	lsls	r0, r0, #15
 8000c96:	4205      	tst	r5, r0
 8000c98:	d009      	beq.n	8000cae <__aeabi_fdiv+0x1c6>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	4203      	tst	r3, r0
 8000c9e:	d106      	bne.n	8000cae <__aeabi_fdiv+0x1c6>
 8000ca0:	4645      	mov	r5, r8
 8000ca2:	4305      	orrs	r5, r0
 8000ca4:	026d      	lsls	r5, r5, #9
 8000ca6:	0026      	movs	r6, r4
 8000ca8:	20ff      	movs	r0, #255	; 0xff
 8000caa:	0a6d      	lsrs	r5, r5, #9
 8000cac:	e77d      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000cae:	2080      	movs	r0, #128	; 0x80
 8000cb0:	03c0      	lsls	r0, r0, #15
 8000cb2:	4305      	orrs	r5, r0
 8000cb4:	026d      	lsls	r5, r5, #9
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	e776      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	016b      	lsls	r3, r5, #5
 8000cc0:	0150      	lsls	r0, r2, #5
 8000cc2:	4283      	cmp	r3, r0
 8000cc4:	d219      	bcs.n	8000cfa <__aeabi_fdiv+0x212>
 8000cc6:	221b      	movs	r2, #27
 8000cc8:	2500      	movs	r5, #0
 8000cca:	3f01      	subs	r7, #1
 8000ccc:	2601      	movs	r6, #1
 8000cce:	001c      	movs	r4, r3
 8000cd0:	006d      	lsls	r5, r5, #1
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2c00      	cmp	r4, #0
 8000cd6:	db01      	blt.n	8000cdc <__aeabi_fdiv+0x1f4>
 8000cd8:	4298      	cmp	r0, r3
 8000cda:	d801      	bhi.n	8000ce0 <__aeabi_fdiv+0x1f8>
 8000cdc:	1a1b      	subs	r3, r3, r0
 8000cde:	4335      	orrs	r5, r6
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d1f3      	bne.n	8000cce <__aeabi_fdiv+0x1e6>
 8000ce6:	1e5a      	subs	r2, r3, #1
 8000ce8:	4193      	sbcs	r3, r2
 8000cea:	431d      	orrs	r5, r3
 8000cec:	003b      	movs	r3, r7
 8000cee:	337f      	adds	r3, #127	; 0x7f
 8000cf0:	000e      	movs	r6, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	dd00      	ble.n	8000cf8 <__aeabi_fdiv+0x210>
 8000cf6:	e741      	b.n	8000b7c <__aeabi_fdiv+0x94>
 8000cf8:	e7aa      	b.n	8000c50 <__aeabi_fdiv+0x168>
 8000cfa:	221a      	movs	r2, #26
 8000cfc:	2501      	movs	r5, #1
 8000cfe:	1a1b      	subs	r3, r3, r0
 8000d00:	e7e4      	b.n	8000ccc <__aeabi_fdiv+0x1e4>
 8000d02:	01ad      	lsls	r5, r5, #6
 8000d04:	2000      	movs	r0, #0
 8000d06:	0a6d      	lsrs	r5, r5, #9
 8000d08:	e74f      	b.n	8000baa <__aeabi_fdiv+0xc2>
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	0800d864 	.word	0x0800d864
 8000d10:	f7ffffff 	.word	0xf7ffffff
 8000d14:	0800d8a4 	.word	0x0800d8a4

08000d18 <__aeabi_fmul>:
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	464f      	mov	r7, r9
 8000d1c:	4646      	mov	r6, r8
 8000d1e:	46d6      	mov	lr, sl
 8000d20:	0244      	lsls	r4, r0, #9
 8000d22:	0045      	lsls	r5, r0, #1
 8000d24:	b5c0      	push	{r6, r7, lr}
 8000d26:	0a64      	lsrs	r4, r4, #9
 8000d28:	1c0f      	adds	r7, r1, #0
 8000d2a:	0e2d      	lsrs	r5, r5, #24
 8000d2c:	0fc6      	lsrs	r6, r0, #31
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fmul+0x1c>
 8000d32:	e08d      	b.n	8000e50 <__aeabi_fmul+0x138>
 8000d34:	2dff      	cmp	r5, #255	; 0xff
 8000d36:	d100      	bne.n	8000d3a <__aeabi_fmul+0x22>
 8000d38:	e092      	b.n	8000e60 <__aeabi_fmul+0x148>
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2080      	movs	r0, #128	; 0x80
 8000d3e:	4699      	mov	r9, r3
 8000d40:	469a      	mov	sl, r3
 8000d42:	00e4      	lsls	r4, r4, #3
 8000d44:	04c0      	lsls	r0, r0, #19
 8000d46:	4304      	orrs	r4, r0
 8000d48:	3d7f      	subs	r5, #127	; 0x7f
 8000d4a:	0278      	lsls	r0, r7, #9
 8000d4c:	0a43      	lsrs	r3, r0, #9
 8000d4e:	4698      	mov	r8, r3
 8000d50:	007b      	lsls	r3, r7, #1
 8000d52:	0e1b      	lsrs	r3, r3, #24
 8000d54:	0fff      	lsrs	r7, r7, #31
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fmul+0x44>
 8000d5a:	e070      	b.n	8000e3e <__aeabi_fmul+0x126>
 8000d5c:	2bff      	cmp	r3, #255	; 0xff
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fmul+0x4a>
 8000d60:	e086      	b.n	8000e70 <__aeabi_fmul+0x158>
 8000d62:	4642      	mov	r2, r8
 8000d64:	00d0      	lsls	r0, r2, #3
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	3b7f      	subs	r3, #127	; 0x7f
 8000d6a:	18ed      	adds	r5, r5, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	04d2      	lsls	r2, r2, #19
 8000d70:	4302      	orrs	r2, r0
 8000d72:	4690      	mov	r8, r2
 8000d74:	469c      	mov	ip, r3
 8000d76:	0031      	movs	r1, r6
 8000d78:	464b      	mov	r3, r9
 8000d7a:	4079      	eors	r1, r7
 8000d7c:	1c68      	adds	r0, r5, #1
 8000d7e:	2b0f      	cmp	r3, #15
 8000d80:	d81c      	bhi.n	8000dbc <__aeabi_fmul+0xa4>
 8000d82:	4a76      	ldr	r2, [pc, #472]	; (8000f5c <__aeabi_fmul+0x244>)
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	58d3      	ldr	r3, [r2, r3]
 8000d88:	469f      	mov	pc, r3
 8000d8a:	0039      	movs	r1, r7
 8000d8c:	4644      	mov	r4, r8
 8000d8e:	46e2      	mov	sl, ip
 8000d90:	4653      	mov	r3, sl
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d00f      	beq.n	8000db6 <__aeabi_fmul+0x9e>
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d100      	bne.n	8000d9c <__aeabi_fmul+0x84>
 8000d9a:	e0d7      	b.n	8000f4c <__aeabi_fmul+0x234>
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d137      	bne.n	8000e10 <__aeabi_fmul+0xf8>
 8000da0:	2000      	movs	r0, #0
 8000da2:	2400      	movs	r4, #0
 8000da4:	05c0      	lsls	r0, r0, #23
 8000da6:	4320      	orrs	r0, r4
 8000da8:	07c9      	lsls	r1, r1, #31
 8000daa:	4308      	orrs	r0, r1
 8000dac:	bce0      	pop	{r5, r6, r7}
 8000dae:	46ba      	mov	sl, r7
 8000db0:	46b1      	mov	r9, r6
 8000db2:	46a8      	mov	r8, r5
 8000db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000db6:	20ff      	movs	r0, #255	; 0xff
 8000db8:	2400      	movs	r4, #0
 8000dba:	e7f3      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000dbc:	0c26      	lsrs	r6, r4, #16
 8000dbe:	0424      	lsls	r4, r4, #16
 8000dc0:	0c22      	lsrs	r2, r4, #16
 8000dc2:	4644      	mov	r4, r8
 8000dc4:	0424      	lsls	r4, r4, #16
 8000dc6:	0c24      	lsrs	r4, r4, #16
 8000dc8:	4643      	mov	r3, r8
 8000dca:	0027      	movs	r7, r4
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	4357      	muls	r7, r2
 8000dd0:	4374      	muls	r4, r6
 8000dd2:	435a      	muls	r2, r3
 8000dd4:	435e      	muls	r6, r3
 8000dd6:	1912      	adds	r2, r2, r4
 8000dd8:	0c3b      	lsrs	r3, r7, #16
 8000dda:	189b      	adds	r3, r3, r2
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	d903      	bls.n	8000de8 <__aeabi_fmul+0xd0>
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0252      	lsls	r2, r2, #9
 8000de4:	4694      	mov	ip, r2
 8000de6:	4466      	add	r6, ip
 8000de8:	043f      	lsls	r7, r7, #16
 8000dea:	041a      	lsls	r2, r3, #16
 8000dec:	0c3f      	lsrs	r7, r7, #16
 8000dee:	19d2      	adds	r2, r2, r7
 8000df0:	0194      	lsls	r4, r2, #6
 8000df2:	1e67      	subs	r7, r4, #1
 8000df4:	41bc      	sbcs	r4, r7
 8000df6:	0c1b      	lsrs	r3, r3, #16
 8000df8:	0e92      	lsrs	r2, r2, #26
 8000dfa:	199b      	adds	r3, r3, r6
 8000dfc:	4314      	orrs	r4, r2
 8000dfe:	019b      	lsls	r3, r3, #6
 8000e00:	431c      	orrs	r4, r3
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	d400      	bmi.n	8000e08 <__aeabi_fmul+0xf0>
 8000e06:	e09b      	b.n	8000f40 <__aeabi_fmul+0x228>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	0862      	lsrs	r2, r4, #1
 8000e0c:	401c      	ands	r4, r3
 8000e0e:	4314      	orrs	r4, r2
 8000e10:	0002      	movs	r2, r0
 8000e12:	327f      	adds	r2, #127	; 0x7f
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	dd64      	ble.n	8000ee2 <__aeabi_fmul+0x1ca>
 8000e18:	0763      	lsls	r3, r4, #29
 8000e1a:	d004      	beq.n	8000e26 <__aeabi_fmul+0x10e>
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4023      	ands	r3, r4
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d000      	beq.n	8000e26 <__aeabi_fmul+0x10e>
 8000e24:	3404      	adds	r4, #4
 8000e26:	0123      	lsls	r3, r4, #4
 8000e28:	d503      	bpl.n	8000e32 <__aeabi_fmul+0x11a>
 8000e2a:	0002      	movs	r2, r0
 8000e2c:	4b4c      	ldr	r3, [pc, #304]	; (8000f60 <__aeabi_fmul+0x248>)
 8000e2e:	3280      	adds	r2, #128	; 0x80
 8000e30:	401c      	ands	r4, r3
 8000e32:	2afe      	cmp	r2, #254	; 0xfe
 8000e34:	dcbf      	bgt.n	8000db6 <__aeabi_fmul+0x9e>
 8000e36:	01a4      	lsls	r4, r4, #6
 8000e38:	0a64      	lsrs	r4, r4, #9
 8000e3a:	b2d0      	uxtb	r0, r2
 8000e3c:	e7b2      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d13d      	bne.n	8000ec0 <__aeabi_fmul+0x1a8>
 8000e44:	464a      	mov	r2, r9
 8000e46:	3301      	adds	r3, #1
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	4691      	mov	r9, r2
 8000e4c:	469c      	mov	ip, r3
 8000e4e:	e792      	b.n	8000d76 <__aeabi_fmul+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d129      	bne.n	8000ea8 <__aeabi_fmul+0x190>
 8000e54:	2304      	movs	r3, #4
 8000e56:	4699      	mov	r9, r3
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	469a      	mov	sl, r3
 8000e5e:	e774      	b.n	8000d4a <__aeabi_fmul+0x32>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d11b      	bne.n	8000e9c <__aeabi_fmul+0x184>
 8000e64:	2308      	movs	r3, #8
 8000e66:	4699      	mov	r9, r3
 8000e68:	3b06      	subs	r3, #6
 8000e6a:	25ff      	movs	r5, #255	; 0xff
 8000e6c:	469a      	mov	sl, r3
 8000e6e:	e76c      	b.n	8000d4a <__aeabi_fmul+0x32>
 8000e70:	4643      	mov	r3, r8
 8000e72:	35ff      	adds	r5, #255	; 0xff
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10b      	bne.n	8000e90 <__aeabi_fmul+0x178>
 8000e78:	2302      	movs	r3, #2
 8000e7a:	464a      	mov	r2, r9
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	4691      	mov	r9, r2
 8000e80:	469c      	mov	ip, r3
 8000e82:	e778      	b.n	8000d76 <__aeabi_fmul+0x5e>
 8000e84:	4653      	mov	r3, sl
 8000e86:	0031      	movs	r1, r6
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fmul+0x176>
 8000e8c:	e783      	b.n	8000d96 <__aeabi_fmul+0x7e>
 8000e8e:	e792      	b.n	8000db6 <__aeabi_fmul+0x9e>
 8000e90:	2303      	movs	r3, #3
 8000e92:	464a      	mov	r2, r9
 8000e94:	431a      	orrs	r2, r3
 8000e96:	4691      	mov	r9, r2
 8000e98:	469c      	mov	ip, r3
 8000e9a:	e76c      	b.n	8000d76 <__aeabi_fmul+0x5e>
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	4699      	mov	r9, r3
 8000ea0:	3b09      	subs	r3, #9
 8000ea2:	25ff      	movs	r5, #255	; 0xff
 8000ea4:	469a      	mov	sl, r3
 8000ea6:	e750      	b.n	8000d4a <__aeabi_fmul+0x32>
 8000ea8:	0020      	movs	r0, r4
 8000eaa:	f002 f94f 	bl	800314c <__clzsi2>
 8000eae:	2576      	movs	r5, #118	; 0x76
 8000eb0:	1f43      	subs	r3, r0, #5
 8000eb2:	409c      	lsls	r4, r3
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	426d      	negs	r5, r5
 8000eb8:	4699      	mov	r9, r3
 8000eba:	469a      	mov	sl, r3
 8000ebc:	1a2d      	subs	r5, r5, r0
 8000ebe:	e744      	b.n	8000d4a <__aeabi_fmul+0x32>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	f002 f943 	bl	800314c <__clzsi2>
 8000ec6:	4642      	mov	r2, r8
 8000ec8:	1f43      	subs	r3, r0, #5
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	2300      	movs	r3, #0
 8000ece:	1a2d      	subs	r5, r5, r0
 8000ed0:	4690      	mov	r8, r2
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	3d76      	subs	r5, #118	; 0x76
 8000ed6:	e74e      	b.n	8000d76 <__aeabi_fmul+0x5e>
 8000ed8:	2480      	movs	r4, #128	; 0x80
 8000eda:	2100      	movs	r1, #0
 8000edc:	20ff      	movs	r0, #255	; 0xff
 8000ede:	03e4      	lsls	r4, r4, #15
 8000ee0:	e760      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	2b1b      	cmp	r3, #27
 8000ee8:	dd00      	ble.n	8000eec <__aeabi_fmul+0x1d4>
 8000eea:	e759      	b.n	8000da0 <__aeabi_fmul+0x88>
 8000eec:	0022      	movs	r2, r4
 8000eee:	309e      	adds	r0, #158	; 0x9e
 8000ef0:	40da      	lsrs	r2, r3
 8000ef2:	4084      	lsls	r4, r0
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	1e62      	subs	r2, r4, #1
 8000ef8:	4194      	sbcs	r4, r2
 8000efa:	431c      	orrs	r4, r3
 8000efc:	0763      	lsls	r3, r4, #29
 8000efe:	d004      	beq.n	8000f0a <__aeabi_fmul+0x1f2>
 8000f00:	230f      	movs	r3, #15
 8000f02:	4023      	ands	r3, r4
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d000      	beq.n	8000f0a <__aeabi_fmul+0x1f2>
 8000f08:	3404      	adds	r4, #4
 8000f0a:	0163      	lsls	r3, r4, #5
 8000f0c:	d51a      	bpl.n	8000f44 <__aeabi_fmul+0x22c>
 8000f0e:	2001      	movs	r0, #1
 8000f10:	2400      	movs	r4, #0
 8000f12:	e747      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000f14:	2080      	movs	r0, #128	; 0x80
 8000f16:	03c0      	lsls	r0, r0, #15
 8000f18:	4204      	tst	r4, r0
 8000f1a:	d009      	beq.n	8000f30 <__aeabi_fmul+0x218>
 8000f1c:	4643      	mov	r3, r8
 8000f1e:	4203      	tst	r3, r0
 8000f20:	d106      	bne.n	8000f30 <__aeabi_fmul+0x218>
 8000f22:	4644      	mov	r4, r8
 8000f24:	4304      	orrs	r4, r0
 8000f26:	0264      	lsls	r4, r4, #9
 8000f28:	0039      	movs	r1, r7
 8000f2a:	20ff      	movs	r0, #255	; 0xff
 8000f2c:	0a64      	lsrs	r4, r4, #9
 8000f2e:	e739      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000f30:	2080      	movs	r0, #128	; 0x80
 8000f32:	03c0      	lsls	r0, r0, #15
 8000f34:	4304      	orrs	r4, r0
 8000f36:	0264      	lsls	r4, r4, #9
 8000f38:	0031      	movs	r1, r6
 8000f3a:	20ff      	movs	r0, #255	; 0xff
 8000f3c:	0a64      	lsrs	r4, r4, #9
 8000f3e:	e731      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000f40:	0028      	movs	r0, r5
 8000f42:	e765      	b.n	8000e10 <__aeabi_fmul+0xf8>
 8000f44:	01a4      	lsls	r4, r4, #6
 8000f46:	2000      	movs	r0, #0
 8000f48:	0a64      	lsrs	r4, r4, #9
 8000f4a:	e72b      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000f4c:	2080      	movs	r0, #128	; 0x80
 8000f4e:	03c0      	lsls	r0, r0, #15
 8000f50:	4304      	orrs	r4, r0
 8000f52:	0264      	lsls	r4, r4, #9
 8000f54:	20ff      	movs	r0, #255	; 0xff
 8000f56:	0a64      	lsrs	r4, r4, #9
 8000f58:	e724      	b.n	8000da4 <__aeabi_fmul+0x8c>
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	0800d8e4 	.word	0x0800d8e4
 8000f60:	f7ffffff 	.word	0xf7ffffff

08000f64 <__aeabi_fsub>:
 8000f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f66:	46ce      	mov	lr, r9
 8000f68:	4647      	mov	r7, r8
 8000f6a:	0243      	lsls	r3, r0, #9
 8000f6c:	0a5b      	lsrs	r3, r3, #9
 8000f6e:	024e      	lsls	r6, r1, #9
 8000f70:	00da      	lsls	r2, r3, #3
 8000f72:	4694      	mov	ip, r2
 8000f74:	0a72      	lsrs	r2, r6, #9
 8000f76:	4691      	mov	r9, r2
 8000f78:	0045      	lsls	r5, r0, #1
 8000f7a:	004a      	lsls	r2, r1, #1
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	0e2d      	lsrs	r5, r5, #24
 8000f80:	001f      	movs	r7, r3
 8000f82:	0fc4      	lsrs	r4, r0, #31
 8000f84:	0e12      	lsrs	r2, r2, #24
 8000f86:	0fc9      	lsrs	r1, r1, #31
 8000f88:	09b6      	lsrs	r6, r6, #6
 8000f8a:	2aff      	cmp	r2, #255	; 0xff
 8000f8c:	d05b      	beq.n	8001046 <__aeabi_fsub+0xe2>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	4041      	eors	r1, r0
 8000f92:	428c      	cmp	r4, r1
 8000f94:	d039      	beq.n	800100a <__aeabi_fsub+0xa6>
 8000f96:	1aa8      	subs	r0, r5, r2
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	dd5a      	ble.n	8001052 <__aeabi_fsub+0xee>
 8000f9c:	2a00      	cmp	r2, #0
 8000f9e:	d06a      	beq.n	8001076 <__aeabi_fsub+0x112>
 8000fa0:	2dff      	cmp	r5, #255	; 0xff
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x42>
 8000fa4:	e0d9      	b.n	800115a <__aeabi_fsub+0x1f6>
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	04d2      	lsls	r2, r2, #19
 8000faa:	4316      	orrs	r6, r2
 8000fac:	281b      	cmp	r0, #27
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_fsub+0x4e>
 8000fb0:	e0e9      	b.n	8001186 <__aeabi_fsub+0x222>
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	4663      	mov	r3, ip
 8000fb6:	1a18      	subs	r0, r3, r0
 8000fb8:	0143      	lsls	r3, r0, #5
 8000fba:	d400      	bmi.n	8000fbe <__aeabi_fsub+0x5a>
 8000fbc:	e0b4      	b.n	8001128 <__aeabi_fsub+0x1c4>
 8000fbe:	0180      	lsls	r0, r0, #6
 8000fc0:	0987      	lsrs	r7, r0, #6
 8000fc2:	0038      	movs	r0, r7
 8000fc4:	f002 f8c2 	bl	800314c <__clzsi2>
 8000fc8:	3805      	subs	r0, #5
 8000fca:	4087      	lsls	r7, r0
 8000fcc:	4285      	cmp	r5, r0
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_fsub+0x6e>
 8000fd0:	e0cc      	b.n	800116c <__aeabi_fsub+0x208>
 8000fd2:	1a2d      	subs	r5, r5, r0
 8000fd4:	48b5      	ldr	r0, [pc, #724]	; (80012ac <__aeabi_fsub+0x348>)
 8000fd6:	4038      	ands	r0, r7
 8000fd8:	0743      	lsls	r3, r0, #29
 8000fda:	d004      	beq.n	8000fe6 <__aeabi_fsub+0x82>
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4003      	ands	r3, r0
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_fsub+0x82>
 8000fe4:	3004      	adds	r0, #4
 8000fe6:	0143      	lsls	r3, r0, #5
 8000fe8:	d400      	bmi.n	8000fec <__aeabi_fsub+0x88>
 8000fea:	e0a0      	b.n	800112e <__aeabi_fsub+0x1ca>
 8000fec:	1c6a      	adds	r2, r5, #1
 8000fee:	2dfe      	cmp	r5, #254	; 0xfe
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x90>
 8000ff2:	e08d      	b.n	8001110 <__aeabi_fsub+0x1ac>
 8000ff4:	0180      	lsls	r0, r0, #6
 8000ff6:	0a47      	lsrs	r7, r0, #9
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	05d0      	lsls	r0, r2, #23
 8000ffc:	4338      	orrs	r0, r7
 8000ffe:	07e4      	lsls	r4, r4, #31
 8001000:	4320      	orrs	r0, r4
 8001002:	bcc0      	pop	{r6, r7}
 8001004:	46b9      	mov	r9, r7
 8001006:	46b0      	mov	r8, r6
 8001008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800100a:	1aa8      	subs	r0, r5, r2
 800100c:	4680      	mov	r8, r0
 800100e:	2800      	cmp	r0, #0
 8001010:	dd45      	ble.n	800109e <__aeabi_fsub+0x13a>
 8001012:	2a00      	cmp	r2, #0
 8001014:	d070      	beq.n	80010f8 <__aeabi_fsub+0x194>
 8001016:	2dff      	cmp	r5, #255	; 0xff
 8001018:	d100      	bne.n	800101c <__aeabi_fsub+0xb8>
 800101a:	e09e      	b.n	800115a <__aeabi_fsub+0x1f6>
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	04db      	lsls	r3, r3, #19
 8001020:	431e      	orrs	r6, r3
 8001022:	4643      	mov	r3, r8
 8001024:	2b1b      	cmp	r3, #27
 8001026:	dc00      	bgt.n	800102a <__aeabi_fsub+0xc6>
 8001028:	e0d2      	b.n	80011d0 <__aeabi_fsub+0x26c>
 800102a:	2001      	movs	r0, #1
 800102c:	4460      	add	r0, ip
 800102e:	0143      	lsls	r3, r0, #5
 8001030:	d57a      	bpl.n	8001128 <__aeabi_fsub+0x1c4>
 8001032:	3501      	adds	r5, #1
 8001034:	2dff      	cmp	r5, #255	; 0xff
 8001036:	d06b      	beq.n	8001110 <__aeabi_fsub+0x1ac>
 8001038:	2301      	movs	r3, #1
 800103a:	4a9d      	ldr	r2, [pc, #628]	; (80012b0 <__aeabi_fsub+0x34c>)
 800103c:	4003      	ands	r3, r0
 800103e:	0840      	lsrs	r0, r0, #1
 8001040:	4010      	ands	r0, r2
 8001042:	4318      	orrs	r0, r3
 8001044:	e7c8      	b.n	8000fd8 <__aeabi_fsub+0x74>
 8001046:	2e00      	cmp	r6, #0
 8001048:	d020      	beq.n	800108c <__aeabi_fsub+0x128>
 800104a:	428c      	cmp	r4, r1
 800104c:	d023      	beq.n	8001096 <__aeabi_fsub+0x132>
 800104e:	0028      	movs	r0, r5
 8001050:	38ff      	subs	r0, #255	; 0xff
 8001052:	2800      	cmp	r0, #0
 8001054:	d039      	beq.n	80010ca <__aeabi_fsub+0x166>
 8001056:	1b57      	subs	r7, r2, r5
 8001058:	2d00      	cmp	r5, #0
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0xfa>
 800105c:	e09d      	b.n	800119a <__aeabi_fsub+0x236>
 800105e:	4663      	mov	r3, ip
 8001060:	2b00      	cmp	r3, #0
 8001062:	d100      	bne.n	8001066 <__aeabi_fsub+0x102>
 8001064:	e0db      	b.n	800121e <__aeabi_fsub+0x2ba>
 8001066:	1e7b      	subs	r3, r7, #1
 8001068:	2f01      	cmp	r7, #1
 800106a:	d100      	bne.n	800106e <__aeabi_fsub+0x10a>
 800106c:	e10d      	b.n	800128a <__aeabi_fsub+0x326>
 800106e:	2fff      	cmp	r7, #255	; 0xff
 8001070:	d071      	beq.n	8001156 <__aeabi_fsub+0x1f2>
 8001072:	001f      	movs	r7, r3
 8001074:	e098      	b.n	80011a8 <__aeabi_fsub+0x244>
 8001076:	2e00      	cmp	r6, #0
 8001078:	d100      	bne.n	800107c <__aeabi_fsub+0x118>
 800107a:	e0a7      	b.n	80011cc <__aeabi_fsub+0x268>
 800107c:	1e42      	subs	r2, r0, #1
 800107e:	2801      	cmp	r0, #1
 8001080:	d100      	bne.n	8001084 <__aeabi_fsub+0x120>
 8001082:	e0e6      	b.n	8001252 <__aeabi_fsub+0x2ee>
 8001084:	28ff      	cmp	r0, #255	; 0xff
 8001086:	d068      	beq.n	800115a <__aeabi_fsub+0x1f6>
 8001088:	0010      	movs	r0, r2
 800108a:	e78f      	b.n	8000fac <__aeabi_fsub+0x48>
 800108c:	2001      	movs	r0, #1
 800108e:	4041      	eors	r1, r0
 8001090:	42a1      	cmp	r1, r4
 8001092:	d000      	beq.n	8001096 <__aeabi_fsub+0x132>
 8001094:	e77f      	b.n	8000f96 <__aeabi_fsub+0x32>
 8001096:	20ff      	movs	r0, #255	; 0xff
 8001098:	4240      	negs	r0, r0
 800109a:	4680      	mov	r8, r0
 800109c:	44a8      	add	r8, r5
 800109e:	4640      	mov	r0, r8
 80010a0:	2800      	cmp	r0, #0
 80010a2:	d038      	beq.n	8001116 <__aeabi_fsub+0x1b2>
 80010a4:	1b51      	subs	r1, r2, r5
 80010a6:	2d00      	cmp	r5, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x148>
 80010aa:	e0ae      	b.n	800120a <__aeabi_fsub+0x2a6>
 80010ac:	2aff      	cmp	r2, #255	; 0xff
 80010ae:	d100      	bne.n	80010b2 <__aeabi_fsub+0x14e>
 80010b0:	e0df      	b.n	8001272 <__aeabi_fsub+0x30e>
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	4660      	mov	r0, ip
 80010b6:	04db      	lsls	r3, r3, #19
 80010b8:	4318      	orrs	r0, r3
 80010ba:	4684      	mov	ip, r0
 80010bc:	291b      	cmp	r1, #27
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_fsub+0x15e>
 80010c0:	e0d9      	b.n	8001276 <__aeabi_fsub+0x312>
 80010c2:	2001      	movs	r0, #1
 80010c4:	0015      	movs	r5, r2
 80010c6:	1980      	adds	r0, r0, r6
 80010c8:	e7b1      	b.n	800102e <__aeabi_fsub+0xca>
 80010ca:	20fe      	movs	r0, #254	; 0xfe
 80010cc:	1c6a      	adds	r2, r5, #1
 80010ce:	4210      	tst	r0, r2
 80010d0:	d171      	bne.n	80011b6 <__aeabi_fsub+0x252>
 80010d2:	2d00      	cmp	r5, #0
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x174>
 80010d6:	e0a6      	b.n	8001226 <__aeabi_fsub+0x2c2>
 80010d8:	4663      	mov	r3, ip
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x17c>
 80010de:	e0d9      	b.n	8001294 <__aeabi_fsub+0x330>
 80010e0:	2200      	movs	r2, #0
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x184>
 80010e6:	e788      	b.n	8000ffa <__aeabi_fsub+0x96>
 80010e8:	1b98      	subs	r0, r3, r6
 80010ea:	0143      	lsls	r3, r0, #5
 80010ec:	d400      	bmi.n	80010f0 <__aeabi_fsub+0x18c>
 80010ee:	e0e1      	b.n	80012b4 <__aeabi_fsub+0x350>
 80010f0:	4663      	mov	r3, ip
 80010f2:	000c      	movs	r4, r1
 80010f4:	1af0      	subs	r0, r6, r3
 80010f6:	e76f      	b.n	8000fd8 <__aeabi_fsub+0x74>
 80010f8:	2e00      	cmp	r6, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_fsub+0x19a>
 80010fc:	e0b7      	b.n	800126e <__aeabi_fsub+0x30a>
 80010fe:	0002      	movs	r2, r0
 8001100:	3a01      	subs	r2, #1
 8001102:	2801      	cmp	r0, #1
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x1a4>
 8001106:	e09c      	b.n	8001242 <__aeabi_fsub+0x2de>
 8001108:	28ff      	cmp	r0, #255	; 0xff
 800110a:	d026      	beq.n	800115a <__aeabi_fsub+0x1f6>
 800110c:	4690      	mov	r8, r2
 800110e:	e788      	b.n	8001022 <__aeabi_fsub+0xbe>
 8001110:	22ff      	movs	r2, #255	; 0xff
 8001112:	2700      	movs	r7, #0
 8001114:	e771      	b.n	8000ffa <__aeabi_fsub+0x96>
 8001116:	20fe      	movs	r0, #254	; 0xfe
 8001118:	1c6a      	adds	r2, r5, #1
 800111a:	4210      	tst	r0, r2
 800111c:	d064      	beq.n	80011e8 <__aeabi_fsub+0x284>
 800111e:	2aff      	cmp	r2, #255	; 0xff
 8001120:	d0f6      	beq.n	8001110 <__aeabi_fsub+0x1ac>
 8001122:	0015      	movs	r5, r2
 8001124:	4466      	add	r6, ip
 8001126:	0870      	lsrs	r0, r6, #1
 8001128:	0743      	lsls	r3, r0, #29
 800112a:	d000      	beq.n	800112e <__aeabi_fsub+0x1ca>
 800112c:	e756      	b.n	8000fdc <__aeabi_fsub+0x78>
 800112e:	08c3      	lsrs	r3, r0, #3
 8001130:	2dff      	cmp	r5, #255	; 0xff
 8001132:	d012      	beq.n	800115a <__aeabi_fsub+0x1f6>
 8001134:	025b      	lsls	r3, r3, #9
 8001136:	0a5f      	lsrs	r7, r3, #9
 8001138:	b2ea      	uxtb	r2, r5
 800113a:	e75e      	b.n	8000ffa <__aeabi_fsub+0x96>
 800113c:	4662      	mov	r2, ip
 800113e:	2a00      	cmp	r2, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x1e0>
 8001142:	e096      	b.n	8001272 <__aeabi_fsub+0x30e>
 8001144:	2e00      	cmp	r6, #0
 8001146:	d008      	beq.n	800115a <__aeabi_fsub+0x1f6>
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	03d2      	lsls	r2, r2, #15
 800114c:	4213      	tst	r3, r2
 800114e:	d004      	beq.n	800115a <__aeabi_fsub+0x1f6>
 8001150:	4648      	mov	r0, r9
 8001152:	4210      	tst	r0, r2
 8001154:	d101      	bne.n	800115a <__aeabi_fsub+0x1f6>
 8001156:	000c      	movs	r4, r1
 8001158:	464b      	mov	r3, r9
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0d8      	beq.n	8001110 <__aeabi_fsub+0x1ac>
 800115e:	2780      	movs	r7, #128	; 0x80
 8001160:	03ff      	lsls	r7, r7, #15
 8001162:	431f      	orrs	r7, r3
 8001164:	027f      	lsls	r7, r7, #9
 8001166:	22ff      	movs	r2, #255	; 0xff
 8001168:	0a7f      	lsrs	r7, r7, #9
 800116a:	e746      	b.n	8000ffa <__aeabi_fsub+0x96>
 800116c:	2320      	movs	r3, #32
 800116e:	003a      	movs	r2, r7
 8001170:	1b45      	subs	r5, r0, r5
 8001172:	0038      	movs	r0, r7
 8001174:	3501      	adds	r5, #1
 8001176:	40ea      	lsrs	r2, r5
 8001178:	1b5d      	subs	r5, r3, r5
 800117a:	40a8      	lsls	r0, r5
 800117c:	1e43      	subs	r3, r0, #1
 800117e:	4198      	sbcs	r0, r3
 8001180:	2500      	movs	r5, #0
 8001182:	4310      	orrs	r0, r2
 8001184:	e728      	b.n	8000fd8 <__aeabi_fsub+0x74>
 8001186:	2320      	movs	r3, #32
 8001188:	1a1b      	subs	r3, r3, r0
 800118a:	0032      	movs	r2, r6
 800118c:	409e      	lsls	r6, r3
 800118e:	40c2      	lsrs	r2, r0
 8001190:	0030      	movs	r0, r6
 8001192:	1e43      	subs	r3, r0, #1
 8001194:	4198      	sbcs	r0, r3
 8001196:	4310      	orrs	r0, r2
 8001198:	e70c      	b.n	8000fb4 <__aeabi_fsub+0x50>
 800119a:	2aff      	cmp	r2, #255	; 0xff
 800119c:	d0db      	beq.n	8001156 <__aeabi_fsub+0x1f2>
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	4660      	mov	r0, ip
 80011a2:	04db      	lsls	r3, r3, #19
 80011a4:	4318      	orrs	r0, r3
 80011a6:	4684      	mov	ip, r0
 80011a8:	2f1b      	cmp	r7, #27
 80011aa:	dd56      	ble.n	800125a <__aeabi_fsub+0x2f6>
 80011ac:	2001      	movs	r0, #1
 80011ae:	000c      	movs	r4, r1
 80011b0:	0015      	movs	r5, r2
 80011b2:	1a30      	subs	r0, r6, r0
 80011b4:	e700      	b.n	8000fb8 <__aeabi_fsub+0x54>
 80011b6:	4663      	mov	r3, ip
 80011b8:	1b9f      	subs	r7, r3, r6
 80011ba:	017b      	lsls	r3, r7, #5
 80011bc:	d43d      	bmi.n	800123a <__aeabi_fsub+0x2d6>
 80011be:	2f00      	cmp	r7, #0
 80011c0:	d000      	beq.n	80011c4 <__aeabi_fsub+0x260>
 80011c2:	e6fe      	b.n	8000fc2 <__aeabi_fsub+0x5e>
 80011c4:	2400      	movs	r4, #0
 80011c6:	2200      	movs	r2, #0
 80011c8:	2700      	movs	r7, #0
 80011ca:	e716      	b.n	8000ffa <__aeabi_fsub+0x96>
 80011cc:	0005      	movs	r5, r0
 80011ce:	e7af      	b.n	8001130 <__aeabi_fsub+0x1cc>
 80011d0:	0032      	movs	r2, r6
 80011d2:	4643      	mov	r3, r8
 80011d4:	4641      	mov	r1, r8
 80011d6:	40da      	lsrs	r2, r3
 80011d8:	2320      	movs	r3, #32
 80011da:	1a5b      	subs	r3, r3, r1
 80011dc:	409e      	lsls	r6, r3
 80011de:	0030      	movs	r0, r6
 80011e0:	1e43      	subs	r3, r0, #1
 80011e2:	4198      	sbcs	r0, r3
 80011e4:	4310      	orrs	r0, r2
 80011e6:	e721      	b.n	800102c <__aeabi_fsub+0xc8>
 80011e8:	2d00      	cmp	r5, #0
 80011ea:	d1a7      	bne.n	800113c <__aeabi_fsub+0x1d8>
 80011ec:	4663      	mov	r3, ip
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d059      	beq.n	80012a6 <__aeabi_fsub+0x342>
 80011f2:	2200      	movs	r2, #0
 80011f4:	2e00      	cmp	r6, #0
 80011f6:	d100      	bne.n	80011fa <__aeabi_fsub+0x296>
 80011f8:	e6ff      	b.n	8000ffa <__aeabi_fsub+0x96>
 80011fa:	0030      	movs	r0, r6
 80011fc:	4460      	add	r0, ip
 80011fe:	0143      	lsls	r3, r0, #5
 8001200:	d592      	bpl.n	8001128 <__aeabi_fsub+0x1c4>
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <__aeabi_fsub+0x348>)
 8001204:	3501      	adds	r5, #1
 8001206:	4018      	ands	r0, r3
 8001208:	e78e      	b.n	8001128 <__aeabi_fsub+0x1c4>
 800120a:	4663      	mov	r3, ip
 800120c:	2b00      	cmp	r3, #0
 800120e:	d047      	beq.n	80012a0 <__aeabi_fsub+0x33c>
 8001210:	1e4b      	subs	r3, r1, #1
 8001212:	2901      	cmp	r1, #1
 8001214:	d015      	beq.n	8001242 <__aeabi_fsub+0x2de>
 8001216:	29ff      	cmp	r1, #255	; 0xff
 8001218:	d02b      	beq.n	8001272 <__aeabi_fsub+0x30e>
 800121a:	0019      	movs	r1, r3
 800121c:	e74e      	b.n	80010bc <__aeabi_fsub+0x158>
 800121e:	000c      	movs	r4, r1
 8001220:	464b      	mov	r3, r9
 8001222:	003d      	movs	r5, r7
 8001224:	e784      	b.n	8001130 <__aeabi_fsub+0x1cc>
 8001226:	4662      	mov	r2, ip
 8001228:	2a00      	cmp	r2, #0
 800122a:	d18b      	bne.n	8001144 <__aeabi_fsub+0x1e0>
 800122c:	2e00      	cmp	r6, #0
 800122e:	d192      	bne.n	8001156 <__aeabi_fsub+0x1f2>
 8001230:	2780      	movs	r7, #128	; 0x80
 8001232:	2400      	movs	r4, #0
 8001234:	22ff      	movs	r2, #255	; 0xff
 8001236:	03ff      	lsls	r7, r7, #15
 8001238:	e6df      	b.n	8000ffa <__aeabi_fsub+0x96>
 800123a:	4663      	mov	r3, ip
 800123c:	000c      	movs	r4, r1
 800123e:	1af7      	subs	r7, r6, r3
 8001240:	e6bf      	b.n	8000fc2 <__aeabi_fsub+0x5e>
 8001242:	0030      	movs	r0, r6
 8001244:	4460      	add	r0, ip
 8001246:	2501      	movs	r5, #1
 8001248:	0143      	lsls	r3, r0, #5
 800124a:	d400      	bmi.n	800124e <__aeabi_fsub+0x2ea>
 800124c:	e76c      	b.n	8001128 <__aeabi_fsub+0x1c4>
 800124e:	2502      	movs	r5, #2
 8001250:	e6f2      	b.n	8001038 <__aeabi_fsub+0xd4>
 8001252:	4663      	mov	r3, ip
 8001254:	2501      	movs	r5, #1
 8001256:	1b98      	subs	r0, r3, r6
 8001258:	e6ae      	b.n	8000fb8 <__aeabi_fsub+0x54>
 800125a:	2320      	movs	r3, #32
 800125c:	4664      	mov	r4, ip
 800125e:	4660      	mov	r0, ip
 8001260:	40fc      	lsrs	r4, r7
 8001262:	1bdf      	subs	r7, r3, r7
 8001264:	40b8      	lsls	r0, r7
 8001266:	1e43      	subs	r3, r0, #1
 8001268:	4198      	sbcs	r0, r3
 800126a:	4320      	orrs	r0, r4
 800126c:	e79f      	b.n	80011ae <__aeabi_fsub+0x24a>
 800126e:	0005      	movs	r5, r0
 8001270:	e75e      	b.n	8001130 <__aeabi_fsub+0x1cc>
 8001272:	464b      	mov	r3, r9
 8001274:	e771      	b.n	800115a <__aeabi_fsub+0x1f6>
 8001276:	2320      	movs	r3, #32
 8001278:	4665      	mov	r5, ip
 800127a:	4660      	mov	r0, ip
 800127c:	40cd      	lsrs	r5, r1
 800127e:	1a59      	subs	r1, r3, r1
 8001280:	4088      	lsls	r0, r1
 8001282:	1e43      	subs	r3, r0, #1
 8001284:	4198      	sbcs	r0, r3
 8001286:	4328      	orrs	r0, r5
 8001288:	e71c      	b.n	80010c4 <__aeabi_fsub+0x160>
 800128a:	4663      	mov	r3, ip
 800128c:	000c      	movs	r4, r1
 800128e:	2501      	movs	r5, #1
 8001290:	1af0      	subs	r0, r6, r3
 8001292:	e691      	b.n	8000fb8 <__aeabi_fsub+0x54>
 8001294:	2e00      	cmp	r6, #0
 8001296:	d095      	beq.n	80011c4 <__aeabi_fsub+0x260>
 8001298:	000c      	movs	r4, r1
 800129a:	464f      	mov	r7, r9
 800129c:	2200      	movs	r2, #0
 800129e:	e6ac      	b.n	8000ffa <__aeabi_fsub+0x96>
 80012a0:	464b      	mov	r3, r9
 80012a2:	000d      	movs	r5, r1
 80012a4:	e744      	b.n	8001130 <__aeabi_fsub+0x1cc>
 80012a6:	464f      	mov	r7, r9
 80012a8:	2200      	movs	r2, #0
 80012aa:	e6a6      	b.n	8000ffa <__aeabi_fsub+0x96>
 80012ac:	fbffffff 	.word	0xfbffffff
 80012b0:	7dffffff 	.word	0x7dffffff
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d000      	beq.n	80012ba <__aeabi_fsub+0x356>
 80012b8:	e736      	b.n	8001128 <__aeabi_fsub+0x1c4>
 80012ba:	2400      	movs	r4, #0
 80012bc:	2700      	movs	r7, #0
 80012be:	e69c      	b.n	8000ffa <__aeabi_fsub+0x96>

080012c0 <__aeabi_i2f>:
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d013      	beq.n	80012ee <__aeabi_i2f+0x2e>
 80012c6:	17c3      	asrs	r3, r0, #31
 80012c8:	18c6      	adds	r6, r0, r3
 80012ca:	405e      	eors	r6, r3
 80012cc:	0fc4      	lsrs	r4, r0, #31
 80012ce:	0030      	movs	r0, r6
 80012d0:	f001 ff3c 	bl	800314c <__clzsi2>
 80012d4:	239e      	movs	r3, #158	; 0x9e
 80012d6:	0005      	movs	r5, r0
 80012d8:	1a1b      	subs	r3, r3, r0
 80012da:	2b96      	cmp	r3, #150	; 0x96
 80012dc:	dc0f      	bgt.n	80012fe <__aeabi_i2f+0x3e>
 80012de:	2808      	cmp	r0, #8
 80012e0:	dd01      	ble.n	80012e6 <__aeabi_i2f+0x26>
 80012e2:	3d08      	subs	r5, #8
 80012e4:	40ae      	lsls	r6, r5
 80012e6:	0276      	lsls	r6, r6, #9
 80012e8:	0a76      	lsrs	r6, r6, #9
 80012ea:	b2d8      	uxtb	r0, r3
 80012ec:	e002      	b.n	80012f4 <__aeabi_i2f+0x34>
 80012ee:	2400      	movs	r4, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	2600      	movs	r6, #0
 80012f4:	05c0      	lsls	r0, r0, #23
 80012f6:	4330      	orrs	r0, r6
 80012f8:	07e4      	lsls	r4, r4, #31
 80012fa:	4320      	orrs	r0, r4
 80012fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012fe:	2b99      	cmp	r3, #153	; 0x99
 8001300:	dd0c      	ble.n	800131c <__aeabi_i2f+0x5c>
 8001302:	2205      	movs	r2, #5
 8001304:	0031      	movs	r1, r6
 8001306:	1a12      	subs	r2, r2, r0
 8001308:	40d1      	lsrs	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	0001      	movs	r1, r0
 800130e:	0030      	movs	r0, r6
 8001310:	311b      	adds	r1, #27
 8001312:	4088      	lsls	r0, r1
 8001314:	1e41      	subs	r1, r0, #1
 8001316:	4188      	sbcs	r0, r1
 8001318:	4302      	orrs	r2, r0
 800131a:	0016      	movs	r6, r2
 800131c:	2d05      	cmp	r5, #5
 800131e:	dc12      	bgt.n	8001346 <__aeabi_i2f+0x86>
 8001320:	0031      	movs	r1, r6
 8001322:	4f0d      	ldr	r7, [pc, #52]	; (8001358 <__aeabi_i2f+0x98>)
 8001324:	4039      	ands	r1, r7
 8001326:	0772      	lsls	r2, r6, #29
 8001328:	d009      	beq.n	800133e <__aeabi_i2f+0x7e>
 800132a:	200f      	movs	r0, #15
 800132c:	4030      	ands	r0, r6
 800132e:	2804      	cmp	r0, #4
 8001330:	d005      	beq.n	800133e <__aeabi_i2f+0x7e>
 8001332:	3104      	adds	r1, #4
 8001334:	014a      	lsls	r2, r1, #5
 8001336:	d502      	bpl.n	800133e <__aeabi_i2f+0x7e>
 8001338:	239f      	movs	r3, #159	; 0x9f
 800133a:	4039      	ands	r1, r7
 800133c:	1b5b      	subs	r3, r3, r5
 800133e:	0189      	lsls	r1, r1, #6
 8001340:	0a4e      	lsrs	r6, r1, #9
 8001342:	b2d8      	uxtb	r0, r3
 8001344:	e7d6      	b.n	80012f4 <__aeabi_i2f+0x34>
 8001346:	1f6a      	subs	r2, r5, #5
 8001348:	4096      	lsls	r6, r2
 800134a:	0031      	movs	r1, r6
 800134c:	4f02      	ldr	r7, [pc, #8]	; (8001358 <__aeabi_i2f+0x98>)
 800134e:	4039      	ands	r1, r7
 8001350:	0772      	lsls	r2, r6, #29
 8001352:	d0f4      	beq.n	800133e <__aeabi_i2f+0x7e>
 8001354:	e7e9      	b.n	800132a <__aeabi_i2f+0x6a>
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	fbffffff 	.word	0xfbffffff

0800135c <__aeabi_ui2f>:
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	1e05      	subs	r5, r0, #0
 8001360:	d00e      	beq.n	8001380 <__aeabi_ui2f+0x24>
 8001362:	f001 fef3 	bl	800314c <__clzsi2>
 8001366:	239e      	movs	r3, #158	; 0x9e
 8001368:	0004      	movs	r4, r0
 800136a:	1a1b      	subs	r3, r3, r0
 800136c:	2b96      	cmp	r3, #150	; 0x96
 800136e:	dc0c      	bgt.n	800138a <__aeabi_ui2f+0x2e>
 8001370:	2808      	cmp	r0, #8
 8001372:	dd01      	ble.n	8001378 <__aeabi_ui2f+0x1c>
 8001374:	3c08      	subs	r4, #8
 8001376:	40a5      	lsls	r5, r4
 8001378:	026d      	lsls	r5, r5, #9
 800137a:	0a6d      	lsrs	r5, r5, #9
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	e001      	b.n	8001384 <__aeabi_ui2f+0x28>
 8001380:	2000      	movs	r0, #0
 8001382:	2500      	movs	r5, #0
 8001384:	05c0      	lsls	r0, r0, #23
 8001386:	4328      	orrs	r0, r5
 8001388:	bd70      	pop	{r4, r5, r6, pc}
 800138a:	2b99      	cmp	r3, #153	; 0x99
 800138c:	dd09      	ble.n	80013a2 <__aeabi_ui2f+0x46>
 800138e:	0002      	movs	r2, r0
 8001390:	0029      	movs	r1, r5
 8001392:	321b      	adds	r2, #27
 8001394:	4091      	lsls	r1, r2
 8001396:	1e4a      	subs	r2, r1, #1
 8001398:	4191      	sbcs	r1, r2
 800139a:	2205      	movs	r2, #5
 800139c:	1a12      	subs	r2, r2, r0
 800139e:	40d5      	lsrs	r5, r2
 80013a0:	430d      	orrs	r5, r1
 80013a2:	2c05      	cmp	r4, #5
 80013a4:	dc12      	bgt.n	80013cc <__aeabi_ui2f+0x70>
 80013a6:	0029      	movs	r1, r5
 80013a8:	4e0c      	ldr	r6, [pc, #48]	; (80013dc <__aeabi_ui2f+0x80>)
 80013aa:	4031      	ands	r1, r6
 80013ac:	076a      	lsls	r2, r5, #29
 80013ae:	d009      	beq.n	80013c4 <__aeabi_ui2f+0x68>
 80013b0:	200f      	movs	r0, #15
 80013b2:	4028      	ands	r0, r5
 80013b4:	2804      	cmp	r0, #4
 80013b6:	d005      	beq.n	80013c4 <__aeabi_ui2f+0x68>
 80013b8:	3104      	adds	r1, #4
 80013ba:	014a      	lsls	r2, r1, #5
 80013bc:	d502      	bpl.n	80013c4 <__aeabi_ui2f+0x68>
 80013be:	239f      	movs	r3, #159	; 0x9f
 80013c0:	4031      	ands	r1, r6
 80013c2:	1b1b      	subs	r3, r3, r4
 80013c4:	0189      	lsls	r1, r1, #6
 80013c6:	0a4d      	lsrs	r5, r1, #9
 80013c8:	b2d8      	uxtb	r0, r3
 80013ca:	e7db      	b.n	8001384 <__aeabi_ui2f+0x28>
 80013cc:	1f62      	subs	r2, r4, #5
 80013ce:	4095      	lsls	r5, r2
 80013d0:	0029      	movs	r1, r5
 80013d2:	4e02      	ldr	r6, [pc, #8]	; (80013dc <__aeabi_ui2f+0x80>)
 80013d4:	4031      	ands	r1, r6
 80013d6:	076a      	lsls	r2, r5, #29
 80013d8:	d0f4      	beq.n	80013c4 <__aeabi_ui2f+0x68>
 80013da:	e7e9      	b.n	80013b0 <__aeabi_ui2f+0x54>
 80013dc:	fbffffff 	.word	0xfbffffff

080013e0 <__aeabi_dadd>:
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	464f      	mov	r7, r9
 80013e4:	4646      	mov	r6, r8
 80013e6:	46d6      	mov	lr, sl
 80013e8:	000d      	movs	r5, r1
 80013ea:	0004      	movs	r4, r0
 80013ec:	b5c0      	push	{r6, r7, lr}
 80013ee:	001f      	movs	r7, r3
 80013f0:	0011      	movs	r1, r2
 80013f2:	0328      	lsls	r0, r5, #12
 80013f4:	0f62      	lsrs	r2, r4, #29
 80013f6:	0a40      	lsrs	r0, r0, #9
 80013f8:	4310      	orrs	r0, r2
 80013fa:	007a      	lsls	r2, r7, #1
 80013fc:	0d52      	lsrs	r2, r2, #21
 80013fe:	00e3      	lsls	r3, r4, #3
 8001400:	033c      	lsls	r4, r7, #12
 8001402:	4691      	mov	r9, r2
 8001404:	0a64      	lsrs	r4, r4, #9
 8001406:	0ffa      	lsrs	r2, r7, #31
 8001408:	0f4f      	lsrs	r7, r1, #29
 800140a:	006e      	lsls	r6, r5, #1
 800140c:	4327      	orrs	r7, r4
 800140e:	4692      	mov	sl, r2
 8001410:	46b8      	mov	r8, r7
 8001412:	0d76      	lsrs	r6, r6, #21
 8001414:	0fed      	lsrs	r5, r5, #31
 8001416:	00c9      	lsls	r1, r1, #3
 8001418:	4295      	cmp	r5, r2
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x3e>
 800141c:	e099      	b.n	8001552 <__aeabi_dadd+0x172>
 800141e:	464c      	mov	r4, r9
 8001420:	1b34      	subs	r4, r6, r4
 8001422:	46a4      	mov	ip, r4
 8001424:	2c00      	cmp	r4, #0
 8001426:	dc00      	bgt.n	800142a <__aeabi_dadd+0x4a>
 8001428:	e07c      	b.n	8001524 <__aeabi_dadd+0x144>
 800142a:	464a      	mov	r2, r9
 800142c:	2a00      	cmp	r2, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x52>
 8001430:	e0b8      	b.n	80015a4 <__aeabi_dadd+0x1c4>
 8001432:	4ac5      	ldr	r2, [pc, #788]	; (8001748 <__aeabi_dadd+0x368>)
 8001434:	4296      	cmp	r6, r2
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x5a>
 8001438:	e11c      	b.n	8001674 <__aeabi_dadd+0x294>
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	003c      	movs	r4, r7
 800143e:	0412      	lsls	r2, r2, #16
 8001440:	4314      	orrs	r4, r2
 8001442:	46a0      	mov	r8, r4
 8001444:	4662      	mov	r2, ip
 8001446:	2a38      	cmp	r2, #56	; 0x38
 8001448:	dd00      	ble.n	800144c <__aeabi_dadd+0x6c>
 800144a:	e161      	b.n	8001710 <__aeabi_dadd+0x330>
 800144c:	2a1f      	cmp	r2, #31
 800144e:	dd00      	ble.n	8001452 <__aeabi_dadd+0x72>
 8001450:	e1cc      	b.n	80017ec <__aeabi_dadd+0x40c>
 8001452:	4664      	mov	r4, ip
 8001454:	2220      	movs	r2, #32
 8001456:	1b12      	subs	r2, r2, r4
 8001458:	4644      	mov	r4, r8
 800145a:	4094      	lsls	r4, r2
 800145c:	000f      	movs	r7, r1
 800145e:	46a1      	mov	r9, r4
 8001460:	4664      	mov	r4, ip
 8001462:	4091      	lsls	r1, r2
 8001464:	40e7      	lsrs	r7, r4
 8001466:	464c      	mov	r4, r9
 8001468:	1e4a      	subs	r2, r1, #1
 800146a:	4191      	sbcs	r1, r2
 800146c:	433c      	orrs	r4, r7
 800146e:	4642      	mov	r2, r8
 8001470:	4321      	orrs	r1, r4
 8001472:	4664      	mov	r4, ip
 8001474:	40e2      	lsrs	r2, r4
 8001476:	1a80      	subs	r0, r0, r2
 8001478:	1a5c      	subs	r4, r3, r1
 800147a:	42a3      	cmp	r3, r4
 800147c:	419b      	sbcs	r3, r3
 800147e:	425f      	negs	r7, r3
 8001480:	1bc7      	subs	r7, r0, r7
 8001482:	023b      	lsls	r3, r7, #8
 8001484:	d400      	bmi.n	8001488 <__aeabi_dadd+0xa8>
 8001486:	e0d0      	b.n	800162a <__aeabi_dadd+0x24a>
 8001488:	027f      	lsls	r7, r7, #9
 800148a:	0a7f      	lsrs	r7, r7, #9
 800148c:	2f00      	cmp	r7, #0
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0xb2>
 8001490:	e0ff      	b.n	8001692 <__aeabi_dadd+0x2b2>
 8001492:	0038      	movs	r0, r7
 8001494:	f001 fe5a 	bl	800314c <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	3908      	subs	r1, #8
 800149c:	2320      	movs	r3, #32
 800149e:	0022      	movs	r2, r4
 80014a0:	1a5b      	subs	r3, r3, r1
 80014a2:	408f      	lsls	r7, r1
 80014a4:	40da      	lsrs	r2, r3
 80014a6:	408c      	lsls	r4, r1
 80014a8:	4317      	orrs	r7, r2
 80014aa:	42b1      	cmp	r1, r6
 80014ac:	da00      	bge.n	80014b0 <__aeabi_dadd+0xd0>
 80014ae:	e0ff      	b.n	80016b0 <__aeabi_dadd+0x2d0>
 80014b0:	1b89      	subs	r1, r1, r6
 80014b2:	1c4b      	adds	r3, r1, #1
 80014b4:	2b1f      	cmp	r3, #31
 80014b6:	dd00      	ble.n	80014ba <__aeabi_dadd+0xda>
 80014b8:	e0a8      	b.n	800160c <__aeabi_dadd+0x22c>
 80014ba:	2220      	movs	r2, #32
 80014bc:	0039      	movs	r1, r7
 80014be:	1ad2      	subs	r2, r2, r3
 80014c0:	0020      	movs	r0, r4
 80014c2:	4094      	lsls	r4, r2
 80014c4:	4091      	lsls	r1, r2
 80014c6:	40d8      	lsrs	r0, r3
 80014c8:	1e62      	subs	r2, r4, #1
 80014ca:	4194      	sbcs	r4, r2
 80014cc:	40df      	lsrs	r7, r3
 80014ce:	2600      	movs	r6, #0
 80014d0:	4301      	orrs	r1, r0
 80014d2:	430c      	orrs	r4, r1
 80014d4:	0763      	lsls	r3, r4, #29
 80014d6:	d009      	beq.n	80014ec <__aeabi_dadd+0x10c>
 80014d8:	230f      	movs	r3, #15
 80014da:	4023      	ands	r3, r4
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d005      	beq.n	80014ec <__aeabi_dadd+0x10c>
 80014e0:	1d23      	adds	r3, r4, #4
 80014e2:	42a3      	cmp	r3, r4
 80014e4:	41a4      	sbcs	r4, r4
 80014e6:	4264      	negs	r4, r4
 80014e8:	193f      	adds	r7, r7, r4
 80014ea:	001c      	movs	r4, r3
 80014ec:	023b      	lsls	r3, r7, #8
 80014ee:	d400      	bmi.n	80014f2 <__aeabi_dadd+0x112>
 80014f0:	e09e      	b.n	8001630 <__aeabi_dadd+0x250>
 80014f2:	4b95      	ldr	r3, [pc, #596]	; (8001748 <__aeabi_dadd+0x368>)
 80014f4:	3601      	adds	r6, #1
 80014f6:	429e      	cmp	r6, r3
 80014f8:	d100      	bne.n	80014fc <__aeabi_dadd+0x11c>
 80014fa:	e0b7      	b.n	800166c <__aeabi_dadd+0x28c>
 80014fc:	4a93      	ldr	r2, [pc, #588]	; (800174c <__aeabi_dadd+0x36c>)
 80014fe:	08e4      	lsrs	r4, r4, #3
 8001500:	4017      	ands	r7, r2
 8001502:	077b      	lsls	r3, r7, #29
 8001504:	0571      	lsls	r1, r6, #21
 8001506:	027f      	lsls	r7, r7, #9
 8001508:	4323      	orrs	r3, r4
 800150a:	0b3f      	lsrs	r7, r7, #12
 800150c:	0d4a      	lsrs	r2, r1, #21
 800150e:	0512      	lsls	r2, r2, #20
 8001510:	433a      	orrs	r2, r7
 8001512:	07ed      	lsls	r5, r5, #31
 8001514:	432a      	orrs	r2, r5
 8001516:	0018      	movs	r0, r3
 8001518:	0011      	movs	r1, r2
 800151a:	bce0      	pop	{r5, r6, r7}
 800151c:	46ba      	mov	sl, r7
 800151e:	46b1      	mov	r9, r6
 8001520:	46a8      	mov	r8, r5
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001524:	2c00      	cmp	r4, #0
 8001526:	d04b      	beq.n	80015c0 <__aeabi_dadd+0x1e0>
 8001528:	464c      	mov	r4, r9
 800152a:	1ba4      	subs	r4, r4, r6
 800152c:	46a4      	mov	ip, r4
 800152e:	2e00      	cmp	r6, #0
 8001530:	d000      	beq.n	8001534 <__aeabi_dadd+0x154>
 8001532:	e123      	b.n	800177c <__aeabi_dadd+0x39c>
 8001534:	0004      	movs	r4, r0
 8001536:	431c      	orrs	r4, r3
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x15c>
 800153a:	e1af      	b.n	800189c <__aeabi_dadd+0x4bc>
 800153c:	4662      	mov	r2, ip
 800153e:	1e54      	subs	r4, r2, #1
 8001540:	2a01      	cmp	r2, #1
 8001542:	d100      	bne.n	8001546 <__aeabi_dadd+0x166>
 8001544:	e215      	b.n	8001972 <__aeabi_dadd+0x592>
 8001546:	4d80      	ldr	r5, [pc, #512]	; (8001748 <__aeabi_dadd+0x368>)
 8001548:	45ac      	cmp	ip, r5
 800154a:	d100      	bne.n	800154e <__aeabi_dadd+0x16e>
 800154c:	e1c8      	b.n	80018e0 <__aeabi_dadd+0x500>
 800154e:	46a4      	mov	ip, r4
 8001550:	e11b      	b.n	800178a <__aeabi_dadd+0x3aa>
 8001552:	464a      	mov	r2, r9
 8001554:	1ab2      	subs	r2, r6, r2
 8001556:	4694      	mov	ip, r2
 8001558:	2a00      	cmp	r2, #0
 800155a:	dc00      	bgt.n	800155e <__aeabi_dadd+0x17e>
 800155c:	e0ac      	b.n	80016b8 <__aeabi_dadd+0x2d8>
 800155e:	464a      	mov	r2, r9
 8001560:	2a00      	cmp	r2, #0
 8001562:	d043      	beq.n	80015ec <__aeabi_dadd+0x20c>
 8001564:	4a78      	ldr	r2, [pc, #480]	; (8001748 <__aeabi_dadd+0x368>)
 8001566:	4296      	cmp	r6, r2
 8001568:	d100      	bne.n	800156c <__aeabi_dadd+0x18c>
 800156a:	e1af      	b.n	80018cc <__aeabi_dadd+0x4ec>
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	003c      	movs	r4, r7
 8001570:	0412      	lsls	r2, r2, #16
 8001572:	4314      	orrs	r4, r2
 8001574:	46a0      	mov	r8, r4
 8001576:	4662      	mov	r2, ip
 8001578:	2a38      	cmp	r2, #56	; 0x38
 800157a:	dc67      	bgt.n	800164c <__aeabi_dadd+0x26c>
 800157c:	2a1f      	cmp	r2, #31
 800157e:	dc00      	bgt.n	8001582 <__aeabi_dadd+0x1a2>
 8001580:	e15f      	b.n	8001842 <__aeabi_dadd+0x462>
 8001582:	4647      	mov	r7, r8
 8001584:	3a20      	subs	r2, #32
 8001586:	40d7      	lsrs	r7, r2
 8001588:	4662      	mov	r2, ip
 800158a:	2a20      	cmp	r2, #32
 800158c:	d005      	beq.n	800159a <__aeabi_dadd+0x1ba>
 800158e:	4664      	mov	r4, ip
 8001590:	2240      	movs	r2, #64	; 0x40
 8001592:	1b12      	subs	r2, r2, r4
 8001594:	4644      	mov	r4, r8
 8001596:	4094      	lsls	r4, r2
 8001598:	4321      	orrs	r1, r4
 800159a:	1e4a      	subs	r2, r1, #1
 800159c:	4191      	sbcs	r1, r2
 800159e:	000c      	movs	r4, r1
 80015a0:	433c      	orrs	r4, r7
 80015a2:	e057      	b.n	8001654 <__aeabi_dadd+0x274>
 80015a4:	003a      	movs	r2, r7
 80015a6:	430a      	orrs	r2, r1
 80015a8:	d100      	bne.n	80015ac <__aeabi_dadd+0x1cc>
 80015aa:	e105      	b.n	80017b8 <__aeabi_dadd+0x3d8>
 80015ac:	0022      	movs	r2, r4
 80015ae:	3a01      	subs	r2, #1
 80015b0:	2c01      	cmp	r4, #1
 80015b2:	d100      	bne.n	80015b6 <__aeabi_dadd+0x1d6>
 80015b4:	e182      	b.n	80018bc <__aeabi_dadd+0x4dc>
 80015b6:	4c64      	ldr	r4, [pc, #400]	; (8001748 <__aeabi_dadd+0x368>)
 80015b8:	45a4      	cmp	ip, r4
 80015ba:	d05b      	beq.n	8001674 <__aeabi_dadd+0x294>
 80015bc:	4694      	mov	ip, r2
 80015be:	e741      	b.n	8001444 <__aeabi_dadd+0x64>
 80015c0:	4c63      	ldr	r4, [pc, #396]	; (8001750 <__aeabi_dadd+0x370>)
 80015c2:	1c77      	adds	r7, r6, #1
 80015c4:	4227      	tst	r7, r4
 80015c6:	d000      	beq.n	80015ca <__aeabi_dadd+0x1ea>
 80015c8:	e0c4      	b.n	8001754 <__aeabi_dadd+0x374>
 80015ca:	0004      	movs	r4, r0
 80015cc:	431c      	orrs	r4, r3
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	d000      	beq.n	80015d4 <__aeabi_dadd+0x1f4>
 80015d2:	e169      	b.n	80018a8 <__aeabi_dadd+0x4c8>
 80015d4:	2c00      	cmp	r4, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x1fa>
 80015d8:	e1bf      	b.n	800195a <__aeabi_dadd+0x57a>
 80015da:	4644      	mov	r4, r8
 80015dc:	430c      	orrs	r4, r1
 80015de:	d000      	beq.n	80015e2 <__aeabi_dadd+0x202>
 80015e0:	e1d0      	b.n	8001984 <__aeabi_dadd+0x5a4>
 80015e2:	0742      	lsls	r2, r0, #29
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	08c0      	lsrs	r0, r0, #3
 80015ea:	e029      	b.n	8001640 <__aeabi_dadd+0x260>
 80015ec:	003a      	movs	r2, r7
 80015ee:	430a      	orrs	r2, r1
 80015f0:	d100      	bne.n	80015f4 <__aeabi_dadd+0x214>
 80015f2:	e170      	b.n	80018d6 <__aeabi_dadd+0x4f6>
 80015f4:	4662      	mov	r2, ip
 80015f6:	4664      	mov	r4, ip
 80015f8:	3a01      	subs	r2, #1
 80015fa:	2c01      	cmp	r4, #1
 80015fc:	d100      	bne.n	8001600 <__aeabi_dadd+0x220>
 80015fe:	e0e0      	b.n	80017c2 <__aeabi_dadd+0x3e2>
 8001600:	4c51      	ldr	r4, [pc, #324]	; (8001748 <__aeabi_dadd+0x368>)
 8001602:	45a4      	cmp	ip, r4
 8001604:	d100      	bne.n	8001608 <__aeabi_dadd+0x228>
 8001606:	e161      	b.n	80018cc <__aeabi_dadd+0x4ec>
 8001608:	4694      	mov	ip, r2
 800160a:	e7b4      	b.n	8001576 <__aeabi_dadd+0x196>
 800160c:	003a      	movs	r2, r7
 800160e:	391f      	subs	r1, #31
 8001610:	40ca      	lsrs	r2, r1
 8001612:	0011      	movs	r1, r2
 8001614:	2b20      	cmp	r3, #32
 8001616:	d003      	beq.n	8001620 <__aeabi_dadd+0x240>
 8001618:	2240      	movs	r2, #64	; 0x40
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	409f      	lsls	r7, r3
 800161e:	433c      	orrs	r4, r7
 8001620:	1e63      	subs	r3, r4, #1
 8001622:	419c      	sbcs	r4, r3
 8001624:	2700      	movs	r7, #0
 8001626:	2600      	movs	r6, #0
 8001628:	430c      	orrs	r4, r1
 800162a:	0763      	lsls	r3, r4, #29
 800162c:	d000      	beq.n	8001630 <__aeabi_dadd+0x250>
 800162e:	e753      	b.n	80014d8 <__aeabi_dadd+0xf8>
 8001630:	46b4      	mov	ip, r6
 8001632:	08e4      	lsrs	r4, r4, #3
 8001634:	077b      	lsls	r3, r7, #29
 8001636:	4323      	orrs	r3, r4
 8001638:	08f8      	lsrs	r0, r7, #3
 800163a:	4a43      	ldr	r2, [pc, #268]	; (8001748 <__aeabi_dadd+0x368>)
 800163c:	4594      	cmp	ip, r2
 800163e:	d01d      	beq.n	800167c <__aeabi_dadd+0x29c>
 8001640:	4662      	mov	r2, ip
 8001642:	0307      	lsls	r7, r0, #12
 8001644:	0552      	lsls	r2, r2, #21
 8001646:	0b3f      	lsrs	r7, r7, #12
 8001648:	0d52      	lsrs	r2, r2, #21
 800164a:	e760      	b.n	800150e <__aeabi_dadd+0x12e>
 800164c:	4644      	mov	r4, r8
 800164e:	430c      	orrs	r4, r1
 8001650:	1e62      	subs	r2, r4, #1
 8001652:	4194      	sbcs	r4, r2
 8001654:	18e4      	adds	r4, r4, r3
 8001656:	429c      	cmp	r4, r3
 8001658:	419b      	sbcs	r3, r3
 800165a:	425f      	negs	r7, r3
 800165c:	183f      	adds	r7, r7, r0
 800165e:	023b      	lsls	r3, r7, #8
 8001660:	d5e3      	bpl.n	800162a <__aeabi_dadd+0x24a>
 8001662:	4b39      	ldr	r3, [pc, #228]	; (8001748 <__aeabi_dadd+0x368>)
 8001664:	3601      	adds	r6, #1
 8001666:	429e      	cmp	r6, r3
 8001668:	d000      	beq.n	800166c <__aeabi_dadd+0x28c>
 800166a:	e0b5      	b.n	80017d8 <__aeabi_dadd+0x3f8>
 800166c:	0032      	movs	r2, r6
 800166e:	2700      	movs	r7, #0
 8001670:	2300      	movs	r3, #0
 8001672:	e74c      	b.n	800150e <__aeabi_dadd+0x12e>
 8001674:	0742      	lsls	r2, r0, #29
 8001676:	08db      	lsrs	r3, r3, #3
 8001678:	4313      	orrs	r3, r2
 800167a:	08c0      	lsrs	r0, r0, #3
 800167c:	001a      	movs	r2, r3
 800167e:	4302      	orrs	r2, r0
 8001680:	d100      	bne.n	8001684 <__aeabi_dadd+0x2a4>
 8001682:	e1e1      	b.n	8001a48 <__aeabi_dadd+0x668>
 8001684:	2780      	movs	r7, #128	; 0x80
 8001686:	033f      	lsls	r7, r7, #12
 8001688:	4307      	orrs	r7, r0
 800168a:	033f      	lsls	r7, r7, #12
 800168c:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <__aeabi_dadd+0x368>)
 800168e:	0b3f      	lsrs	r7, r7, #12
 8001690:	e73d      	b.n	800150e <__aeabi_dadd+0x12e>
 8001692:	0020      	movs	r0, r4
 8001694:	f001 fd5a 	bl	800314c <__clzsi2>
 8001698:	0001      	movs	r1, r0
 800169a:	3118      	adds	r1, #24
 800169c:	291f      	cmp	r1, #31
 800169e:	dc00      	bgt.n	80016a2 <__aeabi_dadd+0x2c2>
 80016a0:	e6fc      	b.n	800149c <__aeabi_dadd+0xbc>
 80016a2:	3808      	subs	r0, #8
 80016a4:	4084      	lsls	r4, r0
 80016a6:	0027      	movs	r7, r4
 80016a8:	2400      	movs	r4, #0
 80016aa:	42b1      	cmp	r1, r6
 80016ac:	db00      	blt.n	80016b0 <__aeabi_dadd+0x2d0>
 80016ae:	e6ff      	b.n	80014b0 <__aeabi_dadd+0xd0>
 80016b0:	4a26      	ldr	r2, [pc, #152]	; (800174c <__aeabi_dadd+0x36c>)
 80016b2:	1a76      	subs	r6, r6, r1
 80016b4:	4017      	ands	r7, r2
 80016b6:	e70d      	b.n	80014d4 <__aeabi_dadd+0xf4>
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	d02f      	beq.n	800171c <__aeabi_dadd+0x33c>
 80016bc:	464a      	mov	r2, r9
 80016be:	1b92      	subs	r2, r2, r6
 80016c0:	4694      	mov	ip, r2
 80016c2:	2e00      	cmp	r6, #0
 80016c4:	d100      	bne.n	80016c8 <__aeabi_dadd+0x2e8>
 80016c6:	e0ad      	b.n	8001824 <__aeabi_dadd+0x444>
 80016c8:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <__aeabi_dadd+0x368>)
 80016ca:	4591      	cmp	r9, r2
 80016cc:	d100      	bne.n	80016d0 <__aeabi_dadd+0x2f0>
 80016ce:	e10f      	b.n	80018f0 <__aeabi_dadd+0x510>
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	0412      	lsls	r2, r2, #16
 80016d4:	4310      	orrs	r0, r2
 80016d6:	4662      	mov	r2, ip
 80016d8:	2a38      	cmp	r2, #56	; 0x38
 80016da:	dd00      	ble.n	80016de <__aeabi_dadd+0x2fe>
 80016dc:	e10f      	b.n	80018fe <__aeabi_dadd+0x51e>
 80016de:	2a1f      	cmp	r2, #31
 80016e0:	dd00      	ble.n	80016e4 <__aeabi_dadd+0x304>
 80016e2:	e180      	b.n	80019e6 <__aeabi_dadd+0x606>
 80016e4:	4664      	mov	r4, ip
 80016e6:	2220      	movs	r2, #32
 80016e8:	001e      	movs	r6, r3
 80016ea:	1b12      	subs	r2, r2, r4
 80016ec:	4667      	mov	r7, ip
 80016ee:	0004      	movs	r4, r0
 80016f0:	4093      	lsls	r3, r2
 80016f2:	4094      	lsls	r4, r2
 80016f4:	40fe      	lsrs	r6, r7
 80016f6:	1e5a      	subs	r2, r3, #1
 80016f8:	4193      	sbcs	r3, r2
 80016fa:	40f8      	lsrs	r0, r7
 80016fc:	4334      	orrs	r4, r6
 80016fe:	431c      	orrs	r4, r3
 8001700:	4480      	add	r8, r0
 8001702:	1864      	adds	r4, r4, r1
 8001704:	428c      	cmp	r4, r1
 8001706:	41bf      	sbcs	r7, r7
 8001708:	427f      	negs	r7, r7
 800170a:	464e      	mov	r6, r9
 800170c:	4447      	add	r7, r8
 800170e:	e7a6      	b.n	800165e <__aeabi_dadd+0x27e>
 8001710:	4642      	mov	r2, r8
 8001712:	430a      	orrs	r2, r1
 8001714:	0011      	movs	r1, r2
 8001716:	1e4a      	subs	r2, r1, #1
 8001718:	4191      	sbcs	r1, r2
 800171a:	e6ad      	b.n	8001478 <__aeabi_dadd+0x98>
 800171c:	4c0c      	ldr	r4, [pc, #48]	; (8001750 <__aeabi_dadd+0x370>)
 800171e:	1c72      	adds	r2, r6, #1
 8001720:	4222      	tst	r2, r4
 8001722:	d000      	beq.n	8001726 <__aeabi_dadd+0x346>
 8001724:	e0a1      	b.n	800186a <__aeabi_dadd+0x48a>
 8001726:	0002      	movs	r2, r0
 8001728:	431a      	orrs	r2, r3
 800172a:	2e00      	cmp	r6, #0
 800172c:	d000      	beq.n	8001730 <__aeabi_dadd+0x350>
 800172e:	e0fa      	b.n	8001926 <__aeabi_dadd+0x546>
 8001730:	2a00      	cmp	r2, #0
 8001732:	d100      	bne.n	8001736 <__aeabi_dadd+0x356>
 8001734:	e145      	b.n	80019c2 <__aeabi_dadd+0x5e2>
 8001736:	003a      	movs	r2, r7
 8001738:	430a      	orrs	r2, r1
 800173a:	d000      	beq.n	800173e <__aeabi_dadd+0x35e>
 800173c:	e146      	b.n	80019cc <__aeabi_dadd+0x5ec>
 800173e:	0742      	lsls	r2, r0, #29
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	4313      	orrs	r3, r2
 8001744:	08c0      	lsrs	r0, r0, #3
 8001746:	e77b      	b.n	8001640 <__aeabi_dadd+0x260>
 8001748:	000007ff 	.word	0x000007ff
 800174c:	ff7fffff 	.word	0xff7fffff
 8001750:	000007fe 	.word	0x000007fe
 8001754:	4647      	mov	r7, r8
 8001756:	1a5c      	subs	r4, r3, r1
 8001758:	1bc2      	subs	r2, r0, r7
 800175a:	42a3      	cmp	r3, r4
 800175c:	41bf      	sbcs	r7, r7
 800175e:	427f      	negs	r7, r7
 8001760:	46b9      	mov	r9, r7
 8001762:	0017      	movs	r7, r2
 8001764:	464a      	mov	r2, r9
 8001766:	1abf      	subs	r7, r7, r2
 8001768:	023a      	lsls	r2, r7, #8
 800176a:	d500      	bpl.n	800176e <__aeabi_dadd+0x38e>
 800176c:	e08d      	b.n	800188a <__aeabi_dadd+0x4aa>
 800176e:	0023      	movs	r3, r4
 8001770:	433b      	orrs	r3, r7
 8001772:	d000      	beq.n	8001776 <__aeabi_dadd+0x396>
 8001774:	e68a      	b.n	800148c <__aeabi_dadd+0xac>
 8001776:	2000      	movs	r0, #0
 8001778:	2500      	movs	r5, #0
 800177a:	e761      	b.n	8001640 <__aeabi_dadd+0x260>
 800177c:	4cb4      	ldr	r4, [pc, #720]	; (8001a50 <__aeabi_dadd+0x670>)
 800177e:	45a1      	cmp	r9, r4
 8001780:	d100      	bne.n	8001784 <__aeabi_dadd+0x3a4>
 8001782:	e0ad      	b.n	80018e0 <__aeabi_dadd+0x500>
 8001784:	2480      	movs	r4, #128	; 0x80
 8001786:	0424      	lsls	r4, r4, #16
 8001788:	4320      	orrs	r0, r4
 800178a:	4664      	mov	r4, ip
 800178c:	2c38      	cmp	r4, #56	; 0x38
 800178e:	dc3d      	bgt.n	800180c <__aeabi_dadd+0x42c>
 8001790:	4662      	mov	r2, ip
 8001792:	2c1f      	cmp	r4, #31
 8001794:	dd00      	ble.n	8001798 <__aeabi_dadd+0x3b8>
 8001796:	e0b7      	b.n	8001908 <__aeabi_dadd+0x528>
 8001798:	2520      	movs	r5, #32
 800179a:	001e      	movs	r6, r3
 800179c:	1b2d      	subs	r5, r5, r4
 800179e:	0004      	movs	r4, r0
 80017a0:	40ab      	lsls	r3, r5
 80017a2:	40ac      	lsls	r4, r5
 80017a4:	40d6      	lsrs	r6, r2
 80017a6:	40d0      	lsrs	r0, r2
 80017a8:	4642      	mov	r2, r8
 80017aa:	1e5d      	subs	r5, r3, #1
 80017ac:	41ab      	sbcs	r3, r5
 80017ae:	4334      	orrs	r4, r6
 80017b0:	1a12      	subs	r2, r2, r0
 80017b2:	4690      	mov	r8, r2
 80017b4:	4323      	orrs	r3, r4
 80017b6:	e02c      	b.n	8001812 <__aeabi_dadd+0x432>
 80017b8:	0742      	lsls	r2, r0, #29
 80017ba:	08db      	lsrs	r3, r3, #3
 80017bc:	4313      	orrs	r3, r2
 80017be:	08c0      	lsrs	r0, r0, #3
 80017c0:	e73b      	b.n	800163a <__aeabi_dadd+0x25a>
 80017c2:	185c      	adds	r4, r3, r1
 80017c4:	429c      	cmp	r4, r3
 80017c6:	419b      	sbcs	r3, r3
 80017c8:	4440      	add	r0, r8
 80017ca:	425b      	negs	r3, r3
 80017cc:	18c7      	adds	r7, r0, r3
 80017ce:	2601      	movs	r6, #1
 80017d0:	023b      	lsls	r3, r7, #8
 80017d2:	d400      	bmi.n	80017d6 <__aeabi_dadd+0x3f6>
 80017d4:	e729      	b.n	800162a <__aeabi_dadd+0x24a>
 80017d6:	2602      	movs	r6, #2
 80017d8:	4a9e      	ldr	r2, [pc, #632]	; (8001a54 <__aeabi_dadd+0x674>)
 80017da:	0863      	lsrs	r3, r4, #1
 80017dc:	4017      	ands	r7, r2
 80017de:	2201      	movs	r2, #1
 80017e0:	4014      	ands	r4, r2
 80017e2:	431c      	orrs	r4, r3
 80017e4:	07fb      	lsls	r3, r7, #31
 80017e6:	431c      	orrs	r4, r3
 80017e8:	087f      	lsrs	r7, r7, #1
 80017ea:	e673      	b.n	80014d4 <__aeabi_dadd+0xf4>
 80017ec:	4644      	mov	r4, r8
 80017ee:	3a20      	subs	r2, #32
 80017f0:	40d4      	lsrs	r4, r2
 80017f2:	4662      	mov	r2, ip
 80017f4:	2a20      	cmp	r2, #32
 80017f6:	d005      	beq.n	8001804 <__aeabi_dadd+0x424>
 80017f8:	4667      	mov	r7, ip
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	1bd2      	subs	r2, r2, r7
 80017fe:	4647      	mov	r7, r8
 8001800:	4097      	lsls	r7, r2
 8001802:	4339      	orrs	r1, r7
 8001804:	1e4a      	subs	r2, r1, #1
 8001806:	4191      	sbcs	r1, r2
 8001808:	4321      	orrs	r1, r4
 800180a:	e635      	b.n	8001478 <__aeabi_dadd+0x98>
 800180c:	4303      	orrs	r3, r0
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	4183      	sbcs	r3, r0
 8001812:	1acc      	subs	r4, r1, r3
 8001814:	42a1      	cmp	r1, r4
 8001816:	41bf      	sbcs	r7, r7
 8001818:	4643      	mov	r3, r8
 800181a:	427f      	negs	r7, r7
 800181c:	4655      	mov	r5, sl
 800181e:	464e      	mov	r6, r9
 8001820:	1bdf      	subs	r7, r3, r7
 8001822:	e62e      	b.n	8001482 <__aeabi_dadd+0xa2>
 8001824:	0002      	movs	r2, r0
 8001826:	431a      	orrs	r2, r3
 8001828:	d100      	bne.n	800182c <__aeabi_dadd+0x44c>
 800182a:	e0bd      	b.n	80019a8 <__aeabi_dadd+0x5c8>
 800182c:	4662      	mov	r2, ip
 800182e:	4664      	mov	r4, ip
 8001830:	3a01      	subs	r2, #1
 8001832:	2c01      	cmp	r4, #1
 8001834:	d100      	bne.n	8001838 <__aeabi_dadd+0x458>
 8001836:	e0e5      	b.n	8001a04 <__aeabi_dadd+0x624>
 8001838:	4c85      	ldr	r4, [pc, #532]	; (8001a50 <__aeabi_dadd+0x670>)
 800183a:	45a4      	cmp	ip, r4
 800183c:	d058      	beq.n	80018f0 <__aeabi_dadd+0x510>
 800183e:	4694      	mov	ip, r2
 8001840:	e749      	b.n	80016d6 <__aeabi_dadd+0x2f6>
 8001842:	4664      	mov	r4, ip
 8001844:	2220      	movs	r2, #32
 8001846:	1b12      	subs	r2, r2, r4
 8001848:	4644      	mov	r4, r8
 800184a:	4094      	lsls	r4, r2
 800184c:	000f      	movs	r7, r1
 800184e:	46a1      	mov	r9, r4
 8001850:	4664      	mov	r4, ip
 8001852:	4091      	lsls	r1, r2
 8001854:	40e7      	lsrs	r7, r4
 8001856:	464c      	mov	r4, r9
 8001858:	1e4a      	subs	r2, r1, #1
 800185a:	4191      	sbcs	r1, r2
 800185c:	433c      	orrs	r4, r7
 800185e:	4642      	mov	r2, r8
 8001860:	430c      	orrs	r4, r1
 8001862:	4661      	mov	r1, ip
 8001864:	40ca      	lsrs	r2, r1
 8001866:	1880      	adds	r0, r0, r2
 8001868:	e6f4      	b.n	8001654 <__aeabi_dadd+0x274>
 800186a:	4c79      	ldr	r4, [pc, #484]	; (8001a50 <__aeabi_dadd+0x670>)
 800186c:	42a2      	cmp	r2, r4
 800186e:	d100      	bne.n	8001872 <__aeabi_dadd+0x492>
 8001870:	e6fd      	b.n	800166e <__aeabi_dadd+0x28e>
 8001872:	1859      	adds	r1, r3, r1
 8001874:	4299      	cmp	r1, r3
 8001876:	419b      	sbcs	r3, r3
 8001878:	4440      	add	r0, r8
 800187a:	425f      	negs	r7, r3
 800187c:	19c7      	adds	r7, r0, r7
 800187e:	07fc      	lsls	r4, r7, #31
 8001880:	0849      	lsrs	r1, r1, #1
 8001882:	0016      	movs	r6, r2
 8001884:	430c      	orrs	r4, r1
 8001886:	087f      	lsrs	r7, r7, #1
 8001888:	e6cf      	b.n	800162a <__aeabi_dadd+0x24a>
 800188a:	1acc      	subs	r4, r1, r3
 800188c:	42a1      	cmp	r1, r4
 800188e:	41bf      	sbcs	r7, r7
 8001890:	4643      	mov	r3, r8
 8001892:	427f      	negs	r7, r7
 8001894:	1a18      	subs	r0, r3, r0
 8001896:	4655      	mov	r5, sl
 8001898:	1bc7      	subs	r7, r0, r7
 800189a:	e5f7      	b.n	800148c <__aeabi_dadd+0xac>
 800189c:	08c9      	lsrs	r1, r1, #3
 800189e:	077b      	lsls	r3, r7, #29
 80018a0:	4655      	mov	r5, sl
 80018a2:	430b      	orrs	r3, r1
 80018a4:	08f8      	lsrs	r0, r7, #3
 80018a6:	e6c8      	b.n	800163a <__aeabi_dadd+0x25a>
 80018a8:	2c00      	cmp	r4, #0
 80018aa:	d000      	beq.n	80018ae <__aeabi_dadd+0x4ce>
 80018ac:	e081      	b.n	80019b2 <__aeabi_dadd+0x5d2>
 80018ae:	4643      	mov	r3, r8
 80018b0:	430b      	orrs	r3, r1
 80018b2:	d115      	bne.n	80018e0 <__aeabi_dadd+0x500>
 80018b4:	2080      	movs	r0, #128	; 0x80
 80018b6:	2500      	movs	r5, #0
 80018b8:	0300      	lsls	r0, r0, #12
 80018ba:	e6e3      	b.n	8001684 <__aeabi_dadd+0x2a4>
 80018bc:	1a5c      	subs	r4, r3, r1
 80018be:	42a3      	cmp	r3, r4
 80018c0:	419b      	sbcs	r3, r3
 80018c2:	1bc7      	subs	r7, r0, r7
 80018c4:	425b      	negs	r3, r3
 80018c6:	2601      	movs	r6, #1
 80018c8:	1aff      	subs	r7, r7, r3
 80018ca:	e5da      	b.n	8001482 <__aeabi_dadd+0xa2>
 80018cc:	0742      	lsls	r2, r0, #29
 80018ce:	08db      	lsrs	r3, r3, #3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	08c0      	lsrs	r0, r0, #3
 80018d4:	e6d2      	b.n	800167c <__aeabi_dadd+0x29c>
 80018d6:	0742      	lsls	r2, r0, #29
 80018d8:	08db      	lsrs	r3, r3, #3
 80018da:	4313      	orrs	r3, r2
 80018dc:	08c0      	lsrs	r0, r0, #3
 80018de:	e6ac      	b.n	800163a <__aeabi_dadd+0x25a>
 80018e0:	4643      	mov	r3, r8
 80018e2:	4642      	mov	r2, r8
 80018e4:	08c9      	lsrs	r1, r1, #3
 80018e6:	075b      	lsls	r3, r3, #29
 80018e8:	4655      	mov	r5, sl
 80018ea:	430b      	orrs	r3, r1
 80018ec:	08d0      	lsrs	r0, r2, #3
 80018ee:	e6c5      	b.n	800167c <__aeabi_dadd+0x29c>
 80018f0:	4643      	mov	r3, r8
 80018f2:	4642      	mov	r2, r8
 80018f4:	075b      	lsls	r3, r3, #29
 80018f6:	08c9      	lsrs	r1, r1, #3
 80018f8:	430b      	orrs	r3, r1
 80018fa:	08d0      	lsrs	r0, r2, #3
 80018fc:	e6be      	b.n	800167c <__aeabi_dadd+0x29c>
 80018fe:	4303      	orrs	r3, r0
 8001900:	001c      	movs	r4, r3
 8001902:	1e63      	subs	r3, r4, #1
 8001904:	419c      	sbcs	r4, r3
 8001906:	e6fc      	b.n	8001702 <__aeabi_dadd+0x322>
 8001908:	0002      	movs	r2, r0
 800190a:	3c20      	subs	r4, #32
 800190c:	40e2      	lsrs	r2, r4
 800190e:	0014      	movs	r4, r2
 8001910:	4662      	mov	r2, ip
 8001912:	2a20      	cmp	r2, #32
 8001914:	d003      	beq.n	800191e <__aeabi_dadd+0x53e>
 8001916:	2540      	movs	r5, #64	; 0x40
 8001918:	1aad      	subs	r5, r5, r2
 800191a:	40a8      	lsls	r0, r5
 800191c:	4303      	orrs	r3, r0
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	4183      	sbcs	r3, r0
 8001922:	4323      	orrs	r3, r4
 8001924:	e775      	b.n	8001812 <__aeabi_dadd+0x432>
 8001926:	2a00      	cmp	r2, #0
 8001928:	d0e2      	beq.n	80018f0 <__aeabi_dadd+0x510>
 800192a:	003a      	movs	r2, r7
 800192c:	430a      	orrs	r2, r1
 800192e:	d0cd      	beq.n	80018cc <__aeabi_dadd+0x4ec>
 8001930:	0742      	lsls	r2, r0, #29
 8001932:	08db      	lsrs	r3, r3, #3
 8001934:	4313      	orrs	r3, r2
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	08c0      	lsrs	r0, r0, #3
 800193a:	0312      	lsls	r2, r2, #12
 800193c:	4210      	tst	r0, r2
 800193e:	d006      	beq.n	800194e <__aeabi_dadd+0x56e>
 8001940:	08fc      	lsrs	r4, r7, #3
 8001942:	4214      	tst	r4, r2
 8001944:	d103      	bne.n	800194e <__aeabi_dadd+0x56e>
 8001946:	0020      	movs	r0, r4
 8001948:	08cb      	lsrs	r3, r1, #3
 800194a:	077a      	lsls	r2, r7, #29
 800194c:	4313      	orrs	r3, r2
 800194e:	0f5a      	lsrs	r2, r3, #29
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	0752      	lsls	r2, r2, #29
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	4313      	orrs	r3, r2
 8001958:	e690      	b.n	800167c <__aeabi_dadd+0x29c>
 800195a:	4643      	mov	r3, r8
 800195c:	430b      	orrs	r3, r1
 800195e:	d100      	bne.n	8001962 <__aeabi_dadd+0x582>
 8001960:	e709      	b.n	8001776 <__aeabi_dadd+0x396>
 8001962:	4643      	mov	r3, r8
 8001964:	4642      	mov	r2, r8
 8001966:	08c9      	lsrs	r1, r1, #3
 8001968:	075b      	lsls	r3, r3, #29
 800196a:	4655      	mov	r5, sl
 800196c:	430b      	orrs	r3, r1
 800196e:	08d0      	lsrs	r0, r2, #3
 8001970:	e666      	b.n	8001640 <__aeabi_dadd+0x260>
 8001972:	1acc      	subs	r4, r1, r3
 8001974:	42a1      	cmp	r1, r4
 8001976:	4189      	sbcs	r1, r1
 8001978:	1a3f      	subs	r7, r7, r0
 800197a:	4249      	negs	r1, r1
 800197c:	4655      	mov	r5, sl
 800197e:	2601      	movs	r6, #1
 8001980:	1a7f      	subs	r7, r7, r1
 8001982:	e57e      	b.n	8001482 <__aeabi_dadd+0xa2>
 8001984:	4642      	mov	r2, r8
 8001986:	1a5c      	subs	r4, r3, r1
 8001988:	1a87      	subs	r7, r0, r2
 800198a:	42a3      	cmp	r3, r4
 800198c:	4192      	sbcs	r2, r2
 800198e:	4252      	negs	r2, r2
 8001990:	1abf      	subs	r7, r7, r2
 8001992:	023a      	lsls	r2, r7, #8
 8001994:	d53d      	bpl.n	8001a12 <__aeabi_dadd+0x632>
 8001996:	1acc      	subs	r4, r1, r3
 8001998:	42a1      	cmp	r1, r4
 800199a:	4189      	sbcs	r1, r1
 800199c:	4643      	mov	r3, r8
 800199e:	4249      	negs	r1, r1
 80019a0:	1a1f      	subs	r7, r3, r0
 80019a2:	4655      	mov	r5, sl
 80019a4:	1a7f      	subs	r7, r7, r1
 80019a6:	e595      	b.n	80014d4 <__aeabi_dadd+0xf4>
 80019a8:	077b      	lsls	r3, r7, #29
 80019aa:	08c9      	lsrs	r1, r1, #3
 80019ac:	430b      	orrs	r3, r1
 80019ae:	08f8      	lsrs	r0, r7, #3
 80019b0:	e643      	b.n	800163a <__aeabi_dadd+0x25a>
 80019b2:	4644      	mov	r4, r8
 80019b4:	08db      	lsrs	r3, r3, #3
 80019b6:	430c      	orrs	r4, r1
 80019b8:	d130      	bne.n	8001a1c <__aeabi_dadd+0x63c>
 80019ba:	0742      	lsls	r2, r0, #29
 80019bc:	4313      	orrs	r3, r2
 80019be:	08c0      	lsrs	r0, r0, #3
 80019c0:	e65c      	b.n	800167c <__aeabi_dadd+0x29c>
 80019c2:	077b      	lsls	r3, r7, #29
 80019c4:	08c9      	lsrs	r1, r1, #3
 80019c6:	430b      	orrs	r3, r1
 80019c8:	08f8      	lsrs	r0, r7, #3
 80019ca:	e639      	b.n	8001640 <__aeabi_dadd+0x260>
 80019cc:	185c      	adds	r4, r3, r1
 80019ce:	429c      	cmp	r4, r3
 80019d0:	419b      	sbcs	r3, r3
 80019d2:	4440      	add	r0, r8
 80019d4:	425b      	negs	r3, r3
 80019d6:	18c7      	adds	r7, r0, r3
 80019d8:	023b      	lsls	r3, r7, #8
 80019da:	d400      	bmi.n	80019de <__aeabi_dadd+0x5fe>
 80019dc:	e625      	b.n	800162a <__aeabi_dadd+0x24a>
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <__aeabi_dadd+0x674>)
 80019e0:	2601      	movs	r6, #1
 80019e2:	401f      	ands	r7, r3
 80019e4:	e621      	b.n	800162a <__aeabi_dadd+0x24a>
 80019e6:	0004      	movs	r4, r0
 80019e8:	3a20      	subs	r2, #32
 80019ea:	40d4      	lsrs	r4, r2
 80019ec:	4662      	mov	r2, ip
 80019ee:	2a20      	cmp	r2, #32
 80019f0:	d004      	beq.n	80019fc <__aeabi_dadd+0x61c>
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	4666      	mov	r6, ip
 80019f6:	1b92      	subs	r2, r2, r6
 80019f8:	4090      	lsls	r0, r2
 80019fa:	4303      	orrs	r3, r0
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	4193      	sbcs	r3, r2
 8001a00:	431c      	orrs	r4, r3
 8001a02:	e67e      	b.n	8001702 <__aeabi_dadd+0x322>
 8001a04:	185c      	adds	r4, r3, r1
 8001a06:	428c      	cmp	r4, r1
 8001a08:	4189      	sbcs	r1, r1
 8001a0a:	4440      	add	r0, r8
 8001a0c:	4249      	negs	r1, r1
 8001a0e:	1847      	adds	r7, r0, r1
 8001a10:	e6dd      	b.n	80017ce <__aeabi_dadd+0x3ee>
 8001a12:	0023      	movs	r3, r4
 8001a14:	433b      	orrs	r3, r7
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dadd+0x63a>
 8001a18:	e6ad      	b.n	8001776 <__aeabi_dadd+0x396>
 8001a1a:	e606      	b.n	800162a <__aeabi_dadd+0x24a>
 8001a1c:	0744      	lsls	r4, r0, #29
 8001a1e:	4323      	orrs	r3, r4
 8001a20:	2480      	movs	r4, #128	; 0x80
 8001a22:	08c0      	lsrs	r0, r0, #3
 8001a24:	0324      	lsls	r4, r4, #12
 8001a26:	4220      	tst	r0, r4
 8001a28:	d008      	beq.n	8001a3c <__aeabi_dadd+0x65c>
 8001a2a:	4642      	mov	r2, r8
 8001a2c:	08d6      	lsrs	r6, r2, #3
 8001a2e:	4226      	tst	r6, r4
 8001a30:	d104      	bne.n	8001a3c <__aeabi_dadd+0x65c>
 8001a32:	4655      	mov	r5, sl
 8001a34:	0030      	movs	r0, r6
 8001a36:	08cb      	lsrs	r3, r1, #3
 8001a38:	0751      	lsls	r1, r2, #29
 8001a3a:	430b      	orrs	r3, r1
 8001a3c:	0f5a      	lsrs	r2, r3, #29
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	0752      	lsls	r2, r2, #29
 8001a44:	4313      	orrs	r3, r2
 8001a46:	e619      	b.n	800167c <__aeabi_dadd+0x29c>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4a01      	ldr	r2, [pc, #4]	; (8001a50 <__aeabi_dadd+0x670>)
 8001a4c:	001f      	movs	r7, r3
 8001a4e:	e55e      	b.n	800150e <__aeabi_dadd+0x12e>
 8001a50:	000007ff 	.word	0x000007ff
 8001a54:	ff7fffff 	.word	0xff7fffff

08001a58 <__aeabi_ddiv>:
 8001a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5a:	4657      	mov	r7, sl
 8001a5c:	464e      	mov	r6, r9
 8001a5e:	4645      	mov	r5, r8
 8001a60:	46de      	mov	lr, fp
 8001a62:	b5e0      	push	{r5, r6, r7, lr}
 8001a64:	4681      	mov	r9, r0
 8001a66:	0005      	movs	r5, r0
 8001a68:	030c      	lsls	r4, r1, #12
 8001a6a:	0048      	lsls	r0, r1, #1
 8001a6c:	4692      	mov	sl, r2
 8001a6e:	001f      	movs	r7, r3
 8001a70:	b085      	sub	sp, #20
 8001a72:	0b24      	lsrs	r4, r4, #12
 8001a74:	0d40      	lsrs	r0, r0, #21
 8001a76:	0fce      	lsrs	r6, r1, #31
 8001a78:	2800      	cmp	r0, #0
 8001a7a:	d100      	bne.n	8001a7e <__aeabi_ddiv+0x26>
 8001a7c:	e156      	b.n	8001d2c <__aeabi_ddiv+0x2d4>
 8001a7e:	4bd4      	ldr	r3, [pc, #848]	; (8001dd0 <__aeabi_ddiv+0x378>)
 8001a80:	4298      	cmp	r0, r3
 8001a82:	d100      	bne.n	8001a86 <__aeabi_ddiv+0x2e>
 8001a84:	e172      	b.n	8001d6c <__aeabi_ddiv+0x314>
 8001a86:	0f6b      	lsrs	r3, r5, #29
 8001a88:	00e4      	lsls	r4, r4, #3
 8001a8a:	431c      	orrs	r4, r3
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	4323      	orrs	r3, r4
 8001a92:	4698      	mov	r8, r3
 8001a94:	4bcf      	ldr	r3, [pc, #828]	; (8001dd4 <__aeabi_ddiv+0x37c>)
 8001a96:	00ed      	lsls	r5, r5, #3
 8001a98:	469b      	mov	fp, r3
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	4483      	add	fp, r0
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	033c      	lsls	r4, r7, #12
 8001aa4:	007b      	lsls	r3, r7, #1
 8001aa6:	4650      	mov	r0, sl
 8001aa8:	0b24      	lsrs	r4, r4, #12
 8001aaa:	0d5b      	lsrs	r3, r3, #21
 8001aac:	0fff      	lsrs	r7, r7, #31
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_ddiv+0x5c>
 8001ab2:	e11f      	b.n	8001cf4 <__aeabi_ddiv+0x29c>
 8001ab4:	4ac6      	ldr	r2, [pc, #792]	; (8001dd0 <__aeabi_ddiv+0x378>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d100      	bne.n	8001abc <__aeabi_ddiv+0x64>
 8001aba:	e162      	b.n	8001d82 <__aeabi_ddiv+0x32a>
 8001abc:	49c5      	ldr	r1, [pc, #788]	; (8001dd4 <__aeabi_ddiv+0x37c>)
 8001abe:	0f42      	lsrs	r2, r0, #29
 8001ac0:	468c      	mov	ip, r1
 8001ac2:	00e4      	lsls	r4, r4, #3
 8001ac4:	4659      	mov	r1, fp
 8001ac6:	4314      	orrs	r4, r2
 8001ac8:	2280      	movs	r2, #128	; 0x80
 8001aca:	4463      	add	r3, ip
 8001acc:	0412      	lsls	r2, r2, #16
 8001ace:	1acb      	subs	r3, r1, r3
 8001ad0:	4314      	orrs	r4, r2
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	00c2      	lsls	r2, r0, #3
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	0033      	movs	r3, r6
 8001ada:	407b      	eors	r3, r7
 8001adc:	469a      	mov	sl, r3
 8001ade:	464b      	mov	r3, r9
 8001ae0:	2b0f      	cmp	r3, #15
 8001ae2:	d827      	bhi.n	8001b34 <__aeabi_ddiv+0xdc>
 8001ae4:	49bc      	ldr	r1, [pc, #752]	; (8001dd8 <__aeabi_ddiv+0x380>)
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	58cb      	ldr	r3, [r1, r3]
 8001aea:	469f      	mov	pc, r3
 8001aec:	46b2      	mov	sl, r6
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d016      	beq.n	8001b22 <__aeabi_ddiv+0xca>
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d100      	bne.n	8001afa <__aeabi_ddiv+0xa2>
 8001af8:	e28e      	b.n	8002018 <__aeabi_ddiv+0x5c0>
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d000      	beq.n	8001b00 <__aeabi_ddiv+0xa8>
 8001afe:	e0d9      	b.n	8001cb4 <__aeabi_ddiv+0x25c>
 8001b00:	2300      	movs	r3, #0
 8001b02:	2400      	movs	r4, #0
 8001b04:	2500      	movs	r5, #0
 8001b06:	4652      	mov	r2, sl
 8001b08:	051b      	lsls	r3, r3, #20
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	07d2      	lsls	r2, r2, #31
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	0028      	movs	r0, r5
 8001b12:	0019      	movs	r1, r3
 8001b14:	b005      	add	sp, #20
 8001b16:	bcf0      	pop	{r4, r5, r6, r7}
 8001b18:	46bb      	mov	fp, r7
 8001b1a:	46b2      	mov	sl, r6
 8001b1c:	46a9      	mov	r9, r5
 8001b1e:	46a0      	mov	r8, r4
 8001b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b22:	2400      	movs	r4, #0
 8001b24:	2500      	movs	r5, #0
 8001b26:	4baa      	ldr	r3, [pc, #680]	; (8001dd0 <__aeabi_ddiv+0x378>)
 8001b28:	e7ed      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8001b2a:	46ba      	mov	sl, r7
 8001b2c:	46a0      	mov	r8, r4
 8001b2e:	0015      	movs	r5, r2
 8001b30:	9000      	str	r0, [sp, #0]
 8001b32:	e7dc      	b.n	8001aee <__aeabi_ddiv+0x96>
 8001b34:	4544      	cmp	r4, r8
 8001b36:	d200      	bcs.n	8001b3a <__aeabi_ddiv+0xe2>
 8001b38:	e1c7      	b.n	8001eca <__aeabi_ddiv+0x472>
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_ddiv+0xe6>
 8001b3c:	e1c2      	b.n	8001ec4 <__aeabi_ddiv+0x46c>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	425b      	negs	r3, r3
 8001b42:	469c      	mov	ip, r3
 8001b44:	002e      	movs	r6, r5
 8001b46:	4640      	mov	r0, r8
 8001b48:	2500      	movs	r5, #0
 8001b4a:	44e3      	add	fp, ip
 8001b4c:	0223      	lsls	r3, r4, #8
 8001b4e:	0e14      	lsrs	r4, r2, #24
 8001b50:	431c      	orrs	r4, r3
 8001b52:	0c1b      	lsrs	r3, r3, #16
 8001b54:	4699      	mov	r9, r3
 8001b56:	0423      	lsls	r3, r4, #16
 8001b58:	0c1f      	lsrs	r7, r3, #16
 8001b5a:	0212      	lsls	r2, r2, #8
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	9701      	str	r7, [sp, #4]
 8001b62:	f7fe fb7b 	bl	800025c <__aeabi_uidivmod>
 8001b66:	0002      	movs	r2, r0
 8001b68:	437a      	muls	r2, r7
 8001b6a:	040b      	lsls	r3, r1, #16
 8001b6c:	0c31      	lsrs	r1, r6, #16
 8001b6e:	4680      	mov	r8, r0
 8001b70:	4319      	orrs	r1, r3
 8001b72:	428a      	cmp	r2, r1
 8001b74:	d907      	bls.n	8001b86 <__aeabi_ddiv+0x12e>
 8001b76:	2301      	movs	r3, #1
 8001b78:	425b      	negs	r3, r3
 8001b7a:	469c      	mov	ip, r3
 8001b7c:	1909      	adds	r1, r1, r4
 8001b7e:	44e0      	add	r8, ip
 8001b80:	428c      	cmp	r4, r1
 8001b82:	d800      	bhi.n	8001b86 <__aeabi_ddiv+0x12e>
 8001b84:	e207      	b.n	8001f96 <__aeabi_ddiv+0x53e>
 8001b86:	1a88      	subs	r0, r1, r2
 8001b88:	4649      	mov	r1, r9
 8001b8a:	f7fe fb67 	bl	800025c <__aeabi_uidivmod>
 8001b8e:	0409      	lsls	r1, r1, #16
 8001b90:	468c      	mov	ip, r1
 8001b92:	0431      	lsls	r1, r6, #16
 8001b94:	4666      	mov	r6, ip
 8001b96:	9a01      	ldr	r2, [sp, #4]
 8001b98:	0c09      	lsrs	r1, r1, #16
 8001b9a:	4342      	muls	r2, r0
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	4331      	orrs	r1, r6
 8001ba0:	428a      	cmp	r2, r1
 8001ba2:	d904      	bls.n	8001bae <__aeabi_ddiv+0x156>
 8001ba4:	1909      	adds	r1, r1, r4
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	428c      	cmp	r4, r1
 8001baa:	d800      	bhi.n	8001bae <__aeabi_ddiv+0x156>
 8001bac:	e1ed      	b.n	8001f8a <__aeabi_ddiv+0x532>
 8001bae:	1a88      	subs	r0, r1, r2
 8001bb0:	4642      	mov	r2, r8
 8001bb2:	0412      	lsls	r2, r2, #16
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4641      	mov	r1, r8
 8001bba:	9b00      	ldr	r3, [sp, #0]
 8001bbc:	040e      	lsls	r6, r1, #16
 8001bbe:	0c1b      	lsrs	r3, r3, #16
 8001bc0:	001f      	movs	r7, r3
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	9b00      	ldr	r3, [sp, #0]
 8001bc6:	0c36      	lsrs	r6, r6, #16
 8001bc8:	041b      	lsls	r3, r3, #16
 8001bca:	0c19      	lsrs	r1, r3, #16
 8001bcc:	000b      	movs	r3, r1
 8001bce:	4373      	muls	r3, r6
 8001bd0:	0c12      	lsrs	r2, r2, #16
 8001bd2:	437e      	muls	r6, r7
 8001bd4:	9103      	str	r1, [sp, #12]
 8001bd6:	4351      	muls	r1, r2
 8001bd8:	437a      	muls	r2, r7
 8001bda:	0c1f      	lsrs	r7, r3, #16
 8001bdc:	46bc      	mov	ip, r7
 8001bde:	1876      	adds	r6, r6, r1
 8001be0:	4466      	add	r6, ip
 8001be2:	42b1      	cmp	r1, r6
 8001be4:	d903      	bls.n	8001bee <__aeabi_ddiv+0x196>
 8001be6:	2180      	movs	r1, #128	; 0x80
 8001be8:	0249      	lsls	r1, r1, #9
 8001bea:	468c      	mov	ip, r1
 8001bec:	4462      	add	r2, ip
 8001bee:	0c31      	lsrs	r1, r6, #16
 8001bf0:	188a      	adds	r2, r1, r2
 8001bf2:	0431      	lsls	r1, r6, #16
 8001bf4:	041e      	lsls	r6, r3, #16
 8001bf6:	0c36      	lsrs	r6, r6, #16
 8001bf8:	198e      	adds	r6, r1, r6
 8001bfa:	4290      	cmp	r0, r2
 8001bfc:	d302      	bcc.n	8001c04 <__aeabi_ddiv+0x1ac>
 8001bfe:	d112      	bne.n	8001c26 <__aeabi_ddiv+0x1ce>
 8001c00:	42b5      	cmp	r5, r6
 8001c02:	d210      	bcs.n	8001c26 <__aeabi_ddiv+0x1ce>
 8001c04:	4643      	mov	r3, r8
 8001c06:	1e59      	subs	r1, r3, #1
 8001c08:	9b00      	ldr	r3, [sp, #0]
 8001c0a:	469c      	mov	ip, r3
 8001c0c:	4465      	add	r5, ip
 8001c0e:	001f      	movs	r7, r3
 8001c10:	429d      	cmp	r5, r3
 8001c12:	419b      	sbcs	r3, r3
 8001c14:	425b      	negs	r3, r3
 8001c16:	191b      	adds	r3, r3, r4
 8001c18:	18c0      	adds	r0, r0, r3
 8001c1a:	4284      	cmp	r4, r0
 8001c1c:	d200      	bcs.n	8001c20 <__aeabi_ddiv+0x1c8>
 8001c1e:	e1a0      	b.n	8001f62 <__aeabi_ddiv+0x50a>
 8001c20:	d100      	bne.n	8001c24 <__aeabi_ddiv+0x1cc>
 8001c22:	e19b      	b.n	8001f5c <__aeabi_ddiv+0x504>
 8001c24:	4688      	mov	r8, r1
 8001c26:	1bae      	subs	r6, r5, r6
 8001c28:	42b5      	cmp	r5, r6
 8001c2a:	41ad      	sbcs	r5, r5
 8001c2c:	1a80      	subs	r0, r0, r2
 8001c2e:	426d      	negs	r5, r5
 8001c30:	1b40      	subs	r0, r0, r5
 8001c32:	4284      	cmp	r4, r0
 8001c34:	d100      	bne.n	8001c38 <__aeabi_ddiv+0x1e0>
 8001c36:	e1d5      	b.n	8001fe4 <__aeabi_ddiv+0x58c>
 8001c38:	4649      	mov	r1, r9
 8001c3a:	f7fe fb0f 	bl	800025c <__aeabi_uidivmod>
 8001c3e:	9a01      	ldr	r2, [sp, #4]
 8001c40:	040b      	lsls	r3, r1, #16
 8001c42:	4342      	muls	r2, r0
 8001c44:	0c31      	lsrs	r1, r6, #16
 8001c46:	0005      	movs	r5, r0
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	428a      	cmp	r2, r1
 8001c4c:	d900      	bls.n	8001c50 <__aeabi_ddiv+0x1f8>
 8001c4e:	e16c      	b.n	8001f2a <__aeabi_ddiv+0x4d2>
 8001c50:	1a88      	subs	r0, r1, r2
 8001c52:	4649      	mov	r1, r9
 8001c54:	f7fe fb02 	bl	800025c <__aeabi_uidivmod>
 8001c58:	9a01      	ldr	r2, [sp, #4]
 8001c5a:	0436      	lsls	r6, r6, #16
 8001c5c:	4342      	muls	r2, r0
 8001c5e:	0409      	lsls	r1, r1, #16
 8001c60:	0c36      	lsrs	r6, r6, #16
 8001c62:	0003      	movs	r3, r0
 8001c64:	430e      	orrs	r6, r1
 8001c66:	42b2      	cmp	r2, r6
 8001c68:	d900      	bls.n	8001c6c <__aeabi_ddiv+0x214>
 8001c6a:	e153      	b.n	8001f14 <__aeabi_ddiv+0x4bc>
 8001c6c:	9803      	ldr	r0, [sp, #12]
 8001c6e:	1ab6      	subs	r6, r6, r2
 8001c70:	0002      	movs	r2, r0
 8001c72:	042d      	lsls	r5, r5, #16
 8001c74:	431d      	orrs	r5, r3
 8001c76:	9f02      	ldr	r7, [sp, #8]
 8001c78:	042b      	lsls	r3, r5, #16
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	435a      	muls	r2, r3
 8001c7e:	437b      	muls	r3, r7
 8001c80:	469c      	mov	ip, r3
 8001c82:	0c29      	lsrs	r1, r5, #16
 8001c84:	4348      	muls	r0, r1
 8001c86:	0c13      	lsrs	r3, r2, #16
 8001c88:	4484      	add	ip, r0
 8001c8a:	4463      	add	r3, ip
 8001c8c:	4379      	muls	r1, r7
 8001c8e:	4298      	cmp	r0, r3
 8001c90:	d903      	bls.n	8001c9a <__aeabi_ddiv+0x242>
 8001c92:	2080      	movs	r0, #128	; 0x80
 8001c94:	0240      	lsls	r0, r0, #9
 8001c96:	4684      	mov	ip, r0
 8001c98:	4461      	add	r1, ip
 8001c9a:	0c18      	lsrs	r0, r3, #16
 8001c9c:	0412      	lsls	r2, r2, #16
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	0c12      	lsrs	r2, r2, #16
 8001ca2:	1841      	adds	r1, r0, r1
 8001ca4:	189b      	adds	r3, r3, r2
 8001ca6:	428e      	cmp	r6, r1
 8001ca8:	d200      	bcs.n	8001cac <__aeabi_ddiv+0x254>
 8001caa:	e0ff      	b.n	8001eac <__aeabi_ddiv+0x454>
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_ddiv+0x258>
 8001cae:	e0fa      	b.n	8001ea6 <__aeabi_ddiv+0x44e>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	431d      	orrs	r5, r3
 8001cb4:	4a49      	ldr	r2, [pc, #292]	; (8001ddc <__aeabi_ddiv+0x384>)
 8001cb6:	445a      	add	r2, fp
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	dc00      	bgt.n	8001cbe <__aeabi_ddiv+0x266>
 8001cbc:	e0aa      	b.n	8001e14 <__aeabi_ddiv+0x3bc>
 8001cbe:	076b      	lsls	r3, r5, #29
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_ddiv+0x26c>
 8001cc2:	e13d      	b.n	8001f40 <__aeabi_ddiv+0x4e8>
 8001cc4:	08ed      	lsrs	r5, r5, #3
 8001cc6:	4643      	mov	r3, r8
 8001cc8:	01db      	lsls	r3, r3, #7
 8001cca:	d506      	bpl.n	8001cda <__aeabi_ddiv+0x282>
 8001ccc:	4642      	mov	r2, r8
 8001cce:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <__aeabi_ddiv+0x388>)
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	4690      	mov	r8, r2
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	00d2      	lsls	r2, r2, #3
 8001cd8:	445a      	add	r2, fp
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <__aeabi_ddiv+0x38c>)
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dd00      	ble.n	8001ce2 <__aeabi_ddiv+0x28a>
 8001ce0:	e71f      	b.n	8001b22 <__aeabi_ddiv+0xca>
 8001ce2:	4643      	mov	r3, r8
 8001ce4:	075b      	lsls	r3, r3, #29
 8001ce6:	431d      	orrs	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	0552      	lsls	r2, r2, #21
 8001cec:	025c      	lsls	r4, r3, #9
 8001cee:	0b24      	lsrs	r4, r4, #12
 8001cf0:	0d53      	lsrs	r3, r2, #21
 8001cf2:	e708      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8001cf4:	4652      	mov	r2, sl
 8001cf6:	4322      	orrs	r2, r4
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_ddiv+0x2a4>
 8001cfa:	e07b      	b.n	8001df4 <__aeabi_ddiv+0x39c>
 8001cfc:	2c00      	cmp	r4, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_ddiv+0x2aa>
 8001d00:	e0fa      	b.n	8001ef8 <__aeabi_ddiv+0x4a0>
 8001d02:	0020      	movs	r0, r4
 8001d04:	f001 fa22 	bl	800314c <__clzsi2>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	3a0b      	subs	r2, #11
 8001d0c:	231d      	movs	r3, #29
 8001d0e:	0001      	movs	r1, r0
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	4652      	mov	r2, sl
 8001d14:	3908      	subs	r1, #8
 8001d16:	40da      	lsrs	r2, r3
 8001d18:	408c      	lsls	r4, r1
 8001d1a:	4314      	orrs	r4, r2
 8001d1c:	4652      	mov	r2, sl
 8001d1e:	408a      	lsls	r2, r1
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <__aeabi_ddiv+0x390>)
 8001d22:	4458      	add	r0, fp
 8001d24:	469b      	mov	fp, r3
 8001d26:	4483      	add	fp, r0
 8001d28:	2000      	movs	r0, #0
 8001d2a:	e6d5      	b.n	8001ad8 <__aeabi_ddiv+0x80>
 8001d2c:	464b      	mov	r3, r9
 8001d2e:	4323      	orrs	r3, r4
 8001d30:	4698      	mov	r8, r3
 8001d32:	d044      	beq.n	8001dbe <__aeabi_ddiv+0x366>
 8001d34:	2c00      	cmp	r4, #0
 8001d36:	d100      	bne.n	8001d3a <__aeabi_ddiv+0x2e2>
 8001d38:	e0ce      	b.n	8001ed8 <__aeabi_ddiv+0x480>
 8001d3a:	0020      	movs	r0, r4
 8001d3c:	f001 fa06 	bl	800314c <__clzsi2>
 8001d40:	0001      	movs	r1, r0
 8001d42:	0002      	movs	r2, r0
 8001d44:	390b      	subs	r1, #11
 8001d46:	231d      	movs	r3, #29
 8001d48:	1a5b      	subs	r3, r3, r1
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	0010      	movs	r0, r2
 8001d4e:	40d9      	lsrs	r1, r3
 8001d50:	3808      	subs	r0, #8
 8001d52:	4084      	lsls	r4, r0
 8001d54:	000b      	movs	r3, r1
 8001d56:	464d      	mov	r5, r9
 8001d58:	4323      	orrs	r3, r4
 8001d5a:	4698      	mov	r8, r3
 8001d5c:	4085      	lsls	r5, r0
 8001d5e:	4823      	ldr	r0, [pc, #140]	; (8001dec <__aeabi_ddiv+0x394>)
 8001d60:	1a83      	subs	r3, r0, r2
 8001d62:	469b      	mov	fp, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	4699      	mov	r9, r3
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	e69a      	b.n	8001aa2 <__aeabi_ddiv+0x4a>
 8001d6c:	464b      	mov	r3, r9
 8001d6e:	4323      	orrs	r3, r4
 8001d70:	4698      	mov	r8, r3
 8001d72:	d11d      	bne.n	8001db0 <__aeabi_ddiv+0x358>
 8001d74:	2308      	movs	r3, #8
 8001d76:	4699      	mov	r9, r3
 8001d78:	3b06      	subs	r3, #6
 8001d7a:	2500      	movs	r5, #0
 8001d7c:	4683      	mov	fp, r0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	e68f      	b.n	8001aa2 <__aeabi_ddiv+0x4a>
 8001d82:	4652      	mov	r2, sl
 8001d84:	4322      	orrs	r2, r4
 8001d86:	d109      	bne.n	8001d9c <__aeabi_ddiv+0x344>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	4649      	mov	r1, r9
 8001d8c:	4319      	orrs	r1, r3
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <__aeabi_ddiv+0x398>)
 8001d90:	4689      	mov	r9, r1
 8001d92:	469c      	mov	ip, r3
 8001d94:	2400      	movs	r4, #0
 8001d96:	2002      	movs	r0, #2
 8001d98:	44e3      	add	fp, ip
 8001d9a:	e69d      	b.n	8001ad8 <__aeabi_ddiv+0x80>
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	464a      	mov	r2, r9
 8001da0:	431a      	orrs	r2, r3
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <__aeabi_ddiv+0x398>)
 8001da4:	4691      	mov	r9, r2
 8001da6:	469c      	mov	ip, r3
 8001da8:	4652      	mov	r2, sl
 8001daa:	2003      	movs	r0, #3
 8001dac:	44e3      	add	fp, ip
 8001dae:	e693      	b.n	8001ad8 <__aeabi_ddiv+0x80>
 8001db0:	230c      	movs	r3, #12
 8001db2:	4699      	mov	r9, r3
 8001db4:	3b09      	subs	r3, #9
 8001db6:	46a0      	mov	r8, r4
 8001db8:	4683      	mov	fp, r0
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	e671      	b.n	8001aa2 <__aeabi_ddiv+0x4a>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	469b      	mov	fp, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	2500      	movs	r5, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	e669      	b.n	8001aa2 <__aeabi_ddiv+0x4a>
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	000007ff 	.word	0x000007ff
 8001dd4:	fffffc01 	.word	0xfffffc01
 8001dd8:	0800d924 	.word	0x0800d924
 8001ddc:	000003ff 	.word	0x000003ff
 8001de0:	feffffff 	.word	0xfeffffff
 8001de4:	000007fe 	.word	0x000007fe
 8001de8:	000003f3 	.word	0x000003f3
 8001dec:	fffffc0d 	.word	0xfffffc0d
 8001df0:	fffff801 	.word	0xfffff801
 8001df4:	4649      	mov	r1, r9
 8001df6:	2301      	movs	r3, #1
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	4689      	mov	r9, r1
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e66a      	b.n	8001ad8 <__aeabi_ddiv+0x80>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2480      	movs	r4, #128	; 0x80
 8001e06:	469a      	mov	sl, r3
 8001e08:	2500      	movs	r5, #0
 8001e0a:	4b8a      	ldr	r3, [pc, #552]	; (8002034 <__aeabi_ddiv+0x5dc>)
 8001e0c:	0324      	lsls	r4, r4, #12
 8001e0e:	e67a      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8001e10:	2501      	movs	r5, #1
 8001e12:	426d      	negs	r5, r5
 8001e14:	2301      	movs	r3, #1
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	2b38      	cmp	r3, #56	; 0x38
 8001e1a:	dd00      	ble.n	8001e1e <__aeabi_ddiv+0x3c6>
 8001e1c:	e670      	b.n	8001b00 <__aeabi_ddiv+0xa8>
 8001e1e:	2b1f      	cmp	r3, #31
 8001e20:	dc00      	bgt.n	8001e24 <__aeabi_ddiv+0x3cc>
 8001e22:	e0bf      	b.n	8001fa4 <__aeabi_ddiv+0x54c>
 8001e24:	211f      	movs	r1, #31
 8001e26:	4249      	negs	r1, r1
 8001e28:	1a8a      	subs	r2, r1, r2
 8001e2a:	4641      	mov	r1, r8
 8001e2c:	40d1      	lsrs	r1, r2
 8001e2e:	000a      	movs	r2, r1
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d004      	beq.n	8001e3e <__aeabi_ddiv+0x3e6>
 8001e34:	4641      	mov	r1, r8
 8001e36:	4b80      	ldr	r3, [pc, #512]	; (8002038 <__aeabi_ddiv+0x5e0>)
 8001e38:	445b      	add	r3, fp
 8001e3a:	4099      	lsls	r1, r3
 8001e3c:	430d      	orrs	r5, r1
 8001e3e:	1e6b      	subs	r3, r5, #1
 8001e40:	419d      	sbcs	r5, r3
 8001e42:	2307      	movs	r3, #7
 8001e44:	432a      	orrs	r2, r5
 8001e46:	001d      	movs	r5, r3
 8001e48:	2400      	movs	r4, #0
 8001e4a:	4015      	ands	r5, r2
 8001e4c:	4213      	tst	r3, r2
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_ddiv+0x3fa>
 8001e50:	e0d4      	b.n	8001ffc <__aeabi_ddiv+0x5a4>
 8001e52:	210f      	movs	r1, #15
 8001e54:	2300      	movs	r3, #0
 8001e56:	4011      	ands	r1, r2
 8001e58:	2904      	cmp	r1, #4
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_ddiv+0x406>
 8001e5c:	e0cb      	b.n	8001ff6 <__aeabi_ddiv+0x59e>
 8001e5e:	1d11      	adds	r1, r2, #4
 8001e60:	4291      	cmp	r1, r2
 8001e62:	4192      	sbcs	r2, r2
 8001e64:	4252      	negs	r2, r2
 8001e66:	189b      	adds	r3, r3, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	0219      	lsls	r1, r3, #8
 8001e6c:	d400      	bmi.n	8001e70 <__aeabi_ddiv+0x418>
 8001e6e:	e0c2      	b.n	8001ff6 <__aeabi_ddiv+0x59e>
 8001e70:	2301      	movs	r3, #1
 8001e72:	2400      	movs	r4, #0
 8001e74:	2500      	movs	r5, #0
 8001e76:	e646      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	4641      	mov	r1, r8
 8001e7c:	031b      	lsls	r3, r3, #12
 8001e7e:	4219      	tst	r1, r3
 8001e80:	d008      	beq.n	8001e94 <__aeabi_ddiv+0x43c>
 8001e82:	421c      	tst	r4, r3
 8001e84:	d106      	bne.n	8001e94 <__aeabi_ddiv+0x43c>
 8001e86:	431c      	orrs	r4, r3
 8001e88:	0324      	lsls	r4, r4, #12
 8001e8a:	46ba      	mov	sl, r7
 8001e8c:	0015      	movs	r5, r2
 8001e8e:	4b69      	ldr	r3, [pc, #420]	; (8002034 <__aeabi_ddiv+0x5dc>)
 8001e90:	0b24      	lsrs	r4, r4, #12
 8001e92:	e638      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8001e94:	2480      	movs	r4, #128	; 0x80
 8001e96:	4643      	mov	r3, r8
 8001e98:	0324      	lsls	r4, r4, #12
 8001e9a:	431c      	orrs	r4, r3
 8001e9c:	0324      	lsls	r4, r4, #12
 8001e9e:	46b2      	mov	sl, r6
 8001ea0:	4b64      	ldr	r3, [pc, #400]	; (8002034 <__aeabi_ddiv+0x5dc>)
 8001ea2:	0b24      	lsrs	r4, r4, #12
 8001ea4:	e62f      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x454>
 8001eaa:	e703      	b.n	8001cb4 <__aeabi_ddiv+0x25c>
 8001eac:	19a6      	adds	r6, r4, r6
 8001eae:	1e68      	subs	r0, r5, #1
 8001eb0:	42a6      	cmp	r6, r4
 8001eb2:	d200      	bcs.n	8001eb6 <__aeabi_ddiv+0x45e>
 8001eb4:	e08d      	b.n	8001fd2 <__aeabi_ddiv+0x57a>
 8001eb6:	428e      	cmp	r6, r1
 8001eb8:	d200      	bcs.n	8001ebc <__aeabi_ddiv+0x464>
 8001eba:	e0a3      	b.n	8002004 <__aeabi_ddiv+0x5ac>
 8001ebc:	d100      	bne.n	8001ec0 <__aeabi_ddiv+0x468>
 8001ebe:	e0b3      	b.n	8002028 <__aeabi_ddiv+0x5d0>
 8001ec0:	0005      	movs	r5, r0
 8001ec2:	e6f5      	b.n	8001cb0 <__aeabi_ddiv+0x258>
 8001ec4:	42aa      	cmp	r2, r5
 8001ec6:	d900      	bls.n	8001eca <__aeabi_ddiv+0x472>
 8001ec8:	e639      	b.n	8001b3e <__aeabi_ddiv+0xe6>
 8001eca:	4643      	mov	r3, r8
 8001ecc:	07de      	lsls	r6, r3, #31
 8001ece:	0858      	lsrs	r0, r3, #1
 8001ed0:	086b      	lsrs	r3, r5, #1
 8001ed2:	431e      	orrs	r6, r3
 8001ed4:	07ed      	lsls	r5, r5, #31
 8001ed6:	e639      	b.n	8001b4c <__aeabi_ddiv+0xf4>
 8001ed8:	4648      	mov	r0, r9
 8001eda:	f001 f937 	bl	800314c <__clzsi2>
 8001ede:	0001      	movs	r1, r0
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	3115      	adds	r1, #21
 8001ee4:	3220      	adds	r2, #32
 8001ee6:	291c      	cmp	r1, #28
 8001ee8:	dc00      	bgt.n	8001eec <__aeabi_ddiv+0x494>
 8001eea:	e72c      	b.n	8001d46 <__aeabi_ddiv+0x2ee>
 8001eec:	464b      	mov	r3, r9
 8001eee:	3808      	subs	r0, #8
 8001ef0:	4083      	lsls	r3, r0
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	e732      	b.n	8001d5e <__aeabi_ddiv+0x306>
 8001ef8:	f001 f928 	bl	800314c <__clzsi2>
 8001efc:	0003      	movs	r3, r0
 8001efe:	001a      	movs	r2, r3
 8001f00:	3215      	adds	r2, #21
 8001f02:	3020      	adds	r0, #32
 8001f04:	2a1c      	cmp	r2, #28
 8001f06:	dc00      	bgt.n	8001f0a <__aeabi_ddiv+0x4b2>
 8001f08:	e700      	b.n	8001d0c <__aeabi_ddiv+0x2b4>
 8001f0a:	4654      	mov	r4, sl
 8001f0c:	3b08      	subs	r3, #8
 8001f0e:	2200      	movs	r2, #0
 8001f10:	409c      	lsls	r4, r3
 8001f12:	e705      	b.n	8001d20 <__aeabi_ddiv+0x2c8>
 8001f14:	1936      	adds	r6, r6, r4
 8001f16:	3b01      	subs	r3, #1
 8001f18:	42b4      	cmp	r4, r6
 8001f1a:	d900      	bls.n	8001f1e <__aeabi_ddiv+0x4c6>
 8001f1c:	e6a6      	b.n	8001c6c <__aeabi_ddiv+0x214>
 8001f1e:	42b2      	cmp	r2, r6
 8001f20:	d800      	bhi.n	8001f24 <__aeabi_ddiv+0x4cc>
 8001f22:	e6a3      	b.n	8001c6c <__aeabi_ddiv+0x214>
 8001f24:	1e83      	subs	r3, r0, #2
 8001f26:	1936      	adds	r6, r6, r4
 8001f28:	e6a0      	b.n	8001c6c <__aeabi_ddiv+0x214>
 8001f2a:	1909      	adds	r1, r1, r4
 8001f2c:	3d01      	subs	r5, #1
 8001f2e:	428c      	cmp	r4, r1
 8001f30:	d900      	bls.n	8001f34 <__aeabi_ddiv+0x4dc>
 8001f32:	e68d      	b.n	8001c50 <__aeabi_ddiv+0x1f8>
 8001f34:	428a      	cmp	r2, r1
 8001f36:	d800      	bhi.n	8001f3a <__aeabi_ddiv+0x4e2>
 8001f38:	e68a      	b.n	8001c50 <__aeabi_ddiv+0x1f8>
 8001f3a:	1e85      	subs	r5, r0, #2
 8001f3c:	1909      	adds	r1, r1, r4
 8001f3e:	e687      	b.n	8001c50 <__aeabi_ddiv+0x1f8>
 8001f40:	230f      	movs	r3, #15
 8001f42:	402b      	ands	r3, r5
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d100      	bne.n	8001f4a <__aeabi_ddiv+0x4f2>
 8001f48:	e6bc      	b.n	8001cc4 <__aeabi_ddiv+0x26c>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	42ab      	cmp	r3, r5
 8001f50:	419b      	sbcs	r3, r3
 8001f52:	3504      	adds	r5, #4
 8001f54:	425b      	negs	r3, r3
 8001f56:	08ed      	lsrs	r5, r5, #3
 8001f58:	4498      	add	r8, r3
 8001f5a:	e6b4      	b.n	8001cc6 <__aeabi_ddiv+0x26e>
 8001f5c:	42af      	cmp	r7, r5
 8001f5e:	d900      	bls.n	8001f62 <__aeabi_ddiv+0x50a>
 8001f60:	e660      	b.n	8001c24 <__aeabi_ddiv+0x1cc>
 8001f62:	4282      	cmp	r2, r0
 8001f64:	d804      	bhi.n	8001f70 <__aeabi_ddiv+0x518>
 8001f66:	d000      	beq.n	8001f6a <__aeabi_ddiv+0x512>
 8001f68:	e65c      	b.n	8001c24 <__aeabi_ddiv+0x1cc>
 8001f6a:	42ae      	cmp	r6, r5
 8001f6c:	d800      	bhi.n	8001f70 <__aeabi_ddiv+0x518>
 8001f6e:	e659      	b.n	8001c24 <__aeabi_ddiv+0x1cc>
 8001f70:	2302      	movs	r3, #2
 8001f72:	425b      	negs	r3, r3
 8001f74:	469c      	mov	ip, r3
 8001f76:	9b00      	ldr	r3, [sp, #0]
 8001f78:	44e0      	add	r8, ip
 8001f7a:	469c      	mov	ip, r3
 8001f7c:	4465      	add	r5, ip
 8001f7e:	429d      	cmp	r5, r3
 8001f80:	419b      	sbcs	r3, r3
 8001f82:	425b      	negs	r3, r3
 8001f84:	191b      	adds	r3, r3, r4
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	e64d      	b.n	8001c26 <__aeabi_ddiv+0x1ce>
 8001f8a:	428a      	cmp	r2, r1
 8001f8c:	d800      	bhi.n	8001f90 <__aeabi_ddiv+0x538>
 8001f8e:	e60e      	b.n	8001bae <__aeabi_ddiv+0x156>
 8001f90:	1e83      	subs	r3, r0, #2
 8001f92:	1909      	adds	r1, r1, r4
 8001f94:	e60b      	b.n	8001bae <__aeabi_ddiv+0x156>
 8001f96:	428a      	cmp	r2, r1
 8001f98:	d800      	bhi.n	8001f9c <__aeabi_ddiv+0x544>
 8001f9a:	e5f4      	b.n	8001b86 <__aeabi_ddiv+0x12e>
 8001f9c:	1e83      	subs	r3, r0, #2
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	1909      	adds	r1, r1, r4
 8001fa2:	e5f0      	b.n	8001b86 <__aeabi_ddiv+0x12e>
 8001fa4:	4925      	ldr	r1, [pc, #148]	; (800203c <__aeabi_ddiv+0x5e4>)
 8001fa6:	0028      	movs	r0, r5
 8001fa8:	4459      	add	r1, fp
 8001faa:	408d      	lsls	r5, r1
 8001fac:	4642      	mov	r2, r8
 8001fae:	408a      	lsls	r2, r1
 8001fb0:	1e69      	subs	r1, r5, #1
 8001fb2:	418d      	sbcs	r5, r1
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	40d8      	lsrs	r0, r3
 8001fb8:	40d9      	lsrs	r1, r3
 8001fba:	4302      	orrs	r2, r0
 8001fbc:	432a      	orrs	r2, r5
 8001fbe:	000b      	movs	r3, r1
 8001fc0:	0751      	lsls	r1, r2, #29
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_ddiv+0x56e>
 8001fc4:	e751      	b.n	8001e6a <__aeabi_ddiv+0x412>
 8001fc6:	210f      	movs	r1, #15
 8001fc8:	4011      	ands	r1, r2
 8001fca:	2904      	cmp	r1, #4
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_ddiv+0x578>
 8001fce:	e746      	b.n	8001e5e <__aeabi_ddiv+0x406>
 8001fd0:	e74b      	b.n	8001e6a <__aeabi_ddiv+0x412>
 8001fd2:	0005      	movs	r5, r0
 8001fd4:	428e      	cmp	r6, r1
 8001fd6:	d000      	beq.n	8001fda <__aeabi_ddiv+0x582>
 8001fd8:	e66a      	b.n	8001cb0 <__aeabi_ddiv+0x258>
 8001fda:	9a00      	ldr	r2, [sp, #0]
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_ddiv+0x58a>
 8001fe0:	e666      	b.n	8001cb0 <__aeabi_ddiv+0x258>
 8001fe2:	e667      	b.n	8001cb4 <__aeabi_ddiv+0x25c>
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <__aeabi_ddiv+0x5e8>)
 8001fe6:	445a      	add	r2, fp
 8001fe8:	2a00      	cmp	r2, #0
 8001fea:	dc00      	bgt.n	8001fee <__aeabi_ddiv+0x596>
 8001fec:	e710      	b.n	8001e10 <__aeabi_ddiv+0x3b8>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2500      	movs	r5, #0
 8001ff2:	4498      	add	r8, r3
 8001ff4:	e667      	b.n	8001cc6 <__aeabi_ddiv+0x26e>
 8001ff6:	075d      	lsls	r5, r3, #29
 8001ff8:	025b      	lsls	r3, r3, #9
 8001ffa:	0b1c      	lsrs	r4, r3, #12
 8001ffc:	08d2      	lsrs	r2, r2, #3
 8001ffe:	2300      	movs	r3, #0
 8002000:	4315      	orrs	r5, r2
 8002002:	e580      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8002004:	9800      	ldr	r0, [sp, #0]
 8002006:	3d02      	subs	r5, #2
 8002008:	0042      	lsls	r2, r0, #1
 800200a:	4282      	cmp	r2, r0
 800200c:	41bf      	sbcs	r7, r7
 800200e:	427f      	negs	r7, r7
 8002010:	193c      	adds	r4, r7, r4
 8002012:	1936      	adds	r6, r6, r4
 8002014:	9200      	str	r2, [sp, #0]
 8002016:	e7dd      	b.n	8001fd4 <__aeabi_ddiv+0x57c>
 8002018:	2480      	movs	r4, #128	; 0x80
 800201a:	4643      	mov	r3, r8
 800201c:	0324      	lsls	r4, r4, #12
 800201e:	431c      	orrs	r4, r3
 8002020:	0324      	lsls	r4, r4, #12
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__aeabi_ddiv+0x5dc>)
 8002024:	0b24      	lsrs	r4, r4, #12
 8002026:	e56e      	b.n	8001b06 <__aeabi_ddiv+0xae>
 8002028:	9a00      	ldr	r2, [sp, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d3ea      	bcc.n	8002004 <__aeabi_ddiv+0x5ac>
 800202e:	0005      	movs	r5, r0
 8002030:	e7d3      	b.n	8001fda <__aeabi_ddiv+0x582>
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	000007ff 	.word	0x000007ff
 8002038:	0000043e 	.word	0x0000043e
 800203c:	0000041e 	.word	0x0000041e
 8002040:	000003ff 	.word	0x000003ff

08002044 <__eqdf2>:
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	464e      	mov	r6, r9
 8002048:	4645      	mov	r5, r8
 800204a:	46de      	mov	lr, fp
 800204c:	4657      	mov	r7, sl
 800204e:	4690      	mov	r8, r2
 8002050:	b5e0      	push	{r5, r6, r7, lr}
 8002052:	0017      	movs	r7, r2
 8002054:	031a      	lsls	r2, r3, #12
 8002056:	0b12      	lsrs	r2, r2, #12
 8002058:	0005      	movs	r5, r0
 800205a:	4684      	mov	ip, r0
 800205c:	4819      	ldr	r0, [pc, #100]	; (80020c4 <__eqdf2+0x80>)
 800205e:	030e      	lsls	r6, r1, #12
 8002060:	004c      	lsls	r4, r1, #1
 8002062:	4691      	mov	r9, r2
 8002064:	005a      	lsls	r2, r3, #1
 8002066:	0fdb      	lsrs	r3, r3, #31
 8002068:	469b      	mov	fp, r3
 800206a:	0b36      	lsrs	r6, r6, #12
 800206c:	0d64      	lsrs	r4, r4, #21
 800206e:	0fc9      	lsrs	r1, r1, #31
 8002070:	0d52      	lsrs	r2, r2, #21
 8002072:	4284      	cmp	r4, r0
 8002074:	d019      	beq.n	80020aa <__eqdf2+0x66>
 8002076:	4282      	cmp	r2, r0
 8002078:	d010      	beq.n	800209c <__eqdf2+0x58>
 800207a:	2001      	movs	r0, #1
 800207c:	4294      	cmp	r4, r2
 800207e:	d10e      	bne.n	800209e <__eqdf2+0x5a>
 8002080:	454e      	cmp	r6, r9
 8002082:	d10c      	bne.n	800209e <__eqdf2+0x5a>
 8002084:	2001      	movs	r0, #1
 8002086:	45c4      	cmp	ip, r8
 8002088:	d109      	bne.n	800209e <__eqdf2+0x5a>
 800208a:	4559      	cmp	r1, fp
 800208c:	d017      	beq.n	80020be <__eqdf2+0x7a>
 800208e:	2c00      	cmp	r4, #0
 8002090:	d105      	bne.n	800209e <__eqdf2+0x5a>
 8002092:	0030      	movs	r0, r6
 8002094:	4328      	orrs	r0, r5
 8002096:	1e43      	subs	r3, r0, #1
 8002098:	4198      	sbcs	r0, r3
 800209a:	e000      	b.n	800209e <__eqdf2+0x5a>
 800209c:	2001      	movs	r0, #1
 800209e:	bcf0      	pop	{r4, r5, r6, r7}
 80020a0:	46bb      	mov	fp, r7
 80020a2:	46b2      	mov	sl, r6
 80020a4:	46a9      	mov	r9, r5
 80020a6:	46a0      	mov	r8, r4
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020aa:	0033      	movs	r3, r6
 80020ac:	2001      	movs	r0, #1
 80020ae:	432b      	orrs	r3, r5
 80020b0:	d1f5      	bne.n	800209e <__eqdf2+0x5a>
 80020b2:	42a2      	cmp	r2, r4
 80020b4:	d1f3      	bne.n	800209e <__eqdf2+0x5a>
 80020b6:	464b      	mov	r3, r9
 80020b8:	433b      	orrs	r3, r7
 80020ba:	d1f0      	bne.n	800209e <__eqdf2+0x5a>
 80020bc:	e7e2      	b.n	8002084 <__eqdf2+0x40>
 80020be:	2000      	movs	r0, #0
 80020c0:	e7ed      	b.n	800209e <__eqdf2+0x5a>
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	000007ff 	.word	0x000007ff

080020c8 <__gedf2>:
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	4647      	mov	r7, r8
 80020cc:	46ce      	mov	lr, r9
 80020ce:	0004      	movs	r4, r0
 80020d0:	0018      	movs	r0, r3
 80020d2:	0016      	movs	r6, r2
 80020d4:	031b      	lsls	r3, r3, #12
 80020d6:	0b1b      	lsrs	r3, r3, #12
 80020d8:	4d2d      	ldr	r5, [pc, #180]	; (8002190 <__gedf2+0xc8>)
 80020da:	004a      	lsls	r2, r1, #1
 80020dc:	4699      	mov	r9, r3
 80020de:	b580      	push	{r7, lr}
 80020e0:	0043      	lsls	r3, r0, #1
 80020e2:	030f      	lsls	r7, r1, #12
 80020e4:	46a4      	mov	ip, r4
 80020e6:	46b0      	mov	r8, r6
 80020e8:	0b3f      	lsrs	r7, r7, #12
 80020ea:	0d52      	lsrs	r2, r2, #21
 80020ec:	0fc9      	lsrs	r1, r1, #31
 80020ee:	0d5b      	lsrs	r3, r3, #21
 80020f0:	0fc0      	lsrs	r0, r0, #31
 80020f2:	42aa      	cmp	r2, r5
 80020f4:	d021      	beq.n	800213a <__gedf2+0x72>
 80020f6:	42ab      	cmp	r3, r5
 80020f8:	d013      	beq.n	8002122 <__gedf2+0x5a>
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	d122      	bne.n	8002144 <__gedf2+0x7c>
 80020fe:	433c      	orrs	r4, r7
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <__gedf2+0x42>
 8002104:	464d      	mov	r5, r9
 8002106:	432e      	orrs	r6, r5
 8002108:	d022      	beq.n	8002150 <__gedf2+0x88>
 800210a:	2c00      	cmp	r4, #0
 800210c:	d010      	beq.n	8002130 <__gedf2+0x68>
 800210e:	4281      	cmp	r1, r0
 8002110:	d022      	beq.n	8002158 <__gedf2+0x90>
 8002112:	2002      	movs	r0, #2
 8002114:	3901      	subs	r1, #1
 8002116:	4008      	ands	r0, r1
 8002118:	3801      	subs	r0, #1
 800211a:	bcc0      	pop	{r6, r7}
 800211c:	46b9      	mov	r9, r7
 800211e:	46b0      	mov	r8, r6
 8002120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002122:	464d      	mov	r5, r9
 8002124:	432e      	orrs	r6, r5
 8002126:	d129      	bne.n	800217c <__gedf2+0xb4>
 8002128:	2a00      	cmp	r2, #0
 800212a:	d1f0      	bne.n	800210e <__gedf2+0x46>
 800212c:	433c      	orrs	r4, r7
 800212e:	d1ee      	bne.n	800210e <__gedf2+0x46>
 8002130:	2800      	cmp	r0, #0
 8002132:	d1f2      	bne.n	800211a <__gedf2+0x52>
 8002134:	2001      	movs	r0, #1
 8002136:	4240      	negs	r0, r0
 8002138:	e7ef      	b.n	800211a <__gedf2+0x52>
 800213a:	003d      	movs	r5, r7
 800213c:	4325      	orrs	r5, r4
 800213e:	d11d      	bne.n	800217c <__gedf2+0xb4>
 8002140:	4293      	cmp	r3, r2
 8002142:	d0ee      	beq.n	8002122 <__gedf2+0x5a>
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e2      	bne.n	800210e <__gedf2+0x46>
 8002148:	464c      	mov	r4, r9
 800214a:	4326      	orrs	r6, r4
 800214c:	d1df      	bne.n	800210e <__gedf2+0x46>
 800214e:	e7e0      	b.n	8002112 <__gedf2+0x4a>
 8002150:	2000      	movs	r0, #0
 8002152:	2c00      	cmp	r4, #0
 8002154:	d0e1      	beq.n	800211a <__gedf2+0x52>
 8002156:	e7dc      	b.n	8002112 <__gedf2+0x4a>
 8002158:	429a      	cmp	r2, r3
 800215a:	dc0a      	bgt.n	8002172 <__gedf2+0xaa>
 800215c:	dbe8      	blt.n	8002130 <__gedf2+0x68>
 800215e:	454f      	cmp	r7, r9
 8002160:	d8d7      	bhi.n	8002112 <__gedf2+0x4a>
 8002162:	d00e      	beq.n	8002182 <__gedf2+0xba>
 8002164:	2000      	movs	r0, #0
 8002166:	454f      	cmp	r7, r9
 8002168:	d2d7      	bcs.n	800211a <__gedf2+0x52>
 800216a:	2900      	cmp	r1, #0
 800216c:	d0e2      	beq.n	8002134 <__gedf2+0x6c>
 800216e:	0008      	movs	r0, r1
 8002170:	e7d3      	b.n	800211a <__gedf2+0x52>
 8002172:	4243      	negs	r3, r0
 8002174:	4158      	adcs	r0, r3
 8002176:	0040      	lsls	r0, r0, #1
 8002178:	3801      	subs	r0, #1
 800217a:	e7ce      	b.n	800211a <__gedf2+0x52>
 800217c:	2002      	movs	r0, #2
 800217e:	4240      	negs	r0, r0
 8002180:	e7cb      	b.n	800211a <__gedf2+0x52>
 8002182:	45c4      	cmp	ip, r8
 8002184:	d8c5      	bhi.n	8002112 <__gedf2+0x4a>
 8002186:	2000      	movs	r0, #0
 8002188:	45c4      	cmp	ip, r8
 800218a:	d2c6      	bcs.n	800211a <__gedf2+0x52>
 800218c:	e7ed      	b.n	800216a <__gedf2+0xa2>
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	000007ff 	.word	0x000007ff

08002194 <__ledf2>:
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	4647      	mov	r7, r8
 8002198:	46ce      	mov	lr, r9
 800219a:	0004      	movs	r4, r0
 800219c:	0018      	movs	r0, r3
 800219e:	0016      	movs	r6, r2
 80021a0:	031b      	lsls	r3, r3, #12
 80021a2:	0b1b      	lsrs	r3, r3, #12
 80021a4:	4d2c      	ldr	r5, [pc, #176]	; (8002258 <__ledf2+0xc4>)
 80021a6:	004a      	lsls	r2, r1, #1
 80021a8:	4699      	mov	r9, r3
 80021aa:	b580      	push	{r7, lr}
 80021ac:	0043      	lsls	r3, r0, #1
 80021ae:	030f      	lsls	r7, r1, #12
 80021b0:	46a4      	mov	ip, r4
 80021b2:	46b0      	mov	r8, r6
 80021b4:	0b3f      	lsrs	r7, r7, #12
 80021b6:	0d52      	lsrs	r2, r2, #21
 80021b8:	0fc9      	lsrs	r1, r1, #31
 80021ba:	0d5b      	lsrs	r3, r3, #21
 80021bc:	0fc0      	lsrs	r0, r0, #31
 80021be:	42aa      	cmp	r2, r5
 80021c0:	d00d      	beq.n	80021de <__ledf2+0x4a>
 80021c2:	42ab      	cmp	r3, r5
 80021c4:	d010      	beq.n	80021e8 <__ledf2+0x54>
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d127      	bne.n	800221a <__ledf2+0x86>
 80021ca:	433c      	orrs	r4, r7
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d111      	bne.n	80021f4 <__ledf2+0x60>
 80021d0:	464d      	mov	r5, r9
 80021d2:	432e      	orrs	r6, r5
 80021d4:	d10e      	bne.n	80021f4 <__ledf2+0x60>
 80021d6:	2000      	movs	r0, #0
 80021d8:	2c00      	cmp	r4, #0
 80021da:	d015      	beq.n	8002208 <__ledf2+0x74>
 80021dc:	e00e      	b.n	80021fc <__ledf2+0x68>
 80021de:	003d      	movs	r5, r7
 80021e0:	4325      	orrs	r5, r4
 80021e2:	d110      	bne.n	8002206 <__ledf2+0x72>
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d118      	bne.n	800221a <__ledf2+0x86>
 80021e8:	464d      	mov	r5, r9
 80021ea:	432e      	orrs	r6, r5
 80021ec:	d10b      	bne.n	8002206 <__ledf2+0x72>
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	d102      	bne.n	80021f8 <__ledf2+0x64>
 80021f2:	433c      	orrs	r4, r7
 80021f4:	2c00      	cmp	r4, #0
 80021f6:	d00b      	beq.n	8002210 <__ledf2+0x7c>
 80021f8:	4281      	cmp	r1, r0
 80021fa:	d014      	beq.n	8002226 <__ledf2+0x92>
 80021fc:	2002      	movs	r0, #2
 80021fe:	3901      	subs	r1, #1
 8002200:	4008      	ands	r0, r1
 8002202:	3801      	subs	r0, #1
 8002204:	e000      	b.n	8002208 <__ledf2+0x74>
 8002206:	2002      	movs	r0, #2
 8002208:	bcc0      	pop	{r6, r7}
 800220a:	46b9      	mov	r9, r7
 800220c:	46b0      	mov	r8, r6
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002210:	2800      	cmp	r0, #0
 8002212:	d1f9      	bne.n	8002208 <__ledf2+0x74>
 8002214:	2001      	movs	r0, #1
 8002216:	4240      	negs	r0, r0
 8002218:	e7f6      	b.n	8002208 <__ledf2+0x74>
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ec      	bne.n	80021f8 <__ledf2+0x64>
 800221e:	464c      	mov	r4, r9
 8002220:	4326      	orrs	r6, r4
 8002222:	d1e9      	bne.n	80021f8 <__ledf2+0x64>
 8002224:	e7ea      	b.n	80021fc <__ledf2+0x68>
 8002226:	429a      	cmp	r2, r3
 8002228:	dd04      	ble.n	8002234 <__ledf2+0xa0>
 800222a:	4243      	negs	r3, r0
 800222c:	4158      	adcs	r0, r3
 800222e:	0040      	lsls	r0, r0, #1
 8002230:	3801      	subs	r0, #1
 8002232:	e7e9      	b.n	8002208 <__ledf2+0x74>
 8002234:	429a      	cmp	r2, r3
 8002236:	dbeb      	blt.n	8002210 <__ledf2+0x7c>
 8002238:	454f      	cmp	r7, r9
 800223a:	d8df      	bhi.n	80021fc <__ledf2+0x68>
 800223c:	d006      	beq.n	800224c <__ledf2+0xb8>
 800223e:	2000      	movs	r0, #0
 8002240:	454f      	cmp	r7, r9
 8002242:	d2e1      	bcs.n	8002208 <__ledf2+0x74>
 8002244:	2900      	cmp	r1, #0
 8002246:	d0e5      	beq.n	8002214 <__ledf2+0x80>
 8002248:	0008      	movs	r0, r1
 800224a:	e7dd      	b.n	8002208 <__ledf2+0x74>
 800224c:	45c4      	cmp	ip, r8
 800224e:	d8d5      	bhi.n	80021fc <__ledf2+0x68>
 8002250:	2000      	movs	r0, #0
 8002252:	45c4      	cmp	ip, r8
 8002254:	d2d8      	bcs.n	8002208 <__ledf2+0x74>
 8002256:	e7f5      	b.n	8002244 <__ledf2+0xb0>
 8002258:	000007ff 	.word	0x000007ff

0800225c <__aeabi_dmul>:
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225e:	4657      	mov	r7, sl
 8002260:	464e      	mov	r6, r9
 8002262:	4645      	mov	r5, r8
 8002264:	46de      	mov	lr, fp
 8002266:	b5e0      	push	{r5, r6, r7, lr}
 8002268:	4698      	mov	r8, r3
 800226a:	030c      	lsls	r4, r1, #12
 800226c:	004b      	lsls	r3, r1, #1
 800226e:	0006      	movs	r6, r0
 8002270:	4692      	mov	sl, r2
 8002272:	b087      	sub	sp, #28
 8002274:	0b24      	lsrs	r4, r4, #12
 8002276:	0d5b      	lsrs	r3, r3, #21
 8002278:	0fcf      	lsrs	r7, r1, #31
 800227a:	2b00      	cmp	r3, #0
 800227c:	d100      	bne.n	8002280 <__aeabi_dmul+0x24>
 800227e:	e15c      	b.n	800253a <__aeabi_dmul+0x2de>
 8002280:	4ad9      	ldr	r2, [pc, #868]	; (80025e8 <__aeabi_dmul+0x38c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d100      	bne.n	8002288 <__aeabi_dmul+0x2c>
 8002286:	e175      	b.n	8002574 <__aeabi_dmul+0x318>
 8002288:	0f42      	lsrs	r2, r0, #29
 800228a:	00e4      	lsls	r4, r4, #3
 800228c:	4314      	orrs	r4, r2
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0412      	lsls	r2, r2, #16
 8002292:	4314      	orrs	r4, r2
 8002294:	4ad5      	ldr	r2, [pc, #852]	; (80025ec <__aeabi_dmul+0x390>)
 8002296:	00c5      	lsls	r5, r0, #3
 8002298:	4694      	mov	ip, r2
 800229a:	4463      	add	r3, ip
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2300      	movs	r3, #0
 80022a0:	4699      	mov	r9, r3
 80022a2:	469b      	mov	fp, r3
 80022a4:	4643      	mov	r3, r8
 80022a6:	4642      	mov	r2, r8
 80022a8:	031e      	lsls	r6, r3, #12
 80022aa:	0fd2      	lsrs	r2, r2, #31
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	4650      	mov	r0, sl
 80022b0:	4690      	mov	r8, r2
 80022b2:	0b36      	lsrs	r6, r6, #12
 80022b4:	0d5b      	lsrs	r3, r3, #21
 80022b6:	d100      	bne.n	80022ba <__aeabi_dmul+0x5e>
 80022b8:	e120      	b.n	80024fc <__aeabi_dmul+0x2a0>
 80022ba:	4acb      	ldr	r2, [pc, #812]	; (80025e8 <__aeabi_dmul+0x38c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d100      	bne.n	80022c2 <__aeabi_dmul+0x66>
 80022c0:	e162      	b.n	8002588 <__aeabi_dmul+0x32c>
 80022c2:	49ca      	ldr	r1, [pc, #808]	; (80025ec <__aeabi_dmul+0x390>)
 80022c4:	0f42      	lsrs	r2, r0, #29
 80022c6:	468c      	mov	ip, r1
 80022c8:	9900      	ldr	r1, [sp, #0]
 80022ca:	4463      	add	r3, ip
 80022cc:	00f6      	lsls	r6, r6, #3
 80022ce:	468c      	mov	ip, r1
 80022d0:	4316      	orrs	r6, r2
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	449c      	add	ip, r3
 80022d6:	0412      	lsls	r2, r2, #16
 80022d8:	4663      	mov	r3, ip
 80022da:	4316      	orrs	r6, r2
 80022dc:	00c2      	lsls	r2, r0, #3
 80022de:	2000      	movs	r0, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	9900      	ldr	r1, [sp, #0]
 80022e4:	4643      	mov	r3, r8
 80022e6:	3101      	adds	r1, #1
 80022e8:	468c      	mov	ip, r1
 80022ea:	4649      	mov	r1, r9
 80022ec:	407b      	eors	r3, r7
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	290f      	cmp	r1, #15
 80022f2:	d826      	bhi.n	8002342 <__aeabi_dmul+0xe6>
 80022f4:	4bbe      	ldr	r3, [pc, #760]	; (80025f0 <__aeabi_dmul+0x394>)
 80022f6:	0089      	lsls	r1, r1, #2
 80022f8:	5859      	ldr	r1, [r3, r1]
 80022fa:	468f      	mov	pc, r1
 80022fc:	4643      	mov	r3, r8
 80022fe:	9301      	str	r3, [sp, #4]
 8002300:	0034      	movs	r4, r6
 8002302:	0015      	movs	r5, r2
 8002304:	4683      	mov	fp, r0
 8002306:	465b      	mov	r3, fp
 8002308:	2b02      	cmp	r3, #2
 800230a:	d016      	beq.n	800233a <__aeabi_dmul+0xde>
 800230c:	2b03      	cmp	r3, #3
 800230e:	d100      	bne.n	8002312 <__aeabi_dmul+0xb6>
 8002310:	e203      	b.n	800271a <__aeabi_dmul+0x4be>
 8002312:	2b01      	cmp	r3, #1
 8002314:	d000      	beq.n	8002318 <__aeabi_dmul+0xbc>
 8002316:	e0cd      	b.n	80024b4 <__aeabi_dmul+0x258>
 8002318:	2200      	movs	r2, #0
 800231a:	2400      	movs	r4, #0
 800231c:	2500      	movs	r5, #0
 800231e:	9b01      	ldr	r3, [sp, #4]
 8002320:	0512      	lsls	r2, r2, #20
 8002322:	4322      	orrs	r2, r4
 8002324:	07db      	lsls	r3, r3, #31
 8002326:	431a      	orrs	r2, r3
 8002328:	0028      	movs	r0, r5
 800232a:	0011      	movs	r1, r2
 800232c:	b007      	add	sp, #28
 800232e:	bcf0      	pop	{r4, r5, r6, r7}
 8002330:	46bb      	mov	fp, r7
 8002332:	46b2      	mov	sl, r6
 8002334:	46a9      	mov	r9, r5
 8002336:	46a0      	mov	r8, r4
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	2400      	movs	r4, #0
 800233c:	2500      	movs	r5, #0
 800233e:	4aaa      	ldr	r2, [pc, #680]	; (80025e8 <__aeabi_dmul+0x38c>)
 8002340:	e7ed      	b.n	800231e <__aeabi_dmul+0xc2>
 8002342:	0c28      	lsrs	r0, r5, #16
 8002344:	042d      	lsls	r5, r5, #16
 8002346:	0c2d      	lsrs	r5, r5, #16
 8002348:	002b      	movs	r3, r5
 800234a:	0c11      	lsrs	r1, r2, #16
 800234c:	0412      	lsls	r2, r2, #16
 800234e:	0c12      	lsrs	r2, r2, #16
 8002350:	4353      	muls	r3, r2
 8002352:	4698      	mov	r8, r3
 8002354:	0013      	movs	r3, r2
 8002356:	002f      	movs	r7, r5
 8002358:	4343      	muls	r3, r0
 800235a:	4699      	mov	r9, r3
 800235c:	434f      	muls	r7, r1
 800235e:	444f      	add	r7, r9
 8002360:	46bb      	mov	fp, r7
 8002362:	4647      	mov	r7, r8
 8002364:	000b      	movs	r3, r1
 8002366:	0c3f      	lsrs	r7, r7, #16
 8002368:	46ba      	mov	sl, r7
 800236a:	4343      	muls	r3, r0
 800236c:	44da      	add	sl, fp
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	45d1      	cmp	r9, sl
 8002372:	d904      	bls.n	800237e <__aeabi_dmul+0x122>
 8002374:	2780      	movs	r7, #128	; 0x80
 8002376:	027f      	lsls	r7, r7, #9
 8002378:	46b9      	mov	r9, r7
 800237a:	444b      	add	r3, r9
 800237c:	9302      	str	r3, [sp, #8]
 800237e:	4653      	mov	r3, sl
 8002380:	0c1b      	lsrs	r3, r3, #16
 8002382:	469b      	mov	fp, r3
 8002384:	4653      	mov	r3, sl
 8002386:	041f      	lsls	r7, r3, #16
 8002388:	4643      	mov	r3, r8
 800238a:	041b      	lsls	r3, r3, #16
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	4698      	mov	r8, r3
 8002390:	003b      	movs	r3, r7
 8002392:	4443      	add	r3, r8
 8002394:	9304      	str	r3, [sp, #16]
 8002396:	0c33      	lsrs	r3, r6, #16
 8002398:	0436      	lsls	r6, r6, #16
 800239a:	0c36      	lsrs	r6, r6, #16
 800239c:	4698      	mov	r8, r3
 800239e:	0033      	movs	r3, r6
 80023a0:	4343      	muls	r3, r0
 80023a2:	4699      	mov	r9, r3
 80023a4:	4643      	mov	r3, r8
 80023a6:	4343      	muls	r3, r0
 80023a8:	002f      	movs	r7, r5
 80023aa:	469a      	mov	sl, r3
 80023ac:	4643      	mov	r3, r8
 80023ae:	4377      	muls	r7, r6
 80023b0:	435d      	muls	r5, r3
 80023b2:	0c38      	lsrs	r0, r7, #16
 80023b4:	444d      	add	r5, r9
 80023b6:	1945      	adds	r5, r0, r5
 80023b8:	45a9      	cmp	r9, r5
 80023ba:	d903      	bls.n	80023c4 <__aeabi_dmul+0x168>
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	4699      	mov	r9, r3
 80023c2:	44ca      	add	sl, r9
 80023c4:	043f      	lsls	r7, r7, #16
 80023c6:	0c28      	lsrs	r0, r5, #16
 80023c8:	0c3f      	lsrs	r7, r7, #16
 80023ca:	042d      	lsls	r5, r5, #16
 80023cc:	19ed      	adds	r5, r5, r7
 80023ce:	0c27      	lsrs	r7, r4, #16
 80023d0:	0424      	lsls	r4, r4, #16
 80023d2:	0c24      	lsrs	r4, r4, #16
 80023d4:	0003      	movs	r3, r0
 80023d6:	0020      	movs	r0, r4
 80023d8:	4350      	muls	r0, r2
 80023da:	437a      	muls	r2, r7
 80023dc:	4691      	mov	r9, r2
 80023de:	003a      	movs	r2, r7
 80023e0:	4453      	add	r3, sl
 80023e2:	9305      	str	r3, [sp, #20]
 80023e4:	0c03      	lsrs	r3, r0, #16
 80023e6:	469a      	mov	sl, r3
 80023e8:	434a      	muls	r2, r1
 80023ea:	4361      	muls	r1, r4
 80023ec:	4449      	add	r1, r9
 80023ee:	4451      	add	r1, sl
 80023f0:	44ab      	add	fp, r5
 80023f2:	4589      	cmp	r9, r1
 80023f4:	d903      	bls.n	80023fe <__aeabi_dmul+0x1a2>
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	4699      	mov	r9, r3
 80023fc:	444a      	add	r2, r9
 80023fe:	0400      	lsls	r0, r0, #16
 8002400:	0c0b      	lsrs	r3, r1, #16
 8002402:	0c00      	lsrs	r0, r0, #16
 8002404:	0409      	lsls	r1, r1, #16
 8002406:	1809      	adds	r1, r1, r0
 8002408:	0020      	movs	r0, r4
 800240a:	4699      	mov	r9, r3
 800240c:	4643      	mov	r3, r8
 800240e:	4370      	muls	r0, r6
 8002410:	435c      	muls	r4, r3
 8002412:	437e      	muls	r6, r7
 8002414:	435f      	muls	r7, r3
 8002416:	0c03      	lsrs	r3, r0, #16
 8002418:	4698      	mov	r8, r3
 800241a:	19a4      	adds	r4, r4, r6
 800241c:	4444      	add	r4, r8
 800241e:	444a      	add	r2, r9
 8002420:	9703      	str	r7, [sp, #12]
 8002422:	42a6      	cmp	r6, r4
 8002424:	d904      	bls.n	8002430 <__aeabi_dmul+0x1d4>
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	4698      	mov	r8, r3
 800242c:	4447      	add	r7, r8
 800242e:	9703      	str	r7, [sp, #12]
 8002430:	0423      	lsls	r3, r4, #16
 8002432:	9e02      	ldr	r6, [sp, #8]
 8002434:	469a      	mov	sl, r3
 8002436:	9b05      	ldr	r3, [sp, #20]
 8002438:	445e      	add	r6, fp
 800243a:	4698      	mov	r8, r3
 800243c:	42ae      	cmp	r6, r5
 800243e:	41ad      	sbcs	r5, r5
 8002440:	1876      	adds	r6, r6, r1
 8002442:	428e      	cmp	r6, r1
 8002444:	4189      	sbcs	r1, r1
 8002446:	0400      	lsls	r0, r0, #16
 8002448:	0c00      	lsrs	r0, r0, #16
 800244a:	4450      	add	r0, sl
 800244c:	4440      	add	r0, r8
 800244e:	426d      	negs	r5, r5
 8002450:	1947      	adds	r7, r0, r5
 8002452:	46b8      	mov	r8, r7
 8002454:	4693      	mov	fp, r2
 8002456:	4249      	negs	r1, r1
 8002458:	4689      	mov	r9, r1
 800245a:	44c3      	add	fp, r8
 800245c:	44d9      	add	r9, fp
 800245e:	4298      	cmp	r0, r3
 8002460:	4180      	sbcs	r0, r0
 8002462:	45a8      	cmp	r8, r5
 8002464:	41ad      	sbcs	r5, r5
 8002466:	4593      	cmp	fp, r2
 8002468:	4192      	sbcs	r2, r2
 800246a:	4589      	cmp	r9, r1
 800246c:	4189      	sbcs	r1, r1
 800246e:	426d      	negs	r5, r5
 8002470:	4240      	negs	r0, r0
 8002472:	4328      	orrs	r0, r5
 8002474:	0c24      	lsrs	r4, r4, #16
 8002476:	4252      	negs	r2, r2
 8002478:	4249      	negs	r1, r1
 800247a:	430a      	orrs	r2, r1
 800247c:	9b03      	ldr	r3, [sp, #12]
 800247e:	1900      	adds	r0, r0, r4
 8002480:	1880      	adds	r0, r0, r2
 8002482:	18c7      	adds	r7, r0, r3
 8002484:	464b      	mov	r3, r9
 8002486:	0ddc      	lsrs	r4, r3, #23
 8002488:	9b04      	ldr	r3, [sp, #16]
 800248a:	0275      	lsls	r5, r6, #9
 800248c:	431d      	orrs	r5, r3
 800248e:	1e6a      	subs	r2, r5, #1
 8002490:	4195      	sbcs	r5, r2
 8002492:	464b      	mov	r3, r9
 8002494:	0df6      	lsrs	r6, r6, #23
 8002496:	027f      	lsls	r7, r7, #9
 8002498:	4335      	orrs	r5, r6
 800249a:	025a      	lsls	r2, r3, #9
 800249c:	433c      	orrs	r4, r7
 800249e:	4315      	orrs	r5, r2
 80024a0:	01fb      	lsls	r3, r7, #7
 80024a2:	d400      	bmi.n	80024a6 <__aeabi_dmul+0x24a>
 80024a4:	e11c      	b.n	80026e0 <__aeabi_dmul+0x484>
 80024a6:	2101      	movs	r1, #1
 80024a8:	086a      	lsrs	r2, r5, #1
 80024aa:	400d      	ands	r5, r1
 80024ac:	4315      	orrs	r5, r2
 80024ae:	07e2      	lsls	r2, r4, #31
 80024b0:	4315      	orrs	r5, r2
 80024b2:	0864      	lsrs	r4, r4, #1
 80024b4:	494f      	ldr	r1, [pc, #316]	; (80025f4 <__aeabi_dmul+0x398>)
 80024b6:	4461      	add	r1, ip
 80024b8:	2900      	cmp	r1, #0
 80024ba:	dc00      	bgt.n	80024be <__aeabi_dmul+0x262>
 80024bc:	e0b0      	b.n	8002620 <__aeabi_dmul+0x3c4>
 80024be:	076b      	lsls	r3, r5, #29
 80024c0:	d009      	beq.n	80024d6 <__aeabi_dmul+0x27a>
 80024c2:	220f      	movs	r2, #15
 80024c4:	402a      	ands	r2, r5
 80024c6:	2a04      	cmp	r2, #4
 80024c8:	d005      	beq.n	80024d6 <__aeabi_dmul+0x27a>
 80024ca:	1d2a      	adds	r2, r5, #4
 80024cc:	42aa      	cmp	r2, r5
 80024ce:	41ad      	sbcs	r5, r5
 80024d0:	426d      	negs	r5, r5
 80024d2:	1964      	adds	r4, r4, r5
 80024d4:	0015      	movs	r5, r2
 80024d6:	01e3      	lsls	r3, r4, #7
 80024d8:	d504      	bpl.n	80024e4 <__aeabi_dmul+0x288>
 80024da:	2180      	movs	r1, #128	; 0x80
 80024dc:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <__aeabi_dmul+0x39c>)
 80024de:	00c9      	lsls	r1, r1, #3
 80024e0:	4014      	ands	r4, r2
 80024e2:	4461      	add	r1, ip
 80024e4:	4a45      	ldr	r2, [pc, #276]	; (80025fc <__aeabi_dmul+0x3a0>)
 80024e6:	4291      	cmp	r1, r2
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dmul+0x290>
 80024ea:	e726      	b.n	800233a <__aeabi_dmul+0xde>
 80024ec:	0762      	lsls	r2, r4, #29
 80024ee:	08ed      	lsrs	r5, r5, #3
 80024f0:	0264      	lsls	r4, r4, #9
 80024f2:	0549      	lsls	r1, r1, #21
 80024f4:	4315      	orrs	r5, r2
 80024f6:	0b24      	lsrs	r4, r4, #12
 80024f8:	0d4a      	lsrs	r2, r1, #21
 80024fa:	e710      	b.n	800231e <__aeabi_dmul+0xc2>
 80024fc:	4652      	mov	r2, sl
 80024fe:	4332      	orrs	r2, r6
 8002500:	d100      	bne.n	8002504 <__aeabi_dmul+0x2a8>
 8002502:	e07f      	b.n	8002604 <__aeabi_dmul+0x3a8>
 8002504:	2e00      	cmp	r6, #0
 8002506:	d100      	bne.n	800250a <__aeabi_dmul+0x2ae>
 8002508:	e0dc      	b.n	80026c4 <__aeabi_dmul+0x468>
 800250a:	0030      	movs	r0, r6
 800250c:	f000 fe1e 	bl	800314c <__clzsi2>
 8002510:	0002      	movs	r2, r0
 8002512:	3a0b      	subs	r2, #11
 8002514:	231d      	movs	r3, #29
 8002516:	0001      	movs	r1, r0
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	4652      	mov	r2, sl
 800251c:	3908      	subs	r1, #8
 800251e:	40da      	lsrs	r2, r3
 8002520:	408e      	lsls	r6, r1
 8002522:	4316      	orrs	r6, r2
 8002524:	4652      	mov	r2, sl
 8002526:	408a      	lsls	r2, r1
 8002528:	9b00      	ldr	r3, [sp, #0]
 800252a:	4935      	ldr	r1, [pc, #212]	; (8002600 <__aeabi_dmul+0x3a4>)
 800252c:	1a18      	subs	r0, r3, r0
 800252e:	0003      	movs	r3, r0
 8002530:	468c      	mov	ip, r1
 8002532:	4463      	add	r3, ip
 8002534:	2000      	movs	r0, #0
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	e6d3      	b.n	80022e2 <__aeabi_dmul+0x86>
 800253a:	0025      	movs	r5, r4
 800253c:	4305      	orrs	r5, r0
 800253e:	d04a      	beq.n	80025d6 <__aeabi_dmul+0x37a>
 8002540:	2c00      	cmp	r4, #0
 8002542:	d100      	bne.n	8002546 <__aeabi_dmul+0x2ea>
 8002544:	e0b0      	b.n	80026a8 <__aeabi_dmul+0x44c>
 8002546:	0020      	movs	r0, r4
 8002548:	f000 fe00 	bl	800314c <__clzsi2>
 800254c:	0001      	movs	r1, r0
 800254e:	0002      	movs	r2, r0
 8002550:	390b      	subs	r1, #11
 8002552:	231d      	movs	r3, #29
 8002554:	0010      	movs	r0, r2
 8002556:	1a5b      	subs	r3, r3, r1
 8002558:	0031      	movs	r1, r6
 800255a:	0035      	movs	r5, r6
 800255c:	3808      	subs	r0, #8
 800255e:	4084      	lsls	r4, r0
 8002560:	40d9      	lsrs	r1, r3
 8002562:	4085      	lsls	r5, r0
 8002564:	430c      	orrs	r4, r1
 8002566:	4826      	ldr	r0, [pc, #152]	; (8002600 <__aeabi_dmul+0x3a4>)
 8002568:	1a83      	subs	r3, r0, r2
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2300      	movs	r3, #0
 800256e:	4699      	mov	r9, r3
 8002570:	469b      	mov	fp, r3
 8002572:	e697      	b.n	80022a4 <__aeabi_dmul+0x48>
 8002574:	0005      	movs	r5, r0
 8002576:	4325      	orrs	r5, r4
 8002578:	d126      	bne.n	80025c8 <__aeabi_dmul+0x36c>
 800257a:	2208      	movs	r2, #8
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2302      	movs	r3, #2
 8002580:	2400      	movs	r4, #0
 8002582:	4691      	mov	r9, r2
 8002584:	469b      	mov	fp, r3
 8002586:	e68d      	b.n	80022a4 <__aeabi_dmul+0x48>
 8002588:	4652      	mov	r2, sl
 800258a:	9b00      	ldr	r3, [sp, #0]
 800258c:	4332      	orrs	r2, r6
 800258e:	d110      	bne.n	80025b2 <__aeabi_dmul+0x356>
 8002590:	4915      	ldr	r1, [pc, #84]	; (80025e8 <__aeabi_dmul+0x38c>)
 8002592:	2600      	movs	r6, #0
 8002594:	468c      	mov	ip, r1
 8002596:	4463      	add	r3, ip
 8002598:	4649      	mov	r1, r9
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2302      	movs	r3, #2
 800259e:	4319      	orrs	r1, r3
 80025a0:	4689      	mov	r9, r1
 80025a2:	2002      	movs	r0, #2
 80025a4:	e69d      	b.n	80022e2 <__aeabi_dmul+0x86>
 80025a6:	465b      	mov	r3, fp
 80025a8:	9701      	str	r7, [sp, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d000      	beq.n	80025b0 <__aeabi_dmul+0x354>
 80025ae:	e6ad      	b.n	800230c <__aeabi_dmul+0xb0>
 80025b0:	e6c3      	b.n	800233a <__aeabi_dmul+0xde>
 80025b2:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <__aeabi_dmul+0x38c>)
 80025b4:	2003      	movs	r0, #3
 80025b6:	4694      	mov	ip, r2
 80025b8:	4463      	add	r3, ip
 80025ba:	464a      	mov	r2, r9
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2303      	movs	r3, #3
 80025c0:	431a      	orrs	r2, r3
 80025c2:	4691      	mov	r9, r2
 80025c4:	4652      	mov	r2, sl
 80025c6:	e68c      	b.n	80022e2 <__aeabi_dmul+0x86>
 80025c8:	220c      	movs	r2, #12
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2303      	movs	r3, #3
 80025ce:	0005      	movs	r5, r0
 80025d0:	4691      	mov	r9, r2
 80025d2:	469b      	mov	fp, r3
 80025d4:	e666      	b.n	80022a4 <__aeabi_dmul+0x48>
 80025d6:	2304      	movs	r3, #4
 80025d8:	4699      	mov	r9, r3
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	3301      	adds	r3, #1
 80025e0:	2400      	movs	r4, #0
 80025e2:	469b      	mov	fp, r3
 80025e4:	e65e      	b.n	80022a4 <__aeabi_dmul+0x48>
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	000007ff 	.word	0x000007ff
 80025ec:	fffffc01 	.word	0xfffffc01
 80025f0:	0800d964 	.word	0x0800d964
 80025f4:	000003ff 	.word	0x000003ff
 80025f8:	feffffff 	.word	0xfeffffff
 80025fc:	000007fe 	.word	0x000007fe
 8002600:	fffffc0d 	.word	0xfffffc0d
 8002604:	4649      	mov	r1, r9
 8002606:	2301      	movs	r3, #1
 8002608:	4319      	orrs	r1, r3
 800260a:	4689      	mov	r9, r1
 800260c:	2600      	movs	r6, #0
 800260e:	2001      	movs	r0, #1
 8002610:	e667      	b.n	80022e2 <__aeabi_dmul+0x86>
 8002612:	2300      	movs	r3, #0
 8002614:	2480      	movs	r4, #128	; 0x80
 8002616:	2500      	movs	r5, #0
 8002618:	4a43      	ldr	r2, [pc, #268]	; (8002728 <__aeabi_dmul+0x4cc>)
 800261a:	9301      	str	r3, [sp, #4]
 800261c:	0324      	lsls	r4, r4, #12
 800261e:	e67e      	b.n	800231e <__aeabi_dmul+0xc2>
 8002620:	2001      	movs	r0, #1
 8002622:	1a40      	subs	r0, r0, r1
 8002624:	2838      	cmp	r0, #56	; 0x38
 8002626:	dd00      	ble.n	800262a <__aeabi_dmul+0x3ce>
 8002628:	e676      	b.n	8002318 <__aeabi_dmul+0xbc>
 800262a:	281f      	cmp	r0, #31
 800262c:	dd5b      	ble.n	80026e6 <__aeabi_dmul+0x48a>
 800262e:	221f      	movs	r2, #31
 8002630:	0023      	movs	r3, r4
 8002632:	4252      	negs	r2, r2
 8002634:	1a51      	subs	r1, r2, r1
 8002636:	40cb      	lsrs	r3, r1
 8002638:	0019      	movs	r1, r3
 800263a:	2820      	cmp	r0, #32
 800263c:	d003      	beq.n	8002646 <__aeabi_dmul+0x3ea>
 800263e:	4a3b      	ldr	r2, [pc, #236]	; (800272c <__aeabi_dmul+0x4d0>)
 8002640:	4462      	add	r2, ip
 8002642:	4094      	lsls	r4, r2
 8002644:	4325      	orrs	r5, r4
 8002646:	1e6a      	subs	r2, r5, #1
 8002648:	4195      	sbcs	r5, r2
 800264a:	002a      	movs	r2, r5
 800264c:	430a      	orrs	r2, r1
 800264e:	2107      	movs	r1, #7
 8002650:	000d      	movs	r5, r1
 8002652:	2400      	movs	r4, #0
 8002654:	4015      	ands	r5, r2
 8002656:	4211      	tst	r1, r2
 8002658:	d05b      	beq.n	8002712 <__aeabi_dmul+0x4b6>
 800265a:	210f      	movs	r1, #15
 800265c:	2400      	movs	r4, #0
 800265e:	4011      	ands	r1, r2
 8002660:	2904      	cmp	r1, #4
 8002662:	d053      	beq.n	800270c <__aeabi_dmul+0x4b0>
 8002664:	1d11      	adds	r1, r2, #4
 8002666:	4291      	cmp	r1, r2
 8002668:	4192      	sbcs	r2, r2
 800266a:	4252      	negs	r2, r2
 800266c:	18a4      	adds	r4, r4, r2
 800266e:	000a      	movs	r2, r1
 8002670:	0223      	lsls	r3, r4, #8
 8002672:	d54b      	bpl.n	800270c <__aeabi_dmul+0x4b0>
 8002674:	2201      	movs	r2, #1
 8002676:	2400      	movs	r4, #0
 8002678:	2500      	movs	r5, #0
 800267a:	e650      	b.n	800231e <__aeabi_dmul+0xc2>
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	031b      	lsls	r3, r3, #12
 8002680:	421c      	tst	r4, r3
 8002682:	d009      	beq.n	8002698 <__aeabi_dmul+0x43c>
 8002684:	421e      	tst	r6, r3
 8002686:	d107      	bne.n	8002698 <__aeabi_dmul+0x43c>
 8002688:	4333      	orrs	r3, r6
 800268a:	031c      	lsls	r4, r3, #12
 800268c:	4643      	mov	r3, r8
 800268e:	0015      	movs	r5, r2
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	4a25      	ldr	r2, [pc, #148]	; (8002728 <__aeabi_dmul+0x4cc>)
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	e642      	b.n	800231e <__aeabi_dmul+0xc2>
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	0312      	lsls	r2, r2, #12
 800269c:	4314      	orrs	r4, r2
 800269e:	0324      	lsls	r4, r4, #12
 80026a0:	4a21      	ldr	r2, [pc, #132]	; (8002728 <__aeabi_dmul+0x4cc>)
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	9701      	str	r7, [sp, #4]
 80026a6:	e63a      	b.n	800231e <__aeabi_dmul+0xc2>
 80026a8:	f000 fd50 	bl	800314c <__clzsi2>
 80026ac:	0001      	movs	r1, r0
 80026ae:	0002      	movs	r2, r0
 80026b0:	3115      	adds	r1, #21
 80026b2:	3220      	adds	r2, #32
 80026b4:	291c      	cmp	r1, #28
 80026b6:	dc00      	bgt.n	80026ba <__aeabi_dmul+0x45e>
 80026b8:	e74b      	b.n	8002552 <__aeabi_dmul+0x2f6>
 80026ba:	0034      	movs	r4, r6
 80026bc:	3808      	subs	r0, #8
 80026be:	2500      	movs	r5, #0
 80026c0:	4084      	lsls	r4, r0
 80026c2:	e750      	b.n	8002566 <__aeabi_dmul+0x30a>
 80026c4:	f000 fd42 	bl	800314c <__clzsi2>
 80026c8:	0003      	movs	r3, r0
 80026ca:	001a      	movs	r2, r3
 80026cc:	3215      	adds	r2, #21
 80026ce:	3020      	adds	r0, #32
 80026d0:	2a1c      	cmp	r2, #28
 80026d2:	dc00      	bgt.n	80026d6 <__aeabi_dmul+0x47a>
 80026d4:	e71e      	b.n	8002514 <__aeabi_dmul+0x2b8>
 80026d6:	4656      	mov	r6, sl
 80026d8:	3b08      	subs	r3, #8
 80026da:	2200      	movs	r2, #0
 80026dc:	409e      	lsls	r6, r3
 80026de:	e723      	b.n	8002528 <__aeabi_dmul+0x2cc>
 80026e0:	9b00      	ldr	r3, [sp, #0]
 80026e2:	469c      	mov	ip, r3
 80026e4:	e6e6      	b.n	80024b4 <__aeabi_dmul+0x258>
 80026e6:	4912      	ldr	r1, [pc, #72]	; (8002730 <__aeabi_dmul+0x4d4>)
 80026e8:	0022      	movs	r2, r4
 80026ea:	4461      	add	r1, ip
 80026ec:	002e      	movs	r6, r5
 80026ee:	408d      	lsls	r5, r1
 80026f0:	408a      	lsls	r2, r1
 80026f2:	40c6      	lsrs	r6, r0
 80026f4:	1e69      	subs	r1, r5, #1
 80026f6:	418d      	sbcs	r5, r1
 80026f8:	4332      	orrs	r2, r6
 80026fa:	432a      	orrs	r2, r5
 80026fc:	40c4      	lsrs	r4, r0
 80026fe:	0753      	lsls	r3, r2, #29
 8002700:	d0b6      	beq.n	8002670 <__aeabi_dmul+0x414>
 8002702:	210f      	movs	r1, #15
 8002704:	4011      	ands	r1, r2
 8002706:	2904      	cmp	r1, #4
 8002708:	d1ac      	bne.n	8002664 <__aeabi_dmul+0x408>
 800270a:	e7b1      	b.n	8002670 <__aeabi_dmul+0x414>
 800270c:	0765      	lsls	r5, r4, #29
 800270e:	0264      	lsls	r4, r4, #9
 8002710:	0b24      	lsrs	r4, r4, #12
 8002712:	08d2      	lsrs	r2, r2, #3
 8002714:	4315      	orrs	r5, r2
 8002716:	2200      	movs	r2, #0
 8002718:	e601      	b.n	800231e <__aeabi_dmul+0xc2>
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0312      	lsls	r2, r2, #12
 800271e:	4314      	orrs	r4, r2
 8002720:	0324      	lsls	r4, r4, #12
 8002722:	4a01      	ldr	r2, [pc, #4]	; (8002728 <__aeabi_dmul+0x4cc>)
 8002724:	0b24      	lsrs	r4, r4, #12
 8002726:	e5fa      	b.n	800231e <__aeabi_dmul+0xc2>
 8002728:	000007ff 	.word	0x000007ff
 800272c:	0000043e 	.word	0x0000043e
 8002730:	0000041e 	.word	0x0000041e

08002734 <__aeabi_dsub>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	4657      	mov	r7, sl
 8002738:	464e      	mov	r6, r9
 800273a:	4645      	mov	r5, r8
 800273c:	46de      	mov	lr, fp
 800273e:	b5e0      	push	{r5, r6, r7, lr}
 8002740:	001e      	movs	r6, r3
 8002742:	0017      	movs	r7, r2
 8002744:	004a      	lsls	r2, r1, #1
 8002746:	030b      	lsls	r3, r1, #12
 8002748:	0d52      	lsrs	r2, r2, #21
 800274a:	0a5b      	lsrs	r3, r3, #9
 800274c:	4690      	mov	r8, r2
 800274e:	0f42      	lsrs	r2, r0, #29
 8002750:	431a      	orrs	r2, r3
 8002752:	0fcd      	lsrs	r5, r1, #31
 8002754:	4ccd      	ldr	r4, [pc, #820]	; (8002a8c <__aeabi_dsub+0x358>)
 8002756:	0331      	lsls	r1, r6, #12
 8002758:	00c3      	lsls	r3, r0, #3
 800275a:	4694      	mov	ip, r2
 800275c:	0070      	lsls	r0, r6, #1
 800275e:	0f7a      	lsrs	r2, r7, #29
 8002760:	0a49      	lsrs	r1, r1, #9
 8002762:	00ff      	lsls	r7, r7, #3
 8002764:	469a      	mov	sl, r3
 8002766:	46b9      	mov	r9, r7
 8002768:	0d40      	lsrs	r0, r0, #21
 800276a:	0ff6      	lsrs	r6, r6, #31
 800276c:	4311      	orrs	r1, r2
 800276e:	42a0      	cmp	r0, r4
 8002770:	d100      	bne.n	8002774 <__aeabi_dsub+0x40>
 8002772:	e0b1      	b.n	80028d8 <__aeabi_dsub+0x1a4>
 8002774:	2201      	movs	r2, #1
 8002776:	4056      	eors	r6, r2
 8002778:	46b3      	mov	fp, r6
 800277a:	42b5      	cmp	r5, r6
 800277c:	d100      	bne.n	8002780 <__aeabi_dsub+0x4c>
 800277e:	e088      	b.n	8002892 <__aeabi_dsub+0x15e>
 8002780:	4642      	mov	r2, r8
 8002782:	1a12      	subs	r2, r2, r0
 8002784:	2a00      	cmp	r2, #0
 8002786:	dc00      	bgt.n	800278a <__aeabi_dsub+0x56>
 8002788:	e0ae      	b.n	80028e8 <__aeabi_dsub+0x1b4>
 800278a:	2800      	cmp	r0, #0
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x5c>
 800278e:	e0c1      	b.n	8002914 <__aeabi_dsub+0x1e0>
 8002790:	48be      	ldr	r0, [pc, #760]	; (8002a8c <__aeabi_dsub+0x358>)
 8002792:	4580      	cmp	r8, r0
 8002794:	d100      	bne.n	8002798 <__aeabi_dsub+0x64>
 8002796:	e151      	b.n	8002a3c <__aeabi_dsub+0x308>
 8002798:	2080      	movs	r0, #128	; 0x80
 800279a:	0400      	lsls	r0, r0, #16
 800279c:	4301      	orrs	r1, r0
 800279e:	2a38      	cmp	r2, #56	; 0x38
 80027a0:	dd00      	ble.n	80027a4 <__aeabi_dsub+0x70>
 80027a2:	e17b      	b.n	8002a9c <__aeabi_dsub+0x368>
 80027a4:	2a1f      	cmp	r2, #31
 80027a6:	dd00      	ble.n	80027aa <__aeabi_dsub+0x76>
 80027a8:	e1ee      	b.n	8002b88 <__aeabi_dsub+0x454>
 80027aa:	2020      	movs	r0, #32
 80027ac:	003e      	movs	r6, r7
 80027ae:	1a80      	subs	r0, r0, r2
 80027b0:	000c      	movs	r4, r1
 80027b2:	40d6      	lsrs	r6, r2
 80027b4:	40d1      	lsrs	r1, r2
 80027b6:	4087      	lsls	r7, r0
 80027b8:	4662      	mov	r2, ip
 80027ba:	4084      	lsls	r4, r0
 80027bc:	1a52      	subs	r2, r2, r1
 80027be:	1e78      	subs	r0, r7, #1
 80027c0:	4187      	sbcs	r7, r0
 80027c2:	4694      	mov	ip, r2
 80027c4:	4334      	orrs	r4, r6
 80027c6:	4327      	orrs	r7, r4
 80027c8:	1bdc      	subs	r4, r3, r7
 80027ca:	42a3      	cmp	r3, r4
 80027cc:	419b      	sbcs	r3, r3
 80027ce:	4662      	mov	r2, ip
 80027d0:	425b      	negs	r3, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	4699      	mov	r9, r3
 80027d6:	464b      	mov	r3, r9
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	d400      	bmi.n	80027de <__aeabi_dsub+0xaa>
 80027dc:	e118      	b.n	8002a10 <__aeabi_dsub+0x2dc>
 80027de:	464b      	mov	r3, r9
 80027e0:	0258      	lsls	r0, r3, #9
 80027e2:	0a43      	lsrs	r3, r0, #9
 80027e4:	4699      	mov	r9, r3
 80027e6:	464b      	mov	r3, r9
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d100      	bne.n	80027ee <__aeabi_dsub+0xba>
 80027ec:	e137      	b.n	8002a5e <__aeabi_dsub+0x32a>
 80027ee:	4648      	mov	r0, r9
 80027f0:	f000 fcac 	bl	800314c <__clzsi2>
 80027f4:	0001      	movs	r1, r0
 80027f6:	3908      	subs	r1, #8
 80027f8:	2320      	movs	r3, #32
 80027fa:	0022      	movs	r2, r4
 80027fc:	4648      	mov	r0, r9
 80027fe:	1a5b      	subs	r3, r3, r1
 8002800:	40da      	lsrs	r2, r3
 8002802:	4088      	lsls	r0, r1
 8002804:	408c      	lsls	r4, r1
 8002806:	4643      	mov	r3, r8
 8002808:	4310      	orrs	r0, r2
 800280a:	4588      	cmp	r8, r1
 800280c:	dd00      	ble.n	8002810 <__aeabi_dsub+0xdc>
 800280e:	e136      	b.n	8002a7e <__aeabi_dsub+0x34a>
 8002810:	1ac9      	subs	r1, r1, r3
 8002812:	1c4b      	adds	r3, r1, #1
 8002814:	2b1f      	cmp	r3, #31
 8002816:	dd00      	ble.n	800281a <__aeabi_dsub+0xe6>
 8002818:	e0ea      	b.n	80029f0 <__aeabi_dsub+0x2bc>
 800281a:	2220      	movs	r2, #32
 800281c:	0026      	movs	r6, r4
 800281e:	1ad2      	subs	r2, r2, r3
 8002820:	0001      	movs	r1, r0
 8002822:	4094      	lsls	r4, r2
 8002824:	40de      	lsrs	r6, r3
 8002826:	40d8      	lsrs	r0, r3
 8002828:	2300      	movs	r3, #0
 800282a:	4091      	lsls	r1, r2
 800282c:	1e62      	subs	r2, r4, #1
 800282e:	4194      	sbcs	r4, r2
 8002830:	4681      	mov	r9, r0
 8002832:	4698      	mov	r8, r3
 8002834:	4331      	orrs	r1, r6
 8002836:	430c      	orrs	r4, r1
 8002838:	0763      	lsls	r3, r4, #29
 800283a:	d009      	beq.n	8002850 <__aeabi_dsub+0x11c>
 800283c:	230f      	movs	r3, #15
 800283e:	4023      	ands	r3, r4
 8002840:	2b04      	cmp	r3, #4
 8002842:	d005      	beq.n	8002850 <__aeabi_dsub+0x11c>
 8002844:	1d23      	adds	r3, r4, #4
 8002846:	42a3      	cmp	r3, r4
 8002848:	41a4      	sbcs	r4, r4
 800284a:	4264      	negs	r4, r4
 800284c:	44a1      	add	r9, r4
 800284e:	001c      	movs	r4, r3
 8002850:	464b      	mov	r3, r9
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	d400      	bmi.n	8002858 <__aeabi_dsub+0x124>
 8002856:	e0de      	b.n	8002a16 <__aeabi_dsub+0x2e2>
 8002858:	4641      	mov	r1, r8
 800285a:	4b8c      	ldr	r3, [pc, #560]	; (8002a8c <__aeabi_dsub+0x358>)
 800285c:	3101      	adds	r1, #1
 800285e:	4299      	cmp	r1, r3
 8002860:	d100      	bne.n	8002864 <__aeabi_dsub+0x130>
 8002862:	e0e7      	b.n	8002a34 <__aeabi_dsub+0x300>
 8002864:	464b      	mov	r3, r9
 8002866:	488a      	ldr	r0, [pc, #552]	; (8002a90 <__aeabi_dsub+0x35c>)
 8002868:	08e4      	lsrs	r4, r4, #3
 800286a:	4003      	ands	r3, r0
 800286c:	0018      	movs	r0, r3
 800286e:	0549      	lsls	r1, r1, #21
 8002870:	075b      	lsls	r3, r3, #29
 8002872:	0240      	lsls	r0, r0, #9
 8002874:	4323      	orrs	r3, r4
 8002876:	0d4a      	lsrs	r2, r1, #21
 8002878:	0b04      	lsrs	r4, r0, #12
 800287a:	0512      	lsls	r2, r2, #20
 800287c:	07ed      	lsls	r5, r5, #31
 800287e:	4322      	orrs	r2, r4
 8002880:	432a      	orrs	r2, r5
 8002882:	0018      	movs	r0, r3
 8002884:	0011      	movs	r1, r2
 8002886:	bcf0      	pop	{r4, r5, r6, r7}
 8002888:	46bb      	mov	fp, r7
 800288a:	46b2      	mov	sl, r6
 800288c:	46a9      	mov	r9, r5
 800288e:	46a0      	mov	r8, r4
 8002890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002892:	4642      	mov	r2, r8
 8002894:	1a12      	subs	r2, r2, r0
 8002896:	2a00      	cmp	r2, #0
 8002898:	dd52      	ble.n	8002940 <__aeabi_dsub+0x20c>
 800289a:	2800      	cmp	r0, #0
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x16c>
 800289e:	e09c      	b.n	80029da <__aeabi_dsub+0x2a6>
 80028a0:	45a0      	cmp	r8, r4
 80028a2:	d100      	bne.n	80028a6 <__aeabi_dsub+0x172>
 80028a4:	e0ca      	b.n	8002a3c <__aeabi_dsub+0x308>
 80028a6:	2080      	movs	r0, #128	; 0x80
 80028a8:	0400      	lsls	r0, r0, #16
 80028aa:	4301      	orrs	r1, r0
 80028ac:	2a38      	cmp	r2, #56	; 0x38
 80028ae:	dd00      	ble.n	80028b2 <__aeabi_dsub+0x17e>
 80028b0:	e149      	b.n	8002b46 <__aeabi_dsub+0x412>
 80028b2:	2a1f      	cmp	r2, #31
 80028b4:	dc00      	bgt.n	80028b8 <__aeabi_dsub+0x184>
 80028b6:	e197      	b.n	8002be8 <__aeabi_dsub+0x4b4>
 80028b8:	0010      	movs	r0, r2
 80028ba:	000e      	movs	r6, r1
 80028bc:	3820      	subs	r0, #32
 80028be:	40c6      	lsrs	r6, r0
 80028c0:	2a20      	cmp	r2, #32
 80028c2:	d004      	beq.n	80028ce <__aeabi_dsub+0x19a>
 80028c4:	2040      	movs	r0, #64	; 0x40
 80028c6:	1a82      	subs	r2, r0, r2
 80028c8:	4091      	lsls	r1, r2
 80028ca:	430f      	orrs	r7, r1
 80028cc:	46b9      	mov	r9, r7
 80028ce:	464c      	mov	r4, r9
 80028d0:	1e62      	subs	r2, r4, #1
 80028d2:	4194      	sbcs	r4, r2
 80028d4:	4334      	orrs	r4, r6
 80028d6:	e13a      	b.n	8002b4e <__aeabi_dsub+0x41a>
 80028d8:	000a      	movs	r2, r1
 80028da:	433a      	orrs	r2, r7
 80028dc:	d028      	beq.n	8002930 <__aeabi_dsub+0x1fc>
 80028de:	46b3      	mov	fp, r6
 80028e0:	42b5      	cmp	r5, r6
 80028e2:	d02b      	beq.n	800293c <__aeabi_dsub+0x208>
 80028e4:	4a6b      	ldr	r2, [pc, #428]	; (8002a94 <__aeabi_dsub+0x360>)
 80028e6:	4442      	add	r2, r8
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d05d      	beq.n	80029a8 <__aeabi_dsub+0x274>
 80028ec:	4642      	mov	r2, r8
 80028ee:	4644      	mov	r4, r8
 80028f0:	1a82      	subs	r2, r0, r2
 80028f2:	2c00      	cmp	r4, #0
 80028f4:	d000      	beq.n	80028f8 <__aeabi_dsub+0x1c4>
 80028f6:	e0f5      	b.n	8002ae4 <__aeabi_dsub+0x3b0>
 80028f8:	4665      	mov	r5, ip
 80028fa:	431d      	orrs	r5, r3
 80028fc:	d100      	bne.n	8002900 <__aeabi_dsub+0x1cc>
 80028fe:	e19c      	b.n	8002c3a <__aeabi_dsub+0x506>
 8002900:	1e55      	subs	r5, r2, #1
 8002902:	2a01      	cmp	r2, #1
 8002904:	d100      	bne.n	8002908 <__aeabi_dsub+0x1d4>
 8002906:	e1fb      	b.n	8002d00 <__aeabi_dsub+0x5cc>
 8002908:	4c60      	ldr	r4, [pc, #384]	; (8002a8c <__aeabi_dsub+0x358>)
 800290a:	42a2      	cmp	r2, r4
 800290c:	d100      	bne.n	8002910 <__aeabi_dsub+0x1dc>
 800290e:	e1bd      	b.n	8002c8c <__aeabi_dsub+0x558>
 8002910:	002a      	movs	r2, r5
 8002912:	e0f0      	b.n	8002af6 <__aeabi_dsub+0x3c2>
 8002914:	0008      	movs	r0, r1
 8002916:	4338      	orrs	r0, r7
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x1e8>
 800291a:	e0c3      	b.n	8002aa4 <__aeabi_dsub+0x370>
 800291c:	1e50      	subs	r0, r2, #1
 800291e:	2a01      	cmp	r2, #1
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x1f0>
 8002922:	e1a8      	b.n	8002c76 <__aeabi_dsub+0x542>
 8002924:	4c59      	ldr	r4, [pc, #356]	; (8002a8c <__aeabi_dsub+0x358>)
 8002926:	42a2      	cmp	r2, r4
 8002928:	d100      	bne.n	800292c <__aeabi_dsub+0x1f8>
 800292a:	e087      	b.n	8002a3c <__aeabi_dsub+0x308>
 800292c:	0002      	movs	r2, r0
 800292e:	e736      	b.n	800279e <__aeabi_dsub+0x6a>
 8002930:	2201      	movs	r2, #1
 8002932:	4056      	eors	r6, r2
 8002934:	46b3      	mov	fp, r6
 8002936:	42b5      	cmp	r5, r6
 8002938:	d000      	beq.n	800293c <__aeabi_dsub+0x208>
 800293a:	e721      	b.n	8002780 <__aeabi_dsub+0x4c>
 800293c:	4a55      	ldr	r2, [pc, #340]	; (8002a94 <__aeabi_dsub+0x360>)
 800293e:	4442      	add	r2, r8
 8002940:	2a00      	cmp	r2, #0
 8002942:	d100      	bne.n	8002946 <__aeabi_dsub+0x212>
 8002944:	e0b5      	b.n	8002ab2 <__aeabi_dsub+0x37e>
 8002946:	4642      	mov	r2, r8
 8002948:	4644      	mov	r4, r8
 800294a:	1a82      	subs	r2, r0, r2
 800294c:	2c00      	cmp	r4, #0
 800294e:	d100      	bne.n	8002952 <__aeabi_dsub+0x21e>
 8002950:	e138      	b.n	8002bc4 <__aeabi_dsub+0x490>
 8002952:	4e4e      	ldr	r6, [pc, #312]	; (8002a8c <__aeabi_dsub+0x358>)
 8002954:	42b0      	cmp	r0, r6
 8002956:	d100      	bne.n	800295a <__aeabi_dsub+0x226>
 8002958:	e1de      	b.n	8002d18 <__aeabi_dsub+0x5e4>
 800295a:	2680      	movs	r6, #128	; 0x80
 800295c:	4664      	mov	r4, ip
 800295e:	0436      	lsls	r6, r6, #16
 8002960:	4334      	orrs	r4, r6
 8002962:	46a4      	mov	ip, r4
 8002964:	2a38      	cmp	r2, #56	; 0x38
 8002966:	dd00      	ble.n	800296a <__aeabi_dsub+0x236>
 8002968:	e196      	b.n	8002c98 <__aeabi_dsub+0x564>
 800296a:	2a1f      	cmp	r2, #31
 800296c:	dd00      	ble.n	8002970 <__aeabi_dsub+0x23c>
 800296e:	e224      	b.n	8002dba <__aeabi_dsub+0x686>
 8002970:	2620      	movs	r6, #32
 8002972:	1ab4      	subs	r4, r6, r2
 8002974:	46a2      	mov	sl, r4
 8002976:	4664      	mov	r4, ip
 8002978:	4656      	mov	r6, sl
 800297a:	40b4      	lsls	r4, r6
 800297c:	46a1      	mov	r9, r4
 800297e:	001c      	movs	r4, r3
 8002980:	464e      	mov	r6, r9
 8002982:	40d4      	lsrs	r4, r2
 8002984:	4326      	orrs	r6, r4
 8002986:	0034      	movs	r4, r6
 8002988:	4656      	mov	r6, sl
 800298a:	40b3      	lsls	r3, r6
 800298c:	1e5e      	subs	r6, r3, #1
 800298e:	41b3      	sbcs	r3, r6
 8002990:	431c      	orrs	r4, r3
 8002992:	4663      	mov	r3, ip
 8002994:	40d3      	lsrs	r3, r2
 8002996:	18c9      	adds	r1, r1, r3
 8002998:	19e4      	adds	r4, r4, r7
 800299a:	42bc      	cmp	r4, r7
 800299c:	41bf      	sbcs	r7, r7
 800299e:	427f      	negs	r7, r7
 80029a0:	46b9      	mov	r9, r7
 80029a2:	4680      	mov	r8, r0
 80029a4:	4489      	add	r9, r1
 80029a6:	e0d8      	b.n	8002b5a <__aeabi_dsub+0x426>
 80029a8:	4640      	mov	r0, r8
 80029aa:	4c3b      	ldr	r4, [pc, #236]	; (8002a98 <__aeabi_dsub+0x364>)
 80029ac:	3001      	adds	r0, #1
 80029ae:	4220      	tst	r0, r4
 80029b0:	d000      	beq.n	80029b4 <__aeabi_dsub+0x280>
 80029b2:	e0b4      	b.n	8002b1e <__aeabi_dsub+0x3ea>
 80029b4:	4640      	mov	r0, r8
 80029b6:	2800      	cmp	r0, #0
 80029b8:	d000      	beq.n	80029bc <__aeabi_dsub+0x288>
 80029ba:	e144      	b.n	8002c46 <__aeabi_dsub+0x512>
 80029bc:	4660      	mov	r0, ip
 80029be:	4318      	orrs	r0, r3
 80029c0:	d100      	bne.n	80029c4 <__aeabi_dsub+0x290>
 80029c2:	e190      	b.n	8002ce6 <__aeabi_dsub+0x5b2>
 80029c4:	0008      	movs	r0, r1
 80029c6:	4338      	orrs	r0, r7
 80029c8:	d000      	beq.n	80029cc <__aeabi_dsub+0x298>
 80029ca:	e1aa      	b.n	8002d22 <__aeabi_dsub+0x5ee>
 80029cc:	4661      	mov	r1, ip
 80029ce:	08db      	lsrs	r3, r3, #3
 80029d0:	0749      	lsls	r1, r1, #29
 80029d2:	430b      	orrs	r3, r1
 80029d4:	4661      	mov	r1, ip
 80029d6:	08cc      	lsrs	r4, r1, #3
 80029d8:	e027      	b.n	8002a2a <__aeabi_dsub+0x2f6>
 80029da:	0008      	movs	r0, r1
 80029dc:	4338      	orrs	r0, r7
 80029de:	d061      	beq.n	8002aa4 <__aeabi_dsub+0x370>
 80029e0:	1e50      	subs	r0, r2, #1
 80029e2:	2a01      	cmp	r2, #1
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x2b4>
 80029e6:	e139      	b.n	8002c5c <__aeabi_dsub+0x528>
 80029e8:	42a2      	cmp	r2, r4
 80029ea:	d027      	beq.n	8002a3c <__aeabi_dsub+0x308>
 80029ec:	0002      	movs	r2, r0
 80029ee:	e75d      	b.n	80028ac <__aeabi_dsub+0x178>
 80029f0:	0002      	movs	r2, r0
 80029f2:	391f      	subs	r1, #31
 80029f4:	40ca      	lsrs	r2, r1
 80029f6:	0011      	movs	r1, r2
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d003      	beq.n	8002a04 <__aeabi_dsub+0x2d0>
 80029fc:	2240      	movs	r2, #64	; 0x40
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	4098      	lsls	r0, r3
 8002a02:	4304      	orrs	r4, r0
 8002a04:	1e63      	subs	r3, r4, #1
 8002a06:	419c      	sbcs	r4, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	4699      	mov	r9, r3
 8002a0c:	4698      	mov	r8, r3
 8002a0e:	430c      	orrs	r4, r1
 8002a10:	0763      	lsls	r3, r4, #29
 8002a12:	d000      	beq.n	8002a16 <__aeabi_dsub+0x2e2>
 8002a14:	e712      	b.n	800283c <__aeabi_dsub+0x108>
 8002a16:	464b      	mov	r3, r9
 8002a18:	464a      	mov	r2, r9
 8002a1a:	08e4      	lsrs	r4, r4, #3
 8002a1c:	075b      	lsls	r3, r3, #29
 8002a1e:	4323      	orrs	r3, r4
 8002a20:	08d4      	lsrs	r4, r2, #3
 8002a22:	4642      	mov	r2, r8
 8002a24:	4919      	ldr	r1, [pc, #100]	; (8002a8c <__aeabi_dsub+0x358>)
 8002a26:	428a      	cmp	r2, r1
 8002a28:	d00e      	beq.n	8002a48 <__aeabi_dsub+0x314>
 8002a2a:	0324      	lsls	r4, r4, #12
 8002a2c:	0552      	lsls	r2, r2, #21
 8002a2e:	0b24      	lsrs	r4, r4, #12
 8002a30:	0d52      	lsrs	r2, r2, #21
 8002a32:	e722      	b.n	800287a <__aeabi_dsub+0x146>
 8002a34:	000a      	movs	r2, r1
 8002a36:	2400      	movs	r4, #0
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e71e      	b.n	800287a <__aeabi_dsub+0x146>
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	4662      	mov	r2, ip
 8002a40:	0752      	lsls	r2, r2, #29
 8002a42:	4313      	orrs	r3, r2
 8002a44:	4662      	mov	r2, ip
 8002a46:	08d4      	lsrs	r4, r2, #3
 8002a48:	001a      	movs	r2, r3
 8002a4a:	4322      	orrs	r2, r4
 8002a4c:	d100      	bne.n	8002a50 <__aeabi_dsub+0x31c>
 8002a4e:	e1fc      	b.n	8002e4a <__aeabi_dsub+0x716>
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	0312      	lsls	r2, r2, #12
 8002a54:	4314      	orrs	r4, r2
 8002a56:	0324      	lsls	r4, r4, #12
 8002a58:	4a0c      	ldr	r2, [pc, #48]	; (8002a8c <__aeabi_dsub+0x358>)
 8002a5a:	0b24      	lsrs	r4, r4, #12
 8002a5c:	e70d      	b.n	800287a <__aeabi_dsub+0x146>
 8002a5e:	0020      	movs	r0, r4
 8002a60:	f000 fb74 	bl	800314c <__clzsi2>
 8002a64:	0001      	movs	r1, r0
 8002a66:	3118      	adds	r1, #24
 8002a68:	291f      	cmp	r1, #31
 8002a6a:	dc00      	bgt.n	8002a6e <__aeabi_dsub+0x33a>
 8002a6c:	e6c4      	b.n	80027f8 <__aeabi_dsub+0xc4>
 8002a6e:	3808      	subs	r0, #8
 8002a70:	4084      	lsls	r4, r0
 8002a72:	4643      	mov	r3, r8
 8002a74:	0020      	movs	r0, r4
 8002a76:	2400      	movs	r4, #0
 8002a78:	4588      	cmp	r8, r1
 8002a7a:	dc00      	bgt.n	8002a7e <__aeabi_dsub+0x34a>
 8002a7c:	e6c8      	b.n	8002810 <__aeabi_dsub+0xdc>
 8002a7e:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <__aeabi_dsub+0x35c>)
 8002a80:	1a5b      	subs	r3, r3, r1
 8002a82:	4010      	ands	r0, r2
 8002a84:	4698      	mov	r8, r3
 8002a86:	4681      	mov	r9, r0
 8002a88:	e6d6      	b.n	8002838 <__aeabi_dsub+0x104>
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	000007ff 	.word	0x000007ff
 8002a90:	ff7fffff 	.word	0xff7fffff
 8002a94:	fffff801 	.word	0xfffff801
 8002a98:	000007fe 	.word	0x000007fe
 8002a9c:	430f      	orrs	r7, r1
 8002a9e:	1e7a      	subs	r2, r7, #1
 8002aa0:	4197      	sbcs	r7, r2
 8002aa2:	e691      	b.n	80027c8 <__aeabi_dsub+0x94>
 8002aa4:	4661      	mov	r1, ip
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	0749      	lsls	r1, r1, #29
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	4661      	mov	r1, ip
 8002aae:	08cc      	lsrs	r4, r1, #3
 8002ab0:	e7b8      	b.n	8002a24 <__aeabi_dsub+0x2f0>
 8002ab2:	4640      	mov	r0, r8
 8002ab4:	4cd3      	ldr	r4, [pc, #844]	; (8002e04 <__aeabi_dsub+0x6d0>)
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	4220      	tst	r0, r4
 8002aba:	d000      	beq.n	8002abe <__aeabi_dsub+0x38a>
 8002abc:	e0a2      	b.n	8002c04 <__aeabi_dsub+0x4d0>
 8002abe:	4640      	mov	r0, r8
 8002ac0:	2800      	cmp	r0, #0
 8002ac2:	d000      	beq.n	8002ac6 <__aeabi_dsub+0x392>
 8002ac4:	e101      	b.n	8002cca <__aeabi_dsub+0x596>
 8002ac6:	4660      	mov	r0, ip
 8002ac8:	4318      	orrs	r0, r3
 8002aca:	d100      	bne.n	8002ace <__aeabi_dsub+0x39a>
 8002acc:	e15e      	b.n	8002d8c <__aeabi_dsub+0x658>
 8002ace:	0008      	movs	r0, r1
 8002ad0:	4338      	orrs	r0, r7
 8002ad2:	d000      	beq.n	8002ad6 <__aeabi_dsub+0x3a2>
 8002ad4:	e15f      	b.n	8002d96 <__aeabi_dsub+0x662>
 8002ad6:	4661      	mov	r1, ip
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	0749      	lsls	r1, r1, #29
 8002adc:	430b      	orrs	r3, r1
 8002ade:	4661      	mov	r1, ip
 8002ae0:	08cc      	lsrs	r4, r1, #3
 8002ae2:	e7a2      	b.n	8002a2a <__aeabi_dsub+0x2f6>
 8002ae4:	4dc8      	ldr	r5, [pc, #800]	; (8002e08 <__aeabi_dsub+0x6d4>)
 8002ae6:	42a8      	cmp	r0, r5
 8002ae8:	d100      	bne.n	8002aec <__aeabi_dsub+0x3b8>
 8002aea:	e0cf      	b.n	8002c8c <__aeabi_dsub+0x558>
 8002aec:	2580      	movs	r5, #128	; 0x80
 8002aee:	4664      	mov	r4, ip
 8002af0:	042d      	lsls	r5, r5, #16
 8002af2:	432c      	orrs	r4, r5
 8002af4:	46a4      	mov	ip, r4
 8002af6:	2a38      	cmp	r2, #56	; 0x38
 8002af8:	dc56      	bgt.n	8002ba8 <__aeabi_dsub+0x474>
 8002afa:	2a1f      	cmp	r2, #31
 8002afc:	dd00      	ble.n	8002b00 <__aeabi_dsub+0x3cc>
 8002afe:	e0d1      	b.n	8002ca4 <__aeabi_dsub+0x570>
 8002b00:	2520      	movs	r5, #32
 8002b02:	001e      	movs	r6, r3
 8002b04:	1aad      	subs	r5, r5, r2
 8002b06:	4664      	mov	r4, ip
 8002b08:	40ab      	lsls	r3, r5
 8002b0a:	40ac      	lsls	r4, r5
 8002b0c:	40d6      	lsrs	r6, r2
 8002b0e:	1e5d      	subs	r5, r3, #1
 8002b10:	41ab      	sbcs	r3, r5
 8002b12:	4334      	orrs	r4, r6
 8002b14:	4323      	orrs	r3, r4
 8002b16:	4664      	mov	r4, ip
 8002b18:	40d4      	lsrs	r4, r2
 8002b1a:	1b09      	subs	r1, r1, r4
 8002b1c:	e049      	b.n	8002bb2 <__aeabi_dsub+0x47e>
 8002b1e:	4660      	mov	r0, ip
 8002b20:	1bdc      	subs	r4, r3, r7
 8002b22:	1a46      	subs	r6, r0, r1
 8002b24:	42a3      	cmp	r3, r4
 8002b26:	4180      	sbcs	r0, r0
 8002b28:	4240      	negs	r0, r0
 8002b2a:	4681      	mov	r9, r0
 8002b2c:	0030      	movs	r0, r6
 8002b2e:	464e      	mov	r6, r9
 8002b30:	1b80      	subs	r0, r0, r6
 8002b32:	4681      	mov	r9, r0
 8002b34:	0200      	lsls	r0, r0, #8
 8002b36:	d476      	bmi.n	8002c26 <__aeabi_dsub+0x4f2>
 8002b38:	464b      	mov	r3, r9
 8002b3a:	4323      	orrs	r3, r4
 8002b3c:	d000      	beq.n	8002b40 <__aeabi_dsub+0x40c>
 8002b3e:	e652      	b.n	80027e6 <__aeabi_dsub+0xb2>
 8002b40:	2400      	movs	r4, #0
 8002b42:	2500      	movs	r5, #0
 8002b44:	e771      	b.n	8002a2a <__aeabi_dsub+0x2f6>
 8002b46:	4339      	orrs	r1, r7
 8002b48:	000c      	movs	r4, r1
 8002b4a:	1e62      	subs	r2, r4, #1
 8002b4c:	4194      	sbcs	r4, r2
 8002b4e:	18e4      	adds	r4, r4, r3
 8002b50:	429c      	cmp	r4, r3
 8002b52:	419b      	sbcs	r3, r3
 8002b54:	425b      	negs	r3, r3
 8002b56:	4463      	add	r3, ip
 8002b58:	4699      	mov	r9, r3
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	d400      	bmi.n	8002b62 <__aeabi_dsub+0x42e>
 8002b60:	e756      	b.n	8002a10 <__aeabi_dsub+0x2dc>
 8002b62:	2301      	movs	r3, #1
 8002b64:	469c      	mov	ip, r3
 8002b66:	4ba8      	ldr	r3, [pc, #672]	; (8002e08 <__aeabi_dsub+0x6d4>)
 8002b68:	44e0      	add	r8, ip
 8002b6a:	4598      	cmp	r8, r3
 8002b6c:	d038      	beq.n	8002be0 <__aeabi_dsub+0x4ac>
 8002b6e:	464b      	mov	r3, r9
 8002b70:	48a6      	ldr	r0, [pc, #664]	; (8002e0c <__aeabi_dsub+0x6d8>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	4003      	ands	r3, r0
 8002b76:	0018      	movs	r0, r3
 8002b78:	0863      	lsrs	r3, r4, #1
 8002b7a:	4014      	ands	r4, r2
 8002b7c:	431c      	orrs	r4, r3
 8002b7e:	07c3      	lsls	r3, r0, #31
 8002b80:	431c      	orrs	r4, r3
 8002b82:	0843      	lsrs	r3, r0, #1
 8002b84:	4699      	mov	r9, r3
 8002b86:	e657      	b.n	8002838 <__aeabi_dsub+0x104>
 8002b88:	0010      	movs	r0, r2
 8002b8a:	000e      	movs	r6, r1
 8002b8c:	3820      	subs	r0, #32
 8002b8e:	40c6      	lsrs	r6, r0
 8002b90:	2a20      	cmp	r2, #32
 8002b92:	d004      	beq.n	8002b9e <__aeabi_dsub+0x46a>
 8002b94:	2040      	movs	r0, #64	; 0x40
 8002b96:	1a82      	subs	r2, r0, r2
 8002b98:	4091      	lsls	r1, r2
 8002b9a:	430f      	orrs	r7, r1
 8002b9c:	46b9      	mov	r9, r7
 8002b9e:	464f      	mov	r7, r9
 8002ba0:	1e7a      	subs	r2, r7, #1
 8002ba2:	4197      	sbcs	r7, r2
 8002ba4:	4337      	orrs	r7, r6
 8002ba6:	e60f      	b.n	80027c8 <__aeabi_dsub+0x94>
 8002ba8:	4662      	mov	r2, ip
 8002baa:	431a      	orrs	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	4193      	sbcs	r3, r2
 8002bb2:	1afc      	subs	r4, r7, r3
 8002bb4:	42a7      	cmp	r7, r4
 8002bb6:	41bf      	sbcs	r7, r7
 8002bb8:	427f      	negs	r7, r7
 8002bba:	1bcb      	subs	r3, r1, r7
 8002bbc:	4699      	mov	r9, r3
 8002bbe:	465d      	mov	r5, fp
 8002bc0:	4680      	mov	r8, r0
 8002bc2:	e608      	b.n	80027d6 <__aeabi_dsub+0xa2>
 8002bc4:	4666      	mov	r6, ip
 8002bc6:	431e      	orrs	r6, r3
 8002bc8:	d100      	bne.n	8002bcc <__aeabi_dsub+0x498>
 8002bca:	e0be      	b.n	8002d4a <__aeabi_dsub+0x616>
 8002bcc:	1e56      	subs	r6, r2, #1
 8002bce:	2a01      	cmp	r2, #1
 8002bd0:	d100      	bne.n	8002bd4 <__aeabi_dsub+0x4a0>
 8002bd2:	e109      	b.n	8002de8 <__aeabi_dsub+0x6b4>
 8002bd4:	4c8c      	ldr	r4, [pc, #560]	; (8002e08 <__aeabi_dsub+0x6d4>)
 8002bd6:	42a2      	cmp	r2, r4
 8002bd8:	d100      	bne.n	8002bdc <__aeabi_dsub+0x4a8>
 8002bda:	e119      	b.n	8002e10 <__aeabi_dsub+0x6dc>
 8002bdc:	0032      	movs	r2, r6
 8002bde:	e6c1      	b.n	8002964 <__aeabi_dsub+0x230>
 8002be0:	4642      	mov	r2, r8
 8002be2:	2400      	movs	r4, #0
 8002be4:	2300      	movs	r3, #0
 8002be6:	e648      	b.n	800287a <__aeabi_dsub+0x146>
 8002be8:	2020      	movs	r0, #32
 8002bea:	000c      	movs	r4, r1
 8002bec:	1a80      	subs	r0, r0, r2
 8002bee:	003e      	movs	r6, r7
 8002bf0:	4087      	lsls	r7, r0
 8002bf2:	4084      	lsls	r4, r0
 8002bf4:	40d6      	lsrs	r6, r2
 8002bf6:	1e78      	subs	r0, r7, #1
 8002bf8:	4187      	sbcs	r7, r0
 8002bfa:	40d1      	lsrs	r1, r2
 8002bfc:	4334      	orrs	r4, r6
 8002bfe:	433c      	orrs	r4, r7
 8002c00:	448c      	add	ip, r1
 8002c02:	e7a4      	b.n	8002b4e <__aeabi_dsub+0x41a>
 8002c04:	4a80      	ldr	r2, [pc, #512]	; (8002e08 <__aeabi_dsub+0x6d4>)
 8002c06:	4290      	cmp	r0, r2
 8002c08:	d100      	bne.n	8002c0c <__aeabi_dsub+0x4d8>
 8002c0a:	e0e9      	b.n	8002de0 <__aeabi_dsub+0x6ac>
 8002c0c:	19df      	adds	r7, r3, r7
 8002c0e:	429f      	cmp	r7, r3
 8002c10:	419b      	sbcs	r3, r3
 8002c12:	4461      	add	r1, ip
 8002c14:	425b      	negs	r3, r3
 8002c16:	18c9      	adds	r1, r1, r3
 8002c18:	07cc      	lsls	r4, r1, #31
 8002c1a:	087f      	lsrs	r7, r7, #1
 8002c1c:	084b      	lsrs	r3, r1, #1
 8002c1e:	4699      	mov	r9, r3
 8002c20:	4680      	mov	r8, r0
 8002c22:	433c      	orrs	r4, r7
 8002c24:	e6f4      	b.n	8002a10 <__aeabi_dsub+0x2dc>
 8002c26:	1afc      	subs	r4, r7, r3
 8002c28:	42a7      	cmp	r7, r4
 8002c2a:	41bf      	sbcs	r7, r7
 8002c2c:	4663      	mov	r3, ip
 8002c2e:	427f      	negs	r7, r7
 8002c30:	1ac9      	subs	r1, r1, r3
 8002c32:	1bcb      	subs	r3, r1, r7
 8002c34:	4699      	mov	r9, r3
 8002c36:	465d      	mov	r5, fp
 8002c38:	e5d5      	b.n	80027e6 <__aeabi_dsub+0xb2>
 8002c3a:	08ff      	lsrs	r7, r7, #3
 8002c3c:	074b      	lsls	r3, r1, #29
 8002c3e:	465d      	mov	r5, fp
 8002c40:	433b      	orrs	r3, r7
 8002c42:	08cc      	lsrs	r4, r1, #3
 8002c44:	e6ee      	b.n	8002a24 <__aeabi_dsub+0x2f0>
 8002c46:	4662      	mov	r2, ip
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	d000      	beq.n	8002c4e <__aeabi_dsub+0x51a>
 8002c4c:	e082      	b.n	8002d54 <__aeabi_dsub+0x620>
 8002c4e:	000b      	movs	r3, r1
 8002c50:	433b      	orrs	r3, r7
 8002c52:	d11b      	bne.n	8002c8c <__aeabi_dsub+0x558>
 8002c54:	2480      	movs	r4, #128	; 0x80
 8002c56:	2500      	movs	r5, #0
 8002c58:	0324      	lsls	r4, r4, #12
 8002c5a:	e6f9      	b.n	8002a50 <__aeabi_dsub+0x31c>
 8002c5c:	19dc      	adds	r4, r3, r7
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	419b      	sbcs	r3, r3
 8002c62:	4461      	add	r1, ip
 8002c64:	4689      	mov	r9, r1
 8002c66:	425b      	negs	r3, r3
 8002c68:	4499      	add	r9, r3
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	021b      	lsls	r3, r3, #8
 8002c6e:	d444      	bmi.n	8002cfa <__aeabi_dsub+0x5c6>
 8002c70:	2301      	movs	r3, #1
 8002c72:	4698      	mov	r8, r3
 8002c74:	e6cc      	b.n	8002a10 <__aeabi_dsub+0x2dc>
 8002c76:	1bdc      	subs	r4, r3, r7
 8002c78:	4662      	mov	r2, ip
 8002c7a:	42a3      	cmp	r3, r4
 8002c7c:	419b      	sbcs	r3, r3
 8002c7e:	1a51      	subs	r1, r2, r1
 8002c80:	425b      	negs	r3, r3
 8002c82:	1acb      	subs	r3, r1, r3
 8002c84:	4699      	mov	r9, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	4698      	mov	r8, r3
 8002c8a:	e5a4      	b.n	80027d6 <__aeabi_dsub+0xa2>
 8002c8c:	08ff      	lsrs	r7, r7, #3
 8002c8e:	074b      	lsls	r3, r1, #29
 8002c90:	465d      	mov	r5, fp
 8002c92:	433b      	orrs	r3, r7
 8002c94:	08cc      	lsrs	r4, r1, #3
 8002c96:	e6d7      	b.n	8002a48 <__aeabi_dsub+0x314>
 8002c98:	4662      	mov	r2, ip
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	0014      	movs	r4, r2
 8002c9e:	1e63      	subs	r3, r4, #1
 8002ca0:	419c      	sbcs	r4, r3
 8002ca2:	e679      	b.n	8002998 <__aeabi_dsub+0x264>
 8002ca4:	0015      	movs	r5, r2
 8002ca6:	4664      	mov	r4, ip
 8002ca8:	3d20      	subs	r5, #32
 8002caa:	40ec      	lsrs	r4, r5
 8002cac:	46a0      	mov	r8, r4
 8002cae:	2a20      	cmp	r2, #32
 8002cb0:	d005      	beq.n	8002cbe <__aeabi_dsub+0x58a>
 8002cb2:	2540      	movs	r5, #64	; 0x40
 8002cb4:	4664      	mov	r4, ip
 8002cb6:	1aaa      	subs	r2, r5, r2
 8002cb8:	4094      	lsls	r4, r2
 8002cba:	4323      	orrs	r3, r4
 8002cbc:	469a      	mov	sl, r3
 8002cbe:	4654      	mov	r4, sl
 8002cc0:	1e63      	subs	r3, r4, #1
 8002cc2:	419c      	sbcs	r4, r3
 8002cc4:	4643      	mov	r3, r8
 8002cc6:	4323      	orrs	r3, r4
 8002cc8:	e773      	b.n	8002bb2 <__aeabi_dsub+0x47e>
 8002cca:	4662      	mov	r2, ip
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	d023      	beq.n	8002d18 <__aeabi_dsub+0x5e4>
 8002cd0:	000a      	movs	r2, r1
 8002cd2:	433a      	orrs	r2, r7
 8002cd4:	d000      	beq.n	8002cd8 <__aeabi_dsub+0x5a4>
 8002cd6:	e0a0      	b.n	8002e1a <__aeabi_dsub+0x6e6>
 8002cd8:	4662      	mov	r2, ip
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	0752      	lsls	r2, r2, #29
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	4662      	mov	r2, ip
 8002ce2:	08d4      	lsrs	r4, r2, #3
 8002ce4:	e6b0      	b.n	8002a48 <__aeabi_dsub+0x314>
 8002ce6:	000b      	movs	r3, r1
 8002ce8:	433b      	orrs	r3, r7
 8002cea:	d100      	bne.n	8002cee <__aeabi_dsub+0x5ba>
 8002cec:	e728      	b.n	8002b40 <__aeabi_dsub+0x40c>
 8002cee:	08ff      	lsrs	r7, r7, #3
 8002cf0:	074b      	lsls	r3, r1, #29
 8002cf2:	465d      	mov	r5, fp
 8002cf4:	433b      	orrs	r3, r7
 8002cf6:	08cc      	lsrs	r4, r1, #3
 8002cf8:	e697      	b.n	8002a2a <__aeabi_dsub+0x2f6>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	4698      	mov	r8, r3
 8002cfe:	e736      	b.n	8002b6e <__aeabi_dsub+0x43a>
 8002d00:	1afc      	subs	r4, r7, r3
 8002d02:	42a7      	cmp	r7, r4
 8002d04:	41bf      	sbcs	r7, r7
 8002d06:	4663      	mov	r3, ip
 8002d08:	427f      	negs	r7, r7
 8002d0a:	1ac9      	subs	r1, r1, r3
 8002d0c:	1bcb      	subs	r3, r1, r7
 8002d0e:	4699      	mov	r9, r3
 8002d10:	2301      	movs	r3, #1
 8002d12:	465d      	mov	r5, fp
 8002d14:	4698      	mov	r8, r3
 8002d16:	e55e      	b.n	80027d6 <__aeabi_dsub+0xa2>
 8002d18:	074b      	lsls	r3, r1, #29
 8002d1a:	08ff      	lsrs	r7, r7, #3
 8002d1c:	433b      	orrs	r3, r7
 8002d1e:	08cc      	lsrs	r4, r1, #3
 8002d20:	e692      	b.n	8002a48 <__aeabi_dsub+0x314>
 8002d22:	1bdc      	subs	r4, r3, r7
 8002d24:	4660      	mov	r0, ip
 8002d26:	42a3      	cmp	r3, r4
 8002d28:	41b6      	sbcs	r6, r6
 8002d2a:	1a40      	subs	r0, r0, r1
 8002d2c:	4276      	negs	r6, r6
 8002d2e:	1b80      	subs	r0, r0, r6
 8002d30:	4681      	mov	r9, r0
 8002d32:	0200      	lsls	r0, r0, #8
 8002d34:	d560      	bpl.n	8002df8 <__aeabi_dsub+0x6c4>
 8002d36:	1afc      	subs	r4, r7, r3
 8002d38:	42a7      	cmp	r7, r4
 8002d3a:	41bf      	sbcs	r7, r7
 8002d3c:	4663      	mov	r3, ip
 8002d3e:	427f      	negs	r7, r7
 8002d40:	1ac9      	subs	r1, r1, r3
 8002d42:	1bcb      	subs	r3, r1, r7
 8002d44:	4699      	mov	r9, r3
 8002d46:	465d      	mov	r5, fp
 8002d48:	e576      	b.n	8002838 <__aeabi_dsub+0x104>
 8002d4a:	08ff      	lsrs	r7, r7, #3
 8002d4c:	074b      	lsls	r3, r1, #29
 8002d4e:	433b      	orrs	r3, r7
 8002d50:	08cc      	lsrs	r4, r1, #3
 8002d52:	e667      	b.n	8002a24 <__aeabi_dsub+0x2f0>
 8002d54:	000a      	movs	r2, r1
 8002d56:	08db      	lsrs	r3, r3, #3
 8002d58:	433a      	orrs	r2, r7
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x62a>
 8002d5c:	e66f      	b.n	8002a3e <__aeabi_dsub+0x30a>
 8002d5e:	4662      	mov	r2, ip
 8002d60:	0752      	lsls	r2, r2, #29
 8002d62:	4313      	orrs	r3, r2
 8002d64:	4662      	mov	r2, ip
 8002d66:	08d4      	lsrs	r4, r2, #3
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	0312      	lsls	r2, r2, #12
 8002d6c:	4214      	tst	r4, r2
 8002d6e:	d007      	beq.n	8002d80 <__aeabi_dsub+0x64c>
 8002d70:	08c8      	lsrs	r0, r1, #3
 8002d72:	4210      	tst	r0, r2
 8002d74:	d104      	bne.n	8002d80 <__aeabi_dsub+0x64c>
 8002d76:	465d      	mov	r5, fp
 8002d78:	0004      	movs	r4, r0
 8002d7a:	08fb      	lsrs	r3, r7, #3
 8002d7c:	0749      	lsls	r1, r1, #29
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	0f5a      	lsrs	r2, r3, #29
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	0752      	lsls	r2, r2, #29
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	e65d      	b.n	8002a48 <__aeabi_dsub+0x314>
 8002d8c:	074b      	lsls	r3, r1, #29
 8002d8e:	08ff      	lsrs	r7, r7, #3
 8002d90:	433b      	orrs	r3, r7
 8002d92:	08cc      	lsrs	r4, r1, #3
 8002d94:	e649      	b.n	8002a2a <__aeabi_dsub+0x2f6>
 8002d96:	19dc      	adds	r4, r3, r7
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	419b      	sbcs	r3, r3
 8002d9c:	4461      	add	r1, ip
 8002d9e:	4689      	mov	r9, r1
 8002da0:	425b      	negs	r3, r3
 8002da2:	4499      	add	r9, r3
 8002da4:	464b      	mov	r3, r9
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	d400      	bmi.n	8002dac <__aeabi_dsub+0x678>
 8002daa:	e631      	b.n	8002a10 <__aeabi_dsub+0x2dc>
 8002dac:	464a      	mov	r2, r9
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <__aeabi_dsub+0x6d8>)
 8002db0:	401a      	ands	r2, r3
 8002db2:	2301      	movs	r3, #1
 8002db4:	4691      	mov	r9, r2
 8002db6:	4698      	mov	r8, r3
 8002db8:	e62a      	b.n	8002a10 <__aeabi_dsub+0x2dc>
 8002dba:	0016      	movs	r6, r2
 8002dbc:	4664      	mov	r4, ip
 8002dbe:	3e20      	subs	r6, #32
 8002dc0:	40f4      	lsrs	r4, r6
 8002dc2:	46a0      	mov	r8, r4
 8002dc4:	2a20      	cmp	r2, #32
 8002dc6:	d005      	beq.n	8002dd4 <__aeabi_dsub+0x6a0>
 8002dc8:	2640      	movs	r6, #64	; 0x40
 8002dca:	4664      	mov	r4, ip
 8002dcc:	1ab2      	subs	r2, r6, r2
 8002dce:	4094      	lsls	r4, r2
 8002dd0:	4323      	orrs	r3, r4
 8002dd2:	469a      	mov	sl, r3
 8002dd4:	4654      	mov	r4, sl
 8002dd6:	1e63      	subs	r3, r4, #1
 8002dd8:	419c      	sbcs	r4, r3
 8002dda:	4643      	mov	r3, r8
 8002ddc:	431c      	orrs	r4, r3
 8002dde:	e5db      	b.n	8002998 <__aeabi_dsub+0x264>
 8002de0:	0002      	movs	r2, r0
 8002de2:	2400      	movs	r4, #0
 8002de4:	2300      	movs	r3, #0
 8002de6:	e548      	b.n	800287a <__aeabi_dsub+0x146>
 8002de8:	19dc      	adds	r4, r3, r7
 8002dea:	42bc      	cmp	r4, r7
 8002dec:	41bf      	sbcs	r7, r7
 8002dee:	4461      	add	r1, ip
 8002df0:	4689      	mov	r9, r1
 8002df2:	427f      	negs	r7, r7
 8002df4:	44b9      	add	r9, r7
 8002df6:	e738      	b.n	8002c6a <__aeabi_dsub+0x536>
 8002df8:	464b      	mov	r3, r9
 8002dfa:	4323      	orrs	r3, r4
 8002dfc:	d100      	bne.n	8002e00 <__aeabi_dsub+0x6cc>
 8002dfe:	e69f      	b.n	8002b40 <__aeabi_dsub+0x40c>
 8002e00:	e606      	b.n	8002a10 <__aeabi_dsub+0x2dc>
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	000007fe 	.word	0x000007fe
 8002e08:	000007ff 	.word	0x000007ff
 8002e0c:	ff7fffff 	.word	0xff7fffff
 8002e10:	08ff      	lsrs	r7, r7, #3
 8002e12:	074b      	lsls	r3, r1, #29
 8002e14:	433b      	orrs	r3, r7
 8002e16:	08cc      	lsrs	r4, r1, #3
 8002e18:	e616      	b.n	8002a48 <__aeabi_dsub+0x314>
 8002e1a:	4662      	mov	r2, ip
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	0752      	lsls	r2, r2, #29
 8002e20:	4313      	orrs	r3, r2
 8002e22:	4662      	mov	r2, ip
 8002e24:	08d4      	lsrs	r4, r2, #3
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	0312      	lsls	r2, r2, #12
 8002e2a:	4214      	tst	r4, r2
 8002e2c:	d007      	beq.n	8002e3e <__aeabi_dsub+0x70a>
 8002e2e:	08c8      	lsrs	r0, r1, #3
 8002e30:	4210      	tst	r0, r2
 8002e32:	d104      	bne.n	8002e3e <__aeabi_dsub+0x70a>
 8002e34:	465d      	mov	r5, fp
 8002e36:	0004      	movs	r4, r0
 8002e38:	08fb      	lsrs	r3, r7, #3
 8002e3a:	0749      	lsls	r1, r1, #29
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	0f5a      	lsrs	r2, r3, #29
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	0752      	lsls	r2, r2, #29
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	e5fe      	b.n	8002a48 <__aeabi_dsub+0x314>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	4a01      	ldr	r2, [pc, #4]	; (8002e54 <__aeabi_dsub+0x720>)
 8002e4e:	001c      	movs	r4, r3
 8002e50:	e513      	b.n	800287a <__aeabi_dsub+0x146>
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	000007ff 	.word	0x000007ff

08002e58 <__aeabi_dcmpun>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	0005      	movs	r5, r0
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <__aeabi_dcmpun+0x38>)
 8002e5e:	031c      	lsls	r4, r3, #12
 8002e60:	0016      	movs	r6, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	030a      	lsls	r2, r1, #12
 8002e66:	0049      	lsls	r1, r1, #1
 8002e68:	0b12      	lsrs	r2, r2, #12
 8002e6a:	0d49      	lsrs	r1, r1, #21
 8002e6c:	0b24      	lsrs	r4, r4, #12
 8002e6e:	0d5b      	lsrs	r3, r3, #21
 8002e70:	4281      	cmp	r1, r0
 8002e72:	d008      	beq.n	8002e86 <__aeabi_dcmpun+0x2e>
 8002e74:	4a06      	ldr	r2, [pc, #24]	; (8002e90 <__aeabi_dcmpun+0x38>)
 8002e76:	2000      	movs	r0, #0
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d103      	bne.n	8002e84 <__aeabi_dcmpun+0x2c>
 8002e7c:	0020      	movs	r0, r4
 8002e7e:	4330      	orrs	r0, r6
 8002e80:	1e43      	subs	r3, r0, #1
 8002e82:	4198      	sbcs	r0, r3
 8002e84:	bd70      	pop	{r4, r5, r6, pc}
 8002e86:	2001      	movs	r0, #1
 8002e88:	432a      	orrs	r2, r5
 8002e8a:	d1fb      	bne.n	8002e84 <__aeabi_dcmpun+0x2c>
 8002e8c:	e7f2      	b.n	8002e74 <__aeabi_dcmpun+0x1c>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	000007ff 	.word	0x000007ff

08002e94 <__aeabi_d2iz>:
 8002e94:	000a      	movs	r2, r1
 8002e96:	b530      	push	{r4, r5, lr}
 8002e98:	4c13      	ldr	r4, [pc, #76]	; (8002ee8 <__aeabi_d2iz+0x54>)
 8002e9a:	0053      	lsls	r3, r2, #1
 8002e9c:	0309      	lsls	r1, r1, #12
 8002e9e:	0005      	movs	r5, r0
 8002ea0:	0b09      	lsrs	r1, r1, #12
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	0d5b      	lsrs	r3, r3, #21
 8002ea6:	0fd2      	lsrs	r2, r2, #31
 8002ea8:	42a3      	cmp	r3, r4
 8002eaa:	dd04      	ble.n	8002eb6 <__aeabi_d2iz+0x22>
 8002eac:	480f      	ldr	r0, [pc, #60]	; (8002eec <__aeabi_d2iz+0x58>)
 8002eae:	4283      	cmp	r3, r0
 8002eb0:	dd02      	ble.n	8002eb8 <__aeabi_d2iz+0x24>
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <__aeabi_d2iz+0x5c>)
 8002eb4:	18d0      	adds	r0, r2, r3
 8002eb6:	bd30      	pop	{r4, r5, pc}
 8002eb8:	2080      	movs	r0, #128	; 0x80
 8002eba:	0340      	lsls	r0, r0, #13
 8002ebc:	4301      	orrs	r1, r0
 8002ebe:	480d      	ldr	r0, [pc, #52]	; (8002ef4 <__aeabi_d2iz+0x60>)
 8002ec0:	1ac0      	subs	r0, r0, r3
 8002ec2:	281f      	cmp	r0, #31
 8002ec4:	dd08      	ble.n	8002ed8 <__aeabi_d2iz+0x44>
 8002ec6:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <__aeabi_d2iz+0x64>)
 8002ec8:	1ac3      	subs	r3, r0, r3
 8002eca:	40d9      	lsrs	r1, r3
 8002ecc:	000b      	movs	r3, r1
 8002ece:	4258      	negs	r0, r3
 8002ed0:	2a00      	cmp	r2, #0
 8002ed2:	d1f0      	bne.n	8002eb6 <__aeabi_d2iz+0x22>
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	e7ee      	b.n	8002eb6 <__aeabi_d2iz+0x22>
 8002ed8:	4c08      	ldr	r4, [pc, #32]	; (8002efc <__aeabi_d2iz+0x68>)
 8002eda:	40c5      	lsrs	r5, r0
 8002edc:	46a4      	mov	ip, r4
 8002ede:	4463      	add	r3, ip
 8002ee0:	4099      	lsls	r1, r3
 8002ee2:	000b      	movs	r3, r1
 8002ee4:	432b      	orrs	r3, r5
 8002ee6:	e7f2      	b.n	8002ece <__aeabi_d2iz+0x3a>
 8002ee8:	000003fe 	.word	0x000003fe
 8002eec:	0000041d 	.word	0x0000041d
 8002ef0:	7fffffff 	.word	0x7fffffff
 8002ef4:	00000433 	.word	0x00000433
 8002ef8:	00000413 	.word	0x00000413
 8002efc:	fffffbed 	.word	0xfffffbed

08002f00 <__aeabi_i2d>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d016      	beq.n	8002f34 <__aeabi_i2d+0x34>
 8002f06:	17c3      	asrs	r3, r0, #31
 8002f08:	18c5      	adds	r5, r0, r3
 8002f0a:	405d      	eors	r5, r3
 8002f0c:	0fc4      	lsrs	r4, r0, #31
 8002f0e:	0028      	movs	r0, r5
 8002f10:	f000 f91c 	bl	800314c <__clzsi2>
 8002f14:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <__aeabi_i2d+0x5c>)
 8002f16:	1a12      	subs	r2, r2, r0
 8002f18:	280a      	cmp	r0, #10
 8002f1a:	dc16      	bgt.n	8002f4a <__aeabi_i2d+0x4a>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	002e      	movs	r6, r5
 8002f20:	3315      	adds	r3, #21
 8002f22:	409e      	lsls	r6, r3
 8002f24:	230b      	movs	r3, #11
 8002f26:	1a18      	subs	r0, r3, r0
 8002f28:	40c5      	lsrs	r5, r0
 8002f2a:	0552      	lsls	r2, r2, #21
 8002f2c:	032d      	lsls	r5, r5, #12
 8002f2e:	0b2d      	lsrs	r5, r5, #12
 8002f30:	0d53      	lsrs	r3, r2, #21
 8002f32:	e003      	b.n	8002f3c <__aeabi_i2d+0x3c>
 8002f34:	2400      	movs	r4, #0
 8002f36:	2300      	movs	r3, #0
 8002f38:	2500      	movs	r5, #0
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	051b      	lsls	r3, r3, #20
 8002f3e:	432b      	orrs	r3, r5
 8002f40:	07e4      	lsls	r4, r4, #31
 8002f42:	4323      	orrs	r3, r4
 8002f44:	0030      	movs	r0, r6
 8002f46:	0019      	movs	r1, r3
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	380b      	subs	r0, #11
 8002f4c:	4085      	lsls	r5, r0
 8002f4e:	0552      	lsls	r2, r2, #21
 8002f50:	032d      	lsls	r5, r5, #12
 8002f52:	2600      	movs	r6, #0
 8002f54:	0b2d      	lsrs	r5, r5, #12
 8002f56:	0d53      	lsrs	r3, r2, #21
 8002f58:	e7f0      	b.n	8002f3c <__aeabi_i2d+0x3c>
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	0000041e 	.word	0x0000041e

08002f60 <__aeabi_ui2d>:
 8002f60:	b510      	push	{r4, lr}
 8002f62:	1e04      	subs	r4, r0, #0
 8002f64:	d010      	beq.n	8002f88 <__aeabi_ui2d+0x28>
 8002f66:	f000 f8f1 	bl	800314c <__clzsi2>
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <__aeabi_ui2d+0x48>)
 8002f6c:	1a1b      	subs	r3, r3, r0
 8002f6e:	280a      	cmp	r0, #10
 8002f70:	dc11      	bgt.n	8002f96 <__aeabi_ui2d+0x36>
 8002f72:	220b      	movs	r2, #11
 8002f74:	0021      	movs	r1, r4
 8002f76:	1a12      	subs	r2, r2, r0
 8002f78:	40d1      	lsrs	r1, r2
 8002f7a:	3015      	adds	r0, #21
 8002f7c:	030a      	lsls	r2, r1, #12
 8002f7e:	055b      	lsls	r3, r3, #21
 8002f80:	4084      	lsls	r4, r0
 8002f82:	0b12      	lsrs	r2, r2, #12
 8002f84:	0d5b      	lsrs	r3, r3, #21
 8002f86:	e001      	b.n	8002f8c <__aeabi_ui2d+0x2c>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	051b      	lsls	r3, r3, #20
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	0020      	movs	r0, r4
 8002f92:	0019      	movs	r1, r3
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	0022      	movs	r2, r4
 8002f98:	380b      	subs	r0, #11
 8002f9a:	4082      	lsls	r2, r0
 8002f9c:	055b      	lsls	r3, r3, #21
 8002f9e:	0312      	lsls	r2, r2, #12
 8002fa0:	2400      	movs	r4, #0
 8002fa2:	0b12      	lsrs	r2, r2, #12
 8002fa4:	0d5b      	lsrs	r3, r3, #21
 8002fa6:	e7f1      	b.n	8002f8c <__aeabi_ui2d+0x2c>
 8002fa8:	0000041e 	.word	0x0000041e

08002fac <__aeabi_f2d>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	0043      	lsls	r3, r0, #1
 8002fb0:	0246      	lsls	r6, r0, #9
 8002fb2:	0fc4      	lsrs	r4, r0, #31
 8002fb4:	20fe      	movs	r0, #254	; 0xfe
 8002fb6:	0e1b      	lsrs	r3, r3, #24
 8002fb8:	1c59      	adds	r1, r3, #1
 8002fba:	0a75      	lsrs	r5, r6, #9
 8002fbc:	4208      	tst	r0, r1
 8002fbe:	d00c      	beq.n	8002fda <__aeabi_f2d+0x2e>
 8002fc0:	22e0      	movs	r2, #224	; 0xe0
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4694      	mov	ip, r2
 8002fc6:	076d      	lsls	r5, r5, #29
 8002fc8:	0b36      	lsrs	r6, r6, #12
 8002fca:	4463      	add	r3, ip
 8002fcc:	051b      	lsls	r3, r3, #20
 8002fce:	4333      	orrs	r3, r6
 8002fd0:	07e4      	lsls	r4, r4, #31
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	0028      	movs	r0, r5
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d114      	bne.n	8003008 <__aeabi_f2d+0x5c>
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	d01b      	beq.n	800301a <__aeabi_f2d+0x6e>
 8002fe2:	0028      	movs	r0, r5
 8002fe4:	f000 f8b2 	bl	800314c <__clzsi2>
 8002fe8:	280a      	cmp	r0, #10
 8002fea:	dc1c      	bgt.n	8003026 <__aeabi_f2d+0x7a>
 8002fec:	230b      	movs	r3, #11
 8002fee:	002e      	movs	r6, r5
 8002ff0:	1a1b      	subs	r3, r3, r0
 8002ff2:	40de      	lsrs	r6, r3
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	3315      	adds	r3, #21
 8002ff8:	409d      	lsls	r5, r3
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <__aeabi_f2d+0x88>)
 8002ffc:	0336      	lsls	r6, r6, #12
 8002ffe:	1a12      	subs	r2, r2, r0
 8003000:	0552      	lsls	r2, r2, #21
 8003002:	0b36      	lsrs	r6, r6, #12
 8003004:	0d53      	lsrs	r3, r2, #21
 8003006:	e7e1      	b.n	8002fcc <__aeabi_f2d+0x20>
 8003008:	2d00      	cmp	r5, #0
 800300a:	d009      	beq.n	8003020 <__aeabi_f2d+0x74>
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	0b36      	lsrs	r6, r6, #12
 8003010:	0312      	lsls	r2, r2, #12
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <__aeabi_f2d+0x8c>)
 8003014:	076d      	lsls	r5, r5, #29
 8003016:	4316      	orrs	r6, r2
 8003018:	e7d8      	b.n	8002fcc <__aeabi_f2d+0x20>
 800301a:	2300      	movs	r3, #0
 800301c:	2600      	movs	r6, #0
 800301e:	e7d5      	b.n	8002fcc <__aeabi_f2d+0x20>
 8003020:	2600      	movs	r6, #0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <__aeabi_f2d+0x8c>)
 8003024:	e7d2      	b.n	8002fcc <__aeabi_f2d+0x20>
 8003026:	0003      	movs	r3, r0
 8003028:	3b0b      	subs	r3, #11
 800302a:	409d      	lsls	r5, r3
 800302c:	002e      	movs	r6, r5
 800302e:	2500      	movs	r5, #0
 8003030:	e7e3      	b.n	8002ffa <__aeabi_f2d+0x4e>
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	00000389 	.word	0x00000389
 8003038:	000007ff 	.word	0x000007ff

0800303c <__aeabi_d2f>:
 800303c:	0002      	movs	r2, r0
 800303e:	004b      	lsls	r3, r1, #1
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	0d5b      	lsrs	r3, r3, #21
 8003044:	030c      	lsls	r4, r1, #12
 8003046:	4e3d      	ldr	r6, [pc, #244]	; (800313c <__aeabi_d2f+0x100>)
 8003048:	0a64      	lsrs	r4, r4, #9
 800304a:	0f40      	lsrs	r0, r0, #29
 800304c:	1c5f      	adds	r7, r3, #1
 800304e:	0fc9      	lsrs	r1, r1, #31
 8003050:	4304      	orrs	r4, r0
 8003052:	00d5      	lsls	r5, r2, #3
 8003054:	4237      	tst	r7, r6
 8003056:	d00a      	beq.n	800306e <__aeabi_d2f+0x32>
 8003058:	4839      	ldr	r0, [pc, #228]	; (8003140 <__aeabi_d2f+0x104>)
 800305a:	181e      	adds	r6, r3, r0
 800305c:	2efe      	cmp	r6, #254	; 0xfe
 800305e:	dd16      	ble.n	800308e <__aeabi_d2f+0x52>
 8003060:	20ff      	movs	r0, #255	; 0xff
 8003062:	2400      	movs	r4, #0
 8003064:	05c0      	lsls	r0, r0, #23
 8003066:	4320      	orrs	r0, r4
 8003068:	07c9      	lsls	r1, r1, #31
 800306a:	4308      	orrs	r0, r1
 800306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <__aeabi_d2f+0x44>
 8003072:	432c      	orrs	r4, r5
 8003074:	d026      	beq.n	80030c4 <__aeabi_d2f+0x88>
 8003076:	2205      	movs	r2, #5
 8003078:	0192      	lsls	r2, r2, #6
 800307a:	0a54      	lsrs	r4, r2, #9
 800307c:	b2d8      	uxtb	r0, r3
 800307e:	e7f1      	b.n	8003064 <__aeabi_d2f+0x28>
 8003080:	4325      	orrs	r5, r4
 8003082:	d0ed      	beq.n	8003060 <__aeabi_d2f+0x24>
 8003084:	2080      	movs	r0, #128	; 0x80
 8003086:	03c0      	lsls	r0, r0, #15
 8003088:	4304      	orrs	r4, r0
 800308a:	20ff      	movs	r0, #255	; 0xff
 800308c:	e7ea      	b.n	8003064 <__aeabi_d2f+0x28>
 800308e:	2e00      	cmp	r6, #0
 8003090:	dd1b      	ble.n	80030ca <__aeabi_d2f+0x8e>
 8003092:	0192      	lsls	r2, r2, #6
 8003094:	1e53      	subs	r3, r2, #1
 8003096:	419a      	sbcs	r2, r3
 8003098:	00e4      	lsls	r4, r4, #3
 800309a:	0f6d      	lsrs	r5, r5, #29
 800309c:	4322      	orrs	r2, r4
 800309e:	432a      	orrs	r2, r5
 80030a0:	0753      	lsls	r3, r2, #29
 80030a2:	d048      	beq.n	8003136 <__aeabi_d2f+0xfa>
 80030a4:	230f      	movs	r3, #15
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d000      	beq.n	80030ae <__aeabi_d2f+0x72>
 80030ac:	3204      	adds	r2, #4
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	04db      	lsls	r3, r3, #19
 80030b2:	4013      	ands	r3, r2
 80030b4:	d03f      	beq.n	8003136 <__aeabi_d2f+0xfa>
 80030b6:	1c70      	adds	r0, r6, #1
 80030b8:	2efe      	cmp	r6, #254	; 0xfe
 80030ba:	d0d1      	beq.n	8003060 <__aeabi_d2f+0x24>
 80030bc:	0192      	lsls	r2, r2, #6
 80030be:	0a54      	lsrs	r4, r2, #9
 80030c0:	b2c0      	uxtb	r0, r0
 80030c2:	e7cf      	b.n	8003064 <__aeabi_d2f+0x28>
 80030c4:	2000      	movs	r0, #0
 80030c6:	2400      	movs	r4, #0
 80030c8:	e7cc      	b.n	8003064 <__aeabi_d2f+0x28>
 80030ca:	0032      	movs	r2, r6
 80030cc:	3217      	adds	r2, #23
 80030ce:	db22      	blt.n	8003116 <__aeabi_d2f+0xda>
 80030d0:	2080      	movs	r0, #128	; 0x80
 80030d2:	0400      	lsls	r0, r0, #16
 80030d4:	4320      	orrs	r0, r4
 80030d6:	241e      	movs	r4, #30
 80030d8:	1ba4      	subs	r4, r4, r6
 80030da:	2c1f      	cmp	r4, #31
 80030dc:	dd1d      	ble.n	800311a <__aeabi_d2f+0xde>
 80030de:	2202      	movs	r2, #2
 80030e0:	4252      	negs	r2, r2
 80030e2:	1b96      	subs	r6, r2, r6
 80030e4:	0002      	movs	r2, r0
 80030e6:	40f2      	lsrs	r2, r6
 80030e8:	0016      	movs	r6, r2
 80030ea:	2c20      	cmp	r4, #32
 80030ec:	d004      	beq.n	80030f8 <__aeabi_d2f+0xbc>
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <__aeabi_d2f+0x108>)
 80030f0:	4694      	mov	ip, r2
 80030f2:	4463      	add	r3, ip
 80030f4:	4098      	lsls	r0, r3
 80030f6:	4305      	orrs	r5, r0
 80030f8:	002a      	movs	r2, r5
 80030fa:	1e53      	subs	r3, r2, #1
 80030fc:	419a      	sbcs	r2, r3
 80030fe:	4332      	orrs	r2, r6
 8003100:	2600      	movs	r6, #0
 8003102:	0753      	lsls	r3, r2, #29
 8003104:	d1ce      	bne.n	80030a4 <__aeabi_d2f+0x68>
 8003106:	2480      	movs	r4, #128	; 0x80
 8003108:	0013      	movs	r3, r2
 800310a:	04e4      	lsls	r4, r4, #19
 800310c:	2001      	movs	r0, #1
 800310e:	4023      	ands	r3, r4
 8003110:	4222      	tst	r2, r4
 8003112:	d1d3      	bne.n	80030bc <__aeabi_d2f+0x80>
 8003114:	e7b0      	b.n	8003078 <__aeabi_d2f+0x3c>
 8003116:	2300      	movs	r3, #0
 8003118:	e7ad      	b.n	8003076 <__aeabi_d2f+0x3a>
 800311a:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <__aeabi_d2f+0x10c>)
 800311c:	4694      	mov	ip, r2
 800311e:	002a      	movs	r2, r5
 8003120:	40e2      	lsrs	r2, r4
 8003122:	0014      	movs	r4, r2
 8003124:	002a      	movs	r2, r5
 8003126:	4463      	add	r3, ip
 8003128:	409a      	lsls	r2, r3
 800312a:	4098      	lsls	r0, r3
 800312c:	1e55      	subs	r5, r2, #1
 800312e:	41aa      	sbcs	r2, r5
 8003130:	4302      	orrs	r2, r0
 8003132:	4322      	orrs	r2, r4
 8003134:	e7e4      	b.n	8003100 <__aeabi_d2f+0xc4>
 8003136:	0033      	movs	r3, r6
 8003138:	e79e      	b.n	8003078 <__aeabi_d2f+0x3c>
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	000007fe 	.word	0x000007fe
 8003140:	fffffc80 	.word	0xfffffc80
 8003144:	fffffca2 	.word	0xfffffca2
 8003148:	fffffc82 	.word	0xfffffc82

0800314c <__clzsi2>:
 800314c:	211c      	movs	r1, #28
 800314e:	2301      	movs	r3, #1
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	4298      	cmp	r0, r3
 8003154:	d301      	bcc.n	800315a <__clzsi2+0xe>
 8003156:	0c00      	lsrs	r0, r0, #16
 8003158:	3910      	subs	r1, #16
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	4298      	cmp	r0, r3
 800315e:	d301      	bcc.n	8003164 <__clzsi2+0x18>
 8003160:	0a00      	lsrs	r0, r0, #8
 8003162:	3908      	subs	r1, #8
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	4298      	cmp	r0, r3
 8003168:	d301      	bcc.n	800316e <__clzsi2+0x22>
 800316a:	0900      	lsrs	r0, r0, #4
 800316c:	3904      	subs	r1, #4
 800316e:	a202      	add	r2, pc, #8	; (adr r2, 8003178 <__clzsi2+0x2c>)
 8003170:	5c10      	ldrb	r0, [r2, r0]
 8003172:	1840      	adds	r0, r0, r1
 8003174:	4770      	bx	lr
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	02020304 	.word	0x02020304
 800317c:	01010101 	.word	0x01010101
	...

08003188 <__clzdi2>:
 8003188:	b510      	push	{r4, lr}
 800318a:	2900      	cmp	r1, #0
 800318c:	d103      	bne.n	8003196 <__clzdi2+0xe>
 800318e:	f7ff ffdd 	bl	800314c <__clzsi2>
 8003192:	3020      	adds	r0, #32
 8003194:	e002      	b.n	800319c <__clzdi2+0x14>
 8003196:	0008      	movs	r0, r1
 8003198:	f7ff ffd8 	bl	800314c <__clzsi2>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	46c0      	nop			; (mov r8, r8)

080031a0 <__divdi3>:
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	4657      	mov	r7, sl
 80031a4:	464e      	mov	r6, r9
 80031a6:	4645      	mov	r5, r8
 80031a8:	46de      	mov	lr, fp
 80031aa:	b5e0      	push	{r5, r6, r7, lr}
 80031ac:	000f      	movs	r7, r1
 80031ae:	0019      	movs	r1, r3
 80031b0:	2300      	movs	r3, #0
 80031b2:	0006      	movs	r6, r0
 80031b4:	4698      	mov	r8, r3
 80031b6:	0010      	movs	r0, r2
 80031b8:	b083      	sub	sp, #12
 80031ba:	2f00      	cmp	r7, #0
 80031bc:	da07      	bge.n	80031ce <__divdi3+0x2e>
 80031be:	0033      	movs	r3, r6
 80031c0:	003c      	movs	r4, r7
 80031c2:	2700      	movs	r7, #0
 80031c4:	425e      	negs	r6, r3
 80031c6:	41a7      	sbcs	r7, r4
 80031c8:	2301      	movs	r3, #1
 80031ca:	425b      	negs	r3, r3
 80031cc:	4698      	mov	r8, r3
 80031ce:	2900      	cmp	r1, #0
 80031d0:	da07      	bge.n	80031e2 <__divdi3+0x42>
 80031d2:	4643      	mov	r3, r8
 80031d4:	43db      	mvns	r3, r3
 80031d6:	000c      	movs	r4, r1
 80031d8:	4698      	mov	r8, r3
 80031da:	0003      	movs	r3, r0
 80031dc:	2100      	movs	r1, #0
 80031de:	4258      	negs	r0, r3
 80031e0:	41a1      	sbcs	r1, r4
 80031e2:	0034      	movs	r4, r6
 80031e4:	003d      	movs	r5, r7
 80031e6:	4682      	mov	sl, r0
 80031e8:	4689      	mov	r9, r1
 80031ea:	42b9      	cmp	r1, r7
 80031ec:	d86a      	bhi.n	80032c4 <__divdi3+0x124>
 80031ee:	d067      	beq.n	80032c0 <__divdi3+0x120>
 80031f0:	4649      	mov	r1, r9
 80031f2:	4650      	mov	r0, sl
 80031f4:	f7ff ffc8 	bl	8003188 <__clzdi2>
 80031f8:	4683      	mov	fp, r0
 80031fa:	0039      	movs	r1, r7
 80031fc:	0030      	movs	r0, r6
 80031fe:	f7ff ffc3 	bl	8003188 <__clzdi2>
 8003202:	465b      	mov	r3, fp
 8003204:	1a1b      	subs	r3, r3, r0
 8003206:	469c      	mov	ip, r3
 8003208:	3b20      	subs	r3, #32
 800320a:	469b      	mov	fp, r3
 800320c:	d46b      	bmi.n	80032e6 <__divdi3+0x146>
 800320e:	4658      	mov	r0, fp
 8003210:	4651      	mov	r1, sl
 8003212:	4081      	lsls	r1, r0
 8003214:	4660      	mov	r0, ip
 8003216:	000b      	movs	r3, r1
 8003218:	4651      	mov	r1, sl
 800321a:	4081      	lsls	r1, r0
 800321c:	000a      	movs	r2, r1
 800321e:	42bb      	cmp	r3, r7
 8003220:	d900      	bls.n	8003224 <__divdi3+0x84>
 8003222:	e072      	b.n	800330a <__divdi3+0x16a>
 8003224:	42bb      	cmp	r3, r7
 8003226:	d100      	bne.n	800322a <__divdi3+0x8a>
 8003228:	e079      	b.n	800331e <__divdi3+0x17e>
 800322a:	0034      	movs	r4, r6
 800322c:	003d      	movs	r5, r7
 800322e:	4659      	mov	r1, fp
 8003230:	1aa4      	subs	r4, r4, r2
 8003232:	419d      	sbcs	r5, r3
 8003234:	2900      	cmp	r1, #0
 8003236:	da00      	bge.n	800323a <__divdi3+0x9a>
 8003238:	e074      	b.n	8003324 <__divdi3+0x184>
 800323a:	2100      	movs	r1, #0
 800323c:	2000      	movs	r0, #0
 800323e:	2601      	movs	r6, #1
 8003240:	9000      	str	r0, [sp, #0]
 8003242:	9101      	str	r1, [sp, #4]
 8003244:	4659      	mov	r1, fp
 8003246:	408e      	lsls	r6, r1
 8003248:	9601      	str	r6, [sp, #4]
 800324a:	4661      	mov	r1, ip
 800324c:	2601      	movs	r6, #1
 800324e:	408e      	lsls	r6, r1
 8003250:	4661      	mov	r1, ip
 8003252:	9600      	str	r6, [sp, #0]
 8003254:	2900      	cmp	r1, #0
 8003256:	d05f      	beq.n	8003318 <__divdi3+0x178>
 8003258:	07d9      	lsls	r1, r3, #31
 800325a:	0856      	lsrs	r6, r2, #1
 800325c:	430e      	orrs	r6, r1
 800325e:	085f      	lsrs	r7, r3, #1
 8003260:	4661      	mov	r1, ip
 8003262:	2201      	movs	r2, #1
 8003264:	2300      	movs	r3, #0
 8003266:	e00c      	b.n	8003282 <__divdi3+0xe2>
 8003268:	42af      	cmp	r7, r5
 800326a:	d101      	bne.n	8003270 <__divdi3+0xd0>
 800326c:	42a6      	cmp	r6, r4
 800326e:	d80a      	bhi.n	8003286 <__divdi3+0xe6>
 8003270:	1ba4      	subs	r4, r4, r6
 8003272:	41bd      	sbcs	r5, r7
 8003274:	1924      	adds	r4, r4, r4
 8003276:	416d      	adcs	r5, r5
 8003278:	3901      	subs	r1, #1
 800327a:	18a4      	adds	r4, r4, r2
 800327c:	415d      	adcs	r5, r3
 800327e:	2900      	cmp	r1, #0
 8003280:	d006      	beq.n	8003290 <__divdi3+0xf0>
 8003282:	42af      	cmp	r7, r5
 8003284:	d9f0      	bls.n	8003268 <__divdi3+0xc8>
 8003286:	3901      	subs	r1, #1
 8003288:	1924      	adds	r4, r4, r4
 800328a:	416d      	adcs	r5, r5
 800328c:	2900      	cmp	r1, #0
 800328e:	d1f8      	bne.n	8003282 <__divdi3+0xe2>
 8003290:	9800      	ldr	r0, [sp, #0]
 8003292:	9901      	ldr	r1, [sp, #4]
 8003294:	465b      	mov	r3, fp
 8003296:	1900      	adds	r0, r0, r4
 8003298:	4169      	adcs	r1, r5
 800329a:	2b00      	cmp	r3, #0
 800329c:	db4d      	blt.n	800333a <__divdi3+0x19a>
 800329e:	002e      	movs	r6, r5
 80032a0:	002c      	movs	r4, r5
 80032a2:	40de      	lsrs	r6, r3
 80032a4:	4663      	mov	r3, ip
 80032a6:	40dc      	lsrs	r4, r3
 80032a8:	465b      	mov	r3, fp
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	db55      	blt.n	800335a <__divdi3+0x1ba>
 80032ae:	0034      	movs	r4, r6
 80032b0:	409c      	lsls	r4, r3
 80032b2:	0023      	movs	r3, r4
 80032b4:	4664      	mov	r4, ip
 80032b6:	40a6      	lsls	r6, r4
 80032b8:	0032      	movs	r2, r6
 80032ba:	1a80      	subs	r0, r0, r2
 80032bc:	4199      	sbcs	r1, r3
 80032be:	e003      	b.n	80032c8 <__divdi3+0x128>
 80032c0:	42b0      	cmp	r0, r6
 80032c2:	d995      	bls.n	80031f0 <__divdi3+0x50>
 80032c4:	2000      	movs	r0, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	4643      	mov	r3, r8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d004      	beq.n	80032d8 <__divdi3+0x138>
 80032ce:	0003      	movs	r3, r0
 80032d0:	000c      	movs	r4, r1
 80032d2:	2100      	movs	r1, #0
 80032d4:	4258      	negs	r0, r3
 80032d6:	41a1      	sbcs	r1, r4
 80032d8:	b003      	add	sp, #12
 80032da:	bcf0      	pop	{r4, r5, r6, r7}
 80032dc:	46bb      	mov	fp, r7
 80032de:	46b2      	mov	sl, r6
 80032e0:	46a9      	mov	r9, r5
 80032e2:	46a0      	mov	r8, r4
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e6:	4662      	mov	r2, ip
 80032e8:	4648      	mov	r0, r9
 80032ea:	2320      	movs	r3, #32
 80032ec:	4651      	mov	r1, sl
 80032ee:	4090      	lsls	r0, r2
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	40d9      	lsrs	r1, r3
 80032f4:	0003      	movs	r3, r0
 80032f6:	9100      	str	r1, [sp, #0]
 80032f8:	9900      	ldr	r1, [sp, #0]
 80032fa:	4660      	mov	r0, ip
 80032fc:	430b      	orrs	r3, r1
 80032fe:	4651      	mov	r1, sl
 8003300:	4081      	lsls	r1, r0
 8003302:	000a      	movs	r2, r1
 8003304:	42bb      	cmp	r3, r7
 8003306:	d800      	bhi.n	800330a <__divdi3+0x16a>
 8003308:	e78c      	b.n	8003224 <__divdi3+0x84>
 800330a:	2100      	movs	r1, #0
 800330c:	2000      	movs	r0, #0
 800330e:	9000      	str	r0, [sp, #0]
 8003310:	9101      	str	r1, [sp, #4]
 8003312:	4661      	mov	r1, ip
 8003314:	2900      	cmp	r1, #0
 8003316:	d19f      	bne.n	8003258 <__divdi3+0xb8>
 8003318:	9800      	ldr	r0, [sp, #0]
 800331a:	9901      	ldr	r1, [sp, #4]
 800331c:	e7d4      	b.n	80032c8 <__divdi3+0x128>
 800331e:	42b1      	cmp	r1, r6
 8003320:	d8f3      	bhi.n	800330a <__divdi3+0x16a>
 8003322:	e782      	b.n	800322a <__divdi3+0x8a>
 8003324:	4661      	mov	r1, ip
 8003326:	2620      	movs	r6, #32
 8003328:	2701      	movs	r7, #1
 800332a:	1a76      	subs	r6, r6, r1
 800332c:	2000      	movs	r0, #0
 800332e:	2100      	movs	r1, #0
 8003330:	40f7      	lsrs	r7, r6
 8003332:	9000      	str	r0, [sp, #0]
 8003334:	9101      	str	r1, [sp, #4]
 8003336:	9701      	str	r7, [sp, #4]
 8003338:	e787      	b.n	800324a <__divdi3+0xaa>
 800333a:	4662      	mov	r2, ip
 800333c:	2320      	movs	r3, #32
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	002a      	movs	r2, r5
 8003342:	409a      	lsls	r2, r3
 8003344:	0026      	movs	r6, r4
 8003346:	0013      	movs	r3, r2
 8003348:	4662      	mov	r2, ip
 800334a:	40d6      	lsrs	r6, r2
 800334c:	002c      	movs	r4, r5
 800334e:	431e      	orrs	r6, r3
 8003350:	4663      	mov	r3, ip
 8003352:	40dc      	lsrs	r4, r3
 8003354:	465b      	mov	r3, fp
 8003356:	2b00      	cmp	r3, #0
 8003358:	daa9      	bge.n	80032ae <__divdi3+0x10e>
 800335a:	4662      	mov	r2, ip
 800335c:	2320      	movs	r3, #32
 800335e:	0035      	movs	r5, r6
 8003360:	4094      	lsls	r4, r2
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	40dd      	lsrs	r5, r3
 8003366:	0023      	movs	r3, r4
 8003368:	432b      	orrs	r3, r5
 800336a:	e7a3      	b.n	80032b4 <__divdi3+0x114>

0800336c <adt7310_resetspi>:
        return -1;
    }
    return status;
}

int adt7310_resetspi(const adt7310_t *dev) {
 800336c:	b510      	push	{r4, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	0004      	movs	r4, r0
    //dummy commands
    uint8_t command = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	220f      	movs	r2, #15
 8003376:	446a      	add	r2, sp
 8003378:	7013      	strb	r3, [r2, #0]
    uint8_t received = 255;
 800337a:	220e      	movs	r2, #14
 800337c:	446a      	add	r2, sp
 800337e:	21ff      	movs	r1, #255	; 0xff
 8003380:	7011      	strb	r1, [r2, #0]
    uint8_t status = HAL_OK;
    dev->hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003382:	6802      	ldr	r2, [r0, #0]
 8003384:	6153      	str	r3, [r2, #20]
    dev->hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003386:	6802      	ldr	r2, [r0, #0]
 8003388:	6113      	str	r3, [r2, #16]
    if (HAL_SPI_Init(dev->hspi) != HAL_OK) {
 800338a:	6800      	ldr	r0, [r0, #0]
 800338c:	f004 fa88 	bl	80078a0 <HAL_SPI_Init>
 8003390:	2800      	cmp	r0, #0
 8003392:	d002      	beq.n	800339a <adt7310_resetspi+0x2e>
        return HAL_ERROR;
 8003394:	2001      	movs	r0, #1
    if (status != HAL_OK) {
        return HAL_TIMEOUT;
    }
    HAL_Delay(100);
    return HAL_OK;
}
 8003396:	b004      	add	sp, #16
 8003398:	bd10      	pop	{r4, pc}
    status = HAL_SPI_TransmitReceive(dev->hspi, &command, &received, 1, 100);
 800339a:	6820      	ldr	r0, [r4, #0]
 800339c:	2364      	movs	r3, #100	; 0x64
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	3b63      	subs	r3, #99	; 0x63
 80033a2:	220e      	movs	r2, #14
 80033a4:	446a      	add	r2, sp
 80033a6:	210f      	movs	r1, #15
 80033a8:	4469      	add	r1, sp
 80033aa:	f004 fbd5 	bl	8007b58 <HAL_SPI_TransmitReceive>
    if (status != HAL_OK) {
 80033ae:	2800      	cmp	r0, #0
 80033b0:	d104      	bne.n	80033bc <adt7310_resetspi+0x50>
    HAL_Delay(100);
 80033b2:	3064      	adds	r0, #100	; 0x64
 80033b4:	f002 fcd4 	bl	8005d60 <HAL_Delay>
    return HAL_OK;
 80033b8:	2000      	movs	r0, #0
 80033ba:	e7ec      	b.n	8003396 <adt7310_resetspi+0x2a>
        return HAL_TIMEOUT;
 80033bc:	2003      	movs	r0, #3
 80033be:	e7ea      	b.n	8003396 <adt7310_resetspi+0x2a>

080033c0 <adt7310_configspi>:

int adt7310_configspi(const adt7310_t *dev) {
 80033c0:	b510      	push	{r4, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	0004      	movs	r4, r0
    //dummy commands
    uint8_t command = 0;
 80033c6:	230f      	movs	r3, #15
 80033c8:	446b      	add	r3, sp
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
    uint8_t received = 255;
 80033ce:	230e      	movs	r3, #14
 80033d0:	446b      	add	r3, sp
 80033d2:	32ff      	adds	r2, #255	; 0xff
 80033d4:	701a      	strb	r2, [r3, #0]
    uint8_t status = HAL_OK;
    dev->hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 80033d6:	6803      	ldr	r3, [r0, #0]
 80033d8:	3afe      	subs	r2, #254	; 0xfe
 80033da:	615a      	str	r2, [r3, #20]
    dev->hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	3201      	adds	r2, #1
 80033e0:	611a      	str	r2, [r3, #16]
    if (HAL_SPI_Init(dev->hspi) != HAL_OK) {
 80033e2:	6800      	ldr	r0, [r0, #0]
 80033e4:	f004 fa5c 	bl	80078a0 <HAL_SPI_Init>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d002      	beq.n	80033f2 <adt7310_configspi+0x32>
        return HAL_ERROR;
 80033ec:	2001      	movs	r0, #1
    if (status != HAL_OK) {
        return HAL_TIMEOUT;
    }
    HAL_Delay(100);
    return HAL_OK;
}
 80033ee:	b004      	add	sp, #16
 80033f0:	bd10      	pop	{r4, pc}
    status = HAL_SPI_TransmitReceive(dev->hspi, &command, &received, 1, 100);
 80033f2:	6820      	ldr	r0, [r4, #0]
 80033f4:	2364      	movs	r3, #100	; 0x64
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	3b63      	subs	r3, #99	; 0x63
 80033fa:	220e      	movs	r2, #14
 80033fc:	446a      	add	r2, sp
 80033fe:	210f      	movs	r1, #15
 8003400:	4469      	add	r1, sp
 8003402:	f004 fba9 	bl	8007b58 <HAL_SPI_TransmitReceive>
    if (status != HAL_OK) {
 8003406:	2800      	cmp	r0, #0
 8003408:	d104      	bne.n	8003414 <adt7310_configspi+0x54>
    HAL_Delay(100);
 800340a:	3064      	adds	r0, #100	; 0x64
 800340c:	f002 fca8 	bl	8005d60 <HAL_Delay>
    return HAL_OK;
 8003410:	2000      	movs	r0, #0
 8003412:	e7ec      	b.n	80033ee <adt7310_configspi+0x2e>
        return HAL_TIMEOUT;
 8003414:	2003      	movs	r0, #3
 8003416:	e7ea      	b.n	80033ee <adt7310_configspi+0x2e>

08003418 <adt7310_read_reg>:
int adt7310_read_reg(const adt7310_t *dev, const uint8_t addr, const uint16_t len, uint8_t *buf) {
 8003418:	b570      	push	{r4, r5, r6, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	0006      	movs	r6, r0
 800341e:	0015      	movs	r5, r2
 8003420:	001c      	movs	r4, r3
    uint8_t command = ADT7310_CMD_READ | (addr << ADT7310_CMD_ADDR_SHIFT);
 8003422:	00c9      	lsls	r1, r1, #3
 8003424:	2340      	movs	r3, #64	; 0x40
 8003426:	4319      	orrs	r1, r3
 8003428:	466b      	mov	r3, sp
 800342a:	71d9      	strb	r1, [r3, #7]
    if (adt7310_configspi(dev) != 0) {
 800342c:	f7ff ffc8 	bl	80033c0 <adt7310_configspi>
 8003430:	2800      	cmp	r0, #0
 8003432:	d003      	beq.n	800343c <adt7310_read_reg+0x24>
        return HAL_ERROR;
 8003434:	2401      	movs	r4, #1
}
 8003436:	0020      	movs	r0, r4
 8003438:	b002      	add	sp, #8
 800343a:	bd70      	pop	{r4, r5, r6, pc}
    select_sensor(dev->sensor_cs);
 800343c:	7930      	ldrb	r0, [r6, #4]
 800343e:	f001 f94d 	bl	80046dc <select_sensor>
    status = HAL_SPI_Transmit(dev->hspi, &command, 1, 11);
 8003442:	230b      	movs	r3, #11
 8003444:	2201      	movs	r2, #1
 8003446:	4669      	mov	r1, sp
 8003448:	3107      	adds	r1, #7
 800344a:	6830      	ldr	r0, [r6, #0]
 800344c:	f004 faaa 	bl	80079a4 <HAL_SPI_Transmit>
    status = HAL_SPI_Receive(dev->hspi, buf, len, 11);
 8003450:	230b      	movs	r3, #11
 8003452:	002a      	movs	r2, r5
 8003454:	0021      	movs	r1, r4
 8003456:	6830      	ldr	r0, [r6, #0]
 8003458:	f004 fca6 	bl	8007da8 <HAL_SPI_Receive>
 800345c:	0004      	movs	r4, r0
    deselect_sensors();
 800345e:	f001 fa0f 	bl	8004880 <deselect_sensors>
    if (adt7310_resetspi(dev) != 0) {
 8003462:	0030      	movs	r0, r6
 8003464:	f7ff ff82 	bl	800336c <adt7310_resetspi>
 8003468:	2800      	cmp	r0, #0
 800346a:	d103      	bne.n	8003474 <adt7310_read_reg+0x5c>
    if (status != HAL_OK) {
 800346c:	2c00      	cmp	r4, #0
 800346e:	d0e2      	beq.n	8003436 <adt7310_read_reg+0x1e>
        return HAL_TIMEOUT;
 8003470:	2403      	movs	r4, #3
 8003472:	e7e0      	b.n	8003436 <adt7310_read_reg+0x1e>
        return HAL_ERROR;
 8003474:	2401      	movs	r4, #1
 8003476:	e7de      	b.n	8003436 <adt7310_read_reg+0x1e>

08003478 <adt7310_write_reg>:
static int adt7310_write_reg(const adt7310_t *dev, const uint8_t addr, const uint16_t len, uint8_t *buf) {
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	0004      	movs	r4, r0
 800347e:	0016      	movs	r6, r2
 8003480:	001d      	movs	r5, r3
    uint8_t command = ADT7310_CMD_WRITE | (addr << ADT7310_CMD_ADDR_SHIFT);
 8003482:	00c9      	lsls	r1, r1, #3
 8003484:	466b      	mov	r3, sp
 8003486:	71d9      	strb	r1, [r3, #7]
    if (adt7310_configspi(dev) != 0) {
 8003488:	f7ff ff9a 	bl	80033c0 <adt7310_configspi>
 800348c:	2800      	cmp	r0, #0
 800348e:	d003      	beq.n	8003498 <adt7310_write_reg+0x20>
        return HAL_ERROR;
 8003490:	2501      	movs	r5, #1
}
 8003492:	0028      	movs	r0, r5
 8003494:	b002      	add	sp, #8
 8003496:	bd70      	pop	{r4, r5, r6, pc}
    select_sensor(dev->sensor_cs);
 8003498:	7920      	ldrb	r0, [r4, #4]
 800349a:	f001 f91f 	bl	80046dc <select_sensor>
    status = HAL_SPI_Transmit(dev->hspi, &command, 1, 11);
 800349e:	230b      	movs	r3, #11
 80034a0:	2201      	movs	r2, #1
 80034a2:	4669      	mov	r1, sp
 80034a4:	3107      	adds	r1, #7
 80034a6:	6820      	ldr	r0, [r4, #0]
 80034a8:	f004 fa7c 	bl	80079a4 <HAL_SPI_Transmit>
    status = HAL_SPI_Transmit(dev->hspi, buf, len, 11);
 80034ac:	230b      	movs	r3, #11
 80034ae:	0032      	movs	r2, r6
 80034b0:	0029      	movs	r1, r5
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	f004 fa76 	bl	80079a4 <HAL_SPI_Transmit>
 80034b8:	0005      	movs	r5, r0
    deselect_sensors();
 80034ba:	f001 f9e1 	bl	8004880 <deselect_sensors>
    if (adt7310_resetspi(dev) != 0) {
 80034be:	0020      	movs	r0, r4
 80034c0:	f7ff ff54 	bl	800336c <adt7310_resetspi>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d104      	bne.n	80034d2 <adt7310_write_reg+0x5a>
    if (status != HAL_OK) {
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	d0e2      	beq.n	8003492 <adt7310_write_reg+0x1a>
        return -1;
 80034cc:	2501      	movs	r5, #1
 80034ce:	426d      	negs	r5, r5
 80034d0:	e7df      	b.n	8003492 <adt7310_write_reg+0x1a>
        return HAL_ERROR;
 80034d2:	2501      	movs	r5, #1
 80034d4:	e7dd      	b.n	8003492 <adt7310_write_reg+0x1a>

080034d6 <adt7310_set_config>:

    dev->initialized = true;
    return HAL_OK;
}

int adt7310_set_config(adt7310_t *dev, uint8_t config) {
 80034d6:	b500      	push	{lr}
 80034d8:	b083      	sub	sp, #12
 80034da:	466b      	mov	r3, sp
 80034dc:	71d9      	strb	r1, [r3, #7]
    if (config & ADT7310_CONF_RESOLUTION_MASK) {
 80034de:	b24b      	sxtb	r3, r1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db07      	blt.n	80034f4 <adt7310_set_config+0x1e>
        dev->high_res = true;
    }
    return adt7310_write_reg(dev, ADT7310_REG_CONFIG, ADT7310_REG_SIZE_CONFIG, &config);
 80034e4:	466b      	mov	r3, sp
 80034e6:	3307      	adds	r3, #7
 80034e8:	2201      	movs	r2, #1
 80034ea:	2101      	movs	r1, #1
 80034ec:	f7ff ffc4 	bl	8003478 <adt7310_write_reg>
}
 80034f0:	b003      	add	sp, #12
 80034f2:	bd00      	pop	{pc}
        dev->high_res = true;
 80034f4:	2301      	movs	r3, #1
 80034f6:	7183      	strb	r3, [r0, #6]
 80034f8:	e7f4      	b.n	80034e4 <adt7310_set_config+0xe>

080034fa <adt7310_init>:
int adt7310_init(adt7310_t *dev, SPI_HandleTypeDef *hspi, uint8_t sensor_cs) {
 80034fa:	b510      	push	{r4, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	0004      	movs	r4, r0
    uint8_t received = 255;
 8003500:	466b      	mov	r3, sp
 8003502:	3307      	adds	r3, #7
 8003504:	20ff      	movs	r0, #255	; 0xff
 8003506:	7018      	strb	r0, [r3, #0]
    dev->hspi = hspi;
 8003508:	6021      	str	r1, [r4, #0]
    dev->sensor_cs = sensor_cs;
 800350a:	7122      	strb	r2, [r4, #4]
    dev->initialized = false;
 800350c:	2200      	movs	r2, #0
 800350e:	7162      	strb	r2, [r4, #5]
    dev->high_res = false;
 8003510:	71a2      	strb	r2, [r4, #6]
    status = adt7310_read_reg(dev, ADT7310_REG_ID, 1, &received);
 8003512:	3201      	adds	r2, #1
 8003514:	2103      	movs	r1, #3
 8003516:	0020      	movs	r0, r4
 8003518:	f7ff ff7e 	bl	8003418 <adt7310_read_reg>
    if (status != HAL_OK) {
 800351c:	2800      	cmp	r0, #0
 800351e:	d110      	bne.n	8003542 <adt7310_init+0x48>
    if ((received & ADT7310_REG_ID_MASK_MANUFACTURER_ID) != ADT7310_EXPECTED_MANUF_ID) {
 8003520:	466b      	mov	r3, sp
 8003522:	3307      	adds	r3, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2207      	movs	r2, #7
 8003528:	4393      	bics	r3, r2
 800352a:	2bc0      	cmp	r3, #192	; 0xc0
 800352c:	d10b      	bne.n	8003546 <adt7310_init+0x4c>
    if (adt7310_set_config(dev, ADT7310_MODE_SHUTDOWN) != 0) {
 800352e:	2160      	movs	r1, #96	; 0x60
 8003530:	0020      	movs	r0, r4
 8003532:	f7ff ffd0 	bl	80034d6 <adt7310_set_config>
 8003536:	2800      	cmp	r0, #0
 8003538:	d108      	bne.n	800354c <adt7310_init+0x52>
    dev->initialized = true;
 800353a:	2301      	movs	r3, #1
 800353c:	7163      	strb	r3, [r4, #5]
}
 800353e:	b002      	add	sp, #8
 8003540:	bd10      	pop	{r4, pc}
        return HAL_TIMEOUT;
 8003542:	2003      	movs	r0, #3
 8003544:	e7fb      	b.n	800353e <adt7310_init+0x44>
        return -2;
 8003546:	2002      	movs	r0, #2
 8003548:	4240      	negs	r0, r0
 800354a:	e7f8      	b.n	800353e <adt7310_init+0x44>
        return -3;
 800354c:	2003      	movs	r0, #3
 800354e:	4240      	negs	r0, r0
 8003550:	e7f5      	b.n	800353e <adt7310_init+0x44>
	...

08003554 <adt7310_read_raw>:

int16_t adt7310_read_raw(const adt7310_t *dev) {
 8003554:	b500      	push	{lr}
 8003556:	b083      	sub	sp, #12
    int status;
    int16_t raw;
    /* Read the temperature value register */
    status = adt7310_read_reg(dev, ADT7310_REG_VALUE, ADT7310_REG_SIZE_VALUE, (uint8_t*) &raw);
 8003558:	466b      	mov	r3, sp
 800355a:	3306      	adds	r3, #6
 800355c:	2202      	movs	r2, #2
 800355e:	2102      	movs	r1, #2
 8003560:	f7ff ff5a 	bl	8003418 <adt7310_read_reg>
    raw = (raw >> 8) + (raw << 8);
 8003564:	466b      	mov	r3, sp
 8003566:	2206      	movs	r2, #6
 8003568:	5e9a      	ldrsh	r2, [r3, r2]
 800356a:	0213      	lsls	r3, r2, #8
 800356c:	b29b      	uxth	r3, r3
 800356e:	1212      	asrs	r2, r2, #8
 8003570:	189b      	adds	r3, r3, r2
 8003572:	b21b      	sxth	r3, r3
 8003574:	466a      	mov	r2, sp
 8003576:	80d3      	strh	r3, [r2, #6]
    if (status < 0) {
 8003578:	2800      	cmp	r0, #0
 800357a:	db02      	blt.n	8003582 <adt7310_read_raw+0x2e>
        /* communication error */
        return INT16_MIN;
    }
    return raw;
}
 800357c:	0018      	movs	r0, r3
 800357e:	b003      	add	sp, #12
 8003580:	bd00      	pop	{pc}
        return INT16_MIN;
 8003582:	4b01      	ldr	r3, [pc, #4]	; (8003588 <adt7310_read_raw+0x34>)
 8003584:	e7fa      	b.n	800357c <adt7310_read_raw+0x28>
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	ffff8000 	.word	0xffff8000

0800358c <adt7310_read_float>:

float adt7310_read_float(const adt7310_t *dev) {
 800358c:	b510      	push	{r4, lr}
 800358e:	0004      	movs	r4, r0
    int16_t raw = adt7310_read_raw(dev);
 8003590:	f7ff ffe0 	bl	8003554 <adt7310_read_raw>
    float c = 0.0;
    if (raw == INT16_MIN) {
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <adt7310_read_float+0x40>)
 8003596:	4298      	cmp	r0, r3
 8003598:	d00b      	beq.n	80035b2 <adt7310_read_float+0x26>
        /* cppcheck-suppress duplicateExpression
         * (reason: we want to create a NaN here) */
        return (0.0f / 0.0f); /* return NaN */
    }
    if (!dev->high_res) {
 800359a:	79a3      	ldrb	r3, [r4, #6]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <adt7310_read_float+0x30>
        /* filter out the flag bits */
        raw &= ADT7310_REG_VALUE_MASK_13BIT;
        c = (raw >> 3) * ADT7310_TEMPERATURE_LSB_FLOAT_13_BIT;
 80035a0:	10c0      	asrs	r0, r0, #3
 80035a2:	b200      	sxth	r0, r0
 80035a4:	f7fd fe8c 	bl	80012c0 <__aeabi_i2f>
 80035a8:	21f6      	movs	r1, #246	; 0xf6
 80035aa:	0589      	lsls	r1, r1, #22
 80035ac:	f7fd fbb4 	bl	8000d18 <__aeabi_fmul>
    } else {
        c = (float) raw * ADT7310_TEMPERATURE_LSB_FLOAT_16_BIT;
    }
    return c;
}
 80035b0:	bd10      	pop	{r4, pc}
        return (0.0f / 0.0f); /* return NaN */
 80035b2:	2100      	movs	r1, #0
 80035b4:	1c08      	adds	r0, r1, #0
 80035b6:	f7fd fa97 	bl	8000ae8 <__aeabi_fdiv>
 80035ba:	e7f9      	b.n	80035b0 <adt7310_read_float+0x24>
        c = (float) raw * ADT7310_TEMPERATURE_LSB_FLOAT_16_BIT;
 80035bc:	f7fd fe80 	bl	80012c0 <__aeabi_i2f>
 80035c0:	21f0      	movs	r1, #240	; 0xf0
 80035c2:	0589      	lsls	r1, r1, #22
 80035c4:	f7fd fba8 	bl	8000d18 <__aeabi_fmul>
 80035c8:	e7f2      	b.n	80035b0 <adt7310_read_float+0x24>
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	ffff8000 	.word	0xffff8000

080035d0 <calc_temperature>:

/*!
 * @brief This internal API is used to calculate the temperature value.
 */
static int16_t calc_temperature(uint32_t temp_adc, struct bme680_dev *dev)
{
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	000e      	movs	r6, r1
    int64_t var1;
    int64_t var2;
    int64_t var3;
    int16_t calc_temp;

    var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80035d4:	10c0      	asrs	r0, r0, #3
 80035d6:	8acb      	ldrh	r3, [r1, #22]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	1ac4      	subs	r4, r0, r3
 80035dc:	17e7      	asrs	r7, r4, #31
    var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80035de:	2318      	movs	r3, #24
 80035e0:	5ec8      	ldrsh	r0, [r1, r3]
 80035e2:	17c1      	asrs	r1, r0, #31
 80035e4:	0022      	movs	r2, r4
 80035e6:	003b      	movs	r3, r7
 80035e8:	f7fc ffaa 	bl	8000540 <__aeabi_lmul>
 80035ec:	0549      	lsls	r1, r1, #21
 80035ee:	0ac5      	lsrs	r5, r0, #11
 80035f0:	430d      	orrs	r5, r1
    var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80035f2:	07fb      	lsls	r3, r7, #31
 80035f4:	0860      	lsrs	r0, r4, #1
 80035f6:	4318      	orrs	r0, r3
 80035f8:	0002      	movs	r2, r0
 80035fa:	003b      	movs	r3, r7
 80035fc:	0039      	movs	r1, r7
 80035fe:	f7fc ff9f 	bl	8000540 <__aeabi_lmul>
 8003602:	050b      	lsls	r3, r1, #20
 8003604:	0b02      	lsrs	r2, r0, #12
 8003606:	431a      	orrs	r2, r3
 8003608:	130b      	asrs	r3, r1, #12
    var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 800360a:	211a      	movs	r1, #26
 800360c:	5671      	ldrsb	r1, [r6, r1]
 800360e:	0108      	lsls	r0, r1, #4
 8003610:	17c9      	asrs	r1, r1, #31
 8003612:	f7fc ff95 	bl	8000540 <__aeabi_lmul>
 8003616:	0489      	lsls	r1, r1, #18
 8003618:	0b80      	lsrs	r0, r0, #14
 800361a:	4308      	orrs	r0, r1
    dev->calib.t_fine = (int32_t) (var2 + var3);
 800361c:	182d      	adds	r5, r5, r0
 800361e:	6335      	str	r5, [r6, #48]	; 0x30
    calc_temp = (int16_t) (((dev->calib.t_fine * 5) + 128) >> 8);
 8003620:	00a8      	lsls	r0, r5, #2
 8003622:	1940      	adds	r0, r0, r5
 8003624:	3080      	adds	r0, #128	; 0x80
 8003626:	1200      	asrs	r0, r0, #8
 8003628:	b200      	sxth	r0, r0

    return calc_temp;
}
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800362c <calc_pressure>:

/*!
 * @brief This internal API is used to calculate the pressure value.
 */
static uint32_t calc_pressure(uint32_t pres_adc, const struct bme680_dev *dev)
{
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	000c      	movs	r4, r1
    int32_t var1;
    int32_t var2;
    int32_t var3;
    int32_t pressure_comp;

    var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8003630:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003632:	105e      	asrs	r6, r3, #1
 8003634:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <calc_pressure+0xb8>)
 8003636:	469c      	mov	ip, r3
 8003638:	4466      	add	r6, ip
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 800363a:	10b3      	asrs	r3, r6, #2
 800363c:	435b      	muls	r3, r3
 800363e:	12dd      	asrs	r5, r3, #11
        (int32_t)dev->calib.par_p6) >> 2;
 8003640:	2226      	movs	r2, #38	; 0x26
 8003642:	568a      	ldrsb	r2, [r1, r2]
    var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8003644:	4355      	muls	r5, r2
 8003646:	10ad      	asrs	r5, r5, #2
    var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
 8003648:	2124      	movs	r1, #36	; 0x24
 800364a:	5e62      	ldrsh	r2, [r4, r1]
 800364c:	4372      	muls	r2, r6
 800364e:	0052      	lsls	r2, r2, #1
 8003650:	1952      	adds	r2, r2, r5
    var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8003652:	1092      	asrs	r2, r2, #2
 8003654:	2122      	movs	r1, #34	; 0x22
 8003656:	5e65      	ldrsh	r5, [r4, r1]
 8003658:	042d      	lsls	r5, r5, #16
 800365a:	1955      	adds	r5, r2, r5
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 800365c:	1359      	asrs	r1, r3, #13
        ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 800365e:	2320      	movs	r3, #32
 8003660:	56e3      	ldrsb	r3, [r4, r3]
 8003662:	015b      	lsls	r3, r3, #5
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003664:	434b      	muls	r3, r1
        ((int32_t)dev->calib.par_p3 << 5)) >> 3) +
 8003666:	10db      	asrs	r3, r3, #3
        (((int32_t)dev->calib.par_p2 * var1) >> 1);
 8003668:	211e      	movs	r1, #30
 800366a:	5e62      	ldrsh	r2, [r4, r1]
 800366c:	4356      	muls	r6, r2
 800366e:	1076      	asrs	r6, r6, #1
    var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8003670:	199b      	adds	r3, r3, r6
    var1 = var1 >> 18;
 8003672:	149b      	asrs	r3, r3, #18
    var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	0212      	lsls	r2, r2, #8
 8003678:	4694      	mov	ip, r2
 800367a:	4463      	add	r3, ip
 800367c:	8ba1      	ldrh	r1, [r4, #28]
 800367e:	4359      	muls	r1, r3
 8003680:	13c9      	asrs	r1, r1, #15
    pressure_comp = 1048576 - pres_adc;
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	0352      	lsls	r2, r2, #13
 8003686:	1a10      	subs	r0, r2, r0
    pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
 8003688:	132d      	asrs	r5, r5, #12
 800368a:	1b45      	subs	r5, r0, r5
 800368c:	4816      	ldr	r0, [pc, #88]	; (80036e8 <calc_pressure+0xbc>)
 800368e:	4368      	muls	r0, r5
    if (pressure_comp >= BME680_MAX_OVERFLOW_VAL)
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	05db      	lsls	r3, r3, #23
 8003694:	4298      	cmp	r0, r3
 8003696:	db1f      	blt.n	80036d8 <calc_pressure+0xac>
        pressure_comp = ((pressure_comp / var1) << 1);
 8003698:	f7fc fde4 	bl	8000264 <__divsi3>
 800369c:	0042      	lsls	r2, r0, #1
    else
        pressure_comp = ((pressure_comp << 1) / var1);
    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 800369e:	232a      	movs	r3, #42	; 0x2a
 80036a0:	5ee1      	ldrsh	r1, [r4, r3]
 80036a2:	10d3      	asrs	r3, r2, #3
 80036a4:	435b      	muls	r3, r3
        (pressure_comp >> 3)) >> 13)) >> 12;
 80036a6:	1358      	asrs	r0, r3, #13
    var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
 80036a8:	4348      	muls	r0, r1
 80036aa:	1300      	asrs	r0, r0, #12
    var2 = ((int32_t)(pressure_comp >> 2) *
 80036ac:	1093      	asrs	r3, r2, #2
        (int32_t)dev->calib.par_p8) >> 13;
 80036ae:	2528      	movs	r5, #40	; 0x28
 80036b0:	5f61      	ldrsh	r1, [r4, r5]
    var2 = ((int32_t)(pressure_comp >> 2) *
 80036b2:	4359      	muls	r1, r3
 80036b4:	1349      	asrs	r1, r1, #13
    var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80036b6:	1215      	asrs	r5, r2, #8
 80036b8:	002b      	movs	r3, r5
 80036ba:	436b      	muls	r3, r5
 80036bc:	435d      	muls	r5, r3
        (int32_t)(pressure_comp >> 8) *
        (int32_t)dev->calib.par_p10) >> 17;
 80036be:	232c      	movs	r3, #44	; 0x2c
 80036c0:	5ce3      	ldrb	r3, [r4, r3]
        (int32_t)(pressure_comp >> 8) *
 80036c2:	436b      	muls	r3, r5
    var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80036c4:	145b      	asrs	r3, r3, #17

    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80036c6:	1840      	adds	r0, r0, r1
 80036c8:	18c0      	adds	r0, r0, r3
        ((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80036ca:	2327      	movs	r3, #39	; 0x27
 80036cc:	56e3      	ldrsb	r3, [r4, r3]
 80036ce:	01db      	lsls	r3, r3, #7
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80036d0:	18c0      	adds	r0, r0, r3
        ((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80036d2:	1100      	asrs	r0, r0, #4
    pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
 80036d4:	1880      	adds	r0, r0, r2

    return (uint32_t)pressure_comp;

}
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
        pressure_comp = ((pressure_comp << 1) / var1);
 80036d8:	0040      	lsls	r0, r0, #1
 80036da:	f7fc fdc3 	bl	8000264 <__divsi3>
 80036de:	0002      	movs	r2, r0
 80036e0:	e7dd      	b.n	800369e <calc_pressure+0x72>
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	ffff0600 	.word	0xffff0600
 80036e8:	00000c35 	.word	0x00000c35

080036ec <calc_humidity>:

/*!
 * @brief This internal API is used to calculate the humidity value.
 */
static uint32_t calc_humidity(uint16_t hum_adc, const struct bme680_dev *dev)
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ee:	46c6      	mov	lr, r8
 80036f0:	b500      	push	{lr}
 80036f2:	000e      	movs	r6, r1
    int32_t var5;
    int32_t var6;
    int32_t temp_scaled;
    int32_t calc_hum;

    temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80036f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80036f6:	009c      	lsls	r4, r3, #2
 80036f8:	18e4      	adds	r4, r4, r3
 80036fa:	3480      	adds	r4, #128	; 0x80
 80036fc:	1224      	asrs	r4, r4, #8
    var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 80036fe:	890d      	ldrh	r5, [r1, #8]
 8003700:	012d      	lsls	r5, r5, #4
 8003702:	1b45      	subs	r5, r0, r5
        - (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
 8003704:	200c      	movs	r0, #12
 8003706:	5608      	ldrsb	r0, [r1, r0]
 8003708:	4360      	muls	r0, r4
 800370a:	2164      	movs	r1, #100	; 0x64
 800370c:	f7fc fdaa 	bl	8000264 <__divsi3>
 8003710:	1040      	asrs	r0, r0, #1
    var1 = (int32_t) (hum_adc - ((int32_t) ((int32_t) dev->calib.par_h1 * 16)))
 8003712:	1a2f      	subs	r7, r5, r0
    var2 = ((int32_t) dev->calib.par_h2
 8003714:	8973      	ldrh	r3, [r6, #10]
 8003716:	4698      	mov	r8, r3
        * (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003718:	200d      	movs	r0, #13
 800371a:	5630      	ldrsb	r0, [r6, r0]
 800371c:	4360      	muls	r0, r4
 800371e:	2164      	movs	r1, #100	; 0x64
 8003720:	f7fc fda0 	bl	8000264 <__divsi3>
 8003724:	0005      	movs	r5, r0
            + (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 8003726:	200e      	movs	r0, #14
 8003728:	5630      	ldrsb	r0, [r6, r0]
 800372a:	4360      	muls	r0, r4
 800372c:	2164      	movs	r1, #100	; 0x64
 800372e:	f7fc fd99 	bl	8000264 <__divsi3>
 8003732:	4360      	muls	r0, r4
 8003734:	1180      	asrs	r0, r0, #6
                / ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 8003736:	2164      	movs	r1, #100	; 0x64
 8003738:	f7fc fd94 	bl	8000264 <__divsi3>
            + (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
 800373c:	1828      	adds	r0, r5, r0
                / ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	01db      	lsls	r3, r3, #7
 8003742:	469c      	mov	ip, r3
 8003744:	4460      	add	r0, ip
        * (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
 8003746:	4643      	mov	r3, r8
 8003748:	4358      	muls	r0, r3
    var2 = ((int32_t) dev->calib.par_h2
 800374a:	1285      	asrs	r5, r0, #10
    var3 = var1 * var2;
 800374c:	437d      	muls	r5, r7
    var4 = (int32_t) dev->calib.par_h6 << 7;
 800374e:	7bf7      	ldrb	r7, [r6, #15]
 8003750:	01ff      	lsls	r7, r7, #7
    var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8003752:	2010      	movs	r0, #16
 8003754:	5630      	ldrsb	r0, [r6, r0]
 8003756:	4360      	muls	r0, r4
 8003758:	2164      	movs	r1, #100	; 0x64
 800375a:	f7fc fd83 	bl	8000264 <__divsi3>
 800375e:	19c0      	adds	r0, r0, r7
 8003760:	1102      	asrs	r2, r0, #4
    var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8003762:	13ab      	asrs	r3, r5, #14
 8003764:	435b      	muls	r3, r3
 8003766:	1298      	asrs	r0, r3, #10
    var6 = (var4 * var5) >> 1;
 8003768:	4350      	muls	r0, r2
 800376a:	1040      	asrs	r0, r0, #1
    calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 800376c:	182d      	adds	r5, r5, r0
 800376e:	12ad      	asrs	r5, r5, #10
 8003770:	016b      	lsls	r3, r5, #5
 8003772:	1b5b      	subs	r3, r3, r5
 8003774:	0098      	lsls	r0, r3, #2
 8003776:	1940      	adds	r0, r0, r5
 8003778:	00c0      	lsls	r0, r0, #3
 800377a:	1300      	asrs	r0, r0, #12

    if (calc_hum > 100000) /* Cap at 100%rH */
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <calc_humidity+0xa8>)
 800377e:	4298      	cmp	r0, r3
 8003780:	dc03      	bgt.n	800378a <calc_humidity+0x9e>
        calc_hum = 100000;
    else if (calc_hum < 0)
 8003782:	2800      	cmp	r0, #0
 8003784:	da02      	bge.n	800378c <calc_humidity+0xa0>
        calc_hum = 0;
 8003786:	2000      	movs	r0, #0
 8003788:	e000      	b.n	800378c <calc_humidity+0xa0>
        calc_hum = 100000;
 800378a:	4802      	ldr	r0, [pc, #8]	; (8003794 <calc_humidity+0xa8>)

    return (uint32_t) calc_hum;
}
 800378c:	bc80      	pop	{r7}
 800378e:	46b8      	mov	r8, r7
 8003790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	000186a0 	.word	0x000186a0

08003798 <calc_gas_resistance>:

/*!
 * @brief This internal API is used to calculate the Gas Resistance value.
 */
static uint32_t calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range, const struct bme680_dev *dev)
{
 8003798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379a:	46c6      	mov	lr, r8
 800379c:	b500      	push	{lr}
 800379e:	b0a0      	sub	sp, #128	; 0x80
 80037a0:	0005      	movs	r5, r0
 80037a2:	4688      	mov	r8, r1
 80037a4:	0017      	movs	r7, r2
    int64_t var1;
    uint64_t var2;
    int64_t var3;
    uint32_t calc_gas_res;
    /**Look up table 1 for the possible gas range values */
    uint32_t lookupTable1[16] = { UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2147483647),
 80037a6:	ac10      	add	r4, sp, #64	; 0x40
 80037a8:	4e22      	ldr	r6, [pc, #136]	; (8003834 <calc_gas_resistance+0x9c>)
 80037aa:	2240      	movs	r2, #64	; 0x40
 80037ac:	0031      	movs	r1, r6
 80037ae:	0020      	movs	r0, r4
 80037b0:	f007 f998 	bl	800aae4 <memcpy>
        UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2130303777),
        UINT32_C(2147483647), UINT32_C(2147483647), UINT32_C(2143188679), UINT32_C(2136746228),
        UINT32_C(2147483647), UINT32_C(2126008810), UINT32_C(2147483647), UINT32_C(2147483647) };
    /**Look up table 2 for the possible gas range values */
    uint32_t lookupTable2[16] = { UINT32_C(4096000000), UINT32_C(2048000000), UINT32_C(1024000000), UINT32_C(512000000),
 80037b4:	0031      	movs	r1, r6
 80037b6:	3140      	adds	r1, #64	; 0x40
 80037b8:	2240      	movs	r2, #64	; 0x40
 80037ba:	4668      	mov	r0, sp
 80037bc:	f007 f992 	bl	800aae4 <memcpy>
        UINT32_C(255744255), UINT32_C(127110228), UINT32_C(64000000), UINT32_C(32258064), UINT32_C(16016016),
        UINT32_C(8000000), UINT32_C(4000000), UINT32_C(2000000), UINT32_C(1000000), UINT32_C(500000),
        UINT32_C(250000), UINT32_C(125000) };

    var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80037c0:	2336      	movs	r3, #54	; 0x36
 80037c2:	56f9      	ldrsb	r1, [r7, r3]
 80037c4:	000e      	movs	r6, r1
 80037c6:	17c9      	asrs	r1, r1, #31
 80037c8:	000f      	movs	r7, r1
 80037ca:	0fb0      	lsrs	r0, r6, #30
 80037cc:	008b      	lsls	r3, r1, #2
 80037ce:	4303      	orrs	r3, r0
 80037d0:	00b2      	lsls	r2, r6, #2
 80037d2:	1992      	adds	r2, r2, r6
 80037d4:	417b      	adcs	r3, r7
 80037d6:	4818      	ldr	r0, [pc, #96]	; (8003838 <calc_gas_resistance+0xa0>)
 80037d8:	2100      	movs	r1, #0
 80037da:	1880      	adds	r0, r0, r2
 80037dc:	4159      	adcs	r1, r3
        ((int64_t) lookupTable1[gas_range])) >> 16;
 80037de:	4643      	mov	r3, r8
 80037e0:	009e      	lsls	r6, r3, #2
 80037e2:	5932      	ldr	r2, [r6, r4]
    var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 80037e4:	2300      	movs	r3, #0
 80037e6:	f7fc feab 	bl	8000540 <__aeabi_lmul>
 80037ea:	040c      	lsls	r4, r1, #16
 80037ec:	0c02      	lsrs	r2, r0, #16
 80037ee:	4322      	orrs	r2, r4
 80037f0:	140b      	asrs	r3, r1, #16
    var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80037f2:	2100      	movs	r1, #0
 80037f4:	03e8      	lsls	r0, r5, #15
 80037f6:	24ff      	movs	r4, #255	; 0xff
 80037f8:	0624      	lsls	r4, r4, #24
 80037fa:	2501      	movs	r5, #1
 80037fc:	426d      	negs	r5, r5
 80037fe:	1824      	adds	r4, r4, r0
 8003800:	414d      	adcs	r5, r1
 8003802:	18a4      	adds	r4, r4, r2
 8003804:	415d      	adcs	r5, r3
    var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8003806:	4669      	mov	r1, sp
 8003808:	5870      	ldr	r0, [r6, r1]
 800380a:	2100      	movs	r1, #0
 800380c:	f7fc fe98 	bl	8000540 <__aeabi_lmul>
 8003810:	05ce      	lsls	r6, r1, #23
 8003812:	0a42      	lsrs	r2, r0, #9
 8003814:	4332      	orrs	r2, r6
 8003816:	124b      	asrs	r3, r1, #9
    calc_gas_res = (uint32_t) ((var3 + ((int64_t) var2 >> 1)) / (int64_t) var2);
 8003818:	07ee      	lsls	r6, r5, #31
 800381a:	0860      	lsrs	r0, r4, #1
 800381c:	4330      	orrs	r0, r6
 800381e:	1069      	asrs	r1, r5, #1
 8003820:	1880      	adds	r0, r0, r2
 8003822:	4159      	adcs	r1, r3
 8003824:	0022      	movs	r2, r4
 8003826:	002b      	movs	r3, r5
 8003828:	f7fc fe46 	bl	80004b8 <__aeabi_ldivmod>

    return calc_gas_res;
}
 800382c:	b020      	add	sp, #128	; 0x80
 800382e:	bc80      	pop	{r7}
 8003830:	46b8      	mov	r8, r7
 8003832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003834:	0800d7d8 	.word	0x0800d7d8
 8003838:	0000053c 	.word	0x0000053c

0800383c <calc_heater_res>:

/*!
 * @brief This internal API is used to calculate the Heat Resistance value.
 */
static uint8_t calc_heater_res(uint16_t temp, const struct bme680_dev *dev)
{
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	0006      	movs	r6, r0
 8003840:	000c      	movs	r4, r1
    int32_t var3;
    int32_t var4;
    int32_t var5;
    int32_t heatr_res_x100;

    if (temp > 400) /* Cap temperature */
 8003842:	23c8      	movs	r3, #200	; 0xc8
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4298      	cmp	r0, r3
 8003848:	d900      	bls.n	800384c <calc_heater_res+0x10>
        temp = 400;
 800384a:	001e      	movs	r6, r3

    var1 = (((int32_t) dev->amb_temp * dev->calib.par_gh3) / 1000) * 256;
 800384c:	2304      	movs	r3, #4
 800384e:	56e3      	ldrsb	r3, [r4, r3]
 8003850:	2014      	movs	r0, #20
 8003852:	5620      	ldrsb	r0, [r4, r0]
 8003854:	4358      	muls	r0, r3
 8003856:	21fa      	movs	r1, #250	; 0xfa
 8003858:	0089      	lsls	r1, r1, #2
 800385a:	f7fc fd03 	bl	8000264 <__divsi3>
 800385e:	0205      	lsls	r5, r0, #8
    var2 = (dev->calib.par_gh1 + 784) * (((((dev->calib.par_gh2 + 154009) * temp * 5) / 100) + 3276800) / 10);
 8003860:	2711      	movs	r7, #17
 8003862:	57e7      	ldrsb	r7, [r4, r7]
 8003864:	23c4      	movs	r3, #196	; 0xc4
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	469c      	mov	ip, r3
 800386a:	4467      	add	r7, ip
 800386c:	2312      	movs	r3, #18
 800386e:	5ee0      	ldrsh	r0, [r4, r3]
 8003870:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <calc_heater_res+0x94>)
 8003872:	469c      	mov	ip, r3
 8003874:	4460      	add	r0, ip
 8003876:	4370      	muls	r0, r6
 8003878:	2114      	movs	r1, #20
 800387a:	f7fc fcf3 	bl	8000264 <__divsi3>
 800387e:	23c8      	movs	r3, #200	; 0xc8
 8003880:	039b      	lsls	r3, r3, #14
 8003882:	469c      	mov	ip, r3
 8003884:	4460      	add	r0, ip
 8003886:	210a      	movs	r1, #10
 8003888:	f7fc fcec 	bl	8000264 <__divsi3>
 800388c:	4347      	muls	r7, r0
    var3 = var1 + (var2 / 2);
 800388e:	0ff8      	lsrs	r0, r7, #31
 8003890:	19c0      	adds	r0, r0, r7
 8003892:	1040      	asrs	r0, r0, #1
 8003894:	1940      	adds	r0, r0, r5
    var4 = (var3 / (dev->calib.res_heat_range + 4));
 8003896:	2334      	movs	r3, #52	; 0x34
 8003898:	5ce1      	ldrb	r1, [r4, r3]
 800389a:	3104      	adds	r1, #4
 800389c:	f7fc fce2 	bl	8000264 <__divsi3>
    var5 = (131 * dev->calib.res_heat_val) + 65536;
 80038a0:	2335      	movs	r3, #53	; 0x35
 80038a2:	56e2      	ldrsb	r2, [r4, r3]
 80038a4:	0191      	lsls	r1, r2, #6
 80038a6:	1889      	adds	r1, r1, r2
 80038a8:	0049      	lsls	r1, r1, #1
 80038aa:	1889      	adds	r1, r1, r2
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	025b      	lsls	r3, r3, #9
 80038b0:	469c      	mov	ip, r3
 80038b2:	4461      	add	r1, ip
    heatr_res_x100 = (int32_t) (((var4 / var5) - 250) * 34);
 80038b4:	f7fc fcd6 	bl	8000264 <__divsi3>
 80038b8:	0003      	movs	r3, r0
 80038ba:	3bfa      	subs	r3, #250	; 0xfa
 80038bc:	0118      	lsls	r0, r3, #4
 80038be:	18c0      	adds	r0, r0, r3
 80038c0:	0040      	lsls	r0, r0, #1
    heatr_res = (uint8_t) ((heatr_res_x100 + 50) / 100);
 80038c2:	3032      	adds	r0, #50	; 0x32
 80038c4:	2164      	movs	r1, #100	; 0x64
 80038c6:	f7fc fccd 	bl	8000264 <__divsi3>
 80038ca:	b2c0      	uxtb	r0, r0

    return heatr_res;
}
 80038cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	00025999 	.word	0x00025999

080038d4 <calc_heater_dur>:
static uint8_t calc_heater_dur(uint16_t dur)
{
    uint8_t factor = 0;
    uint8_t durval;

    if (dur >= 0xfc0) {
 80038d4:	23fc      	movs	r3, #252	; 0xfc
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	4298      	cmp	r0, r3
 80038da:	d20c      	bcs.n	80038f6 <calc_heater_dur+0x22>
    uint8_t factor = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	e002      	b.n	80038e6 <calc_heater_dur+0x12>
        durval = 0xff; /* Max duration*/
    } else {
        while (dur > 0x3F) {
            dur = dur / 4;
 80038e0:	0880      	lsrs	r0, r0, #2
            factor += 1;
 80038e2:	3301      	adds	r3, #1
 80038e4:	b2db      	uxtb	r3, r3
        while (dur > 0x3F) {
 80038e6:	283f      	cmp	r0, #63	; 0x3f
 80038e8:	d8fa      	bhi.n	80038e0 <calc_heater_dur+0xc>
        }
        durval = (uint8_t) (dur + (factor * 64));
 80038ea:	b2c0      	uxtb	r0, r0
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	18c0      	adds	r0, r0, r3
 80038f2:	b2c0      	uxtb	r0, r0
    }

    return durval;
}
 80038f4:	4770      	bx	lr
        durval = 0xff; /* Max duration*/
 80038f6:	20ff      	movs	r0, #255	; 0xff
 80038f8:	e7fc      	b.n	80038f4 <calc_heater_dur+0x20>

080038fa <boundary_check>:
/*!
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
 80038fa:	b530      	push	{r4, r5, lr}
    int8_t rslt = BME680_OK;

    if (value != NULL) {
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d013      	beq.n	8003928 <boundary_check+0x2e>
        /* Check if value is below minimum value */
        if (*value < min) {
 8003900:	7804      	ldrb	r4, [r0, #0]
 8003902:	428c      	cmp	r4, r1
 8003904:	d205      	bcs.n	8003912 <boundary_check+0x18>
            /* Auto correct the invalid value to minimum value */
            *value = min;
 8003906:	7001      	strb	r1, [r0, #0]
            dev->info_msg |= BME680_I_MIN_CORRECTION;
 8003908:	2446      	movs	r4, #70	; 0x46
 800390a:	5d19      	ldrb	r1, [r3, r4]
 800390c:	2501      	movs	r5, #1
 800390e:	4329      	orrs	r1, r5
 8003910:	5519      	strb	r1, [r3, r4]
        }
        /* Check if value is above maximum value */
        if (*value > max) {
 8003912:	7801      	ldrb	r1, [r0, #0]
 8003914:	4291      	cmp	r1, r2
 8003916:	d90a      	bls.n	800392e <boundary_check+0x34>
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8003918:	7002      	strb	r2, [r0, #0]
            dev->info_msg |= BME680_I_MAX_CORRECTION;
 800391a:	2146      	movs	r1, #70	; 0x46
 800391c:	5c5a      	ldrb	r2, [r3, r1]
 800391e:	2002      	movs	r0, #2
 8003920:	4302      	orrs	r2, r0
 8003922:	545a      	strb	r2, [r3, r1]
    int8_t rslt = BME680_OK;
 8003924:	2000      	movs	r0, #0
 8003926:	e003      	b.n	8003930 <boundary_check+0x36>
        }
    } else {
        rslt = BME680_E_NULL_PTR;
 8003928:	2001      	movs	r0, #1
 800392a:	4240      	negs	r0, r0
 800392c:	e000      	b.n	8003930 <boundary_check+0x36>
    int8_t rslt = BME680_OK;
 800392e:	2000      	movs	r0, #0
    }

    return rslt;
}
 8003930:	bd30      	pop	{r4, r5, pc}

08003932 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8003932:	2800      	cmp	r0, #0
 8003934:	d00d      	beq.n	8003952 <null_ptr_check+0x20>
 8003936:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <null_ptr_check+0x26>
 800393c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <null_ptr_check+0x2c>
 8003942:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <null_ptr_check+0x1a>
        /* Device structure pointer is not valid */
        rslt = BME680_E_NULL_PTR;
    } else {
        /* Device structure is fine */
        rslt = BME680_OK;
 8003948:	2000      	movs	r0, #0
    }

    return rslt;
}
 800394a:	4770      	bx	lr
        rslt = BME680_E_NULL_PTR;
 800394c:	2001      	movs	r0, #1
 800394e:	4240      	negs	r0, r0
 8003950:	e7fb      	b.n	800394a <null_ptr_check+0x18>
 8003952:	2001      	movs	r0, #1
 8003954:	4240      	negs	r0, r0
 8003956:	e7f8      	b.n	800394a <null_ptr_check+0x18>
 8003958:	2001      	movs	r0, #1
 800395a:	4240      	negs	r0, r0
 800395c:	e7f5      	b.n	800394a <null_ptr_check+0x18>
 800395e:	2001      	movs	r0, #1
 8003960:	4240      	negs	r0, r0
 8003962:	e7f2      	b.n	800394a <null_ptr_check+0x18>

08003964 <set_mem_page>:
{
 8003964:	b570      	push	{r4, r5, r6, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	0006      	movs	r6, r0
 800396a:	000c      	movs	r4, r1
    rslt = null_ptr_check(dev);
 800396c:	0008      	movs	r0, r1
 800396e:	f7ff ffe0 	bl	8003932 <null_ptr_check>
 8003972:	1e05      	subs	r5, r0, #0
    if (rslt == BME680_OK) {
 8003974:	d12c      	bne.n	80039d0 <set_mem_page+0x6c>
        if (reg_addr > 0x7f)
 8003976:	b276      	sxtb	r6, r6
 8003978:	2e00      	cmp	r6, #0
 800397a:	db2c      	blt.n	80039d6 <set_mem_page+0x72>
            mem_page = BME680_MEM_PAGE0;
 800397c:	2310      	movs	r3, #16
        if (mem_page != dev->mem_page) {
 800397e:	78e2      	ldrb	r2, [r4, #3]
 8003980:	429a      	cmp	r2, r3
 8003982:	d025      	beq.n	80039d0 <set_mem_page+0x6c>
            dev->mem_page = mem_page;
 8003984:	70e3      	strb	r3, [r4, #3]
            dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1, dev->hspi);
 8003986:	7860      	ldrb	r0, [r4, #1]
 8003988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2301      	movs	r3, #1
 800398e:	220f      	movs	r2, #15
 8003990:	446a      	add	r2, sp
 8003992:	21f3      	movs	r1, #243	; 0xf3
 8003994:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8003996:	47b0      	blx	r6
 8003998:	2354      	movs	r3, #84	; 0x54
 800399a:	54e0      	strb	r0, [r4, r3]
            if (dev->com_rslt != 0)
 800399c:	2800      	cmp	r0, #0
 800399e:	d11c      	bne.n	80039da <set_mem_page+0x76>
                reg = reg & (~BME680_MEM_PAGE_MSK);
 80039a0:	220f      	movs	r2, #15
 80039a2:	446a      	add	r2, sp
 80039a4:	7813      	ldrb	r3, [r2, #0]
 80039a6:	2110      	movs	r1, #16
 80039a8:	438b      	bics	r3, r1
 80039aa:	0019      	movs	r1, r3
 80039ac:	7013      	strb	r3, [r2, #0]
                reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 80039ae:	2003      	movs	r0, #3
 80039b0:	5620      	ldrsb	r0, [r4, r0]
 80039b2:	2310      	movs	r3, #16
 80039b4:	4003      	ands	r3, r0
 80039b6:	430b      	orrs	r3, r1
 80039b8:	7013      	strb	r3, [r2, #0]
                dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 80039ba:	7860      	ldrb	r0, [r4, #1]
 80039bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2301      	movs	r3, #1
 80039c2:	2173      	movs	r1, #115	; 0x73
 80039c4:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 80039c6:	47b0      	blx	r6
 80039c8:	2354      	movs	r3, #84	; 0x54
 80039ca:	54e0      	strb	r0, [r4, r3]
                if (dev->com_rslt != 0)
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d107      	bne.n	80039e0 <set_mem_page+0x7c>
}
 80039d0:	0028      	movs	r0, r5
 80039d2:	b004      	add	sp, #16
 80039d4:	bd70      	pop	{r4, r5, r6, pc}
            mem_page = BME680_MEM_PAGE1;
 80039d6:	2300      	movs	r3, #0
 80039d8:	e7d1      	b.n	800397e <set_mem_page+0x1a>
                rslt = BME680_E_COM_FAIL;
 80039da:	2502      	movs	r5, #2
 80039dc:	426d      	negs	r5, r5
 80039de:	e7f7      	b.n	80039d0 <set_mem_page+0x6c>
                    rslt = BME680_E_COM_FAIL;
 80039e0:	2502      	movs	r5, #2
 80039e2:	426d      	negs	r5, r5
 80039e4:	e7f4      	b.n	80039d0 <set_mem_page+0x6c>

080039e6 <get_mem_page>:
{
 80039e6:	b570      	push	{r4, r5, r6, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
 80039ec:	f7ff ffa1 	bl	8003932 <null_ptr_check>
 80039f0:	1e05      	subs	r5, r0, #0
    if (rslt == BME680_OK) {
 80039f2:	d112      	bne.n	8003a1a <get_mem_page+0x34>
        dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1, dev->hspi);
 80039f4:	7860      	ldrb	r0, [r4, #1]
 80039f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	220f      	movs	r2, #15
 80039fe:	446a      	add	r2, sp
 8003a00:	21f3      	movs	r1, #243	; 0xf3
 8003a02:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8003a04:	47b0      	blx	r6
 8003a06:	2354      	movs	r3, #84	; 0x54
 8003a08:	54e0      	strb	r0, [r4, r3]
        if (dev->com_rslt != 0)
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d108      	bne.n	8003a20 <get_mem_page+0x3a>
            dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 8003a0e:	3b45      	subs	r3, #69	; 0x45
 8003a10:	446b      	add	r3, sp
 8003a12:	781a      	ldrb	r2, [r3, #0]
 8003a14:	2310      	movs	r3, #16
 8003a16:	4013      	ands	r3, r2
 8003a18:	70e3      	strb	r3, [r4, #3]
}
 8003a1a:	0028      	movs	r0, r5
 8003a1c:	b004      	add	sp, #16
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
            rslt = BME680_E_COM_FAIL;
 8003a20:	2502      	movs	r5, #2
 8003a22:	426d      	negs	r5, r5
 8003a24:	e7f9      	b.n	8003a1a <get_mem_page+0x34>

08003a26 <bus_write>:
int8_t bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data_ptr, uint16_t data_len, SPI_HandleTypeDef *hspi){
 8003a26:	b570      	push	{r4, r5, r6, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	0014      	movs	r4, r2
 8003a2c:	001d      	movs	r5, r3
 8003a2e:	466b      	mov	r3, sp
 8003a30:	1dde      	adds	r6, r3, #7
 8003a32:	71d9      	strb	r1, [r3, #7]
    select_sensor(dev_addr);
 8003a34:	f000 fe52 	bl	80046dc <select_sensor>
    rslt = HAL_SPI_Transmit(hspi, &reg_addr, 1, 100);
 8003a38:	2364      	movs	r3, #100	; 0x64
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	0031      	movs	r1, r6
 8003a3e:	9806      	ldr	r0, [sp, #24]
 8003a40:	f003 ffb0 	bl	80079a4 <HAL_SPI_Transmit>
    rslt = HAL_SPI_Transmit(hspi, reg_data_ptr, data_len, 100);
 8003a44:	2364      	movs	r3, #100	; 0x64
 8003a46:	002a      	movs	r2, r5
 8003a48:	0021      	movs	r1, r4
 8003a4a:	9806      	ldr	r0, [sp, #24]
 8003a4c:	f003 ffaa 	bl	80079a4 <HAL_SPI_Transmit>
 8003a50:	b244      	sxtb	r4, r0
    deselect_sensors();
 8003a52:	f000 ff15 	bl	8004880 <deselect_sensors>
}
 8003a56:	0020      	movs	r0, r4
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd70      	pop	{r4, r5, r6, pc}

08003a5c <bus_read>:
int8_t bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data_ptr, uint16_t data_len, SPI_HandleTypeDef *hspi){
 8003a5c:	b570      	push	{r4, r5, r6, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	0014      	movs	r4, r2
 8003a62:	001d      	movs	r5, r3
 8003a64:	466b      	mov	r3, sp
 8003a66:	1dde      	adds	r6, r3, #7
 8003a68:	71d9      	strb	r1, [r3, #7]
   select_sensor(dev_addr);
 8003a6a:	f000 fe37 	bl	80046dc <select_sensor>
   status = HAL_SPI_Transmit(hspi, &reg_addr, 1, 100);
 8003a6e:	2364      	movs	r3, #100	; 0x64
 8003a70:	2201      	movs	r2, #1
 8003a72:	0031      	movs	r1, r6
 8003a74:	9806      	ldr	r0, [sp, #24]
 8003a76:	f003 ff95 	bl	80079a4 <HAL_SPI_Transmit>
   status = HAL_SPI_Receive(hspi, reg_data_ptr, data_len, 100);
 8003a7a:	2364      	movs	r3, #100	; 0x64
 8003a7c:	002a      	movs	r2, r5
 8003a7e:	0021      	movs	r1, r4
 8003a80:	9806      	ldr	r0, [sp, #24]
 8003a82:	f004 f991 	bl	8007da8 <HAL_SPI_Receive>
 8003a86:	0004      	movs	r4, r0
   deselect_sensors();
 8003a88:	f000 fefa 	bl	8004880 <deselect_sensors>
   return status;
 8003a8c:	b260      	sxtb	r0, r4
}
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd70      	pop	{r4, r5, r6, pc}

08003a92 <bme680_get_regs>:
{
 8003a92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a94:	b085      	sub	sp, #20
 8003a96:	0006      	movs	r6, r0
 8003a98:	9103      	str	r1, [sp, #12]
 8003a9a:	0017      	movs	r7, r2
 8003a9c:	001c      	movs	r4, r3
    rslt = null_ptr_check(dev);
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7ff ff47 	bl	8003932 <null_ptr_check>
 8003aa4:	1e05      	subs	r5, r0, #0
    if (rslt == BME680_OK) {
 8003aa6:	d10e      	bne.n	8003ac6 <bme680_get_regs+0x34>
        if (dev->intf == BME680_SPI_INTF) {
 8003aa8:	78a3      	ldrb	r3, [r4, #2]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <bme680_get_regs+0x3a>
        dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len, dev->hspi);
 8003aae:	7860      	ldrb	r0, [r4, #1]
 8003ab0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	003b      	movs	r3, r7
 8003ab6:	9a03      	ldr	r2, [sp, #12]
 8003ab8:	0031      	movs	r1, r6
 8003aba:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8003abc:	47b0      	blx	r6
 8003abe:	2354      	movs	r3, #84	; 0x54
 8003ac0:	54e0      	strb	r0, [r4, r3]
        if (dev->com_rslt != 0)
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d10d      	bne.n	8003ae2 <bme680_get_regs+0x50>
}
 8003ac6:	0028      	movs	r0, r5
 8003ac8:	b005      	add	sp, #20
 8003aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = set_mem_page(reg_addr, dev);
 8003acc:	0021      	movs	r1, r4
 8003ace:	0030      	movs	r0, r6
 8003ad0:	f7ff ff48 	bl	8003964 <set_mem_page>
 8003ad4:	1e05      	subs	r5, r0, #0
            if (rslt == BME680_OK)
 8003ad6:	d1ea      	bne.n	8003aae <bme680_get_regs+0x1c>
                reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8003ad8:	2080      	movs	r0, #128	; 0x80
 8003ada:	4240      	negs	r0, r0
 8003adc:	4306      	orrs	r6, r0
 8003ade:	b2f6      	uxtb	r6, r6
 8003ae0:	e7e5      	b.n	8003aae <bme680_get_regs+0x1c>
            rslt = BME680_E_COM_FAIL;
 8003ae2:	2502      	movs	r5, #2
 8003ae4:	426d      	negs	r5, r5
 8003ae6:	e7ee      	b.n	8003ac6 <bme680_get_regs+0x34>

08003ae8 <get_calib_data>:
{
 8003ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aea:	b08d      	sub	sp, #52	; 0x34
 8003aec:	0004      	movs	r4, r0
    uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8003aee:	2500      	movs	r5, #0
 8003af0:	9501      	str	r5, [sp, #4]
 8003af2:	2225      	movs	r2, #37	; 0x25
 8003af4:	2100      	movs	r1, #0
 8003af6:	a802      	add	r0, sp, #8
 8003af8:	f006 fffd 	bl	800aaf6 <memset>
    uint8_t temp_var = 0; /* Temporary variable */
 8003afc:	466b      	mov	r3, sp
 8003afe:	70dd      	strb	r5, [r3, #3]
    rslt = null_ptr_check(dev);
 8003b00:	0020      	movs	r0, r4
 8003b02:	f7ff ff16 	bl	8003932 <null_ptr_check>
    if (rslt == BME680_OK) {
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d001      	beq.n	8003b0e <get_calib_data+0x26>
}
 8003b0a:	b00d      	add	sp, #52	; 0x34
 8003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 8003b0e:	0023      	movs	r3, r4
 8003b10:	2219      	movs	r2, #25
 8003b12:	a901      	add	r1, sp, #4
 8003b14:	3089      	adds	r0, #137	; 0x89
 8003b16:	f7ff ffbc 	bl	8003a92 <bme680_get_regs>
        if (rslt == BME680_OK)
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d06b      	beq.n	8003bf6 <get_calib_data+0x10e>
        dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 8003b1e:	ab01      	add	r3, sp, #4
 8003b20:	2222      	movs	r2, #34	; 0x22
 8003b22:	5c99      	ldrb	r1, [r3, r2]
 8003b24:	0209      	lsls	r1, r1, #8
 8003b26:	3a01      	subs	r2, #1
 8003b28:	5c9a      	ldrb	r2, [r3, r2]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	82e2      	strh	r2, [r4, #22]
        dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 8003b2e:	7899      	ldrb	r1, [r3, #2]
 8003b30:	0209      	lsls	r1, r1, #8
 8003b32:	785a      	ldrb	r2, [r3, #1]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	8322      	strh	r2, [r4, #24]
        dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8003b38:	2203      	movs	r2, #3
 8003b3a:	569a      	ldrsb	r2, [r3, r2]
 8003b3c:	76a2      	strb	r2, [r4, #26]
        dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8003b3e:	7999      	ldrb	r1, [r3, #6]
 8003b40:	0209      	lsls	r1, r1, #8
 8003b42:	795a      	ldrb	r2, [r3, #5]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	83a2      	strh	r2, [r4, #28]
        dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 8003b48:	7a19      	ldrb	r1, [r3, #8]
 8003b4a:	0209      	lsls	r1, r1, #8
 8003b4c:	79da      	ldrb	r2, [r3, #7]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	83e2      	strh	r2, [r4, #30]
        dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8003b52:	2209      	movs	r2, #9
 8003b54:	569a      	ldrsb	r2, [r3, r2]
 8003b56:	2620      	movs	r6, #32
 8003b58:	55a2      	strb	r2, [r4, r6]
        dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8003b5a:	7b19      	ldrb	r1, [r3, #12]
 8003b5c:	0209      	lsls	r1, r1, #8
 8003b5e:	7ada      	ldrb	r2, [r3, #11]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	8462      	strh	r2, [r4, #34]	; 0x22
        dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8003b64:	7b99      	ldrb	r1, [r3, #14]
 8003b66:	0209      	lsls	r1, r1, #8
 8003b68:	7b5a      	ldrb	r2, [r3, #13]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	84a2      	strh	r2, [r4, #36]	; 0x24
        dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 8003b6e:	2210      	movs	r2, #16
 8003b70:	569a      	ldrsb	r2, [r3, r2]
 8003b72:	2526      	movs	r5, #38	; 0x26
 8003b74:	5562      	strb	r2, [r4, r5]
        dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 8003b76:	210f      	movs	r1, #15
 8003b78:	5659      	ldrsb	r1, [r3, r1]
 8003b7a:	2227      	movs	r2, #39	; 0x27
 8003b7c:	54a1      	strb	r1, [r4, r2]
        dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 8003b7e:	7d19      	ldrb	r1, [r3, #20]
 8003b80:	0209      	lsls	r1, r1, #8
 8003b82:	7cda      	ldrb	r2, [r3, #19]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	8522      	strh	r2, [r4, #40]	; 0x28
        dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 8003b88:	7d99      	ldrb	r1, [r3, #22]
 8003b8a:	0209      	lsls	r1, r1, #8
 8003b8c:	7d5a      	ldrb	r2, [r3, #21]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	8562      	strh	r2, [r4, #42]	; 0x2a
        dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 8003b92:	7dd9      	ldrb	r1, [r3, #23]
 8003b94:	222c      	movs	r2, #44	; 0x2c
 8003b96:	54a1      	strb	r1, [r4, r2]
        dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003b98:	7edf      	ldrb	r7, [r3, #27]
 8003b9a:	013f      	lsls	r7, r7, #4
            | (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 8003b9c:	7e9a      	ldrb	r2, [r3, #26]
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	4011      	ands	r1, r2
        dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003ba2:	4339      	orrs	r1, r7
 8003ba4:	8121      	strh	r1, [r4, #8]
        dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003ba6:	7e59      	ldrb	r1, [r3, #25]
 8003ba8:	0109      	lsls	r1, r1, #4
            | ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
 8003baa:	0912      	lsrs	r2, r2, #4
        dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 8003bac:	430a      	orrs	r2, r1
 8003bae:	8162      	strh	r2, [r4, #10]
        dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 8003bb0:	221c      	movs	r2, #28
 8003bb2:	569a      	ldrsb	r2, [r3, r2]
 8003bb4:	7322      	strb	r2, [r4, #12]
        dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 8003bb6:	221d      	movs	r2, #29
 8003bb8:	569a      	ldrsb	r2, [r3, r2]
 8003bba:	7362      	strb	r2, [r4, #13]
        dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8003bbc:	221e      	movs	r2, #30
 8003bbe:	569a      	ldrsb	r2, [r3, r2]
 8003bc0:	73a2      	strb	r2, [r4, #14]
        dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8003bc2:	7fda      	ldrb	r2, [r3, #31]
 8003bc4:	73e2      	strb	r2, [r4, #15]
        dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 8003bc6:	579a      	ldrsb	r2, [r3, r6]
 8003bc8:	7422      	strb	r2, [r4, #16]
        dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8003bca:	2225      	movs	r2, #37	; 0x25
 8003bcc:	569a      	ldrsb	r2, [r3, r2]
 8003bce:	7462      	strb	r2, [r4, #17]
        dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 8003bd0:	2224      	movs	r2, #36	; 0x24
 8003bd2:	5c99      	ldrb	r1, [r3, r2]
 8003bd4:	0209      	lsls	r1, r1, #8
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	5c9a      	ldrb	r2, [r3, r2]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	8262      	strh	r2, [r4, #18]
        dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8003bde:	575b      	ldrsb	r3, [r3, r5]
 8003be0:	7523      	strb	r3, [r4, #20]
        if (rslt == BME680_OK) {
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d00f      	beq.n	8003c06 <get_calib_data+0x11e>
        dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8003be6:	466b      	mov	r3, sp
 8003be8:	3303      	adds	r3, #3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	b25b      	sxtb	r3, r3
 8003bee:	111b      	asrs	r3, r3, #4
 8003bf0:	2236      	movs	r2, #54	; 0x36
 8003bf2:	54a3      	strb	r3, [r4, r2]
 8003bf4:	e789      	b.n	8003b0a <get_calib_data+0x22>
            rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 8003bf6:	0023      	movs	r3, r4
 8003bf8:	2210      	movs	r2, #16
 8003bfa:	211d      	movs	r1, #29
 8003bfc:	4469      	add	r1, sp
 8003bfe:	30e1      	adds	r0, #225	; 0xe1
 8003c00:	f7ff ff47 	bl	8003a92 <bme680_get_regs>
 8003c04:	e78b      	b.n	8003b1e <get_calib_data+0x36>
            rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 8003c06:	466b      	mov	r3, sp
 8003c08:	1cdd      	adds	r5, r3, #3
 8003c0a:	0023      	movs	r3, r4
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	0029      	movs	r1, r5
 8003c10:	3002      	adds	r0, #2
 8003c12:	f7ff ff3e 	bl	8003a92 <bme680_get_regs>
            dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8003c16:	782a      	ldrb	r2, [r5, #0]
 8003c18:	2330      	movs	r3, #48	; 0x30
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	111b      	asrs	r3, r3, #4
 8003c1e:	2234      	movs	r2, #52	; 0x34
 8003c20:	54a3      	strb	r3, [r4, r2]
            if (rslt == BME680_OK) {
 8003c22:	2800      	cmp	r0, #0
 8003c24:	d1df      	bne.n	8003be6 <get_calib_data+0xfe>
                rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 8003c26:	0023      	movs	r3, r4
 8003c28:	3a33      	subs	r2, #51	; 0x33
 8003c2a:	0029      	movs	r1, r5
 8003c2c:	f7ff ff31 	bl	8003a92 <bme680_get_regs>
                dev->calib.res_heat_val = (int8_t) temp_var;
 8003c30:	2200      	movs	r2, #0
 8003c32:	56aa      	ldrsb	r2, [r5, r2]
 8003c34:	2335      	movs	r3, #53	; 0x35
 8003c36:	54e2      	strb	r2, [r4, r3]
                if (rslt == BME680_OK)
 8003c38:	2800      	cmp	r0, #0
 8003c3a:	d1d4      	bne.n	8003be6 <get_calib_data+0xfe>
                    rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8003c3c:	0023      	movs	r3, r4
 8003c3e:	2201      	movs	r2, #1
 8003c40:	0029      	movs	r1, r5
 8003c42:	3004      	adds	r0, #4
 8003c44:	f7ff ff25 	bl	8003a92 <bme680_get_regs>
 8003c48:	e7cd      	b.n	8003be6 <get_calib_data+0xfe>

08003c4a <read_field_data>:
{
 8003c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c4c:	46de      	mov	lr, fp
 8003c4e:	4657      	mov	r7, sl
 8003c50:	464e      	mov	r6, r9
 8003c52:	4645      	mov	r5, r8
 8003c54:	b5e0      	push	{r5, r6, r7, lr}
 8003c56:	b087      	sub	sp, #28
 8003c58:	0007      	movs	r7, r0
 8003c5a:	468b      	mov	fp, r1
    uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9302      	str	r3, [sp, #8]
 8003c60:	220b      	movs	r2, #11
 8003c62:	2100      	movs	r1, #0
 8003c64:	a803      	add	r0, sp, #12
 8003c66:	f006 ff46 	bl	800aaf6 <memset>
    rslt = null_ptr_check(dev);
 8003c6a:	4658      	mov	r0, fp
 8003c6c:	f7ff fe61 	bl	8003932 <null_ptr_check>
 8003c70:	0005      	movs	r5, r0
    uint8_t tries = 10;
 8003c72:	240a      	movs	r4, #10
 8003c74:	e022      	b.n	8003cbc <read_field_data+0x72>
                data->temperature = calc_temperature(adc_temp, dev);
 8003c76:	4659      	mov	r1, fp
 8003c78:	9801      	ldr	r0, [sp, #4]
 8003c7a:	f7ff fca9 	bl	80035d0 <calc_temperature>
 8003c7e:	80b8      	strh	r0, [r7, #4]
                data->pressure = calc_pressure(adc_pres, dev);
 8003c80:	4659      	mov	r1, fp
 8003c82:	9800      	ldr	r0, [sp, #0]
 8003c84:	f7ff fcd2 	bl	800362c <calc_pressure>
 8003c88:	60b8      	str	r0, [r7, #8]
                data->humidity = calc_humidity(adc_hum, dev);
 8003c8a:	4659      	mov	r1, fp
 8003c8c:	4648      	mov	r0, r9
 8003c8e:	f7ff fd2d 	bl	80036ec <calc_humidity>
 8003c92:	60f8      	str	r0, [r7, #12]
                data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8003c94:	465a      	mov	r2, fp
 8003c96:	4651      	mov	r1, sl
 8003c98:	4640      	mov	r0, r8
 8003c9a:	f7ff fd7d 	bl	8003798 <calc_gas_resistance>
 8003c9e:	6138      	str	r0, [r7, #16]
    if (!tries)
 8003ca0:	2c00      	cmp	r4, #0
 8003ca2:	d05f      	beq.n	8003d64 <read_field_data+0x11a>
}
 8003ca4:	0028      	movs	r0, r5
 8003ca6:	b007      	add	sp, #28
 8003ca8:	bcf0      	pop	{r4, r5, r6, r7}
 8003caa:	46bb      	mov	fp, r7
 8003cac:	46b2      	mov	sl, r6
 8003cae:	46a9      	mov	r9, r5
 8003cb0:	46a0      	mov	r8, r4
 8003cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tries--;
 8003cb4:	3c01      	subs	r4, #1
 8003cb6:	b2e4      	uxtb	r4, r4
    } while (tries);
 8003cb8:	2c00      	cmp	r4, #0
 8003cba:	d0f1      	beq.n	8003ca0 <read_field_data+0x56>
        if (rslt == BME680_OK) {
 8003cbc:	2d00      	cmp	r5, #0
 8003cbe:	d1f9      	bne.n	8003cb4 <read_field_data+0x6a>
            rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8003cc0:	465b      	mov	r3, fp
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	a902      	add	r1, sp, #8
 8003cc6:	201d      	movs	r0, #29
 8003cc8:	f7ff fee3 	bl	8003a92 <bme680_get_regs>
 8003ccc:	0005      	movs	r5, r0
            data->status = buff[0] & BME680_NEW_DATA_MSK;
 8003cce:	ab02      	add	r3, sp, #8
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	237f      	movs	r3, #127	; 0x7f
 8003cd4:	0011      	movs	r1, r2
 8003cd6:	4399      	bics	r1, r3
 8003cd8:	7039      	strb	r1, [r7, #0]
            data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8003cda:	3b70      	subs	r3, #112	; 0x70
 8003cdc:	401a      	ands	r2, r3
 8003cde:	707a      	strb	r2, [r7, #1]
            data->meas_index = buff[1];
 8003ce0:	aa02      	add	r2, sp, #8
 8003ce2:	7852      	ldrb	r2, [r2, #1]
 8003ce4:	70ba      	strb	r2, [r7, #2]
            adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003ce6:	aa02      	add	r2, sp, #8
 8003ce8:	7896      	ldrb	r6, [r2, #2]
 8003cea:	0336      	lsls	r6, r6, #12
 8003cec:	78d2      	ldrb	r2, [r2, #3]
 8003cee:	0112      	lsls	r2, r2, #4
 8003cf0:	4316      	orrs	r6, r2
                | ((uint32_t) buff[4] / 16));
 8003cf2:	aa02      	add	r2, sp, #8
 8003cf4:	7912      	ldrb	r2, [r2, #4]
 8003cf6:	0912      	lsrs	r2, r2, #4
            adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8003cf8:	4316      	orrs	r6, r2
 8003cfa:	9600      	str	r6, [sp, #0]
            adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003cfc:	aa02      	add	r2, sp, #8
 8003cfe:	7950      	ldrb	r0, [r2, #5]
 8003d00:	0300      	lsls	r0, r0, #12
 8003d02:	7992      	ldrb	r2, [r2, #6]
 8003d04:	0112      	lsls	r2, r2, #4
 8003d06:	4310      	orrs	r0, r2
                | ((uint32_t) buff[7] / 16));
 8003d08:	aa02      	add	r2, sp, #8
 8003d0a:	79d2      	ldrb	r2, [r2, #7]
 8003d0c:	0912      	lsrs	r2, r2, #4
            adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8003d0e:	4310      	orrs	r0, r2
 8003d10:	9001      	str	r0, [sp, #4]
            adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8003d12:	aa02      	add	r2, sp, #8
 8003d14:	7a12      	ldrb	r2, [r2, #8]
 8003d16:	0212      	lsls	r2, r2, #8
 8003d18:	a802      	add	r0, sp, #8
 8003d1a:	7a40      	ldrb	r0, [r0, #9]
 8003d1c:	4310      	orrs	r0, r2
 8003d1e:	4681      	mov	r9, r0
            adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8003d20:	aa02      	add	r2, sp, #8
 8003d22:	7b52      	ldrb	r2, [r2, #13]
 8003d24:	0092      	lsls	r2, r2, #2
 8003d26:	4690      	mov	r8, r2
 8003d28:	aa02      	add	r2, sp, #8
 8003d2a:	7b92      	ldrb	r2, [r2, #14]
 8003d2c:	0990      	lsrs	r0, r2, #6
 8003d2e:	4684      	mov	ip, r0
 8003d30:	4640      	mov	r0, r8
 8003d32:	4666      	mov	r6, ip
 8003d34:	4330      	orrs	r0, r6
 8003d36:	4680      	mov	r8, r0
            gas_range = buff[14] & BME680_GAS_RANGE_MSK;
 8003d38:	4013      	ands	r3, r2
 8003d3a:	469a      	mov	sl, r3
            data->status |= buff[14] & BME680_GASM_VALID_MSK;
 8003d3c:	b252      	sxtb	r2, r2
 8003d3e:	2320      	movs	r3, #32
 8003d40:	4013      	ands	r3, r2
 8003d42:	430b      	orrs	r3, r1
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	703b      	strb	r3, [r7, #0]
            data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8003d48:	aa02      	add	r2, sp, #8
 8003d4a:	210e      	movs	r1, #14
 8003d4c:	5651      	ldrsb	r1, [r2, r1]
 8003d4e:	2210      	movs	r2, #16
 8003d50:	400a      	ands	r2, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	703b      	strb	r3, [r7, #0]
            if (data->status & BME680_NEW_DATA_MSK) {
 8003d56:	d500      	bpl.n	8003d5a <read_field_data+0x110>
 8003d58:	e78d      	b.n	8003c76 <read_field_data+0x2c>
            dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003d5a:	200a      	movs	r0, #10
 8003d5c:	465b      	mov	r3, fp
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	4798      	blx	r3
 8003d62:	e7a7      	b.n	8003cb4 <read_field_data+0x6a>
        rslt = BME680_W_NO_NEW_DATA;
 8003d64:	2502      	movs	r5, #2
 8003d66:	e79d      	b.n	8003ca4 <read_field_data+0x5a>

08003d68 <bme680_set_regs>:
{
 8003d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6a:	46d6      	mov	lr, sl
 8003d6c:	4647      	mov	r7, r8
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b08f      	sub	sp, #60	; 0x3c
 8003d72:	0007      	movs	r7, r0
 8003d74:	468a      	mov	sl, r1
 8003d76:	0014      	movs	r4, r2
 8003d78:	9203      	str	r2, [sp, #12]
 8003d7a:	001e      	movs	r6, r3
    uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	2224      	movs	r2, #36	; 0x24
 8003d82:	2100      	movs	r1, #0
 8003d84:	a805      	add	r0, sp, #20
 8003d86:	f006 feb6 	bl	800aaf6 <memset>
    rslt = null_ptr_check(dev);
 8003d8a:	0030      	movs	r0, r6
 8003d8c:	f7ff fdd1 	bl	8003932 <null_ptr_check>
 8003d90:	4680      	mov	r8, r0
    if (rslt == BME680_OK) {
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d13e      	bne.n	8003e14 <bme680_set_regs+0xac>
        if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 8003d96:	1e63      	subs	r3, r4, #1
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b12      	cmp	r3, #18
 8003d9c:	d801      	bhi.n	8003da2 <bme680_set_regs+0x3a>
            for (index = 0; index < len; index++) {
 8003d9e:	2400      	movs	r4, #0
 8003da0:	e017      	b.n	8003dd2 <bme680_set_regs+0x6a>
            rslt = BME680_E_INVALID_LENGTH;
 8003da2:	2304      	movs	r3, #4
 8003da4:	425b      	negs	r3, r3
 8003da6:	4698      	mov	r8, r3
 8003da8:	e034      	b.n	8003e14 <bme680_set_regs+0xac>
                    rslt = set_mem_page(reg_addr[index], dev);
 8003daa:	193d      	adds	r5, r7, r4
 8003dac:	5d38      	ldrb	r0, [r7, r4]
 8003dae:	0031      	movs	r1, r6
 8003db0:	f7ff fdd8 	bl	8003964 <set_mem_page>
 8003db4:	4680      	mov	r8, r0
                    tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8003db6:	0063      	lsls	r3, r4, #1
 8003db8:	7829      	ldrb	r1, [r5, #0]
 8003dba:	227f      	movs	r2, #127	; 0x7f
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	a904      	add	r1, sp, #16
 8003dc0:	54ca      	strb	r2, [r1, r3]
                tmp_buff[(2 * index) + 1] = reg_data[index];
 8003dc2:	0065      	lsls	r5, r4, #1
 8003dc4:	3501      	adds	r5, #1
 8003dc6:	4653      	mov	r3, sl
 8003dc8:	5d1a      	ldrb	r2, [r3, r4]
 8003dca:	ab04      	add	r3, sp, #16
 8003dcc:	555a      	strb	r2, [r3, r5]
            for (index = 0; index < len; index++) {
 8003dce:	3401      	adds	r4, #1
 8003dd0:	b2a4      	uxth	r4, r4
 8003dd2:	466b      	mov	r3, sp
 8003dd4:	899b      	ldrh	r3, [r3, #12]
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	d907      	bls.n	8003dea <bme680_set_regs+0x82>
                if (dev->intf == BME680_SPI_INTF) {
 8003dda:	78b3      	ldrb	r3, [r6, #2]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0e4      	beq.n	8003daa <bme680_set_regs+0x42>
                    tmp_buff[(2 * index)] = reg_addr[index];
 8003de0:	0063      	lsls	r3, r4, #1
 8003de2:	5d39      	ldrb	r1, [r7, r4]
 8003de4:	aa04      	add	r2, sp, #16
 8003de6:	54d1      	strb	r1, [r2, r3]
 8003de8:	e7eb      	b.n	8003dc2 <bme680_set_regs+0x5a>
            if (rslt == BME680_OK) {
 8003dea:	4642      	mov	r2, r8
 8003dec:	2a00      	cmp	r2, #0
 8003dee:	d111      	bne.n	8003e14 <bme680_set_regs+0xac>
                dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->hspi);
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	aa04      	add	r2, sp, #16
 8003df8:	7811      	ldrb	r1, [r2, #0]
 8003dfa:	7870      	ldrb	r0, [r6, #1]
 8003dfc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003dfe:	9200      	str	r2, [sp, #0]
 8003e00:	2209      	movs	r2, #9
 8003e02:	ac02      	add	r4, sp, #8
 8003e04:	46a4      	mov	ip, r4
 8003e06:	4462      	add	r2, ip
 8003e08:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8003e0a:	47a0      	blx	r4
 8003e0c:	2354      	movs	r3, #84	; 0x54
 8003e0e:	54f0      	strb	r0, [r6, r3]
                if (dev->com_rslt != 0)
 8003e10:	2800      	cmp	r0, #0
 8003e12:	d105      	bne.n	8003e20 <bme680_set_regs+0xb8>
}
 8003e14:	4640      	mov	r0, r8
 8003e16:	b00f      	add	sp, #60	; 0x3c
 8003e18:	bcc0      	pop	{r6, r7}
 8003e1a:	46ba      	mov	sl, r7
 8003e1c:	46b0      	mov	r8, r6
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    rslt = BME680_E_COM_FAIL;
 8003e20:	3b56      	subs	r3, #86	; 0x56
 8003e22:	4698      	mov	r8, r3
 8003e24:	e7f6      	b.n	8003e14 <bme680_set_regs+0xac>

08003e26 <set_gas_config>:
{
 8003e26:	b510      	push	{r4, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
 8003e2c:	f7ff fd81 	bl	8003932 <null_ptr_check>
    if (rslt == BME680_OK) {
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d109      	bne.n	8003e48 <set_gas_config+0x22>
        uint8_t reg_addr[2] = {0};
 8003e34:	2300      	movs	r3, #0
 8003e36:	466a      	mov	r2, sp
 8003e38:	8013      	strh	r3, [r2, #0]
        uint8_t reg_data[2] = {0};
 8003e3a:	aa01      	add	r2, sp, #4
 8003e3c:	8013      	strh	r3, [r2, #0]
        if (dev->power_mode == BME680_FORCED_MODE) {
 8003e3e:	3344      	adds	r3, #68	; 0x44
 8003e40:	5ce3      	ldrb	r3, [r4, r3]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d002      	beq.n	8003e4c <set_gas_config+0x26>
            rslt = BME680_W_DEFINE_PWR_MODE;
 8003e46:	2001      	movs	r0, #1
}
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd10      	pop	{r4, pc}
            reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8003e4c:	3359      	adds	r3, #89	; 0x59
 8003e4e:	466a      	mov	r2, sp
 8003e50:	7013      	strb	r3, [r2, #0]
            reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8003e52:	3b1a      	subs	r3, #26
 8003e54:	5ae0      	ldrh	r0, [r4, r3]
 8003e56:	0021      	movs	r1, r4
 8003e58:	f7ff fcf0 	bl	800383c <calc_heater_res>
 8003e5c:	466b      	mov	r3, sp
 8003e5e:	7118      	strb	r0, [r3, #4]
            reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8003e60:	2364      	movs	r3, #100	; 0x64
 8003e62:	466a      	mov	r2, sp
 8003e64:	7053      	strb	r3, [r2, #1]
            reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 8003e66:	3b22      	subs	r3, #34	; 0x22
 8003e68:	5ae0      	ldrh	r0, [r4, r3]
 8003e6a:	f7ff fd33 	bl	80038d4 <calc_heater_dur>
 8003e6e:	466b      	mov	r3, sp
 8003e70:	7158      	strb	r0, [r3, #5]
            dev->gas_sett.nb_conv = 0;
 8003e72:	233c      	movs	r3, #60	; 0x3c
 8003e74:	2200      	movs	r2, #0
 8003e76:	54e2      	strb	r2, [r4, r3]
            rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 8003e78:	0023      	movs	r3, r4
 8003e7a:	3202      	adds	r2, #2
 8003e7c:	a901      	add	r1, sp, #4
 8003e7e:	4668      	mov	r0, sp
 8003e80:	f7ff ff72 	bl	8003d68 <bme680_set_regs>
 8003e84:	e7e0      	b.n	8003e48 <set_gas_config+0x22>

08003e86 <bme680_soft_reset>:
{
 8003e86:	b530      	push	{r4, r5, lr}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	0005      	movs	r5, r0
    uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8003e8c:	466b      	mov	r3, sp
 8003e8e:	22e0      	movs	r2, #224	; 0xe0
 8003e90:	71da      	strb	r2, [r3, #7]
    uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8003e92:	466b      	mov	r3, sp
 8003e94:	3a2a      	subs	r2, #42	; 0x2a
 8003e96:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
 8003e98:	f7ff fd4b 	bl	8003932 <null_ptr_check>
 8003e9c:	1e04      	subs	r4, r0, #0
    if (rslt == BME680_OK) {
 8003e9e:	d104      	bne.n	8003eaa <bme680_soft_reset+0x24>
        if (dev->intf == BME680_SPI_INTF)
 8003ea0:	78ab      	ldrb	r3, [r5, #2]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <bme680_soft_reset+0x2a>
        if (rslt == BME680_OK) {
 8003ea6:	2c00      	cmp	r4, #0
 8003ea8:	d007      	beq.n	8003eba <bme680_soft_reset+0x34>
}
 8003eaa:	0020      	movs	r0, r4
 8003eac:	b003      	add	sp, #12
 8003eae:	bd30      	pop	{r4, r5, pc}
            rslt = get_mem_page(dev);
 8003eb0:	0028      	movs	r0, r5
 8003eb2:	f7ff fd98 	bl	80039e6 <get_mem_page>
 8003eb6:	0004      	movs	r4, r0
 8003eb8:	e7f5      	b.n	8003ea6 <bme680_soft_reset+0x20>
            rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003eba:	002b      	movs	r3, r5
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4669      	mov	r1, sp
 8003ec0:	3106      	adds	r1, #6
 8003ec2:	4668      	mov	r0, sp
 8003ec4:	3007      	adds	r0, #7
 8003ec6:	f7ff ff4f 	bl	8003d68 <bme680_set_regs>
 8003eca:	0004      	movs	r4, r0
            dev->delay_ms(BME680_RESET_PERIOD);
 8003ecc:	200a      	movs	r0, #10
 8003ece:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003ed0:	4798      	blx	r3
            if (rslt == BME680_OK) {
 8003ed2:	2c00      	cmp	r4, #0
 8003ed4:	d1e9      	bne.n	8003eaa <bme680_soft_reset+0x24>
                if (dev->intf == BME680_SPI_INTF)
 8003ed6:	78ab      	ldrb	r3, [r5, #2]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <bme680_soft_reset+0x24>
                    rslt = get_mem_page(dev);
 8003edc:	0028      	movs	r0, r5
 8003ede:	f7ff fd82 	bl	80039e6 <get_mem_page>
 8003ee2:	0004      	movs	r4, r0
 8003ee4:	e7e1      	b.n	8003eaa <bme680_soft_reset+0x24>

08003ee6 <bme680_init>:
{
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	0004      	movs	r4, r0
    rslt = null_ptr_check(dev);
 8003eea:	f7ff fd22 	bl	8003932 <null_ptr_check>
    if (rslt == BME680_OK) {
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d000      	beq.n	8003ef4 <bme680_init+0xe>
}
 8003ef2:	bd10      	pop	{r4, pc}
        rslt = bme680_soft_reset(dev);
 8003ef4:	0020      	movs	r0, r4
 8003ef6:	f7ff ffc6 	bl	8003e86 <bme680_soft_reset>
        if (rslt == BME680_OK) {
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d1f9      	bne.n	8003ef2 <bme680_init+0xc>
            rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8003efe:	0023      	movs	r3, r4
 8003f00:	2201      	movs	r2, #1
 8003f02:	0021      	movs	r1, r4
 8003f04:	30d0      	adds	r0, #208	; 0xd0
 8003f06:	f7ff fdc4 	bl	8003a92 <bme680_get_regs>
            if (rslt == BME680_OK) {
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d1f1      	bne.n	8003ef2 <bme680_init+0xc>
                if (dev->chip_id == BME680_CHIP_ID) {
 8003f0e:	7823      	ldrb	r3, [r4, #0]
 8003f10:	2b61      	cmp	r3, #97	; 0x61
 8003f12:	d103      	bne.n	8003f1c <bme680_init+0x36>
                    rslt = get_calib_data(dev);
 8003f14:	0020      	movs	r0, r4
 8003f16:	f7ff fde7 	bl	8003ae8 <get_calib_data>
 8003f1a:	e7ea      	b.n	8003ef2 <bme680_init+0xc>
                    rslt = BME680_E_DEV_NOT_FOUND;
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	4240      	negs	r0, r0
 8003f20:	e7e7      	b.n	8003ef2 <bme680_init+0xc>

08003f22 <bme680_set_sensor_mode>:
{
 8003f22:	b570      	push	{r4, r5, r6, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	0005      	movs	r5, r0
    uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8003f28:	466b      	mov	r3, sp
 8003f2a:	2274      	movs	r2, #116	; 0x74
 8003f2c:	719a      	strb	r2, [r3, #6]
    rslt = null_ptr_check(dev);
 8003f2e:	f7ff fd00 	bl	8003932 <null_ptr_check>
 8003f32:	1e04      	subs	r4, r0, #0
    if (rslt == BME680_OK) {
 8003f34:	d133      	bne.n	8003f9e <bme680_set_sensor_mode+0x7c>
    uint8_t pow_mode = 0;
 8003f36:	2600      	movs	r6, #0
 8003f38:	e001      	b.n	8003f3e <bme680_set_sensor_mode+0x1c>
        } while (pow_mode != BME680_SLEEP_MODE);
 8003f3a:	2e00      	cmp	r6, #0
 8003f3c:	d01f      	beq.n	8003f7e <bme680_set_sensor_mode+0x5c>
            rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 8003f3e:	002b      	movs	r3, r5
 8003f40:	2201      	movs	r2, #1
 8003f42:	4669      	mov	r1, sp
 8003f44:	3107      	adds	r1, #7
 8003f46:	2074      	movs	r0, #116	; 0x74
 8003f48:	f7ff fda3 	bl	8003a92 <bme680_get_regs>
 8003f4c:	1e04      	subs	r4, r0, #0
            if (rslt == BME680_OK) {
 8003f4e:	d1f4      	bne.n	8003f3a <bme680_set_sensor_mode+0x18>
                pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 8003f50:	466b      	mov	r3, sp
 8003f52:	3307      	adds	r3, #7
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2203      	movs	r2, #3
 8003f58:	0016      	movs	r6, r2
 8003f5a:	401e      	ands	r6, r3
                if (pow_mode != BME680_SLEEP_MODE) {
 8003f5c:	421a      	tst	r2, r3
 8003f5e:	d0ec      	beq.n	8003f3a <bme680_set_sensor_mode+0x18>
                    tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8003f60:	4393      	bics	r3, r2
 8003f62:	466a      	mov	r2, sp
 8003f64:	1dd1      	adds	r1, r2, #7
 8003f66:	700b      	strb	r3, [r1, #0]
                    rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003f68:	002b      	movs	r3, r5
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	4668      	mov	r0, sp
 8003f6e:	3006      	adds	r0, #6
 8003f70:	f7ff fefa 	bl	8003d68 <bme680_set_regs>
 8003f74:	0004      	movs	r4, r0
                    dev->delay_ms(BME680_POLL_PERIOD_MS);
 8003f76:	200a      	movs	r0, #10
 8003f78:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003f7a:	4798      	blx	r3
 8003f7c:	e7dd      	b.n	8003f3a <bme680_set_sensor_mode+0x18>
        if (dev->power_mode != BME680_SLEEP_MODE) {
 8003f7e:	2344      	movs	r3, #68	; 0x44
 8003f80:	5cea      	ldrb	r2, [r5, r3]
 8003f82:	2a00      	cmp	r2, #0
 8003f84:	d00b      	beq.n	8003f9e <bme680_set_sensor_mode+0x7c>
            tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8003f86:	466b      	mov	r3, sp
 8003f88:	1dd9      	adds	r1, r3, #7
 8003f8a:	79db      	ldrb	r3, [r3, #7]
 8003f8c:	2003      	movs	r0, #3
 8003f8e:	4383      	bics	r3, r0
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	b252      	sxtb	r2, r2
 8003f94:	4002      	ands	r2, r0
 8003f96:	4313      	orrs	r3, r2
 8003f98:	700b      	strb	r3, [r1, #0]
            if (rslt == BME680_OK)
 8003f9a:	2c00      	cmp	r4, #0
 8003f9c:	d002      	beq.n	8003fa4 <bme680_set_sensor_mode+0x82>
}
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
                rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003fa4:	002b      	movs	r3, r5
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4669      	mov	r1, sp
 8003faa:	3107      	adds	r1, #7
 8003fac:	4668      	mov	r0, sp
 8003fae:	3006      	adds	r0, #6
 8003fb0:	f7ff feda 	bl	8003d68 <bme680_set_regs>
 8003fb4:	0004      	movs	r4, r0
 8003fb6:	e7f2      	b.n	8003f9e <bme680_set_sensor_mode+0x7c>

08003fb8 <bme680_set_sensor_settings>:
{
 8003fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fba:	46c6      	mov	lr, r8
 8003fbc:	b500      	push	{lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	0005      	movs	r5, r0
 8003fc2:	000c      	movs	r4, r1
    uint8_t data = 0;
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	230f      	movs	r3, #15
 8003fc8:	446b      	add	r3, sp
 8003fca:	701a      	strb	r2, [r3, #0]
    uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003fcc:	9202      	str	r2, [sp, #8]
 8003fce:	ab02      	add	r3, sp, #8
 8003fd0:	809a      	strh	r2, [r3, #4]
    uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8003fd2:	9200      	str	r2, [sp, #0]
 8003fd4:	466b      	mov	r3, sp
 8003fd6:	809a      	strh	r2, [r3, #4]
    uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8003fd8:	2344      	movs	r3, #68	; 0x44
 8003fda:	5ccf      	ldrb	r7, [r1, r3]
    rslt = null_ptr_check(dev);
 8003fdc:	0008      	movs	r0, r1
 8003fde:	f7ff fca8 	bl	8003932 <null_ptr_check>
    if (rslt == BME680_OK) {
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d119      	bne.n	800401a <bme680_set_sensor_settings+0x62>
        if (desired_settings & BME680_GAS_MEAS_SEL)
 8003fe6:	072b      	lsls	r3, r5, #28
 8003fe8:	d41b      	bmi.n	8004022 <bme680_set_sensor_settings+0x6a>
        dev->power_mode = BME680_SLEEP_MODE;
 8003fea:	2344      	movs	r3, #68	; 0x44
 8003fec:	2200      	movs	r2, #0
 8003fee:	54e2      	strb	r2, [r4, r3]
        if (rslt == BME680_OK)
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d01a      	beq.n	800402a <bme680_set_sensor_settings+0x72>
        if (desired_settings & BME680_FILTER_SEL) {
 8003ff4:	06eb      	lsls	r3, r5, #27
 8003ff6:	d41c      	bmi.n	8004032 <bme680_set_sensor_settings+0x7a>
    uint8_t count = 0;
 8003ff8:	2600      	movs	r6, #0
        if (desired_settings & BME680_HCNTRL_SEL) {
 8003ffa:	06ab      	lsls	r3, r5, #26
 8003ffc:	d43f      	bmi.n	800407e <bme680_set_sensor_settings+0xc6>
        if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8003ffe:	07ab      	lsls	r3, r5, #30
 8004000:	d167      	bne.n	80040d2 <bme680_set_sensor_settings+0x11a>
        if (desired_settings & BME680_OSH_SEL) {
 8004002:	076b      	lsls	r3, r5, #29
 8004004:	d500      	bpl.n	8004008 <bme680_set_sensor_settings+0x50>
 8004006:	e09f      	b.n	8004148 <bme680_set_sensor_settings+0x190>
        if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8004008:	23c0      	movs	r3, #192	; 0xc0
 800400a:	422b      	tst	r3, r5
 800400c:	d000      	beq.n	8004010 <bme680_set_sensor_settings+0x58>
 800400e:	e0c5      	b.n	800419c <bme680_set_sensor_settings+0x1e4>
        if (rslt == BME680_OK)
 8004010:	2800      	cmp	r0, #0
 8004012:	d100      	bne.n	8004016 <bme680_set_sensor_settings+0x5e>
 8004014:	e109      	b.n	800422a <bme680_set_sensor_settings+0x272>
        dev->power_mode = intended_power_mode;
 8004016:	2344      	movs	r3, #68	; 0x44
 8004018:	54e7      	strb	r7, [r4, r3]
}
 800401a:	b004      	add	sp, #16
 800401c:	bc80      	pop	{r7}
 800401e:	46b8      	mov	r8, r7
 8004020:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rslt = set_gas_config(dev);
 8004022:	0020      	movs	r0, r4
 8004024:	f7ff feff 	bl	8003e26 <set_gas_config>
 8004028:	e7df      	b.n	8003fea <bme680_set_sensor_settings+0x32>
            rslt = bme680_set_sensor_mode(dev);
 800402a:	0020      	movs	r0, r4
 800402c:	f7ff ff79 	bl	8003f22 <bme680_set_sensor_mode>
 8004030:	e7e0      	b.n	8003ff4 <bme680_set_sensor_settings+0x3c>
            rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8004032:	0023      	movs	r3, r4
 8004034:	2207      	movs	r2, #7
 8004036:	2100      	movs	r1, #0
 8004038:	0020      	movs	r0, r4
 800403a:	303b      	adds	r0, #59	; 0x3b
 800403c:	f7ff fc5d 	bl	80038fa <boundary_check>
            if (rslt == BME680_OK)
 8004040:	2800      	cmp	r0, #0
 8004042:	d014      	beq.n	800406e <bme680_set_sensor_settings+0xb6>
                data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8004044:	220f      	movs	r2, #15
 8004046:	446a      	add	r2, sp
 8004048:	7813      	ldrb	r3, [r2, #0]
 800404a:	211c      	movs	r1, #28
 800404c:	438b      	bics	r3, r1
 800404e:	b25b      	sxtb	r3, r3
 8004050:	311f      	adds	r1, #31
 8004052:	5c66      	ldrb	r6, [r4, r1]
 8004054:	00b6      	lsls	r6, r6, #2
 8004056:	391f      	subs	r1, #31
 8004058:	4031      	ands	r1, r6
 800405a:	430b      	orrs	r3, r1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	7013      	strb	r3, [r2, #0]
            reg_array[count] = reg_addr; /* Append configuration */
 8004060:	aa02      	add	r2, sp, #8
 8004062:	2175      	movs	r1, #117	; 0x75
 8004064:	7011      	strb	r1, [r2, #0]
            data_array[count] = data;
 8004066:	466a      	mov	r2, sp
 8004068:	7013      	strb	r3, [r2, #0]
            count++;
 800406a:	2601      	movs	r6, #1
 800406c:	e7c5      	b.n	8003ffa <bme680_set_sensor_settings+0x42>
                rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800406e:	0023      	movs	r3, r4
 8004070:	2201      	movs	r2, #1
 8004072:	210f      	movs	r1, #15
 8004074:	4469      	add	r1, sp
 8004076:	3075      	adds	r0, #117	; 0x75
 8004078:	f7ff fd0b 	bl	8003a92 <bme680_get_regs>
 800407c:	e7e2      	b.n	8004044 <bme680_set_sensor_settings+0x8c>
            rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 800407e:	0023      	movs	r3, r4
 8004080:	2208      	movs	r2, #8
 8004082:	2100      	movs	r1, #0
 8004084:	0020      	movs	r0, r4
 8004086:	303d      	adds	r0, #61	; 0x3d
 8004088:	f7ff fc37 	bl	80038fa <boundary_check>
            if (rslt == BME680_OK)
 800408c:	2800      	cmp	r0, #0
 800408e:	d018      	beq.n	80040c2 <bme680_set_sensor_settings+0x10a>
            data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8004090:	220f      	movs	r2, #15
 8004092:	446a      	add	r2, sp
 8004094:	7813      	ldrb	r3, [r2, #0]
 8004096:	2108      	movs	r1, #8
 8004098:	438b      	bics	r3, r1
 800409a:	b25b      	sxtb	r3, r3
 800409c:	4698      	mov	r8, r3
 800409e:	3135      	adds	r1, #53	; 0x35
 80040a0:	5661      	ldrsb	r1, [r4, r1]
 80040a2:	468c      	mov	ip, r1
 80040a4:	2108      	movs	r1, #8
 80040a6:	4663      	mov	r3, ip
 80040a8:	4019      	ands	r1, r3
 80040aa:	4643      	mov	r3, r8
 80040ac:	430b      	orrs	r3, r1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	7013      	strb	r3, [r2, #0]
            reg_array[count] = reg_addr; /* Append configuration */
 80040b2:	aa02      	add	r2, sp, #8
 80040b4:	2170      	movs	r1, #112	; 0x70
 80040b6:	5591      	strb	r1, [r2, r6]
            data_array[count] = data;
 80040b8:	466a      	mov	r2, sp
 80040ba:	5593      	strb	r3, [r2, r6]
            count++;
 80040bc:	3601      	adds	r6, #1
 80040be:	b2f6      	uxtb	r6, r6
 80040c0:	e79d      	b.n	8003ffe <bme680_set_sensor_settings+0x46>
                rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80040c2:	0023      	movs	r3, r4
 80040c4:	2201      	movs	r2, #1
 80040c6:	210f      	movs	r1, #15
 80040c8:	4469      	add	r1, sp
 80040ca:	3070      	adds	r0, #112	; 0x70
 80040cc:	f7ff fce1 	bl	8003a92 <bme680_get_regs>
 80040d0:	e7de      	b.n	8004090 <bme680_set_sensor_settings+0xd8>
            rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80040d2:	0023      	movs	r3, r4
 80040d4:	2205      	movs	r2, #5
 80040d6:	2100      	movs	r1, #0
 80040d8:	0020      	movs	r0, r4
 80040da:	3039      	adds	r0, #57	; 0x39
 80040dc:	f7ff fc0d 	bl	80038fa <boundary_check>
            if (rslt == BME680_OK)
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d029      	beq.n	8004138 <bme680_set_sensor_settings+0x180>
            if (desired_settings & BME680_OST_SEL)
 80040e4:	07eb      	lsls	r3, r5, #31
 80040e6:	d509      	bpl.n	80040fc <bme680_set_sensor_settings+0x144>
                data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80040e8:	220f      	movs	r2, #15
 80040ea:	446a      	add	r2, sp
 80040ec:	7811      	ldrb	r1, [r2, #0]
 80040ee:	231f      	movs	r3, #31
 80040f0:	400b      	ands	r3, r1
 80040f2:	2139      	movs	r1, #57	; 0x39
 80040f4:	5c61      	ldrb	r1, [r4, r1]
 80040f6:	0149      	lsls	r1, r1, #5
 80040f8:	430b      	orrs	r3, r1
 80040fa:	7013      	strb	r3, [r2, #0]
            if (desired_settings & BME680_OSP_SEL)
 80040fc:	07ab      	lsls	r3, r5, #30
 80040fe:	d510      	bpl.n	8004122 <bme680_set_sensor_settings+0x16a>
                data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 8004100:	220f      	movs	r2, #15
 8004102:	446a      	add	r2, sp
 8004104:	7813      	ldrb	r3, [r2, #0]
 8004106:	211c      	movs	r1, #28
 8004108:	438b      	bics	r3, r1
 800410a:	b25b      	sxtb	r3, r3
 800410c:	4698      	mov	r8, r3
 800410e:	311e      	adds	r1, #30
 8004110:	5c61      	ldrb	r1, [r4, r1]
 8004112:	0089      	lsls	r1, r1, #2
 8004114:	468c      	mov	ip, r1
 8004116:	211c      	movs	r1, #28
 8004118:	4663      	mov	r3, ip
 800411a:	4019      	ands	r1, r3
 800411c:	4643      	mov	r3, r8
 800411e:	430b      	orrs	r3, r1
 8004120:	7013      	strb	r3, [r2, #0]
            reg_array[count] = reg_addr;
 8004122:	ab02      	add	r3, sp, #8
 8004124:	2274      	movs	r2, #116	; 0x74
 8004126:	559a      	strb	r2, [r3, r6]
            data_array[count] = data;
 8004128:	230f      	movs	r3, #15
 800412a:	446b      	add	r3, sp
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	466a      	mov	r2, sp
 8004130:	5593      	strb	r3, [r2, r6]
            count++;
 8004132:	3601      	adds	r6, #1
 8004134:	b2f6      	uxtb	r6, r6
 8004136:	e764      	b.n	8004002 <bme680_set_sensor_settings+0x4a>
                rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8004138:	0023      	movs	r3, r4
 800413a:	2201      	movs	r2, #1
 800413c:	210f      	movs	r1, #15
 800413e:	4469      	add	r1, sp
 8004140:	3074      	adds	r0, #116	; 0x74
 8004142:	f7ff fca6 	bl	8003a92 <bme680_get_regs>
 8004146:	e7cd      	b.n	80040e4 <bme680_set_sensor_settings+0x12c>
            rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 8004148:	0020      	movs	r0, r4
 800414a:	3038      	adds	r0, #56	; 0x38
 800414c:	0023      	movs	r3, r4
 800414e:	2205      	movs	r2, #5
 8004150:	2100      	movs	r1, #0
 8004152:	f7ff fbd2 	bl	80038fa <boundary_check>
            if (rslt == BME680_OK)
 8004156:	2800      	cmp	r0, #0
 8004158:	d018      	beq.n	800418c <bme680_set_sensor_settings+0x1d4>
            data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 800415a:	220f      	movs	r2, #15
 800415c:	446a      	add	r2, sp
 800415e:	7813      	ldrb	r3, [r2, #0]
 8004160:	2107      	movs	r1, #7
 8004162:	438b      	bics	r3, r1
 8004164:	b25b      	sxtb	r3, r3
 8004166:	4698      	mov	r8, r3
 8004168:	3131      	adds	r1, #49	; 0x31
 800416a:	5661      	ldrsb	r1, [r4, r1]
 800416c:	468c      	mov	ip, r1
 800416e:	2107      	movs	r1, #7
 8004170:	4663      	mov	r3, ip
 8004172:	4019      	ands	r1, r3
 8004174:	4643      	mov	r3, r8
 8004176:	430b      	orrs	r3, r1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	7013      	strb	r3, [r2, #0]
            reg_array[count] = reg_addr; /* Append configuration */
 800417c:	aa02      	add	r2, sp, #8
 800417e:	2172      	movs	r1, #114	; 0x72
 8004180:	5591      	strb	r1, [r2, r6]
            data_array[count] = data;
 8004182:	466a      	mov	r2, sp
 8004184:	5593      	strb	r3, [r2, r6]
            count++;
 8004186:	3601      	adds	r6, #1
 8004188:	b2f6      	uxtb	r6, r6
 800418a:	e73d      	b.n	8004008 <bme680_set_sensor_settings+0x50>
                rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800418c:	0023      	movs	r3, r4
 800418e:	2201      	movs	r2, #1
 8004190:	210f      	movs	r1, #15
 8004192:	4469      	add	r1, sp
 8004194:	3072      	adds	r0, #114	; 0x72
 8004196:	f7ff fc7c 	bl	8003a92 <bme680_get_regs>
 800419a:	e7de      	b.n	800415a <bme680_set_sensor_settings+0x1a2>
            rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 800419c:	0023      	movs	r3, r4
 800419e:	2201      	movs	r2, #1
 80041a0:	2100      	movs	r1, #0
 80041a2:	0020      	movs	r0, r4
 80041a4:	303e      	adds	r0, #62	; 0x3e
 80041a6:	f7ff fba8 	bl	80038fa <boundary_check>
            if (rslt == BME680_OK) {
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d02d      	beq.n	800420a <bme680_set_sensor_settings+0x252>
            if (rslt == BME680_OK)
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d033      	beq.n	800421a <bme680_set_sensor_settings+0x262>
            if (desired_settings & BME680_RUN_GAS_SEL)
 80041b2:	066b      	lsls	r3, r5, #25
 80041b4:	d510      	bpl.n	80041d8 <bme680_set_sensor_settings+0x220>
                data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 80041b6:	220f      	movs	r2, #15
 80041b8:	446a      	add	r2, sp
 80041ba:	7813      	ldrb	r3, [r2, #0]
 80041bc:	2110      	movs	r1, #16
 80041be:	438b      	bics	r3, r1
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	4698      	mov	r8, r3
 80041c4:	312e      	adds	r1, #46	; 0x2e
 80041c6:	5c61      	ldrb	r1, [r4, r1]
 80041c8:	0109      	lsls	r1, r1, #4
 80041ca:	468c      	mov	ip, r1
 80041cc:	2110      	movs	r1, #16
 80041ce:	4663      	mov	r3, ip
 80041d0:	4019      	ands	r1, r3
 80041d2:	4643      	mov	r3, r8
 80041d4:	430b      	orrs	r3, r1
 80041d6:	7013      	strb	r3, [r2, #0]
            if (desired_settings & BME680_NBCONV_SEL)
 80041d8:	062b      	lsls	r3, r5, #24
 80041da:	d50b      	bpl.n	80041f4 <bme680_set_sensor_settings+0x23c>
                data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80041dc:	220f      	movs	r2, #15
 80041de:	446a      	add	r2, sp
 80041e0:	7813      	ldrb	r3, [r2, #0]
 80041e2:	210f      	movs	r1, #15
 80041e4:	438b      	bics	r3, r1
 80041e6:	b25b      	sxtb	r3, r3
 80041e8:	312d      	adds	r1, #45	; 0x2d
 80041ea:	5665      	ldrsb	r5, [r4, r1]
 80041ec:	392d      	subs	r1, #45	; 0x2d
 80041ee:	4029      	ands	r1, r5
 80041f0:	430b      	orrs	r3, r1
 80041f2:	7013      	strb	r3, [r2, #0]
            reg_array[count] = reg_addr; /* Append configuration */
 80041f4:	ab02      	add	r3, sp, #8
 80041f6:	2271      	movs	r2, #113	; 0x71
 80041f8:	559a      	strb	r2, [r3, r6]
            data_array[count] = data;
 80041fa:	230f      	movs	r3, #15
 80041fc:	446b      	add	r3, sp
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	466a      	mov	r2, sp
 8004202:	5593      	strb	r3, [r2, r6]
            count++;
 8004204:	3601      	adds	r6, #1
 8004206:	b2f6      	uxtb	r6, r6
 8004208:	e702      	b.n	8004010 <bme680_set_sensor_settings+0x58>
                rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 800420a:	0020      	movs	r0, r4
 800420c:	303c      	adds	r0, #60	; 0x3c
 800420e:	0023      	movs	r3, r4
 8004210:	220a      	movs	r2, #10
 8004212:	2100      	movs	r1, #0
 8004214:	f7ff fb71 	bl	80038fa <boundary_check>
 8004218:	e7c9      	b.n	80041ae <bme680_set_sensor_settings+0x1f6>
                rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 800421a:	0023      	movs	r3, r4
 800421c:	2201      	movs	r2, #1
 800421e:	210f      	movs	r1, #15
 8004220:	4469      	add	r1, sp
 8004222:	3071      	adds	r0, #113	; 0x71
 8004224:	f7ff fc35 	bl	8003a92 <bme680_get_regs>
 8004228:	e7c3      	b.n	80041b2 <bme680_set_sensor_settings+0x1fa>
            rslt = bme680_set_regs(reg_array, data_array, count, dev);
 800422a:	0023      	movs	r3, r4
 800422c:	0032      	movs	r2, r6
 800422e:	4669      	mov	r1, sp
 8004230:	a802      	add	r0, sp, #8
 8004232:	f7ff fd99 	bl	8003d68 <bme680_set_regs>
 8004236:	e6ee      	b.n	8004016 <bme680_set_sensor_settings+0x5e>

08004238 <bme680_get_profile_dur>:
{
 8004238:	b530      	push	{r4, r5, lr}
 800423a:	b083      	sub	sp, #12
 800423c:	0005      	movs	r5, r0
 800423e:	000c      	movs	r4, r1
    uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8004240:	4b13      	ldr	r3, [pc, #76]	; (8004290 <bme680_get_profile_dur+0x58>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	9200      	str	r2, [sp, #0]
 8004246:	889b      	ldrh	r3, [r3, #4]
 8004248:	466a      	mov	r2, sp
 800424a:	8093      	strh	r3, [r2, #4]
    meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 800424c:	2339      	movs	r3, #57	; 0x39
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	5cd0      	ldrb	r0, [r2, r3]
    meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8004252:	233a      	movs	r3, #58	; 0x3a
 8004254:	5ccb      	ldrb	r3, [r1, r3]
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	181b      	adds	r3, r3, r0
    meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 800425a:	2238      	movs	r2, #56	; 0x38
 800425c:	5c8a      	ldrb	r2, [r1, r2]
 800425e:	4669      	mov	r1, sp
 8004260:	5c88      	ldrb	r0, [r1, r2]
 8004262:	18c3      	adds	r3, r0, r3
    tph_dur = meas_cycles * UINT32_C(1963);
 8004264:	480b      	ldr	r0, [pc, #44]	; (8004294 <bme680_get_profile_dur+0x5c>)
 8004266:	4358      	muls	r0, r3
    tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8004268:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <bme680_get_profile_dur+0x60>)
 800426a:	469c      	mov	ip, r3
 800426c:	4460      	add	r0, ip
    tph_dur /= UINT32_C(1000); /* Convert to ms */
 800426e:	21fa      	movs	r1, #250	; 0xfa
 8004270:	0089      	lsls	r1, r1, #2
 8004272:	f7fb ff6d 	bl	8000150 <__udivsi3>
    tph_dur += UINT32_C(1); /* Wake up duration of 1ms */
 8004276:	3001      	adds	r0, #1
    *duration = (uint16_t) tph_dur;
 8004278:	b283      	uxth	r3, r0
 800427a:	802b      	strh	r3, [r5, #0]
    if (dev->gas_sett.run_gas) {
 800427c:	223e      	movs	r2, #62	; 0x3e
 800427e:	5ca2      	ldrb	r2, [r4, r2]
 8004280:	2a00      	cmp	r2, #0
 8004282:	d003      	beq.n	800428c <bme680_get_profile_dur+0x54>
        *duration += dev->gas_sett.heatr_dur;
 8004284:	2242      	movs	r2, #66	; 0x42
 8004286:	5aa0      	ldrh	r0, [r4, r2]
 8004288:	181b      	adds	r3, r3, r0
 800428a:	802b      	strh	r3, [r5, #0]
}
 800428c:	b003      	add	sp, #12
 800428e:	bd30      	pop	{r4, r5, pc}
 8004290:	0800d858 	.word	0x0800d858
 8004294:	000007ab 	.word	0x000007ab
 8004298:	000012b9 	.word	0x000012b9

0800429c <bme680_get_sensor_data>:
{
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	0004      	movs	r4, r0
 80042a0:	000d      	movs	r5, r1
    rslt = null_ptr_check(dev);
 80042a2:	0008      	movs	r0, r1
 80042a4:	f7ff fb45 	bl	8003932 <null_ptr_check>
    if (rslt == BME680_OK) {
 80042a8:	2800      	cmp	r0, #0
 80042aa:	d000      	beq.n	80042ae <bme680_get_sensor_data+0x12>
}
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
        rslt = read_field_data(data, dev);
 80042ae:	0029      	movs	r1, r5
 80042b0:	0020      	movs	r0, r4
 80042b2:	f7ff fcca 	bl	8003c4a <read_field_data>
        if (rslt == BME680_OK) {
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d1f8      	bne.n	80042ac <bme680_get_sensor_data+0x10>
            if (data->status & BME680_NEW_DATA_MSK)
 80042ba:	2300      	movs	r3, #0
 80042bc:	56e3      	ldrsb	r3, [r4, r3]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	db03      	blt.n	80042ca <bme680_get_sensor_data+0x2e>
                dev->new_fields = 0;
 80042c2:	2345      	movs	r3, #69	; 0x45
 80042c4:	2200      	movs	r2, #0
 80042c6:	54ea      	strb	r2, [r5, r3]
 80042c8:	e7f0      	b.n	80042ac <bme680_get_sensor_data+0x10>
                dev->new_fields = 1;
 80042ca:	2345      	movs	r3, #69	; 0x45
 80042cc:	2201      	movs	r2, #1
 80042ce:	54ea      	strb	r2, [r5, r3]
 80042d0:	e7ec      	b.n	80042ac <bme680_get_sensor_data+0x10>
	...

080042d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d6:	46ce      	mov	lr, r9
 80042d8:	4647      	mov	r7, r8
 80042da:	b580      	push	{r7, lr}
 80042dc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042de:	2214      	movs	r2, #20
 80042e0:	2100      	movs	r1, #0
 80042e2:	a803      	add	r0, sp, #12
 80042e4:	f006 fc07 	bl	800aaf6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e8:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <MX_GPIO_Init+0xe0>)
 80042ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042ec:	2204      	movs	r2, #4
 80042ee:	4311      	orrs	r1, r2
 80042f0:	6359      	str	r1, [r3, #52]	; 0x34
 80042f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042f4:	400a      	ands	r2, r1
 80042f6:	9200      	str	r2, [sp, #0]
 80042f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fc:	2501      	movs	r5, #1
 80042fe:	432a      	orrs	r2, r5
 8004300:	635a      	str	r2, [r3, #52]	; 0x34
 8004302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004304:	402a      	ands	r2, r5
 8004306:	9201      	str	r2, [sp, #4]
 8004308:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800430a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800430c:	2202      	movs	r2, #2
 800430e:	4311      	orrs	r1, r2
 8004310:	6359      	str	r1, [r3, #52]	; 0x34
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	401a      	ands	r2, r3
 8004316:	9202      	str	r2, [sp, #8]
 8004318:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_0_Pin|S0_SENS_Pin, GPIO_PIN_RESET);
 800431a:	4c27      	ldr	r4, [pc, #156]	; (80043b8 <MX_GPIO_Init+0xe4>)
 800431c:	4b27      	ldr	r3, [pc, #156]	; (80043bc <MX_GPIO_Init+0xe8>)
 800431e:	4699      	mov	r9, r3
 8004320:	2200      	movs	r2, #0
 8004322:	0021      	movs	r1, r4
 8004324:	0018      	movs	r0, r3
 8004326:	f002 fc4d 	bl	8006bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ROPE_CUT_Pin|BUZZER_Pin|MUX_EN_1_Pin|MUX_EN_0_Pin
 800432a:	23cf      	movs	r3, #207	; 0xcf
 800432c:	015b      	lsls	r3, r3, #5
 800432e:	4698      	mov	r8, r3
 8004330:	27a0      	movs	r7, #160	; 0xa0
 8004332:	05ff      	lsls	r7, r7, #23
 8004334:	2200      	movs	r2, #0
 8004336:	0019      	movs	r1, r3
 8004338:	0038      	movs	r0, r7
 800433a:	f002 fc43 	bl	8006bc4 <HAL_GPIO_WritePin>
                          |S1_SENS_Pin|S2_SENS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S1_CAM_Pin|S0_CAM_Pin, GPIO_PIN_RESET);
 800433e:	4e20      	ldr	r6, [pc, #128]	; (80043c0 <MX_GPIO_Init+0xec>)
 8004340:	2200      	movs	r2, #0
 8004342:	2103      	movs	r1, #3
 8004344:	0030      	movs	r0, r6
 8004346:	f002 fc3d 	bl	8006bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_0_Pin S0_SENS_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|S0_SENS_Pin;
 800434a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800434c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	2400      	movs	r4, #0
 8004350:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004352:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004354:	a903      	add	r1, sp, #12
 8004356:	4648      	mov	r0, r9
 8004358:	f002 fb78 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROPE_CUT_Pin BUZZER_Pin MUX_EN_1_Pin MUX_EN_0_Pin
                           S1_SENS_Pin S2_SENS_Pin */
  GPIO_InitStruct.Pin = ROPE_CUT_Pin|BUZZER_Pin|MUX_EN_1_Pin|MUX_EN_0_Pin
 800435c:	4643      	mov	r3, r8
 800435e:	9303      	str	r3, [sp, #12]
                          |S1_SENS_Pin|S2_SENS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004360:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004364:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004366:	a903      	add	r1, sp, #12
 8004368:	0038      	movs	r0, r7
 800436a:	f002 fb6f 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_CAM_Pin S0_CAM_Pin */
  GPIO_InitStruct.Pin = S1_CAM_Pin|S0_CAM_Pin;
 800436e:	2303      	movs	r3, #3
 8004370:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004372:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004374:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004376:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004378:	a903      	add	r1, sp, #12
 800437a:	0030      	movs	r0, r6
 800437c:	f002 fb66 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_HB_0_Pin */
  GPIO_InitStruct.Pin = CAM_HB_0_Pin;
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004386:	2588      	movs	r5, #136	; 0x88
 8004388:	036d      	lsls	r5, r5, #13
 800438a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CAM_HB_0_GPIO_Port, &GPIO_InitStruct);
 800438e:	a903      	add	r1, sp, #12
 8004390:	0038      	movs	r0, r7
 8004392:	f002 fb5b 	bl	8006a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAM_HB_1_Pin */
  GPIO_InitStruct.Pin = CAM_HB_1_Pin;
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800439c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CAM_HB_1_GPIO_Port, &GPIO_InitStruct);
 80043a0:	a903      	add	r1, sp, #12
 80043a2:	0030      	movs	r0, r6
 80043a4:	f002 fb52 	bl	8006a4c <HAL_GPIO_Init>

}
 80043a8:	b009      	add	sp, #36	; 0x24
 80043aa:	bcc0      	pop	{r6, r7}
 80043ac:	46b9      	mov	r9, r7
 80043ae:	46b0      	mov	r8, r6
 80043b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	40021000 	.word	0x40021000
 80043b8:	00008040 	.word	0x00008040
 80043bc:	50000800 	.word	0x50000800
 80043c0:	50000400 	.word	0x50000400

080043c4 <MX_DMA_Init>:
{
 80043c4:	b500      	push	{lr}
 80043c6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043c8:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <MX_DMA_Init+0x2c>)
 80043ca:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80043cc:	2301      	movs	r3, #1
 80043ce:	4319      	orrs	r1, r3
 80043d0:	6391      	str	r1, [r2, #56]	; 0x38
 80043d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043d4:	4013      	ands	r3, r2
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80043da:	2200      	movs	r2, #0
 80043dc:	2100      	movs	r1, #0
 80043de:	2009      	movs	r0, #9
 80043e0:	f002 f90a 	bl	80065f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80043e4:	2009      	movs	r0, #9
 80043e6:	f002 f937 	bl	8006658 <HAL_NVIC_EnableIRQ>
}
 80043ea:	b003      	add	sp, #12
 80043ec:	bd00      	pop	{pc}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	40021000 	.word	0x40021000

080043f4 <__io_putchar>:
int __io_putchar(int ch){
 80043f4:	b500      	push	{lr}
 80043f6:	b083      	sub	sp, #12
 80043f8:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80043fa:	4b04      	ldr	r3, [pc, #16]	; (800440c <__io_putchar+0x18>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	a901      	add	r1, sp, #4
 8004400:	4803      	ldr	r0, [pc, #12]	; (8004410 <__io_putchar+0x1c>)
 8004402:	f004 fcd3 	bl	8008dac <HAL_UART_Transmit>
}
 8004406:	9801      	ldr	r0, [sp, #4]
 8004408:	b003      	add	sp, #12
 800440a:	bd00      	pop	{pc}
 800440c:	0000ffff 	.word	0x0000ffff
 8004410:	20000fb0 	.word	0x20000fb0

08004414 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Process half a buffer full of data

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b510      	push	{r4, lr}
 8004416:	0004      	movs	r4, r0
//	}



	// LED flasher
	if (htim == &htim7)
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800441a:	4298      	cmp	r0, r3
 800441c:	d003      	beq.n	8004426 <HAL_TIM_PeriodElapsedCallback+0x12>
//			CAM_START(&CAM_2);
	}


	// Buzzer control
	if (htim == &htim14){
 800441e:	4b10      	ldr	r3, [pc, #64]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004420:	429c      	cmp	r4, r3
 8004422:	d006      	beq.n	8004432 <HAL_TIM_PeriodElapsedCallback+0x1e>
		if((rtc_time.seconds == 30) || (rtc_time.seconds == 0))
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
		else
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
	}
}
 8004424:	bd10      	pop	{r4, pc}
		HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
 8004426:	2180      	movs	r1, #128	; 0x80
 8004428:	0209      	lsls	r1, r1, #8
 800442a:	480e      	ldr	r0, [pc, #56]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800442c:	f002 fbd0 	bl	8006bd0 <HAL_GPIO_TogglePin>
 8004430:	e7f5      	b.n	800441e <HAL_TIM_PeriodElapsedCallback+0xa>
		if((rtc_time.seconds == 30) || (rtc_time.seconds == 0))
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004434:	799b      	ldrb	r3, [r3, #6]
 8004436:	2b1e      	cmp	r3, #30
 8004438:	d001      	beq.n	800443e <HAL_TIM_PeriodElapsedCallback+0x2a>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <HAL_TIM_PeriodElapsedCallback+0x38>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800443e:	20a0      	movs	r0, #160	; 0xa0
 8004440:	2201      	movs	r2, #1
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	05c0      	lsls	r0, r0, #23
 8004446:	f002 fbbd 	bl	8006bc4 <HAL_GPIO_WritePin>
 800444a:	e7eb      	b.n	8004424 <HAL_TIM_PeriodElapsedCallback+0x10>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800444c:	20a0      	movs	r0, #160	; 0xa0
 800444e:	2200      	movs	r2, #0
 8004450:	2140      	movs	r1, #64	; 0x40
 8004452:	05c0      	lsls	r0, r0, #23
 8004454:	f002 fbb6 	bl	8006bc4 <HAL_GPIO_WritePin>
}
 8004458:	e7e4      	b.n	8004424 <HAL_TIM_PeriodElapsedCallback+0x10>
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	20000f64 	.word	0x20000f64
 8004460:	20000e34 	.word	0x20000e34
 8004464:	50000800 	.word	0x50000800
 8004468:	200010e4 	.word	0x200010e4

0800446c <process_adc_buffer>:

void process_adc_buffer(uint16_t *buffer){
 800446c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446e:	46de      	mov	lr, fp
 8004470:	4657      	mov	r7, sl
 8004472:	464e      	mov	r6, r9
 8004474:	4645      	mov	r5, r8
 8004476:	b5e0      	push	{r5, r6, r7, lr}
 8004478:	b083      	sub	sp, #12
 800447a:	0001      	movs	r1, r0

    uint32_t sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0, sum5 = 0;
    for (int i = 0; i < ADC_SAMPLES; ++i){
 800447c:	2200      	movs	r2, #0
    uint32_t sum1 = 0, sum2 = 0, sum3 = 0, sum4 = 0, sum5 = 0;
 800447e:	2700      	movs	r7, #0
 8004480:	2600      	movs	r6, #0
 8004482:	2500      	movs	r5, #0
 8004484:	2400      	movs	r4, #0
 8004486:	2300      	movs	r3, #0
 8004488:	469c      	mov	ip, r3
    for (int i = 0; i < ADC_SAMPLES; ++i){
 800448a:	e016      	b.n	80044ba <process_adc_buffer+0x4e>
        sum1 += buffer[i * 5];
 800448c:	0093      	lsls	r3, r2, #2
 800448e:	1898      	adds	r0, r3, r2
 8004490:	0040      	lsls	r0, r0, #1
 8004492:	5a40      	ldrh	r0, [r0, r1]
 8004494:	4484      	add	ip, r0
        sum2 += buffer[1 + i * 5];
 8004496:	189b      	adds	r3, r3, r2
 8004498:	1c58      	adds	r0, r3, #1
 800449a:	0040      	lsls	r0, r0, #1
 800449c:	5a40      	ldrh	r0, [r0, r1]
 800449e:	1824      	adds	r4, r4, r0
        sum3 += buffer[2 + i * 5];
 80044a0:	1c98      	adds	r0, r3, #2
 80044a2:	0040      	lsls	r0, r0, #1
 80044a4:	5a40      	ldrh	r0, [r0, r1]
 80044a6:	182d      	adds	r5, r5, r0
		sum4 += buffer[3 + i * 5];
 80044a8:	1cd8      	adds	r0, r3, #3
 80044aa:	0040      	lsls	r0, r0, #1
 80044ac:	5a40      	ldrh	r0, [r0, r1]
 80044ae:	1836      	adds	r6, r6, r0
		sum5 += buffer[4 + i * 5];
 80044b0:	3304      	adds	r3, #4
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	5a5b      	ldrh	r3, [r3, r1]
 80044b6:	18ff      	adds	r7, r7, r3
    for (int i = 0; i < ADC_SAMPLES; ++i){
 80044b8:	3201      	adds	r2, #1
 80044ba:	2a4f      	cmp	r2, #79	; 0x4f
 80044bc:	dde6      	ble.n	800448c <process_adc_buffer+0x20>
    }

    temp_avg = sum1 / ADC_SAMPLES;
 80044be:	2150      	movs	r1, #80	; 0x50
 80044c0:	4660      	mov	r0, ip
 80044c2:	f7fb fe45 	bl	8000150 <__udivsi3>
 80044c6:	4680      	mov	r8, r0
 80044c8:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <process_adc_buffer+0x194>)
 80044ca:	8018      	strh	r0, [r3, #0]
    vref_avg = sum2 / ADC_SAMPLES;
 80044cc:	2150      	movs	r1, #80	; 0x50
 80044ce:	0020      	movs	r0, r4
 80044d0:	f7fb fe3e 	bl	8000150 <__udivsi3>
 80044d4:	b284      	uxth	r4, r0
 80044d6:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <process_adc_buffer+0x198>)
 80044d8:	801c      	strh	r4, [r3, #0]
    bat_v = sum3 / ADC_SAMPLES;
 80044da:	2150      	movs	r1, #80	; 0x50
 80044dc:	0028      	movs	r0, r5
 80044de:	f7fb fe37 	bl	8000150 <__udivsi3>
 80044e2:	f7fc ff3b 	bl	800135c <__aeabi_ui2f>
 80044e6:	1c05      	adds	r5, r0, #0
 80044e8:	4b47      	ldr	r3, [pc, #284]	; (8004608 <process_adc_buffer+0x19c>)
 80044ea:	4699      	mov	r9, r3
 80044ec:	6018      	str	r0, [r3, #0]
    v4 = sum4 / ADC_SAMPLES * 0.01;
 80044ee:	2150      	movs	r1, #80	; 0x50
 80044f0:	0030      	movs	r0, r6
 80044f2:	f7fb fe2d 	bl	8000150 <__udivsi3>
 80044f6:	f7fe fd33 	bl	8002f60 <__aeabi_ui2d>
 80044fa:	4a44      	ldr	r2, [pc, #272]	; (800460c <process_adc_buffer+0x1a0>)
 80044fc:	4b44      	ldr	r3, [pc, #272]	; (8004610 <process_adc_buffer+0x1a4>)
 80044fe:	f7fd fead 	bl	800225c <__aeabi_dmul>
 8004502:	f7fe fd9b 	bl	800303c <__aeabi_d2f>
 8004506:	1c06      	adds	r6, r0, #0
 8004508:	4b42      	ldr	r3, [pc, #264]	; (8004614 <process_adc_buffer+0x1a8>)
 800450a:	469a      	mov	sl, r3
 800450c:	6018      	str	r0, [r3, #0]
    v3_3 = sum5 / ADC_SAMPLES * 0.01;
 800450e:	2150      	movs	r1, #80	; 0x50
 8004510:	0038      	movs	r0, r7
 8004512:	f7fb fe1d 	bl	8000150 <__udivsi3>
 8004516:	f7fe fd23 	bl	8002f60 <__aeabi_ui2d>
 800451a:	4a3c      	ldr	r2, [pc, #240]	; (800460c <process_adc_buffer+0x1a0>)
 800451c:	4b3c      	ldr	r3, [pc, #240]	; (8004610 <process_adc_buffer+0x1a4>)
 800451e:	f7fd fe9d 	bl	800225c <__aeabi_dmul>
 8004522:	f7fe fd8b 	bl	800303c <__aeabi_d2f>
 8004526:	1c07      	adds	r7, r0, #0
 8004528:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <process_adc_buffer+0x1ac>)
 800452a:	469b      	mov	fp, r3
 800452c:	6018      	str	r0, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    vdda = (float)VREFINT_CAL_VREF * (float)*VREFINT_CAL_ADDR / vref_avg / 1000;
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <process_adc_buffer+0x1b0>)
 8004530:	8818      	ldrh	r0, [r3, #0]
 8004532:	f7fc ff13 	bl	800135c <__aeabi_ui2f>
 8004536:	493a      	ldr	r1, [pc, #232]	; (8004620 <process_adc_buffer+0x1b4>)
 8004538:	f7fc fbee 	bl	8000d18 <__aeabi_fmul>
 800453c:	9001      	str	r0, [sp, #4]
 800453e:	0020      	movs	r0, r4
 8004540:	f7fc febe 	bl	80012c0 <__aeabi_i2f>
 8004544:	9000      	str	r0, [sp, #0]
 8004546:	1c01      	adds	r1, r0, #0
 8004548:	9801      	ldr	r0, [sp, #4]
 800454a:	f7fc facd 	bl	8000ae8 <__aeabi_fdiv>
 800454e:	4935      	ldr	r1, [pc, #212]	; (8004624 <process_adc_buffer+0x1b8>)
 8004550:	f7fc faca 	bl	8000ae8 <__aeabi_fdiv>
 8004554:	1c04      	adds	r4, r0, #0
 8004556:	4b34      	ldr	r3, [pc, #208]	; (8004628 <process_adc_buffer+0x1bc>)
 8004558:	6018      	str	r0, [r3, #0]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (float) vdda / ADC_RESOLUTION * vref_avg;
 800455a:	4934      	ldr	r1, [pc, #208]	; (800462c <process_adc_buffer+0x1c0>)
 800455c:	f7fc fac4 	bl	8000ae8 <__aeabi_fdiv>
 8004560:	1c01      	adds	r1, r0, #0
 8004562:	9800      	ldr	r0, [sp, #0]
 8004564:	f7fc fbd8 	bl	8000d18 <__aeabi_fmul>
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <process_adc_buffer+0x1c4>)
 800456a:	6018      	str	r0, [r3, #0]

    temp = (float) (ta * (float) (sum1 / ADC_SAMPLES) + tb);
 800456c:	4640      	mov	r0, r8
 800456e:	f7fc fef5 	bl	800135c <__aeabi_ui2f>
 8004572:	4b30      	ldr	r3, [pc, #192]	; (8004634 <process_adc_buffer+0x1c8>)
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	f7fc fbcf 	bl	8000d18 <__aeabi_fmul>
 800457a:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <process_adc_buffer+0x1cc>)
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	f7fc f915 	bl	80007ac <__aeabi_fadd>
 8004582:	4b2e      	ldr	r3, [pc, #184]	; (800463c <process_adc_buffer+0x1d0>)
 8004584:	6018      	str	r0, [r3, #0]

    //
    v3_3 = (vdda * v3_3) / ADC_RESOLUTION;
 8004586:	1c21      	adds	r1, r4, #0
 8004588:	1c38      	adds	r0, r7, #0
 800458a:	f7fc fbc5 	bl	8000d18 <__aeabi_fmul>
 800458e:	4927      	ldr	r1, [pc, #156]	; (800462c <process_adc_buffer+0x1c0>)
 8004590:	f7fc faaa 	bl	8000ae8 <__aeabi_fdiv>
 8004594:	465b      	mov	r3, fp
 8004596:	6018      	str	r0, [r3, #0]
    i3_3  = v3_3 / 0.01;
 8004598:	f7fe fd08 	bl	8002fac <__aeabi_f2d>
 800459c:	4a1b      	ldr	r2, [pc, #108]	; (800460c <process_adc_buffer+0x1a0>)
 800459e:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <process_adc_buffer+0x1a4>)
 80045a0:	f7fd fa5a 	bl	8001a58 <__aeabi_ddiv>
 80045a4:	f7fe fd4a 	bl	800303c <__aeabi_d2f>
 80045a8:	4b25      	ldr	r3, [pc, #148]	; (8004640 <process_adc_buffer+0x1d4>)
 80045aa:	6018      	str	r0, [r3, #0]
    //
	v4 = (vdda * v4) / ADC_RESOLUTION;
 80045ac:	1c21      	adds	r1, r4, #0
 80045ae:	1c30      	adds	r0, r6, #0
 80045b0:	f7fc fbb2 	bl	8000d18 <__aeabi_fmul>
 80045b4:	491d      	ldr	r1, [pc, #116]	; (800462c <process_adc_buffer+0x1c0>)
 80045b6:	f7fc fa97 	bl	8000ae8 <__aeabi_fdiv>
 80045ba:	4653      	mov	r3, sl
 80045bc:	6018      	str	r0, [r3, #0]
    i4 = v4 / 0.01;
 80045be:	f7fe fcf5 	bl	8002fac <__aeabi_f2d>
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <process_adc_buffer+0x1a0>)
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <process_adc_buffer+0x1a4>)
 80045c6:	f7fd fa47 	bl	8001a58 <__aeabi_ddiv>
 80045ca:	f7fe fd37 	bl	800303c <__aeabi_d2f>
 80045ce:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <process_adc_buffer+0x1d8>)
 80045d0:	6018      	str	r0, [r3, #0]
    //
	bat_v = (((vdda * bat_v) / ADC_RESOLUTION) * (12000+22000)) / 12000;
 80045d2:	1c21      	adds	r1, r4, #0
 80045d4:	1c28      	adds	r0, r5, #0
 80045d6:	f7fc fb9f 	bl	8000d18 <__aeabi_fmul>
 80045da:	4914      	ldr	r1, [pc, #80]	; (800462c <process_adc_buffer+0x1c0>)
 80045dc:	f7fc fa84 	bl	8000ae8 <__aeabi_fdiv>
 80045e0:	4919      	ldr	r1, [pc, #100]	; (8004648 <process_adc_buffer+0x1dc>)
 80045e2:	f7fc fb99 	bl	8000d18 <__aeabi_fmul>
 80045e6:	4919      	ldr	r1, [pc, #100]	; (800464c <process_adc_buffer+0x1e0>)
 80045e8:	f7fc fa7e 	bl	8000ae8 <__aeabi_fdiv>
 80045ec:	464b      	mov	r3, r9
 80045ee:	6018      	str	r0, [r3, #0]
}
 80045f0:	b003      	add	sp, #12
 80045f2:	bcf0      	pop	{r4, r5, r6, r7}
 80045f4:	46bb      	mov	fp, r7
 80045f6:	46b2      	mov	sl, r6
 80045f8:	46a9      	mov	r9, r5
 80045fa:	46a0      	mov	r8, r4
 80045fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	20001100 	.word	0x20001100
 8004604:	20001118 	.word	0x20001118
 8004608:	20000880 	.word	0x20000880
 800460c:	47ae147b 	.word	0x47ae147b
 8004610:	3f847ae1 	.word	0x3f847ae1
 8004614:	2000110c 	.word	0x2000110c
 8004618:	20001108 	.word	0x20001108
 800461c:	1fff75aa 	.word	0x1fff75aa
 8004620:	453b8000 	.word	0x453b8000
 8004624:	447a0000 	.word	0x447a0000
 8004628:	20001110 	.word	0x20001110
 800462c:	457ff000 	.word	0x457ff000
 8004630:	20001114 	.word	0x20001114
 8004634:	200010f4 	.word	0x200010f4
 8004638:	200010f8 	.word	0x200010f8
 800463c:	200010fc 	.word	0x200010fc
 8004640:	200010d8 	.word	0x200010d8
 8004644:	200010dc 	.word	0x200010dc
 8004648:	4704d000 	.word	0x4704d000
 800464c:	463b8000 	.word	0x463b8000

08004650 <calculate_calibration>:

void calculate_calibration(){
 8004650:	b570      	push	{r4, r5, r6, lr}
    float x1 = (float) *TEMPSENSOR_CAL1_ADDR;
 8004652:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <calculate_calibration+0x50>)
 8004654:	8818      	ldrh	r0, [r3, #0]
 8004656:	f7fc fe81 	bl	800135c <__aeabi_ui2f>
 800465a:	1c05      	adds	r5, r0, #0
    float x2 = (float) *TEMPSENSOR_CAL2_ADDR;
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <calculate_calibration+0x54>)
 800465e:	8818      	ldrh	r0, [r3, #0]
 8004660:	f7fc fe7c 	bl	800135c <__aeabi_ui2f>
 8004664:	1c06      	adds	r6, r0, #0
    float y1 = (float) TEMPSENSOR_CAL1_TEMP;
    float y2 = (float) TEMPSENSOR_CAL2_TEMP;

    // Simple linear equation y = ax + b based on two points
    ta = (float) ((y2 - y1) / (x2 - x1));
 8004666:	1c29      	adds	r1, r5, #0
 8004668:	f7fc fc7c 	bl	8000f64 <__aeabi_fsub>
 800466c:	1c04      	adds	r4, r0, #0
 800466e:	1c01      	adds	r1, r0, #0
 8004670:	480d      	ldr	r0, [pc, #52]	; (80046a8 <calculate_calibration+0x58>)
 8004672:	f7fc fa39 	bl	8000ae8 <__aeabi_fdiv>
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <calculate_calibration+0x5c>)
 8004678:	6018      	str	r0, [r3, #0]
    tb = (float) ((x2 * y1 - x1 * y2) / (x2 - x1));
 800467a:	490d      	ldr	r1, [pc, #52]	; (80046b0 <calculate_calibration+0x60>)
 800467c:	1c30      	adds	r0, r6, #0
 800467e:	f7fc fb4b 	bl	8000d18 <__aeabi_fmul>
 8004682:	1c06      	adds	r6, r0, #0
 8004684:	490b      	ldr	r1, [pc, #44]	; (80046b4 <calculate_calibration+0x64>)
 8004686:	1c28      	adds	r0, r5, #0
 8004688:	f7fc fb46 	bl	8000d18 <__aeabi_fmul>
 800468c:	1c01      	adds	r1, r0, #0
 800468e:	1c30      	adds	r0, r6, #0
 8004690:	f7fc fc68 	bl	8000f64 <__aeabi_fsub>
 8004694:	1c21      	adds	r1, r4, #0
 8004696:	f7fc fa27 	bl	8000ae8 <__aeabi_fdiv>
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <calculate_calibration+0x68>)
 800469c:	6018      	str	r0, [r3, #0]
}
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	1fff75a8 	.word	0x1fff75a8
 80046a4:	1fff75ca 	.word	0x1fff75ca
 80046a8:	42c80000 	.word	0x42c80000
 80046ac:	200010f4 	.word	0x200010f4
 80046b0:	41f00000 	.word	0x41f00000
 80046b4:	43020000 	.word	0x43020000
 80046b8:	200010f8 	.word	0x200010f8

080046bc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80046bc:	b510      	push	{r4, lr}
	process_adc_buffer(&adc_buffer[0]);
 80046be:	4802      	ldr	r0, [pc, #8]	; (80046c8 <HAL_ADC_ConvHalfCpltCallback+0xc>)
 80046c0:	f7ff fed4 	bl	800446c <process_adc_buffer>
}
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	20000240 	.word	0x20000240

080046cc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80046cc:	b510      	push	{r4, lr}
	process_adc_buffer(&adc_buffer[ADC_SAMPLES * 5]);
 80046ce:	4802      	ldr	r0, [pc, #8]	; (80046d8 <HAL_ADC_ConvCpltCallback+0xc>)
 80046d0:	f7ff fecc 	bl	800446c <process_adc_buffer>
}
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	20000560 	.word	0x20000560

080046dc <select_sensor>:

void select_sensor(uint8_t sensor){
 80046dc:	b510      	push	{r4, lr}
	if(sensor == RTC_MOD){
 80046de:	2800      	cmp	r0, #0
 80046e0:	d013      	beq.n	800470a <select_sensor+0x2e>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
	}else if(sensor == IMU){
 80046e2:	2801      	cmp	r0, #1
 80046e4:	d02b      	beq.n	800473e <select_sensor+0x62>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, SET);
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
	}else if(sensor == BME680){
 80046e6:	2802      	cmp	r0, #2
 80046e8:	d043      	beq.n	8004772 <select_sensor+0x96>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, SET);
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
	}else if(sensor == TEMP_OUT){
 80046ea:	2803      	cmp	r0, #3
 80046ec:	d05b      	beq.n	80047a6 <select_sensor+0xca>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, SET);
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, SET);
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
	}else if(sensor == TEMP_IN){
 80046ee:	2804      	cmp	r0, #4
 80046f0:	d100      	bne.n	80046f4 <select_sensor+0x18>
 80046f2:	e072      	b.n	80047da <select_sensor+0xfe>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, SET);
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
	}else if(sensor == SD_CARD){
 80046f4:	2805      	cmp	r0, #5
 80046f6:	d100      	bne.n	80046fa <select_sensor+0x1e>
 80046f8:	e089      	b.n	800480e <select_sensor+0x132>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, SET);
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, SET);
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
	}else if(sensor == MAG){
 80046fa:	2806      	cmp	r0, #6
 80046fc:	d100      	bne.n	8004700 <select_sensor+0x24>
 80046fe:	e0a0      	b.n	8004842 <select_sensor+0x166>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, SET);
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, SET);
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
	}else{
		printf("Selected sensor with this ID doesn't not exists: %02x", sensor);
 8004700:	0001      	movs	r1, r0
 8004702:	485d      	ldr	r0, [pc, #372]	; (8004878 <select_sensor+0x19c>)
 8004704:	f006 fe6e 	bl	800b3e4 <iprintf>
	}
}
 8004708:	e018      	b.n	800473c <select_sensor+0x60>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
 800470a:	2200      	movs	r2, #0
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	485b      	ldr	r0, [pc, #364]	; (800487c <select_sensor+0x1a0>)
 8004710:	f002 fa58 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
 8004714:	2180      	movs	r1, #128	; 0x80
 8004716:	24a0      	movs	r4, #160	; 0xa0
 8004718:	05e4      	lsls	r4, r4, #23
 800471a:	2200      	movs	r2, #0
 800471c:	0109      	lsls	r1, r1, #4
 800471e:	0020      	movs	r0, r4
 8004720:	f002 fa50 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	2200      	movs	r2, #0
 8004728:	0149      	lsls	r1, r1, #5
 800472a:	0020      	movs	r0, r4
 800472c:	f002 fa4a 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	2201      	movs	r2, #1
 8004734:	0049      	lsls	r1, r1, #1
 8004736:	0020      	movs	r0, r4
 8004738:	f002 fa44 	bl	8006bc4 <HAL_GPIO_WritePin>
}
 800473c:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, SET);
 800473e:	2201      	movs	r2, #1
 8004740:	2140      	movs	r1, #64	; 0x40
 8004742:	484e      	ldr	r0, [pc, #312]	; (800487c <select_sensor+0x1a0>)
 8004744:	f002 fa3e 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
 8004748:	2180      	movs	r1, #128	; 0x80
 800474a:	24a0      	movs	r4, #160	; 0xa0
 800474c:	05e4      	lsls	r4, r4, #23
 800474e:	2200      	movs	r2, #0
 8004750:	0109      	lsls	r1, r1, #4
 8004752:	0020      	movs	r0, r4
 8004754:	f002 fa36 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
 8004758:	2180      	movs	r1, #128	; 0x80
 800475a:	2200      	movs	r2, #0
 800475c:	0149      	lsls	r1, r1, #5
 800475e:	0020      	movs	r0, r4
 8004760:	f002 fa30 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
 8004764:	2180      	movs	r1, #128	; 0x80
 8004766:	2201      	movs	r2, #1
 8004768:	0049      	lsls	r1, r1, #1
 800476a:	0020      	movs	r0, r4
 800476c:	f002 fa2a 	bl	8006bc4 <HAL_GPIO_WritePin>
 8004770:	e7e4      	b.n	800473c <select_sensor+0x60>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
 8004772:	2200      	movs	r2, #0
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	4841      	ldr	r0, [pc, #260]	; (800487c <select_sensor+0x1a0>)
 8004778:	f002 fa24 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, SET);
 800477c:	2180      	movs	r1, #128	; 0x80
 800477e:	24a0      	movs	r4, #160	; 0xa0
 8004780:	05e4      	lsls	r4, r4, #23
 8004782:	2201      	movs	r2, #1
 8004784:	0109      	lsls	r1, r1, #4
 8004786:	0020      	movs	r0, r4
 8004788:	f002 fa1c 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	2200      	movs	r2, #0
 8004790:	0149      	lsls	r1, r1, #5
 8004792:	0020      	movs	r0, r4
 8004794:	f002 fa16 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
 8004798:	2180      	movs	r1, #128	; 0x80
 800479a:	2201      	movs	r2, #1
 800479c:	0049      	lsls	r1, r1, #1
 800479e:	0020      	movs	r0, r4
 80047a0:	f002 fa10 	bl	8006bc4 <HAL_GPIO_WritePin>
 80047a4:	e7ca      	b.n	800473c <select_sensor+0x60>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, SET);
 80047a6:	2201      	movs	r2, #1
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	4834      	ldr	r0, [pc, #208]	; (800487c <select_sensor+0x1a0>)
 80047ac:	f002 fa0a 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, SET);
 80047b0:	2180      	movs	r1, #128	; 0x80
 80047b2:	24a0      	movs	r4, #160	; 0xa0
 80047b4:	05e4      	lsls	r4, r4, #23
 80047b6:	2201      	movs	r2, #1
 80047b8:	0109      	lsls	r1, r1, #4
 80047ba:	0020      	movs	r0, r4
 80047bc:	f002 fa02 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
 80047c0:	2180      	movs	r1, #128	; 0x80
 80047c2:	2200      	movs	r2, #0
 80047c4:	0149      	lsls	r1, r1, #5
 80047c6:	0020      	movs	r0, r4
 80047c8:	f002 f9fc 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
 80047cc:	2180      	movs	r1, #128	; 0x80
 80047ce:	2201      	movs	r2, #1
 80047d0:	0049      	lsls	r1, r1, #1
 80047d2:	0020      	movs	r0, r4
 80047d4:	f002 f9f6 	bl	8006bc4 <HAL_GPIO_WritePin>
 80047d8:	e7b0      	b.n	800473c <select_sensor+0x60>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
 80047da:	2200      	movs	r2, #0
 80047dc:	2140      	movs	r1, #64	; 0x40
 80047de:	4827      	ldr	r0, [pc, #156]	; (800487c <select_sensor+0x1a0>)
 80047e0:	f002 f9f0 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
 80047e4:	2180      	movs	r1, #128	; 0x80
 80047e6:	24a0      	movs	r4, #160	; 0xa0
 80047e8:	05e4      	lsls	r4, r4, #23
 80047ea:	2200      	movs	r2, #0
 80047ec:	0109      	lsls	r1, r1, #4
 80047ee:	0020      	movs	r0, r4
 80047f0:	f002 f9e8 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, SET);
 80047f4:	2180      	movs	r1, #128	; 0x80
 80047f6:	2201      	movs	r2, #1
 80047f8:	0149      	lsls	r1, r1, #5
 80047fa:	0020      	movs	r0, r4
 80047fc:	f002 f9e2 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	2201      	movs	r2, #1
 8004804:	0049      	lsls	r1, r1, #1
 8004806:	0020      	movs	r0, r4
 8004808:	f002 f9dc 	bl	8006bc4 <HAL_GPIO_WritePin>
 800480c:	e796      	b.n	800473c <select_sensor+0x60>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, SET);
 800480e:	2201      	movs	r2, #1
 8004810:	2140      	movs	r1, #64	; 0x40
 8004812:	481a      	ldr	r0, [pc, #104]	; (800487c <select_sensor+0x1a0>)
 8004814:	f002 f9d6 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	24a0      	movs	r4, #160	; 0xa0
 800481c:	05e4      	lsls	r4, r4, #23
 800481e:	2200      	movs	r2, #0
 8004820:	0109      	lsls	r1, r1, #4
 8004822:	0020      	movs	r0, r4
 8004824:	f002 f9ce 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, SET);
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	2201      	movs	r2, #1
 800482c:	0149      	lsls	r1, r1, #5
 800482e:	0020      	movs	r0, r4
 8004830:	f002 f9c8 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
 8004834:	2180      	movs	r1, #128	; 0x80
 8004836:	2201      	movs	r2, #1
 8004838:	0049      	lsls	r1, r1, #1
 800483a:	0020      	movs	r0, r4
 800483c:	f002 f9c2 	bl	8006bc4 <HAL_GPIO_WritePin>
 8004840:	e77c      	b.n	800473c <select_sensor+0x60>
		HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
 8004842:	2200      	movs	r2, #0
 8004844:	2140      	movs	r1, #64	; 0x40
 8004846:	480d      	ldr	r0, [pc, #52]	; (800487c <select_sensor+0x1a0>)
 8004848:	f002 f9bc 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, SET);
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	24a0      	movs	r4, #160	; 0xa0
 8004850:	05e4      	lsls	r4, r4, #23
 8004852:	2201      	movs	r2, #1
 8004854:	0109      	lsls	r1, r1, #4
 8004856:	0020      	movs	r0, r4
 8004858:	f002 f9b4 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, SET);
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	2201      	movs	r2, #1
 8004860:	0149      	lsls	r1, r1, #5
 8004862:	0020      	movs	r0, r4
 8004864:	f002 f9ae 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, SET);
 8004868:	2180      	movs	r1, #128	; 0x80
 800486a:	2201      	movs	r2, #1
 800486c:	0049      	lsls	r1, r1, #1
 800486e:	0020      	movs	r0, r4
 8004870:	f002 f9a8 	bl	8006bc4 <HAL_GPIO_WritePin>
 8004874:	e762      	b.n	800473c <select_sensor+0x60>
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	0800d9a4 	.word	0x0800d9a4
 800487c:	50000800 	.word	0x50000800

08004880 <deselect_sensors>:
void deselect_sensors(void){
 8004880:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(S0_SENS_GPIO_Port, S0_SENS_Pin, RESET);
 8004882:	2200      	movs	r2, #0
 8004884:	2140      	movs	r1, #64	; 0x40
 8004886:	480c      	ldr	r0, [pc, #48]	; (80048b8 <deselect_sensors+0x38>)
 8004888:	f002 f99c 	bl	8006bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S1_SENS_GPIO_Port, S1_SENS_Pin, RESET);
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	24a0      	movs	r4, #160	; 0xa0
 8004890:	05e4      	lsls	r4, r4, #23
 8004892:	2200      	movs	r2, #0
 8004894:	0109      	lsls	r1, r1, #4
 8004896:	0020      	movs	r0, r4
 8004898:	f002 f994 	bl	8006bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_SENS_GPIO_Port, S2_SENS_Pin, RESET);
 800489c:	2180      	movs	r1, #128	; 0x80
 800489e:	2200      	movs	r2, #0
 80048a0:	0149      	lsls	r1, r1, #5
 80048a2:	0020      	movs	r0, r4
 80048a4:	f002 f98e 	bl	8006bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_EN_0_GPIO_Port, MUX_EN_0_Pin, RESET);
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	2200      	movs	r2, #0
 80048ac:	0049      	lsls	r1, r1, #1
 80048ae:	0020      	movs	r0, r4
 80048b0:	f002 f988 	bl	8006bc4 <HAL_GPIO_WritePin>
}
 80048b4:	bd10      	pop	{r4, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	50000800 	.word	0x50000800

080048bc <select_camera_port>:
void select_camera_port(uint8_t cam_port){
 80048bc:	b510      	push	{r4, lr}
 80048be:	1e01      	subs	r1, r0, #0
	if(cam_port == CAM0_ON){
 80048c0:	d009      	beq.n	80048d6 <select_camera_port+0x1a>
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, RESET);
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, RESET);
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
	}else if(cam_port == CAM0_REC){
 80048c2:	2801      	cmp	r0, #1
 80048c4:	d019      	beq.n	80048fa <select_camera_port+0x3e>
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, SET);
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, RESET);
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
	}else if(cam_port == CAM1_ON){
 80048c6:	2802      	cmp	r0, #2
 80048c8:	d029      	beq.n	800491e <select_camera_port+0x62>
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, RESET);
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, SET);
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
	}else if(cam_port == CAM1_REC){
 80048ca:	2803      	cmp	r0, #3
 80048cc:	d038      	beq.n	8004940 <select_camera_port+0x84>
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, SET);
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, SET);
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
	}else{
		printf("Selected camera port with this ID doesn't not exists: %02x", cam_port);
 80048ce:	4825      	ldr	r0, [pc, #148]	; (8004964 <select_camera_port+0xa8>)
 80048d0:	f006 fd88 	bl	800b3e4 <iprintf>
	}
}
 80048d4:	e010      	b.n	80048f8 <select_camera_port+0x3c>
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, RESET);
 80048d6:	4c24      	ldr	r4, [pc, #144]	; (8004968 <select_camera_port+0xac>)
 80048d8:	2200      	movs	r2, #0
 80048da:	3102      	adds	r1, #2
 80048dc:	0020      	movs	r0, r4
 80048de:	f002 f971 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, RESET);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2101      	movs	r1, #1
 80048e6:	0020      	movs	r0, r4
 80048e8:	f002 f96c 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
 80048ec:	20a0      	movs	r0, #160	; 0xa0
 80048ee:	2201      	movs	r2, #1
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	05c0      	lsls	r0, r0, #23
 80048f4:	f002 f966 	bl	8006bc4 <HAL_GPIO_WritePin>
}
 80048f8:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, SET);
 80048fa:	4c1b      	ldr	r4, [pc, #108]	; (8004968 <select_camera_port+0xac>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	3101      	adds	r1, #1
 8004900:	0020      	movs	r0, r4
 8004902:	f002 f95f 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, RESET);
 8004906:	2200      	movs	r2, #0
 8004908:	2101      	movs	r1, #1
 800490a:	0020      	movs	r0, r4
 800490c:	f002 f95a 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
 8004910:	20a0      	movs	r0, #160	; 0xa0
 8004912:	2201      	movs	r2, #1
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	05c0      	lsls	r0, r0, #23
 8004918:	f002 f954 	bl	8006bc4 <HAL_GPIO_WritePin>
 800491c:	e7ec      	b.n	80048f8 <select_camera_port+0x3c>
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, RESET);
 800491e:	4c12      	ldr	r4, [pc, #72]	; (8004968 <select_camera_port+0xac>)
 8004920:	2200      	movs	r2, #0
 8004922:	0020      	movs	r0, r4
 8004924:	f002 f94e 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, SET);
 8004928:	2201      	movs	r2, #1
 800492a:	2101      	movs	r1, #1
 800492c:	0020      	movs	r0, r4
 800492e:	f002 f949 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
 8004932:	20a0      	movs	r0, #160	; 0xa0
 8004934:	2201      	movs	r2, #1
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	05c0      	lsls	r0, r0, #23
 800493a:	f002 f943 	bl	8006bc4 <HAL_GPIO_WritePin>
 800493e:	e7db      	b.n	80048f8 <select_camera_port+0x3c>
		HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, SET);
 8004940:	4c09      	ldr	r4, [pc, #36]	; (8004968 <select_camera_port+0xac>)
 8004942:	2201      	movs	r2, #1
 8004944:	3901      	subs	r1, #1
 8004946:	0020      	movs	r0, r4
 8004948:	f002 f93c 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, SET);
 800494c:	2201      	movs	r2, #1
 800494e:	2101      	movs	r1, #1
 8004950:	0020      	movs	r0, r4
 8004952:	f002 f937 	bl	8006bc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, SET);
 8004956:	20a0      	movs	r0, #160	; 0xa0
 8004958:	2201      	movs	r2, #1
 800495a:	2180      	movs	r1, #128	; 0x80
 800495c:	05c0      	lsls	r0, r0, #23
 800495e:	f002 f931 	bl	8006bc4 <HAL_GPIO_WritePin>
 8004962:	e7c9      	b.n	80048f8 <select_camera_port+0x3c>
 8004964:	0800d9dc 	.word	0x0800d9dc
 8004968:	50000400 	.word	0x50000400

0800496c <deselect_camera_port>:
void deselect_camera_port(void){
 800496c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(S0_CAM_GPIO_Port, S0_CAM_Pin, RESET);
 800496e:	4c09      	ldr	r4, [pc, #36]	; (8004994 <deselect_camera_port+0x28>)
 8004970:	2200      	movs	r2, #0
 8004972:	2102      	movs	r1, #2
 8004974:	0020      	movs	r0, r4
 8004976:	f002 f925 	bl	8006bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S1_CAM_GPIO_Port, S1_CAM_Pin, RESET);
 800497a:	2200      	movs	r2, #0
 800497c:	2101      	movs	r1, #1
 800497e:	0020      	movs	r0, r4
 8004980:	f002 f920 	bl	8006bc4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MUX_EN_1_GPIO_Port, MUX_EN_1_Pin, RESET);
 8004984:	20a0      	movs	r0, #160	; 0xa0
 8004986:	2200      	movs	r2, #0
 8004988:	2180      	movs	r1, #128	; 0x80
 800498a:	05c0      	lsls	r0, r0, #23
 800498c:	f002 f91a 	bl	8006bc4 <HAL_GPIO_WritePin>
}
 8004990:	bd10      	pop	{r4, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	50000400 	.word	0x50000400

08004998 <Mount_open_SD_Card>:
/* Returns FR_status after success or last failed step */
uint8_t Mount_open_SD_Card(){
 8004998:	b510      	push	{r4, lr}
	uint8_t sd_mounting_status;

	/* Mount SD Card */
	sd_mounting_status = f_mount(&fs, "", 1);
 800499a:	2201      	movs	r2, #1
 800499c:	492f      	ldr	r1, [pc, #188]	; (8004a5c <Mount_open_SD_Card+0xc4>)
 800499e:	4830      	ldr	r0, [pc, #192]	; (8004a60 <Mount_open_SD_Card+0xc8>)
 80049a0:	f005 fbbe 	bl	800a120 <f_mount>
	if(sd_mounting_status != FR_OK)
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d000      	beq.n	80049aa <Mount_open_SD_Card+0x12>
	f_printf(&fil, " BME_ex T | BME_ex P | BME_ex H | BME_in A |");
	f_printf(&fil, " MPU Acc_X | MPU Acc_Y | MPU Acc_Z | MPU Gyr_X | MPU Gyr_Y | MPU Gyr_Z | MPU Tmpr  |");
	f_printf(&fil, " SI VIS | SI IR  | SI UV  |\n");
	sd_mounting_status = f_sync(&fil);
	return sd_mounting_status;
}
 80049a8:	bd10      	pop	{r4, pc}
	sd_mounting_status = f_open(&fil, "Data0.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80049aa:	2212      	movs	r2, #18
 80049ac:	492d      	ldr	r1, [pc, #180]	; (8004a64 <Mount_open_SD_Card+0xcc>)
 80049ae:	482e      	ldr	r0, [pc, #184]	; (8004a68 <Mount_open_SD_Card+0xd0>)
 80049b0:	f005 fbe8 	bl	800a184 <f_open>
	if(sd_mounting_status != FR_OK)
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d1f7      	bne.n	80049a8 <Mount_open_SD_Card+0x10>
	sd_mounting_status = f_getfree("", &fre_clust, &pfs);
 80049b8:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <Mount_open_SD_Card+0xd4>)
 80049ba:	492d      	ldr	r1, [pc, #180]	; (8004a70 <Mount_open_SD_Card+0xd8>)
 80049bc:	4827      	ldr	r0, [pc, #156]	; (8004a5c <Mount_open_SD_Card+0xc4>)
 80049be:	f005 fe90 	bl	800a6e2 <f_getfree>
	if(sd_mounting_status != FR_OK)
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d1f0      	bne.n	80049a8 <Mount_open_SD_Card+0x10>
	totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80049c6:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <Mount_open_SD_Card+0xd4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	1e90      	subs	r0, r2, #2
 80049ce:	895c      	ldrh	r4, [r3, #10]
 80049d0:	4360      	muls	r0, r4
 80049d2:	f7fe fac5 	bl	8002f60 <__aeabi_ui2d>
 80049d6:	2200      	movs	r2, #0
 80049d8:	4b26      	ldr	r3, [pc, #152]	; (8004a74 <Mount_open_SD_Card+0xdc>)
 80049da:	f7fd fc3f 	bl	800225c <__aeabi_dmul>
 80049de:	f7fb fddd 	bl	800059c <__aeabi_d2uiz>
 80049e2:	4b25      	ldr	r3, [pc, #148]	; (8004a78 <Mount_open_SD_Card+0xe0>)
 80049e4:	6018      	str	r0, [r3, #0]
	freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80049e6:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <Mount_open_SD_Card+0xd8>)
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	4360      	muls	r0, r4
 80049ec:	f7fe fab8 	bl	8002f60 <__aeabi_ui2d>
 80049f0:	2200      	movs	r2, #0
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <Mount_open_SD_Card+0xdc>)
 80049f4:	f7fd fc32 	bl	800225c <__aeabi_dmul>
 80049f8:	f7fb fdd0 	bl	800059c <__aeabi_d2uiz>
 80049fc:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <Mount_open_SD_Card+0xe4>)
 80049fe:	6018      	str	r0, [r3, #0]
	if(freeSpace < 1)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d028      	beq.n	8004a58 <Mount_open_SD_Card+0xc0>
	f_printf(&fil, "STM32 SD Card data logger\n");
 8004a06:	4c18      	ldr	r4, [pc, #96]	; (8004a68 <Mount_open_SD_Card+0xd0>)
 8004a08:	491d      	ldr	r1, [pc, #116]	; (8004a80 <Mount_open_SD_Card+0xe8>)
 8004a0a:	0020      	movs	r0, r4
 8004a0c:	f005 fee6 	bl	800a7dc <f_printf>
	f_printf(&fil, "RTC time and sensor readings (SI VIS and SI IR are raw values)\n");
 8004a10:	491c      	ldr	r1, [pc, #112]	; (8004a84 <Mount_open_SD_Card+0xec>)
 8004a12:	0020      	movs	r0, r4
 8004a14:	f005 fee2 	bl	800a7dc <f_printf>
	f_printf(&fil, "SD-CARD-MEMORY = %d \n SD-CARD-FREE-MEMORY = %d\n", totalSpace, freeSpace);
 8004a18:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <Mount_open_SD_Card+0xe0>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b17      	ldr	r3, [pc, #92]	; (8004a7c <Mount_open_SD_Card+0xe4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4919      	ldr	r1, [pc, #100]	; (8004a88 <Mount_open_SD_Card+0xf0>)
 8004a22:	0020      	movs	r0, r4
 8004a24:	f005 feda 	bl	800a7dc <f_printf>
	f_printf(&fil, "| Dt | Hr | Mn | Sc |");
 8004a28:	4918      	ldr	r1, [pc, #96]	; (8004a8c <Mount_open_SD_Card+0xf4>)
 8004a2a:	0020      	movs	r0, r4
 8004a2c:	f005 fed6 	bl	800a7dc <f_printf>
	f_printf(&fil, " BME_in T | BME_in P | BME_in H | BME_in A |");
 8004a30:	4917      	ldr	r1, [pc, #92]	; (8004a90 <Mount_open_SD_Card+0xf8>)
 8004a32:	0020      	movs	r0, r4
 8004a34:	f005 fed2 	bl	800a7dc <f_printf>
	f_printf(&fil, " BME_ex T | BME_ex P | BME_ex H | BME_in A |");
 8004a38:	4916      	ldr	r1, [pc, #88]	; (8004a94 <Mount_open_SD_Card+0xfc>)
 8004a3a:	0020      	movs	r0, r4
 8004a3c:	f005 fece 	bl	800a7dc <f_printf>
	f_printf(&fil, " MPU Acc_X | MPU Acc_Y | MPU Acc_Z | MPU Gyr_X | MPU Gyr_Y | MPU Gyr_Z | MPU Tmpr  |");
 8004a40:	4915      	ldr	r1, [pc, #84]	; (8004a98 <Mount_open_SD_Card+0x100>)
 8004a42:	0020      	movs	r0, r4
 8004a44:	f005 feca 	bl	800a7dc <f_printf>
	f_printf(&fil, " SI VIS | SI IR  | SI UV  |\n");
 8004a48:	4914      	ldr	r1, [pc, #80]	; (8004a9c <Mount_open_SD_Card+0x104>)
 8004a4a:	0020      	movs	r0, r4
 8004a4c:	f005 fec6 	bl	800a7dc <f_printf>
	sd_mounting_status = f_sync(&fil);
 8004a50:	0020      	movs	r0, r4
 8004a52:	f005 fdf8 	bl	800a646 <f_sync>
	return sd_mounting_status;
 8004a56:	e7a7      	b.n	80049a8 <Mount_open_SD_Card+0x10>
		return sd_mounting_status;
 8004a58:	20df      	movs	r0, #223	; 0xdf
 8004a5a:	e7a5      	b.n	80049a8 <Mount_open_SD_Card+0x10>
 8004a5c:	0800db9c 	.word	0x0800db9c
 8004a60:	20000abc 	.word	0x20000abc
 8004a64:	0800da18 	.word	0x0800da18
 8004a68:	20000884 	.word	0x20000884
 8004a6c:	200010e0 	.word	0x200010e0
 8004a70:	20000ab4 	.word	0x20000ab4
 8004a74:	3fe00000 	.word	0x3fe00000
 8004a78:	20001104 	.word	0x20001104
 8004a7c:	20000ab8 	.word	0x20000ab8
 8004a80:	0800da24 	.word	0x0800da24
 8004a84:	0800da40 	.word	0x0800da40
 8004a88:	0800da80 	.word	0x0800da80
 8004a8c:	0800dab0 	.word	0x0800dab0
 8004a90:	0800dac8 	.word	0x0800dac8
 8004a94:	0800daf8 	.word	0x0800daf8
 8004a98:	0800db28 	.word	0x0800db28
 8004a9c:	0800db80 	.word	0x0800db80

08004aa0 <ON_CAM>:

void ON_CAM(CAM_struct *CAM){
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	0004      	movs	r4, r0
	// Checks if CAM is OFF
	if(CAM_OFF == CAM->CAM_STATUS){
 8004aa4:	7d03      	ldrb	r3, [r0, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d002      	beq.n	8004ab0 <ON_CAM+0x10>
	    select_camera_port(CAM->CAM_ON_OFF);
	    HAL_Delay(3000);
	    deselect_camera_port();
	}
	// Start heartbeat monitoring
	CAM->Do_EXTI = 1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	74a3      	strb	r3, [r4, #18]
}
 8004aae:	bd10      	pop	{r4, pc}
	    select_camera_port(CAM->CAM_ON_OFF);
 8004ab0:	7a00      	ldrb	r0, [r0, #8]
 8004ab2:	f7ff ff03 	bl	80048bc <select_camera_port>
	    HAL_Delay(3000);
 8004ab6:	4803      	ldr	r0, [pc, #12]	; (8004ac4 <ON_CAM+0x24>)
 8004ab8:	f001 f952 	bl	8005d60 <HAL_Delay>
	    deselect_camera_port();
 8004abc:	f7ff ff56 	bl	800496c <deselect_camera_port>
 8004ac0:	e7f3      	b.n	8004aaa <ON_CAM+0xa>
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	00000bb8 	.word	0x00000bb8

08004ac8 <START_CAM>:
void START_CAM(CAM_struct *CAM){
 8004ac8:	b510      	push	{r4, lr}
 8004aca:	0004      	movs	r4, r0
	// Checks if CAM is ON and not recording
	if((CAM->REC_STATUS != CAM_RECORDING) && (CAM_ON == CAM->CAM_STATUS)){
 8004acc:	7c03      	ldrb	r3, [r0, #16]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d002      	beq.n	8004ad8 <START_CAM+0x10>
 8004ad2:	7d03      	ldrb	r3, [r0, #20]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d002      	beq.n	8004ade <START_CAM+0x16>
	}

	//ON_CAM(CAM);

	// Start filming restart routine
	CAM->Do_Restart = 1;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	7463      	strb	r3, [r4, #17]
}
 8004adc:	bd10      	pop	{r4, pc}
	    select_camera_port(CAM->REC_CAM);
 8004ade:	7a40      	ldrb	r0, [r0, #9]
 8004ae0:	f7ff feec 	bl	80048bc <select_camera_port>
        HAL_Delay(100);
 8004ae4:	2064      	movs	r0, #100	; 0x64
 8004ae6:	f001 f93b 	bl	8005d60 <HAL_Delay>
        deselect_camera_port();
 8004aea:	f7ff ff3f 	bl	800496c <deselect_camera_port>
 8004aee:	e7f3      	b.n	8004ad8 <START_CAM+0x10>

08004af0 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004af0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004af2:	e7fe      	b.n	8004af2 <Error_Handler+0x2>

08004af4 <MX_ADC1_Init>:
{
 8004af4:	b500      	push	{lr}
 8004af6:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8004af8:	220c      	movs	r2, #12
 8004afa:	2100      	movs	r1, #0
 8004afc:	a801      	add	r0, sp, #4
 8004afe:	f005 fffa 	bl	800aaf6 <memset>
  hadc1.Instance = ADC1;
 8004b02:	4835      	ldr	r0, [pc, #212]	; (8004bd8 <MX_ADC1_Init+0xe4>)
 8004b04:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <MX_ADC1_Init+0xe8>)
 8004b06:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	05db      	lsls	r3, r3, #23
 8004b0c:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004b12:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	0392      	lsls	r2, r2, #14
 8004b18:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004b1a:	2208      	movs	r2, #8
 8004b1c:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004b1e:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8004b20:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004b22:	7683      	strb	r3, [r0, #26]
  hadc1.Init.NbrOfConversion = 5;
 8004b24:	3a03      	subs	r2, #3
 8004b26:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004b28:	321b      	adds	r2, #27
 8004b2a:	5483      	strb	r3, [r0, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T15_TRGO;
 8004b2c:	22a0      	movs	r2, #160	; 0xa0
 8004b2e:	00d2      	lsls	r2, r2, #3
 8004b30:	6242      	str	r2, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	0112      	lsls	r2, r2, #4
 8004b36:	6282      	str	r2, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004b38:	222c      	movs	r2, #44	; 0x2c
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	5481      	strb	r1, [r0, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004b3e:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8004b40:	3a26      	subs	r2, #38	; 0x26
 8004b42:	6342      	str	r2, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8004b44:	6383      	str	r3, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8004b46:	3236      	adds	r2, #54	; 0x36
 8004b48:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8004b4a:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004b4c:	f001 f91a 	bl	8005d84 <HAL_ADC_Init>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d134      	bne.n	8004bbe <MX_ADC1_Init+0xca>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004b54:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <MX_ADC1_Init+0xec>)
 8004b56:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8004b5c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b5e:	a901      	add	r1, sp, #4
 8004b60:	481d      	ldr	r0, [pc, #116]	; (8004bd8 <MX_ADC1_Init+0xe4>)
 8004b62:	f001 fb31 	bl	80061c8 <HAL_ADC_ConfigChannel>
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d12b      	bne.n	8004bc2 <MX_ADC1_Init+0xce>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	; (8004be4 <MX_ADC1_Init+0xf0>)
 8004b6c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004b6e:	2304      	movs	r3, #4
 8004b70:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b72:	a901      	add	r1, sp, #4
 8004b74:	4818      	ldr	r0, [pc, #96]	; (8004bd8 <MX_ADC1_Init+0xe4>)
 8004b76:	f001 fb27 	bl	80061c8 <HAL_ADC_ConfigChannel>
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d123      	bne.n	8004bc6 <MX_ADC1_Init+0xd2>
  sConfig.Channel = ADC_CHANNEL_2;
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <MX_ADC1_Init+0xf4>)
 8004b80:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004b82:	2308      	movs	r3, #8
 8004b84:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b86:	a901      	add	r1, sp, #4
 8004b88:	4813      	ldr	r0, [pc, #76]	; (8004bd8 <MX_ADC1_Init+0xe4>)
 8004b8a:	f001 fb1d 	bl	80061c8 <HAL_ADC_ConfigChannel>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d11b      	bne.n	8004bca <MX_ADC1_Init+0xd6>
  sConfig.Channel = ADC_CHANNEL_3;
 8004b92:	4b16      	ldr	r3, [pc, #88]	; (8004bec <MX_ADC1_Init+0xf8>)
 8004b94:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004b96:	230c      	movs	r3, #12
 8004b98:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004b9a:	a901      	add	r1, sp, #4
 8004b9c:	480e      	ldr	r0, [pc, #56]	; (8004bd8 <MX_ADC1_Init+0xe4>)
 8004b9e:	f001 fb13 	bl	80061c8 <HAL_ADC_ConfigChannel>
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d113      	bne.n	8004bce <MX_ADC1_Init+0xda>
  sConfig.Channel = ADC_CHANNEL_4;
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <MX_ADC1_Init+0xfc>)
 8004ba8:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004baa:	2310      	movs	r3, #16
 8004bac:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004bae:	a901      	add	r1, sp, #4
 8004bb0:	4809      	ldr	r0, [pc, #36]	; (8004bd8 <MX_ADC1_Init+0xe4>)
 8004bb2:	f001 fb09 	bl	80061c8 <HAL_ADC_ConfigChannel>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d10b      	bne.n	8004bd2 <MX_ADC1_Init+0xde>
}
 8004bba:	b005      	add	sp, #20
 8004bbc:	bd00      	pop	{pc}
    Error_Handler();
 8004bbe:	f7ff ff97 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004bc2:	f7ff ff95 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004bc6:	f7ff ff93 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004bca:	f7ff ff91 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004bce:	f7ff ff8f 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004bd2:	f7ff ff8d 	bl	8004af0 <Error_Handler>
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	20000cec 	.word	0x20000cec
 8004bdc:	40012400 	.word	0x40012400
 8004be0:	b0001000 	.word	0xb0001000
 8004be4:	b4002000 	.word	0xb4002000
 8004be8:	08000004 	.word	0x08000004
 8004bec:	0c000008 	.word	0x0c000008
 8004bf0:	10000010 	.word	0x10000010

08004bf4 <MX_CRC_Init>:
{
 8004bf4:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 8004bf6:	4808      	ldr	r0, [pc, #32]	; (8004c18 <MX_CRC_Init+0x24>)
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <MX_CRC_Init+0x28>)
 8004bfa:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004c00:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004c02:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004c04:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004c06:	3301      	adds	r3, #1
 8004c08:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004c0a:	f001 fd4d 	bl	80066a8 <HAL_CRC_Init>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	d100      	bne.n	8004c14 <MX_CRC_Init+0x20>
}
 8004c12:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004c14:	f7ff ff6c 	bl	8004af0 <Error_Handler>
 8004c18:	20000d50 	.word	0x20000d50
 8004c1c:	40023000 	.word	0x40023000

08004c20 <MX_SPI1_Init>:
{
 8004c20:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8004c22:	4811      	ldr	r0, [pc, #68]	; (8004c68 <MX_SPI1_Init+0x48>)
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <MX_SPI1_Init+0x4c>)
 8004c26:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c28:	2382      	movs	r3, #130	; 0x82
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c32:	22e0      	movs	r2, #224	; 0xe0
 8004c34:	00d2      	lsls	r2, r2, #3
 8004c36:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c38:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004c3a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c3c:	2280      	movs	r2, #128	; 0x80
 8004c3e:	0092      	lsls	r2, r2, #2
 8004c40:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004c42:	3ac9      	subs	r2, #201	; 0xc9
 8004c44:	3aff      	subs	r2, #255	; 0xff
 8004c46:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c48:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c4a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c4c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c4e:	3a31      	subs	r2, #49	; 0x31
 8004c50:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c52:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004c54:	3308      	adds	r3, #8
 8004c56:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c58:	f002 fe22 	bl	80078a0 <HAL_SPI_Init>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d100      	bne.n	8004c62 <MX_SPI1_Init+0x42>
}
 8004c60:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004c62:	f7ff ff45 	bl	8004af0 <Error_Handler>
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	20000dd0 	.word	0x20000dd0
 8004c6c:	40013000 	.word	0x40013000

08004c70 <MX_USART1_UART_Init>:
{
 8004c70:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8004c72:	4817      	ldr	r0, [pc, #92]	; (8004cd0 <MX_USART1_UART_Init+0x60>)
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <MX_USART1_UART_Init+0x64>)
 8004c76:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8004c78:	23e1      	movs	r3, #225	; 0xe1
 8004c7a:	025b      	lsls	r3, r3, #9
 8004c7c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c82:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c84:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c86:	220c      	movs	r2, #12
 8004c88:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c8a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c8c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c8e:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c90:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c92:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c94:	f004 f93c 	bl	8008f10 <HAL_UART_Init>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d111      	bne.n	8004cc0 <MX_USART1_UART_Init+0x50>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	480c      	ldr	r0, [pc, #48]	; (8004cd0 <MX_USART1_UART_Init+0x60>)
 8004ca0:	f004 f9b6 	bl	8009010 <HAL_UARTEx_SetTxFifoThreshold>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	d10d      	bne.n	8004cc4 <MX_USART1_UART_Init+0x54>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4809      	ldr	r0, [pc, #36]	; (8004cd0 <MX_USART1_UART_Init+0x60>)
 8004cac:	f004 f9d6 	bl	800905c <HAL_UARTEx_SetRxFifoThreshold>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	d109      	bne.n	8004cc8 <MX_USART1_UART_Init+0x58>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004cb4:	4806      	ldr	r0, [pc, #24]	; (8004cd0 <MX_USART1_UART_Init+0x60>)
 8004cb6:	f004 f98b 	bl	8008fd0 <HAL_UARTEx_DisableFifoMode>
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d106      	bne.n	8004ccc <MX_USART1_UART_Init+0x5c>
}
 8004cbe:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004cc0:	f7ff ff16 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004cc4:	f7ff ff14 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004cc8:	f7ff ff12 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004ccc:	f7ff ff10 	bl	8004af0 <Error_Handler>
 8004cd0:	20000fb0 	.word	0x20000fb0
 8004cd4:	40013800 	.word	0x40013800

08004cd8 <MX_USART4_UART_Init>:
{
 8004cd8:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 8004cda:	480c      	ldr	r0, [pc, #48]	; (8004d0c <MX_USART4_UART_Init+0x34>)
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <MX_USART4_UART_Init+0x38>)
 8004cde:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 8004ce0:	23e1      	movs	r3, #225	; 0xe1
 8004ce2:	025b      	lsls	r3, r3, #9
 8004ce4:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004cea:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004cec:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004cee:	220c      	movs	r2, #12
 8004cf0:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cf2:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cf4:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cf6:	6203      	str	r3, [r0, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004cf8:	6243      	str	r3, [r0, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cfa:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004cfc:	f004 f908 	bl	8008f10 <HAL_UART_Init>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	d100      	bne.n	8004d06 <MX_USART4_UART_Init+0x2e>
}
 8004d04:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004d06:	f7ff fef3 	bl	8004af0 <Error_Handler>
 8004d0a:	46c0      	nop			; (mov r8, r8)
 8004d0c:	20001044 	.word	0x20001044
 8004d10:	40004c00 	.word	0x40004c00

08004d14 <MX_TIM15_Init>:
{
 8004d14:	b500      	push	{lr}
 8004d16:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d18:	2210      	movs	r2, #16
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	a804      	add	r0, sp, #16
 8004d1e:	f005 feea 	bl	800aaf6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d22:	220c      	movs	r2, #12
 8004d24:	2100      	movs	r1, #0
 8004d26:	a801      	add	r0, sp, #4
 8004d28:	f005 fee5 	bl	800aaf6 <memset>
  htim15.Instance = TIM15;
 8004d2c:	4815      	ldr	r0, [pc, #84]	; (8004d84 <MX_TIM15_Init+0x70>)
 8004d2e:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <MX_TIM15_Init+0x74>)
 8004d30:	6003      	str	r3, [r0, #0]
  htim15.Init.Prescaler = 639;
 8004d32:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <MX_TIM15_Init+0x78>)
 8004d34:	6043      	str	r3, [r0, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d36:	2300      	movs	r3, #0
 8004d38:	6083      	str	r3, [r0, #8]
  htim15.Init.Period = 999;
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <MX_TIM15_Init+0x7c>)
 8004d3c:	60c2      	str	r2, [r0, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d3e:	6103      	str	r3, [r0, #16]
  htim15.Init.RepetitionCounter = 0;
 8004d40:	6143      	str	r3, [r0, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d42:	3380      	adds	r3, #128	; 0x80
 8004d44:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004d46:	f003 fbbf 	bl	80084c8 <HAL_TIM_Base_Init>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d114      	bne.n	8004d78 <MX_TIM15_Init+0x64>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d4e:	2380      	movs	r3, #128	; 0x80
 8004d50:	015b      	lsls	r3, r3, #5
 8004d52:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004d54:	a904      	add	r1, sp, #16
 8004d56:	480b      	ldr	r0, [pc, #44]	; (8004d84 <MX_TIM15_Init+0x70>)
 8004d58:	f003 fc9c 	bl	8008694 <HAL_TIM_ConfigClockSource>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d10d      	bne.n	8004d7c <MX_TIM15_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d60:	2320      	movs	r3, #32
 8004d62:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004d68:	a901      	add	r1, sp, #4
 8004d6a:	4806      	ldr	r0, [pc, #24]	; (8004d84 <MX_TIM15_Init+0x70>)
 8004d6c:	f003 fd16 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d105      	bne.n	8004d80 <MX_TIM15_Init+0x6c>
}
 8004d74:	b009      	add	sp, #36	; 0x24
 8004d76:	bd00      	pop	{pc}
    Error_Handler();
 8004d78:	f7ff feba 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004d7c:	f7ff feb8 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004d80:	f7ff feb6 	bl	8004af0 <Error_Handler>
 8004d84:	20000e80 	.word	0x20000e80
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	0000027f 	.word	0x0000027f
 8004d90:	000003e7 	.word	0x000003e7

08004d94 <MX_TIM14_Init>:
{
 8004d94:	b500      	push	{lr}
 8004d96:	b089      	sub	sp, #36	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d98:	221c      	movs	r2, #28
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	a801      	add	r0, sp, #4
 8004d9e:	f005 feaa 	bl	800aaf6 <memset>
  htim14.Instance = TIM14;
 8004da2:	4815      	ldr	r0, [pc, #84]	; (8004df8 <MX_TIM14_Init+0x64>)
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <MX_TIM14_Init+0x68>)
 8004da6:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 64000;
 8004da8:	23fa      	movs	r3, #250	; 0xfa
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dae:	2300      	movs	r3, #0
 8004db0:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 1000;
 8004db2:	22fa      	movs	r2, #250	; 0xfa
 8004db4:	0092      	lsls	r2, r2, #2
 8004db6:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004db8:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dba:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004dbc:	f003 fb84 	bl	80084c8 <HAL_TIM_Base_Init>
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	d112      	bne.n	8004dea <MX_TIM14_Init+0x56>
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8004dc4:	480c      	ldr	r0, [pc, #48]	; (8004df8 <MX_TIM14_Init+0x64>)
 8004dc6:	f003 fbaf 	bl	8008528 <HAL_TIM_OC_Init>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d10f      	bne.n	8004dee <MX_TIM14_Init+0x5a>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 8004dd2:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dd4:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dd6:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	a901      	add	r1, sp, #4
 8004ddc:	4806      	ldr	r0, [pc, #24]	; (8004df8 <MX_TIM14_Init+0x64>)
 8004dde:	f003 fc17 	bl	8008610 <HAL_TIM_OC_ConfigChannel>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d105      	bne.n	8004df2 <MX_TIM14_Init+0x5e>
}
 8004de6:	b009      	add	sp, #36	; 0x24
 8004de8:	bd00      	pop	{pc}
    Error_Handler();
 8004dea:	f7ff fe81 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004dee:	f7ff fe7f 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004df2:	f7ff fe7d 	bl	8004af0 <Error_Handler>
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	20000e34 	.word	0x20000e34
 8004dfc:	40002000 	.word	0x40002000

08004e00 <MX_TIM16_Init>:
{
 8004e00:	b500      	push	{lr}
 8004e02:	b095      	sub	sp, #84	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e04:	221c      	movs	r2, #28
 8004e06:	2100      	movs	r1, #0
 8004e08:	a80d      	add	r0, sp, #52	; 0x34
 8004e0a:	f005 fe74 	bl	800aaf6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e0e:	2234      	movs	r2, #52	; 0x34
 8004e10:	2100      	movs	r1, #0
 8004e12:	4668      	mov	r0, sp
 8004e14:	f005 fe6f 	bl	800aaf6 <memset>
  htim16.Instance = TIM16;
 8004e18:	481f      	ldr	r0, [pc, #124]	; (8004e98 <MX_TIM16_Init+0x98>)
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <MX_TIM16_Init+0x9c>)
 8004e1c:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 64000;
 8004e1e:	23fa      	movs	r3, #250	; 0xfa
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e24:	2300      	movs	r3, #0
 8004e26:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 5000;
 8004e28:	4a1d      	ldr	r2, [pc, #116]	; (8004ea0 <MX_TIM16_Init+0xa0>)
 8004e2a:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e2c:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8004e2e:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e30:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004e32:	f003 fb49 	bl	80084c8 <HAL_TIM_Base_Init>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d126      	bne.n	8004e88 <MX_TIM16_Init+0x88>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8004e3a:	4817      	ldr	r0, [pc, #92]	; (8004e98 <MX_TIM16_Init+0x98>)
 8004e3c:	f003 fb74 	bl	8008528 <HAL_TIM_OC_Init>
 8004e40:	2800      	cmp	r0, #0
 8004e42:	d123      	bne.n	8004e8c <MX_TIM16_Init+0x8c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004e44:	2300      	movs	r3, #0
 8004e46:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8004e48:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e4a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e4c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e4e:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e50:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e52:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e54:	2200      	movs	r2, #0
 8004e56:	a90d      	add	r1, sp, #52	; 0x34
 8004e58:	480f      	ldr	r0, [pc, #60]	; (8004e98 <MX_TIM16_Init+0x98>)
 8004e5a:	f003 fbd9 	bl	8008610 <HAL_TIM_OC_ConfigChannel>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d116      	bne.n	8004e90 <MX_TIM16_Init+0x90>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e66:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e68:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e6a:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e6c:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e6e:	2280      	movs	r2, #128	; 0x80
 8004e70:	0192      	lsls	r2, r2, #6
 8004e72:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004e74:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e76:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8004e78:	4669      	mov	r1, sp
 8004e7a:	4807      	ldr	r0, [pc, #28]	; (8004e98 <MX_TIM16_Init+0x98>)
 8004e7c:	f003 fcce 	bl	800881c <HAL_TIMEx_ConfigBreakDeadTime>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d107      	bne.n	8004e94 <MX_TIM16_Init+0x94>
}
 8004e84:	b015      	add	sp, #84	; 0x54
 8004e86:	bd00      	pop	{pc}
    Error_Handler();
 8004e88:	f7ff fe32 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004e8c:	f7ff fe30 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004e90:	f7ff fe2e 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004e94:	f7ff fe2c 	bl	8004af0 <Error_Handler>
 8004e98:	20000ecc 	.word	0x20000ecc
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	00001388 	.word	0x00001388

08004ea4 <MX_TIM17_Init>:
{
 8004ea4:	b500      	push	{lr}
 8004ea6:	b095      	sub	sp, #84	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ea8:	221c      	movs	r2, #28
 8004eaa:	2100      	movs	r1, #0
 8004eac:	a80d      	add	r0, sp, #52	; 0x34
 8004eae:	f005 fe22 	bl	800aaf6 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004eb2:	2234      	movs	r2, #52	; 0x34
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4668      	mov	r0, sp
 8004eb8:	f005 fe1d 	bl	800aaf6 <memset>
  htim17.Instance = TIM17;
 8004ebc:	481f      	ldr	r0, [pc, #124]	; (8004f3c <MX_TIM17_Init+0x98>)
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <MX_TIM17_Init+0x9c>)
 8004ec0:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 64000;
 8004ec2:	23fa      	movs	r3, #250	; 0xfa
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 5000;
 8004ecc:	4a1d      	ldr	r2, [pc, #116]	; (8004f44 <MX_TIM17_Init+0xa0>)
 8004ece:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ed0:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8004ed2:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004ed6:	f003 faf7 	bl	80084c8 <HAL_TIM_Base_Init>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d126      	bne.n	8004f2c <MX_TIM17_Init+0x88>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8004ede:	4817      	ldr	r0, [pc, #92]	; (8004f3c <MX_TIM17_Init+0x98>)
 8004ee0:	f003 fb22 	bl	8008528 <HAL_TIM_OC_Init>
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d123      	bne.n	8004f30 <MX_TIM17_Init+0x8c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8004eec:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eee:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ef0:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ef2:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ef4:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ef6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	a90d      	add	r1, sp, #52	; 0x34
 8004efc:	480f      	ldr	r0, [pc, #60]	; (8004f3c <MX_TIM17_Init+0x98>)
 8004efe:	f003 fb87 	bl	8008610 <HAL_TIM_OC_ConfigChannel>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d116      	bne.n	8004f34 <MX_TIM17_Init+0x90>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f06:	2300      	movs	r3, #0
 8004f08:	9300      	str	r3, [sp, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f0a:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f0c:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f0e:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f10:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	0192      	lsls	r2, r2, #6
 8004f16:	9205      	str	r2, [sp, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004f18:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f1a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004f1c:	4669      	mov	r1, sp
 8004f1e:	4807      	ldr	r0, [pc, #28]	; (8004f3c <MX_TIM17_Init+0x98>)
 8004f20:	f003 fc7c 	bl	800881c <HAL_TIMEx_ConfigBreakDeadTime>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	d107      	bne.n	8004f38 <MX_TIM17_Init+0x94>
}
 8004f28:	b015      	add	sp, #84	; 0x54
 8004f2a:	bd00      	pop	{pc}
    Error_Handler();
 8004f2c:	f7ff fde0 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004f30:	f7ff fdde 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004f34:	f7ff fddc 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004f38:	f7ff fdda 	bl	8004af0 <Error_Handler>
 8004f3c:	20000f18 	.word	0x20000f18
 8004f40:	40014800 	.word	0x40014800
 8004f44:	00001388 	.word	0x00001388

08004f48 <MX_TIM7_Init>:
{
 8004f48:	b500      	push	{lr}
 8004f4a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f4c:	220c      	movs	r2, #12
 8004f4e:	2100      	movs	r1, #0
 8004f50:	a801      	add	r0, sp, #4
 8004f52:	f005 fdd0 	bl	800aaf6 <memset>
  htim7.Instance = TIM7;
 8004f56:	480f      	ldr	r0, [pc, #60]	; (8004f94 <MX_TIM7_Init+0x4c>)
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <MX_TIM7_Init+0x50>)
 8004f5a:	6003      	str	r3, [r0, #0]
  htim7.Init.Prescaler = 64000;
 8004f5c:	23fa      	movs	r3, #250	; 0xfa
 8004f5e:	021b      	lsls	r3, r3, #8
 8004f60:	6043      	str	r3, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f62:	2300      	movs	r3, #0
 8004f64:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 500;
 8004f66:	22fa      	movs	r2, #250	; 0xfa
 8004f68:	0052      	lsls	r2, r2, #1
 8004f6a:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f6c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004f6e:	f003 faab 	bl	80084c8 <HAL_TIM_Base_Init>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d10a      	bne.n	8004f8c <MX_TIM7_Init+0x44>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f7a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f7c:	a901      	add	r1, sp, #4
 8004f7e:	4805      	ldr	r0, [pc, #20]	; (8004f94 <MX_TIM7_Init+0x4c>)
 8004f80:	f003 fc0c 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d103      	bne.n	8004f90 <MX_TIM7_Init+0x48>
}
 8004f88:	b005      	add	sp, #20
 8004f8a:	bd00      	pop	{pc}
    Error_Handler();
 8004f8c:	f7ff fdb0 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8004f90:	f7ff fdae 	bl	8004af0 <Error_Handler>
 8004f94:	20000f64 	.word	0x20000f64
 8004f98:	40001400 	.word	0x40001400

08004f9c <SystemClock_Config>:
{
 8004f9c:	b500      	push	{lr}
 8004f9e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fa0:	2238      	movs	r2, #56	; 0x38
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	a804      	add	r0, sp, #16
 8004fa6:	f005 fda6 	bl	800aaf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004faa:	2210      	movs	r2, #16
 8004fac:	2100      	movs	r1, #0
 8004fae:	4668      	mov	r0, sp
 8004fb0:	f005 fda1 	bl	800aaf6 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fb4:	2080      	movs	r0, #128	; 0x80
 8004fb6:	0080      	lsls	r0, r0, #2
 8004fb8:	f001 fe12 	bl	8006be0 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fc0:	2280      	movs	r2, #128	; 0x80
 8004fc2:	0052      	lsls	r2, r2, #1
 8004fc4:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fca:	2140      	movs	r1, #64	; 0x40
 8004fcc:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fce:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004fd0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004fd2:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004fd4:	3306      	adds	r3, #6
 8004fd6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	029b      	lsls	r3, r3, #10
 8004fdc:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004fde:	2380      	movs	r3, #128	; 0x80
 8004fe0:	049b      	lsls	r3, r3, #18
 8004fe2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	059b      	lsls	r3, r3, #22
 8004fe8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fea:	a804      	add	r0, sp, #16
 8004fec:	f001 fe22 	bl	8006c34 <HAL_RCC_OscConfig>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d10e      	bne.n	8005012 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ff4:	2307      	movs	r3, #7
 8004ff6:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ff8:	3b05      	subs	r3, #5
 8004ffa:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005000:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005002:	2102      	movs	r1, #2
 8005004:	4668      	mov	r0, sp
 8005006:	f002 f8cd 	bl	80071a4 <HAL_RCC_ClockConfig>
 800500a:	2800      	cmp	r0, #0
 800500c:	d103      	bne.n	8005016 <SystemClock_Config+0x7a>
}
 800500e:	b013      	add	sp, #76	; 0x4c
 8005010:	bd00      	pop	{pc}
    Error_Handler();
 8005012:	f7ff fd6d 	bl	8004af0 <Error_Handler>
    Error_Handler();
 8005016:	f7ff fd6b 	bl	8004af0 <Error_Handler>
	...

0800501c <main>:
{
 800501c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800501e:	46c6      	mov	lr, r8
 8005020:	b500      	push	{lr}
 8005022:	b0b0      	sub	sp, #192	; 0xc0
  bme680.dev_id = BME680;
 8005024:	ab13      	add	r3, sp, #76	; 0x4c
 8005026:	2202      	movs	r2, #2
 8005028:	705a      	strb	r2, [r3, #1]
  bme680.intf = BME680_SPI_INTF;
 800502a:	2200      	movs	r2, #0
 800502c:	709a      	strb	r2, [r3, #2]
  bme680.read = bus_read;
 800502e:	4adb      	ldr	r2, [pc, #876]	; (800539c <main+0x380>)
 8005030:	9225      	str	r2, [sp, #148]	; 0x94
  bme680.write = bus_write;
 8005032:	4adb      	ldr	r2, [pc, #876]	; (80053a0 <main+0x384>)
 8005034:	9226      	str	r2, [sp, #152]	; 0x98
  bme680.delay_ms = HAL_Delay;
 8005036:	4adb      	ldr	r2, [pc, #876]	; (80053a4 <main+0x388>)
 8005038:	9227      	str	r2, [sp, #156]	; 0x9c
  bme680.amb_temp = 25;
 800503a:	2219      	movs	r2, #25
 800503c:	711a      	strb	r2, [r3, #4]
  bme680.hspi = &hspi1;
 800503e:	4ada      	ldr	r2, [pc, #872]	; (80053a8 <main+0x38c>)
 8005040:	9229      	str	r2, [sp, #164]	; 0xa4
  HAL_Init();
 8005042:	f000 fe67 	bl	8005d14 <HAL_Init>
  SystemClock_Config();
 8005046:	f7ff ffa9 	bl	8004f9c <SystemClock_Config>
  MX_GPIO_Init();
 800504a:	f7ff f943 	bl	80042d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800504e:	f7ff f9b9 	bl	80043c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8005052:	f7ff fd4f 	bl	8004af4 <MX_ADC1_Init>
  MX_CRC_Init();
 8005056:	f7ff fdcd 	bl	8004bf4 <MX_CRC_Init>
  MX_SPI1_Init();
 800505a:	f7ff fde1 	bl	8004c20 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800505e:	f7ff fe07 	bl	8004c70 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8005062:	f7ff fe39 	bl	8004cd8 <MX_USART4_UART_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8005066:	f004 f821 	bl	80090ac <MX_FATFS_Init>
 800506a:	2800      	cmp	r0, #0
 800506c:	d119      	bne.n	80050a2 <main+0x86>
  MX_TIM15_Init();
 800506e:	f7ff fe51 	bl	8004d14 <MX_TIM15_Init>
  MX_TIM14_Init();
 8005072:	f7ff fe8f 	bl	8004d94 <MX_TIM14_Init>
  MX_TIM16_Init();
 8005076:	f7ff fec3 	bl	8004e00 <MX_TIM16_Init>
  MX_TIM17_Init();
 800507a:	f7ff ff13 	bl	8004ea4 <MX_TIM17_Init>
  MX_TIM7_Init();
 800507e:	f7ff ff63 	bl	8004f48 <MX_TIM7_Init>
  	HAL_Delay(2000);
 8005082:	20fa      	movs	r0, #250	; 0xfa
 8005084:	00c0      	lsls	r0, r0, #3
 8005086:	f000 fe6b 	bl	8005d60 <HAL_Delay>
  	sd_file_cnt = 0;
 800508a:	2300      	movs	r3, #0
 800508c:	4ac7      	ldr	r2, [pc, #796]	; (80053ac <main+0x390>)
 800508e:	7013      	strb	r3, [r2, #0]
  	sd_error_cnt = 0;
 8005090:	4ac7      	ldr	r2, [pc, #796]	; (80053b0 <main+0x394>)
 8005092:	7013      	strb	r3, [r2, #0]
  	sd_mounted = 0;
 8005094:	4ac7      	ldr	r2, [pc, #796]	; (80053b4 <main+0x398>)
 8005096:	7013      	strb	r3, [r2, #0]
  	sd_status =  Mount_open_SD_Card();
 8005098:	f7ff fc7e 	bl	8004998 <Mount_open_SD_Card>
 800509c:	4bc6      	ldr	r3, [pc, #792]	; (80053b8 <main+0x39c>)
 800509e:	7018      	strb	r0, [r3, #0]
  	while(sd_status == FR_NOT_READY)
 80050a0:	e005      	b.n	80050ae <main+0x92>
    Error_Handler();
 80050a2:	f7ff fd25 	bl	8004af0 <Error_Handler>
  		sd_status = Mount_open_SD_Card();
 80050a6:	f7ff fc77 	bl	8004998 <Mount_open_SD_Card>
 80050aa:	4bc3      	ldr	r3, [pc, #780]	; (80053b8 <main+0x39c>)
 80050ac:	7018      	strb	r0, [r3, #0]
  	while(sd_status == FR_NOT_READY)
 80050ae:	4bc2      	ldr	r3, [pc, #776]	; (80053b8 <main+0x39c>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d0f7      	beq.n	80050a6 <main+0x8a>
  	if(sd_status == FR_OK){
 80050b6:	4bc0      	ldr	r3, [pc, #768]	; (80053b8 <main+0x39c>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d146      	bne.n	800514c <main+0x130>
  		sd_mounted = 1;
 80050be:	4bbd      	ldr	r3, [pc, #756]	; (80053b4 <main+0x398>)
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
        CAM_1.CAM_HB_Pin = CAM_HB_0_Pin;
 80050c4:	4dbd      	ldr	r5, [pc, #756]	; (80053bc <main+0x3a0>)
 80050c6:	4bbe      	ldr	r3, [pc, #760]	; (80053c0 <main+0x3a4>)
 80050c8:	802b      	strh	r3, [r5, #0]
        CAM_1.CAM_HB_Port = CAM_HB_0_GPIO_Port;
 80050ca:	23a0      	movs	r3, #160	; 0xa0
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	606b      	str	r3, [r5, #4]
        CAM_1.CAM_ON_OFF = CAM0_ON;
 80050d0:	2300      	movs	r3, #0
 80050d2:	722b      	strb	r3, [r5, #8]
        CAM_1.REC_CAM = CAM0_REC;
 80050d4:	2201      	movs	r2, #1
 80050d6:	726a      	strb	r2, [r5, #9]
  		CAM_1.REC_STATUS = CAM_NREC;
 80050d8:	742b      	strb	r3, [r5, #16]
  		CAM_1.TIM = &htim16;
 80050da:	4aba      	ldr	r2, [pc, #744]	; (80053c4 <main+0x3a8>)
 80050dc:	60ea      	str	r2, [r5, #12]
  		CAM_1.Do_Restart = 0;
 80050de:	746b      	strb	r3, [r5, #17]
  		CAM_1.Do_EXTI = 0;
 80050e0:	74ab      	strb	r3, [r5, #18]
  		CAM_1.Startup_delay = CAM_STARTUP_TIME;
 80050e2:	2206      	movs	r2, #6
 80050e4:	74ea      	strb	r2, [r5, #19]
  		CAM_1.CAM_STATUS = CAM_OFF;
 80050e6:	752b      	strb	r3, [r5, #20]
  		CAM_2.CAM_HB_Pin = CAM_HB_1_Pin;
 80050e8:	4cb7      	ldr	r4, [pc, #732]	; (80053c8 <main+0x3ac>)
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	0049      	lsls	r1, r1, #1
 80050ee:	8021      	strh	r1, [r4, #0]
        CAM_2.CAM_HB_Port = CAM_HB_1_GPIO_Port;
 80050f0:	49b6      	ldr	r1, [pc, #728]	; (80053cc <main+0x3b0>)
 80050f2:	6061      	str	r1, [r4, #4]
        CAM_2.CAM_ON_OFF = CAM1_ON;
 80050f4:	2102      	movs	r1, #2
 80050f6:	7221      	strb	r1, [r4, #8]
        CAM_2.REC_CAM = CAM1_REC;
 80050f8:	3101      	adds	r1, #1
 80050fa:	7261      	strb	r1, [r4, #9]
        CAM_2.REC_STATUS = CAM_NREC;
 80050fc:	7423      	strb	r3, [r4, #16]
  		CAM_2.TIM = &htim17;
 80050fe:	49b4      	ldr	r1, [pc, #720]	; (80053d0 <main+0x3b4>)
 8005100:	60e1      	str	r1, [r4, #12]
  		CAM_2.Do_Restart = 0;
 8005102:	7463      	strb	r3, [r4, #17]
  		CAM_2.Do_EXTI = 0;
 8005104:	74a3      	strb	r3, [r4, #18]
  		CAM_2.Startup_delay = CAM_STARTUP_TIME;
 8005106:	74e2      	strb	r2, [r4, #19]
  		CAM_2.CAM_STATUS = CAM_OFF;
 8005108:	7523      	strb	r3, [r4, #20]
  		ON_CAM(&CAM_1);
 800510a:	0028      	movs	r0, r5
 800510c:	f7ff fcc8 	bl	8004aa0 <ON_CAM>
  		ON_CAM(&CAM_2);
 8005110:	0020      	movs	r0, r4
 8005112:	f7ff fcc5 	bl	8004aa0 <ON_CAM>
  		START_CAM(&CAM_1);
 8005116:	0028      	movs	r0, r5
 8005118:	f7ff fcd6 	bl	8004ac8 <START_CAM>
  		START_CAM(&CAM_2);
 800511c:	0020      	movs	r0, r4
 800511e:	f7ff fcd3 	bl	8004ac8 <START_CAM>
 if(mcp795_init(&rtc, &hspi1, RTC_MOD) == 6){
 8005122:	2200      	movs	r2, #0
 8005124:	49a0      	ldr	r1, [pc, #640]	; (80053a8 <main+0x38c>)
 8005126:	a82e      	add	r0, sp, #184	; 0xb8
 8005128:	f000 faa0 	bl	800566c <mcp795_init>
 800512c:	2806      	cmp	r0, #6
 800512e:	d014      	beq.n	800515a <main+0x13e>
     printf("RTC INIT success!\r\n");
 8005130:	48a8      	ldr	r0, [pc, #672]	; (80053d4 <main+0x3b8>)
 8005132:	f006 f9e3 	bl	800b4fc <puts>
 if (adt7310_init(&adt7310_in, &hspi1, TEMP_IN) != 0){
 8005136:	2204      	movs	r2, #4
 8005138:	499b      	ldr	r1, [pc, #620]	; (80053a8 <main+0x38c>)
 800513a:	a82c      	add	r0, sp, #176	; 0xb0
 800513c:	f7fe f9dd 	bl	80034fa <adt7310_init>
 8005140:	2800      	cmp	r0, #0
 8005142:	d00e      	beq.n	8005162 <main+0x146>
     printf("ADT7310 TEMP_IN INIT FAILED!\r\n");
 8005144:	48a4      	ldr	r0, [pc, #656]	; (80053d8 <main+0x3bc>)
 8005146:	f006 f9d9 	bl	800b4fc <puts>
	 for(;;);
 800514a:	e7fe      	b.n	800514a <main+0x12e>
  		printf("Card status: %u\r\n",sd_status);
 800514c:	4b9a      	ldr	r3, [pc, #616]	; (80053b8 <main+0x39c>)
 800514e:	7819      	ldrb	r1, [r3, #0]
 8005150:	b2c9      	uxtb	r1, r1
 8005152:	48a2      	ldr	r0, [pc, #648]	; (80053dc <main+0x3c0>)
 8005154:	f006 f946 	bl	800b3e4 <iprintf>
 8005158:	e7b4      	b.n	80050c4 <main+0xa8>
	 printf("RTC INIT FAILED!\r\n");
 800515a:	48a1      	ldr	r0, [pc, #644]	; (80053e0 <main+0x3c4>)
 800515c:	f006 f9ce 	bl	800b4fc <puts>
	 for(;;);
 8005160:	e7fe      	b.n	8005160 <main+0x144>
     printf("ADT7310 TEMP_IN INIT successful!\r\n");
 8005162:	48a0      	ldr	r0, [pc, #640]	; (80053e4 <main+0x3c8>)
 8005164:	f006 f9ca 	bl	800b4fc <puts>
 if (adt7310_init(&adt7310_out, &hspi1, TEMP_OUT) != 0){
 8005168:	2203      	movs	r2, #3
 800516a:	498f      	ldr	r1, [pc, #572]	; (80053a8 <main+0x38c>)
 800516c:	a82a      	add	r0, sp, #168	; 0xa8
 800516e:	f7fe f9c4 	bl	80034fa <adt7310_init>
 8005172:	2800      	cmp	r0, #0
 8005174:	d003      	beq.n	800517e <main+0x162>
     printf("ADT7310 TEMP_OUT INIT FAILED!\r\n");
 8005176:	489c      	ldr	r0, [pc, #624]	; (80053e8 <main+0x3cc>)
 8005178:	f006 f9c0 	bl	800b4fc <puts>
     for(;;);
 800517c:	e7fe      	b.n	800517c <main+0x160>
     printf("ADT7310 TEMP_OUT INIT successful!\r\n");
 800517e:	489b      	ldr	r0, [pc, #620]	; (80053ec <main+0x3d0>)
 8005180:	f006 f9bc 	bl	800b4fc <puts>
 printf("\n\nStarting\n");
 8005184:	489a      	ldr	r0, [pc, #616]	; (80053f0 <main+0x3d4>)
 8005186:	f006 f9b9 	bl	800b4fc <puts>
 printf("VREFINT_CAL = %d (0x%04x)\n", (uint16_t)*VREFINT_CAL_ADDR, (uint16_t)*VREFINT_CAL_ADDR);
 800518a:	4b9a      	ldr	r3, [pc, #616]	; (80053f4 <main+0x3d8>)
 800518c:	8819      	ldrh	r1, [r3, #0]
 800518e:	000a      	movs	r2, r1
 8005190:	4899      	ldr	r0, [pc, #612]	; (80053f8 <main+0x3dc>)
 8005192:	f006 f927 	bl	800b3e4 <iprintf>
 printf("TEMPSENSOR_CAL1 = %d (0x%04x)\n", (uint16_t)*TEMPSENSOR_CAL1_ADDR, (uint16_t)*TEMPSENSOR_CAL1_ADDR);
 8005196:	4b99      	ldr	r3, [pc, #612]	; (80053fc <main+0x3e0>)
 8005198:	8819      	ldrh	r1, [r3, #0]
 800519a:	000a      	movs	r2, r1
 800519c:	4898      	ldr	r0, [pc, #608]	; (8005400 <main+0x3e4>)
 800519e:	f006 f921 	bl	800b3e4 <iprintf>
 printf("TEMPSENSOR_CAL2 = %d (0x%04x)\n", (uint16_t)*TEMPSENSOR_CAL2_ADDR, (uint16_t)*TEMPSENSOR_CAL2_ADDR);
 80051a2:	4b98      	ldr	r3, [pc, #608]	; (8005404 <main+0x3e8>)
 80051a4:	8819      	ldrh	r1, [r3, #0]
 80051a6:	000a      	movs	r2, r1
 80051a8:	4897      	ldr	r0, [pc, #604]	; (8005408 <main+0x3ec>)
 80051aa:	f006 f91b 	bl	800b3e4 <iprintf>
 calculate_calibration();
 80051ae:	f7ff fa4f 	bl	8004650 <calculate_calibration>
 printf("Temp calibration: t = %0.3f * tmeasured + %0.3f\r\n", ta, tb);
 80051b2:	4b96      	ldr	r3, [pc, #600]	; (800540c <main+0x3f0>)
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f7fd fef9 	bl	8002fac <__aeabi_f2d>
 80051ba:	0004      	movs	r4, r0
 80051bc:	000d      	movs	r5, r1
 80051be:	4b94      	ldr	r3, [pc, #592]	; (8005410 <main+0x3f4>)
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	f7fd fef3 	bl	8002fac <__aeabi_f2d>
 80051c6:	9000      	str	r0, [sp, #0]
 80051c8:	9101      	str	r1, [sp, #4]
 80051ca:	0022      	movs	r2, r4
 80051cc:	002b      	movs	r3, r5
 80051ce:	4891      	ldr	r0, [pc, #580]	; (8005414 <main+0x3f8>)
 80051d0:	f006 f908 	bl	800b3e4 <iprintf>
 mcp795_start_counting(&rtc);
 80051d4:	a82e      	add	r0, sp, #184	; 0xb8
 80051d6:	f000 fae3 	bl	80057a0 <mcp795_start_counting>
 HAL_TIM_Base_Start_IT(&htim7); // First get the timer running
 80051da:	488f      	ldr	r0, [pc, #572]	; (8005418 <main+0x3fc>)
 80051dc:	f003 f824 	bl	8008228 <HAL_TIM_Base_Start_IT>
 HAL_TIM_Base_Start_IT(&htim14); // First get the timer running
 80051e0:	488e      	ldr	r0, [pc, #568]	; (800541c <main+0x400>)
 80051e2:	f003 f821 	bl	8008228 <HAL_TIM_Base_Start_IT>
 HAL_TIM_Base_Start_IT(&htim15); // First get the timer running
 80051e6:	488e      	ldr	r0, [pc, #568]	; (8005420 <main+0x404>)
 80051e8:	f003 f81e 	bl	8008228 <HAL_TIM_Base_Start_IT>
 HAL_TIM_Base_Start_IT(&htim16); // First get the timer running
 80051ec:	4875      	ldr	r0, [pc, #468]	; (80053c4 <main+0x3a8>)
 80051ee:	f003 f81b 	bl	8008228 <HAL_TIM_Base_Start_IT>
 HAL_TIM_Base_Start_IT(&htim17); // First get the timer running
 80051f2:	4877      	ldr	r0, [pc, #476]	; (80053d0 <main+0x3b4>)
 80051f4:	f003 f818 	bl	8008228 <HAL_TIM_Base_Start_IT>
 HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 5); // Now fire up the ADC DMA
 80051f8:	22c8      	movs	r2, #200	; 0xc8
 80051fa:	0092      	lsls	r2, r2, #2
 80051fc:	4989      	ldr	r1, [pc, #548]	; (8005424 <main+0x408>)
 80051fe:	488a      	ldr	r0, [pc, #552]	; (8005428 <main+0x40c>)
 8005200:	f001 f998 	bl	8006534 <HAL_ADC_Start_DMA>
  uint8_t command[2] =  {0};
 8005204:	2300      	movs	r3, #0
 8005206:	aa02      	add	r2, sp, #8
 8005208:	2140      	movs	r1, #64	; 0x40
 800520a:	1852      	adds	r2, r2, r1
 800520c:	8013      	strh	r3, [r2, #0]
  uint8_t received[2] = {0};
 800520e:	ae11      	add	r6, sp, #68	; 0x44
 8005210:	8033      	strh	r3, [r6, #0]
  command[0] = 0x80 | 0x0F;
 8005212:	228f      	movs	r2, #143	; 0x8f
 8005214:	a802      	add	r0, sp, #8
 8005216:	1841      	adds	r1, r0, r1
 8005218:	700a      	strb	r2, [r1, #0]
  uint8_t config = 0;
 800521a:	253b      	movs	r5, #59	; 0x3b
 800521c:	4684      	mov	ip, r0
 800521e:	4465      	add	r5, ip
 8005220:	702b      	strb	r3, [r5, #0]
  select_sensor(IMU);
 8005222:	2001      	movs	r0, #1
 8005224:	f7ff fa5a 	bl	80046dc <select_sensor>
  HAL_SPI_TransmitReceive(&hspi1, command, received, 2, 100);
 8005228:	4c5f      	ldr	r4, [pc, #380]	; (80053a8 <main+0x38c>)
 800522a:	2364      	movs	r3, #100	; 0x64
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	3b62      	subs	r3, #98	; 0x62
 8005230:	0032      	movs	r2, r6
 8005232:	a912      	add	r1, sp, #72	; 0x48
 8005234:	0020      	movs	r0, r4
 8005236:	f002 fc8f 	bl	8007b58 <HAL_SPI_TransmitReceive>
  deselect_sensors();
 800523a:	f7ff fb21 	bl	8004880 <deselect_sensors>
  adt7310_set_config(&adt7310_in, ADT7310_CONF_RESOLUTION(1) | ADT7310_MODE_1SPS);
 800523e:	21c0      	movs	r1, #192	; 0xc0
 8005240:	a82c      	add	r0, sp, #176	; 0xb0
 8005242:	f7fe f948 	bl	80034d6 <adt7310_set_config>
  adt7310_read_reg(&adt7310_in, 1, 1, &config);
 8005246:	002b      	movs	r3, r5
 8005248:	2201      	movs	r2, #1
 800524a:	0011      	movs	r1, r2
 800524c:	a82c      	add	r0, sp, #176	; 0xb0
 800524e:	f7fe f8e3 	bl	8003418 <adt7310_read_reg>
  adt7310_set_config(&adt7310_out, ADT7310_CONF_RESOLUTION(1) | ADT7310_MODE_1SPS);
 8005252:	21c0      	movs	r1, #192	; 0xc0
 8005254:	a82a      	add	r0, sp, #168	; 0xa8
 8005256:	f7fe f93e 	bl	80034d6 <adt7310_set_config>
  adt7310_read_reg(&adt7310_out, 1, 1, &config);
 800525a:	002b      	movs	r3, r5
 800525c:	2201      	movs	r2, #1
 800525e:	0011      	movs	r1, r2
 8005260:	a82a      	add	r0, sp, #168	; 0xa8
 8005262:	f7fe f8d9 	bl	8003418 <adt7310_read_reg>
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005266:	2301      	movs	r3, #1
 8005268:	6163      	str	r3, [r4, #20]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800526a:	3301      	adds	r3, #1
 800526c:	6123      	str	r3, [r4, #16]
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800526e:	0020      	movs	r0, r4
 8005270:	f002 fb16 	bl	80078a0 <HAL_SPI_Init>
 8005274:	2800      	cmp	r0, #0
 8005276:	d004      	beq.n	8005282 <main+0x266>
}
 8005278:	2001      	movs	r0, #1
 800527a:	b030      	add	sp, #192	; 0xc0
 800527c:	bc80      	pop	{r7}
 800527e:	46b8      	mov	r8, r7
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 HAL_SPI_TransmitReceive(&hspi1, command, received, 2, 100);
 8005282:	ac12      	add	r4, sp, #72	; 0x48
 8005284:	4d48      	ldr	r5, [pc, #288]	; (80053a8 <main+0x38c>)
 8005286:	2664      	movs	r6, #100	; 0x64
 8005288:	9600      	str	r6, [sp, #0]
 800528a:	2302      	movs	r3, #2
 800528c:	aa11      	add	r2, sp, #68	; 0x44
 800528e:	0021      	movs	r1, r4
 8005290:	0028      	movs	r0, r5
 8005292:	f002 fc61 	bl	8007b58 <HAL_SPI_TransmitReceive>
 command[0] = 0x62;
 8005296:	2362      	movs	r3, #98	; 0x62
 8005298:	7023      	strb	r3, [r4, #0]
 command[1] = 0x04;
 800529a:	3b5e      	subs	r3, #94	; 0x5e
 800529c:	7063      	strb	r3, [r4, #1]
 select_sensor(MAG);
 800529e:	2006      	movs	r0, #6
 80052a0:	f7ff fa1c 	bl	80046dc <select_sensor>
 HAL_SPI_TransmitReceive(&hspi1, command, received, 2, 100);
 80052a4:	9600      	str	r6, [sp, #0]
 80052a6:	2302      	movs	r3, #2
 80052a8:	aa11      	add	r2, sp, #68	; 0x44
 80052aa:	0021      	movs	r1, r4
 80052ac:	0028      	movs	r0, r5
 80052ae:	f002 fc53 	bl	8007b58 <HAL_SPI_TransmitReceive>
 deselect_sensors();
 80052b2:	f7ff fae5 	bl	8004880 <deselect_sensors>
 HAL_Delay(100);
 80052b6:	0030      	movs	r0, r6
 80052b8:	f000 fd52 	bl	8005d60 <HAL_Delay>
 command[0] = 0x80 | 0x4F;
 80052bc:	23cf      	movs	r3, #207	; 0xcf
 80052be:	7023      	strb	r3, [r4, #0]
 command[1] = 0x00;
 80052c0:	2700      	movs	r7, #0
 80052c2:	7067      	strb	r7, [r4, #1]
 select_sensor(MAG);
 80052c4:	2006      	movs	r0, #6
 80052c6:	f7ff fa09 	bl	80046dc <select_sensor>
 HAL_SPI_TransmitReceive(&hspi1, command, received, 2, 100);
 80052ca:	9600      	str	r6, [sp, #0]
 80052cc:	2302      	movs	r3, #2
 80052ce:	aa11      	add	r2, sp, #68	; 0x44
 80052d0:	0021      	movs	r1, r4
 80052d2:	0028      	movs	r0, r5
 80052d4:	f002 fc40 	bl	8007b58 <HAL_SPI_TransmitReceive>
 deselect_sensors();
 80052d8:	f7ff fad2 	bl	8004880 <deselect_sensors>
 command[0] = 0x80 | 0x60;
 80052dc:	23e0      	movs	r3, #224	; 0xe0
 80052de:	7023      	strb	r3, [r4, #0]
 command[1] = 0x00;
 80052e0:	7067      	strb	r7, [r4, #1]
 select_sensor(MAG);
 80052e2:	2006      	movs	r0, #6
 80052e4:	f7ff f9fa 	bl	80046dc <select_sensor>
 HAL_SPI_TransmitReceive(&hspi1, command, received, 2, 100);
 80052e8:	9600      	str	r6, [sp, #0]
 80052ea:	2302      	movs	r3, #2
 80052ec:	aa11      	add	r2, sp, #68	; 0x44
 80052ee:	0021      	movs	r1, r4
 80052f0:	0028      	movs	r0, r5
 80052f2:	f002 fc31 	bl	8007b58 <HAL_SPI_TransmitReceive>
 deselect_sensors();
 80052f6:	f7ff fac3 	bl	8004880 <deselect_sensors>
 hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052fa:	616f      	str	r7, [r5, #20]
 hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052fc:	612f      	str	r7, [r5, #16]
 if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80052fe:	0028      	movs	r0, r5
 8005300:	f002 face 	bl	80078a0 <HAL_SPI_Init>
 8005304:	42b8      	cmp	r0, r7
 8005306:	d1b7      	bne.n	8005278 <main+0x25c>
 bme680_init(&bme680);
 8005308:	ac13      	add	r4, sp, #76	; 0x4c
 800530a:	0020      	movs	r0, r4
 800530c:	f7fe fdeb 	bl	8003ee6 <bme680_init>
 bme680.tph_sett.os_hum = BME680_OS_2X;
 8005310:	2302      	movs	r3, #2
 8005312:	2238      	movs	r2, #56	; 0x38
 8005314:	54a3      	strb	r3, [r4, r2]
 bme680.tph_sett.os_pres = BME680_OS_4X;
 8005316:	3202      	adds	r2, #2
 8005318:	2103      	movs	r1, #3
 800531a:	54a1      	strb	r1, [r4, r2]
 bme680.tph_sett.os_temp = BME680_OS_8X;
 800531c:	3a01      	subs	r2, #1
 800531e:	3101      	adds	r1, #1
 8005320:	54a1      	strb	r1, [r4, r2]
 bme680.tph_sett.filter = BME680_FILTER_SIZE_3;
 8005322:	3202      	adds	r2, #2
 8005324:	54a3      	strb	r3, [r4, r2]
 bme680.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 8005326:	3b01      	subs	r3, #1
 8005328:	3203      	adds	r2, #3
 800532a:	54a3      	strb	r3, [r4, r2]
 bme680.gas_sett.heatr_temp = 320; /* degree Celsius */
 800532c:	3202      	adds	r2, #2
 800532e:	313d      	adds	r1, #61	; 0x3d
 8005330:	31ff      	adds	r1, #255	; 0xff
 8005332:	52a1      	strh	r1, [r4, r2]
 bme680.gas_sett.heatr_dur = 150; /* milliseconds */
 8005334:	3202      	adds	r2, #2
 8005336:	39aa      	subs	r1, #170	; 0xaa
 8005338:	52a1      	strh	r1, [r4, r2]
 bme680.power_mode = BME680_FORCED_MODE;
 800533a:	3202      	adds	r2, #2
 800533c:	54a3      	strb	r3, [r4, r2]
  set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL
 800533e:	20df      	movs	r0, #223	; 0xdf
 8005340:	4b3a      	ldr	r3, [pc, #232]	; (800542c <main+0x410>)
 8005342:	7018      	strb	r0, [r3, #0]
  bme680_set_sensor_settings(set_required_settings,&bme680);
 8005344:	0021      	movs	r1, r4
 8005346:	f7fe fe37 	bl	8003fb8 <bme680_set_sensor_settings>
  bme680_set_sensor_mode(&bme680);
 800534a:	0020      	movs	r0, r4
 800534c:	f7fe fde9 	bl	8003f22 <bme680_set_sensor_mode>
  uint8_t lol = 255;
 8005350:	23ff      	movs	r3, #255	; 0xff
 8005352:	223a      	movs	r2, #58	; 0x3a
 8005354:	a902      	add	r1, sp, #8
 8005356:	468c      	mov	ip, r1
 8005358:	4462      	add	r2, ip
 800535a:	7013      	strb	r3, [r2, #0]
  uint8_t lol1 = 255;
 800535c:	2239      	movs	r2, #57	; 0x39
 800535e:	4462      	add	r2, ip
 8005360:	7013      	strb	r3, [r2, #0]
     bme680_get_profile_dur(&meas_period, &bme680);
 8005362:	0021      	movs	r1, r4
 8005364:	2036      	movs	r0, #54	; 0x36
 8005366:	4460      	add	r0, ip
 8005368:	f7fe ff66 	bl	8004238 <bme680_get_profile_dur>
	  uint32_t now = 0, then = 0;
 800536c:	003c      	movs	r4, r7
 800536e:	e06c      	b.n	800544a <main+0x42e>
				     printf("TEMP_IN: %f °C\r\n", adt7310_read_float(&adt7310_in));
 8005370:	a82c      	add	r0, sp, #176	; 0xb0
 8005372:	f7fe f90b 	bl	800358c <adt7310_read_float>
 8005376:	f7fd fe19 	bl	8002fac <__aeabi_f2d>
 800537a:	0002      	movs	r2, r0
 800537c:	000b      	movs	r3, r1
 800537e:	482c      	ldr	r0, [pc, #176]	; (8005430 <main+0x414>)
 8005380:	f006 f830 	bl	800b3e4 <iprintf>
 8005384:	e0d3      	b.n	800552e <main+0x512>
                      printf("TEMP_OUT: %f °C\r\n", adt7310_read_float(&adt7310_out));
 8005386:	a82a      	add	r0, sp, #168	; 0xa8
 8005388:	f7fe f900 	bl	800358c <adt7310_read_float>
 800538c:	f7fd fe0e 	bl	8002fac <__aeabi_f2d>
 8005390:	0002      	movs	r2, r0
 8005392:	000b      	movs	r3, r1
 8005394:	4827      	ldr	r0, [pc, #156]	; (8005434 <main+0x418>)
 8005396:	f006 f825 	bl	800b3e4 <iprintf>
 800539a:	e0d6      	b.n	800554a <main+0x52e>
 800539c:	08003a5d 	.word	0x08003a5d
 80053a0:	08003a27 	.word	0x08003a27
 80053a4:	08005d61 	.word	0x08005d61
 80053a8:	20000dd0 	.word	0x20000dd0
 80053ac:	200010ed 	.word	0x200010ed
 80053b0:	200010ec 	.word	0x200010ec
 80053b4:	200010ee 	.word	0x200010ee
 80053b8:	200010ef 	.word	0x200010ef
 80053bc:	20000210 	.word	0x20000210
 80053c0:	ffff8000 	.word	0xffff8000
 80053c4:	20000ecc 	.word	0x20000ecc
 80053c8:	20000228 	.word	0x20000228
 80053cc:	50000400 	.word	0x50000400
 80053d0:	20000f18 	.word	0x20000f18
 80053d4:	0800dbc8 	.word	0x0800dbc8
 80053d8:	0800dbdc 	.word	0x0800dbdc
 80053dc:	0800dba0 	.word	0x0800dba0
 80053e0:	0800dbb4 	.word	0x0800dbb4
 80053e4:	0800dbfc 	.word	0x0800dbfc
 80053e8:	0800dc20 	.word	0x0800dc20
 80053ec:	0800dc40 	.word	0x0800dc40
 80053f0:	0800dc64 	.word	0x0800dc64
 80053f4:	1fff75aa 	.word	0x1fff75aa
 80053f8:	0800dc70 	.word	0x0800dc70
 80053fc:	1fff75a8 	.word	0x1fff75a8
 8005400:	0800dc8c 	.word	0x0800dc8c
 8005404:	1fff75ca 	.word	0x1fff75ca
 8005408:	0800dcac 	.word	0x0800dcac
 800540c:	200010f4 	.word	0x200010f4
 8005410:	200010f8 	.word	0x200010f8
 8005414:	0800dccc 	.word	0x0800dccc
 8005418:	20000f64 	.word	0x20000f64
 800541c:	20000e34 	.word	0x20000e34
 8005420:	20000e80 	.word	0x20000e80
 8005424:	20000240 	.word	0x20000240
 8005428:	20000cec 	.word	0x20000cec
 800542c:	200010f0 	.word	0x200010f0
 8005430:	0800dde0 	.word	0x0800dde0
 8005434:	0800ddf4 	.word	0x0800ddf4
                 printf("\r\n");
 8005438:	4865      	ldr	r0, [pc, #404]	; (80055d0 <main+0x5b4>)
 800543a:	f006 f85f 	bl	800b4fc <puts>
                 if (bme680.power_mode == BME680_FORCED_MODE) {
 800543e:	aa13      	add	r2, sp, #76	; 0x4c
 8005440:	2344      	movs	r3, #68	; 0x44
 8005442:	5cd3      	ldrb	r3, [r2, r3]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d100      	bne.n	800544a <main+0x42e>
 8005448:	e0be      	b.n	80055c8 <main+0x5ac>
	  uint32_t now = 0, then = 0;
 800544a:	0025      	movs	r5, r4
			 now = HAL_GetTick();
 800544c:	f000 fc82 	bl	8005d54 <HAL_GetTick>
 8005450:	0004      	movs	r4, r0
			 if (now - then >= 100) {
 8005452:	1b43      	subs	r3, r0, r5
 8005454:	2b63      	cmp	r3, #99	; 0x63
 8005456:	d9f9      	bls.n	800544c <main+0x430>
				 mcp795_read_time(&rtc, &rtc_time);
 8005458:	4d5e      	ldr	r5, [pc, #376]	; (80055d4 <main+0x5b8>)
 800545a:	0029      	movs	r1, r5
 800545c:	a82e      	add	r0, sp, #184	; 0xb8
 800545e:	f000 f929 	bl	80056b4 <mcp795_read_time>
				 printf("Year: 20%02u\r\nMonth: %s\r\nDate: %u\r\nDay: %s\r\nTime: %02u:%02u:%02u:%02u\r\n",rtc_time.year, month(rtc_time.month), rtc_time.date, day_of_the_week(rtc_time.days), rtc_time.hours, rtc_time.minutes, rtc_time.seconds, rtc_time.milliseconds);
 8005462:	7829      	ldrb	r1, [r5, #0]
 8005464:	786b      	ldrb	r3, [r5, #1]
    static const char *week_day[] = {"Unknown_day","Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
    return week_day[day];
}
static inline const char *month(month_t month){
    static const char *months[] = {"Unknown_month","January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    return months[month];
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4a5b      	ldr	r2, [pc, #364]	; (80055d8 <main+0x5bc>)
 800546a:	589a      	ldr	r2, [r3, r2]
 800546c:	78ab      	ldrb	r3, [r5, #2]
 800546e:	4698      	mov	r8, r3
 8005470:	78e8      	ldrb	r0, [r5, #3]
    return week_day[day];
 8005472:	0080      	lsls	r0, r0, #2
 8005474:	4e59      	ldr	r6, [pc, #356]	; (80055dc <main+0x5c0>)
 8005476:	5980      	ldr	r0, [r0, r6]
 8005478:	792e      	ldrb	r6, [r5, #4]
 800547a:	796f      	ldrb	r7, [r5, #5]
 800547c:	79ab      	ldrb	r3, [r5, #6]
 800547e:	79ed      	ldrb	r5, [r5, #7]
 8005480:	9504      	str	r5, [sp, #16]
 8005482:	9303      	str	r3, [sp, #12]
 8005484:	9702      	str	r7, [sp, #8]
 8005486:	9601      	str	r6, [sp, #4]
 8005488:	9000      	str	r0, [sp, #0]
 800548a:	4643      	mov	r3, r8
 800548c:	4854      	ldr	r0, [pc, #336]	; (80055e0 <main+0x5c4>)
 800548e:	f005 ffa9 	bl	800b3e4 <iprintf>
				 printf("VDDA = %5.3f V Vref = %5.3f V (raw = %d) Temp = %4.2f °C (raw = %d)\r\n", vdda, vref, vref_avg, temp, temp_avg);
 8005492:	4b54      	ldr	r3, [pc, #336]	; (80055e4 <main+0x5c8>)
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	f7fd fd89 	bl	8002fac <__aeabi_f2d>
 800549a:	0006      	movs	r6, r0
 800549c:	000f      	movs	r7, r1
 800549e:	4b52      	ldr	r3, [pc, #328]	; (80055e8 <main+0x5cc>)
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	9306      	str	r3, [sp, #24]
 80054a4:	4b51      	ldr	r3, [pc, #324]	; (80055ec <main+0x5d0>)
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	f7fd fd80 	bl	8002fac <__aeabi_f2d>
 80054ac:	9004      	str	r0, [sp, #16]
 80054ae:	9105      	str	r1, [sp, #20]
 80054b0:	4b4f      	ldr	r3, [pc, #316]	; (80055f0 <main+0x5d4>)
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	9302      	str	r3, [sp, #8]
 80054b6:	4b4f      	ldr	r3, [pc, #316]	; (80055f4 <main+0x5d8>)
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f7fd fd77 	bl	8002fac <__aeabi_f2d>
 80054be:	9000      	str	r0, [sp, #0]
 80054c0:	9101      	str	r1, [sp, #4]
 80054c2:	0032      	movs	r2, r6
 80054c4:	003b      	movs	r3, r7
 80054c6:	484c      	ldr	r0, [pc, #304]	; (80055f8 <main+0x5dc>)
 80054c8:	f005 ff8c 	bl	800b3e4 <iprintf>
				 printf("V_BAT = %5.3f V V_3.3 = %5.3f V V_4 = %5.3f V  I_4V = %5.3f A I_3.3V = %5.3f \r\n", bat_v, v3_3, v4, i4, i3_3);
 80054cc:	4b4b      	ldr	r3, [pc, #300]	; (80055fc <main+0x5e0>)
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	f7fd fd6c 	bl	8002fac <__aeabi_f2d>
 80054d4:	0006      	movs	r6, r0
 80054d6:	000f      	movs	r7, r1
 80054d8:	4b49      	ldr	r3, [pc, #292]	; (8005600 <main+0x5e4>)
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	f7fd fd66 	bl	8002fac <__aeabi_f2d>
 80054e0:	9006      	str	r0, [sp, #24]
 80054e2:	9107      	str	r1, [sp, #28]
 80054e4:	4b47      	ldr	r3, [pc, #284]	; (8005604 <main+0x5e8>)
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	f7fd fd60 	bl	8002fac <__aeabi_f2d>
 80054ec:	9004      	str	r0, [sp, #16]
 80054ee:	9105      	str	r1, [sp, #20]
 80054f0:	4b45      	ldr	r3, [pc, #276]	; (8005608 <main+0x5ec>)
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	f7fd fd5a 	bl	8002fac <__aeabi_f2d>
 80054f8:	9002      	str	r0, [sp, #8]
 80054fa:	9103      	str	r1, [sp, #12]
 80054fc:	4b43      	ldr	r3, [pc, #268]	; (800560c <main+0x5f0>)
 80054fe:	6818      	ldr	r0, [r3, #0]
 8005500:	f7fd fd54 	bl	8002fac <__aeabi_f2d>
 8005504:	9000      	str	r0, [sp, #0]
 8005506:	9101      	str	r1, [sp, #4]
 8005508:	0032      	movs	r2, r6
 800550a:	003b      	movs	r3, r7
 800550c:	4840      	ldr	r0, [pc, #256]	; (8005610 <main+0x5f4>)
 800550e:	f005 ff69 	bl	800b3e4 <iprintf>
				 adt7310_read_reg(&adt7310_in, 0x00, 1, &lol);
 8005512:	253a      	movs	r5, #58	; 0x3a
 8005514:	ab02      	add	r3, sp, #8
 8005516:	469c      	mov	ip, r3
 8005518:	4465      	add	r5, ip
 800551a:	002b      	movs	r3, r5
 800551c:	2201      	movs	r2, #1
 800551e:	2100      	movs	r1, #0
 8005520:	a82c      	add	r0, sp, #176	; 0xb0
 8005522:	f7fd ff79 	bl	8003418 <adt7310_read_reg>
				 if(!(lol & 8)){
 8005526:	782b      	ldrb	r3, [r5, #0]
 8005528:	071b      	lsls	r3, r3, #28
 800552a:	d400      	bmi.n	800552e <main+0x512>
 800552c:	e720      	b.n	8005370 <main+0x354>
				 adt7310_read_reg(&adt7310_in, 0x00, 1, &lol1);
 800552e:	2539      	movs	r5, #57	; 0x39
 8005530:	ab02      	add	r3, sp, #8
 8005532:	469c      	mov	ip, r3
 8005534:	4465      	add	r5, ip
 8005536:	002b      	movs	r3, r5
 8005538:	2201      	movs	r2, #1
 800553a:	2100      	movs	r1, #0
 800553c:	a82c      	add	r0, sp, #176	; 0xb0
 800553e:	f7fd ff6b 	bl	8003418 <adt7310_read_reg>
				 if(!(lol1 & 8)){
 8005542:	782b      	ldrb	r3, [r5, #0]
 8005544:	071b      	lsls	r3, r3, #28
 8005546:	d400      	bmi.n	800554a <main+0x52e>
 8005548:	e71d      	b.n	8005386 <main+0x36a>
				 bme680_get_sensor_data(&data, &bme680);
 800554a:	a913      	add	r1, sp, #76	; 0x4c
 800554c:	a80a      	add	r0, sp, #40	; 0x28
 800554e:	f7fe fea5 	bl	800429c <bme680_get_sensor_data>
                 printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", data.temperature / 100.0f,
 8005552:	ab02      	add	r3, sp, #8
 8005554:	2024      	movs	r0, #36	; 0x24
 8005556:	5e18      	ldrsh	r0, [r3, r0]
 8005558:	f7fb feb2 	bl	80012c0 <__aeabi_i2f>
 800555c:	492d      	ldr	r1, [pc, #180]	; (8005614 <main+0x5f8>)
 800555e:	f7fb fac3 	bl	8000ae8 <__aeabi_fdiv>
 8005562:	1c06      	adds	r6, r0, #0
                     data.pressure / 100.0f, data.humidity / 1000.0f );
 8005564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005566:	9309      	str	r3, [sp, #36]	; 0x24
 8005568:	0018      	movs	r0, r3
 800556a:	f7fb fef7 	bl	800135c <__aeabi_ui2f>
 800556e:	4929      	ldr	r1, [pc, #164]	; (8005614 <main+0x5f8>)
 8005570:	f7fb faba 	bl	8000ae8 <__aeabi_fdiv>
 8005574:	1c05      	adds	r5, r0, #0
 8005576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005578:	9309      	str	r3, [sp, #36]	; 0x24
 800557a:	0018      	movs	r0, r3
 800557c:	f7fb feee 	bl	800135c <__aeabi_ui2f>
 8005580:	4925      	ldr	r1, [pc, #148]	; (8005618 <main+0x5fc>)
 8005582:	f7fb fab1 	bl	8000ae8 <__aeabi_fdiv>
 8005586:	4680      	mov	r8, r0
                 printf("T: %.2f degC, P: %.2f hPa, H %.2f %%rH ", data.temperature / 100.0f,
 8005588:	1c30      	adds	r0, r6, #0
 800558a:	f7fd fd0f 	bl	8002fac <__aeabi_f2d>
 800558e:	0006      	movs	r6, r0
 8005590:	000f      	movs	r7, r1
 8005592:	4640      	mov	r0, r8
 8005594:	f7fd fd0a 	bl	8002fac <__aeabi_f2d>
 8005598:	9002      	str	r0, [sp, #8]
 800559a:	9103      	str	r1, [sp, #12]
 800559c:	1c28      	adds	r0, r5, #0
 800559e:	f7fd fd05 	bl	8002fac <__aeabi_f2d>
 80055a2:	9000      	str	r0, [sp, #0]
 80055a4:	9101      	str	r1, [sp, #4]
 80055a6:	0032      	movs	r2, r6
 80055a8:	003b      	movs	r3, r7
 80055aa:	481c      	ldr	r0, [pc, #112]	; (800561c <main+0x600>)
 80055ac:	f005 ff1a 	bl	800b3e4 <iprintf>
                 if(data.status & BME680_GASM_VALID_MSK)
 80055b0:	ab02      	add	r3, sp, #8
 80055b2:	2220      	movs	r2, #32
 80055b4:	189b      	adds	r3, r3, r2
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	069b      	lsls	r3, r3, #26
 80055ba:	d400      	bmi.n	80055be <main+0x5a2>
 80055bc:	e73c      	b.n	8005438 <main+0x41c>
                     printf(", G: %d ohms", data.gas_resistance);
 80055be:	990e      	ldr	r1, [sp, #56]	; 0x38
 80055c0:	4817      	ldr	r0, [pc, #92]	; (8005620 <main+0x604>)
 80055c2:	f005 ff0f 	bl	800b3e4 <iprintf>
 80055c6:	e737      	b.n	8005438 <main+0x41c>
                     bme680_set_sensor_mode(&bme680);
 80055c8:	0010      	movs	r0, r2
 80055ca:	f7fe fcaa 	bl	8003f22 <bme680_set_sensor_mode>
 80055ce:	e73c      	b.n	800544a <main+0x42e>
 80055d0:	0800dbc4 	.word	0x0800dbc4
 80055d4:	200010e4 	.word	0x200010e4
 80055d8:	0800df0c 	.word	0x0800df0c
 80055dc:	0800df40 	.word	0x0800df40
 80055e0:	0800dd00 	.word	0x0800dd00
 80055e4:	20001110 	.word	0x20001110
 80055e8:	20001100 	.word	0x20001100
 80055ec:	200010fc 	.word	0x200010fc
 80055f0:	20001118 	.word	0x20001118
 80055f4:	20001114 	.word	0x20001114
 80055f8:	0800dd48 	.word	0x0800dd48
 80055fc:	20000880 	.word	0x20000880
 8005600:	200010d8 	.word	0x200010d8
 8005604:	200010dc 	.word	0x200010dc
 8005608:	2000110c 	.word	0x2000110c
 800560c:	20001108 	.word	0x20001108
 8005610:	0800dd90 	.word	0x0800dd90
 8005614:	42c80000 	.word	0x42c80000
 8005618:	447a0000 	.word	0x447a0000
 800561c:	0800de08 	.word	0x0800de08
 8005620:	0800de30 	.word	0x0800de30

08005624 <mcp795_read_id>:
	rtc_status = received[1];
	deselect_sensors();
	return status;
}

int mcp795_read_id(mcp795_t *dev, uint8_t *id, uint16_t len){
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b083      	sub	sp, #12
 8005628:	0004      	movs	r4, r0
 800562a:	000e      	movs	r6, r1
 800562c:	0017      	movs	r7, r2
	int status = 0;
	uint8_t command[2] = {0};
 800562e:	2300      	movs	r3, #0
 8005630:	466a      	mov	r2, sp
 8005632:	8093      	strh	r3, [r2, #4]
	command[0] = IDREAD;
 8005634:	3333      	adds	r3, #51	; 0x33
 8005636:	7113      	strb	r3, [r2, #4]
	command[1] = 0x00;
	select_sensor(dev->sensor_cs);
 8005638:	7900      	ldrb	r0, [r0, #4]
 800563a:	f7ff f84f 	bl	80046dc <select_sensor>
	status = HAL_SPI_Transmit(dev->hspi, command, 2, 100);
 800563e:	2364      	movs	r3, #100	; 0x64
 8005640:	2202      	movs	r2, #2
 8005642:	a901      	add	r1, sp, #4
 8005644:	6820      	ldr	r0, [r4, #0]
 8005646:	f002 f9ad 	bl	80079a4 <HAL_SPI_Transmit>
 800564a:	1e05      	subs	r5, r0, #0
	if (status != HAL_OK){
 800564c:	d10a      	bne.n	8005664 <mcp795_read_id+0x40>
		/* Couldn't communicate with sensor */
		deselect_sensors();
		return HAL_TIMEOUT;
	}
	HAL_SPI_Receive(dev->hspi, id, len, 100);
 800564e:	6820      	ldr	r0, [r4, #0]
 8005650:	2364      	movs	r3, #100	; 0x64
 8005652:	003a      	movs	r2, r7
 8005654:	0031      	movs	r1, r6
 8005656:	f002 fba7 	bl	8007da8 <HAL_SPI_Receive>
	if (status != HAL_OK){
		/* Couldn't communicate with sensor */
		deselect_sensors();
		return HAL_TIMEOUT;
	}
	deselect_sensors();
 800565a:	f7ff f911 	bl	8004880 <deselect_sensors>
	return status;
}
 800565e:	0028      	movs	r0, r5
 8005660:	b003      	add	sp, #12
 8005662:	bdf0      	pop	{r4, r5, r6, r7, pc}
		deselect_sensors();
 8005664:	f7ff f90c 	bl	8004880 <deselect_sensors>
		return HAL_TIMEOUT;
 8005668:	2503      	movs	r5, #3
 800566a:	e7f8      	b.n	800565e <mcp795_read_id+0x3a>

0800566c <mcp795_init>:
int mcp795_init(mcp795_t *dev, SPI_HandleTypeDef *hspi, uint8_t sensor_cs){
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	0004      	movs	r4, r0
 8005672:	000e      	movs	r6, r1
 8005674:	0015      	movs	r5, r2
	uint8_t id[9] = {0};
 8005676:	2300      	movs	r3, #0
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	2205      	movs	r2, #5
 800567c:	2100      	movs	r1, #0
 800567e:	a802      	add	r0, sp, #8
 8005680:	f005 fa39 	bl	800aaf6 <memset>
	dev->hspi = hspi;
 8005684:	6026      	str	r6, [r4, #0]
	dev->sensor_cs = sensor_cs;
 8005686:	7125      	strb	r5, [r4, #4]
	if(mcp795_read_id(dev, id, 8) != HAL_OK){
 8005688:	2208      	movs	r2, #8
 800568a:	a901      	add	r1, sp, #4
 800568c:	0020      	movs	r0, r4
 800568e:	f7ff ffc9 	bl	8005624 <mcp795_read_id>
 8005692:	2800      	cmp	r0, #0
 8005694:	d107      	bne.n	80056a6 <mcp795_init+0x3a>
	 if(strcmp((char *)id, RTC_ID) != 0){
 8005696:	4906      	ldr	r1, [pc, #24]	; (80056b0 <mcp795_init+0x44>)
 8005698:	a801      	add	r0, sp, #4
 800569a:	f7fa fd33 	bl	8000104 <strcmp>
 800569e:	2800      	cmp	r0, #0
 80056a0:	d103      	bne.n	80056aa <mcp795_init+0x3e>
}
 80056a2:	b004      	add	sp, #16
 80056a4:	bd70      	pop	{r4, r5, r6, pc}
		 return HAL_TIMEOUT;
 80056a6:	2003      	movs	r0, #3
 80056a8:	e7fb      	b.n	80056a2 <mcp795_init+0x36>
		 return UNRECOGNIZED_ID;
 80056aa:	2006      	movs	r0, #6
 80056ac:	e7f9      	b.n	80056a2 <mcp795_init+0x36>
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	0800df60 	.word	0x0800df60

080056b4 <mcp795_read_time>:
	}
	deselect_sensors();
	return 0;
}

int mcp795_read_time(mcp795_t *dev, rtc_time_t *rtc_time){
 80056b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b6:	46c6      	mov	lr, r8
 80056b8:	b500      	push	{lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	0005      	movs	r5, r0
 80056be:	000c      	movs	r4, r1
	int status = 0;
	uint8_t command[10] = {0};
 80056c0:	ae05      	add	r6, sp, #20
 80056c2:	2700      	movs	r7, #0
 80056c4:	9705      	str	r7, [sp, #20]
 80056c6:	2206      	movs	r2, #6
 80056c8:	2100      	movs	r1, #0
 80056ca:	a806      	add	r0, sp, #24
 80056cc:	f005 fa13 	bl	800aaf6 <memset>
	uint8_t received[10] = {0};
 80056d0:	9702      	str	r7, [sp, #8]
 80056d2:	2206      	movs	r2, #6
 80056d4:	2100      	movs	r1, #0
 80056d6:	a803      	add	r0, sp, #12
 80056d8:	f005 fa0d 	bl	800aaf6 <memset>
	command[0] = READ;
 80056dc:	2313      	movs	r3, #19
 80056de:	7033      	strb	r3, [r6, #0]
	command[1] = 0x00;
	select_sensor(dev->sensor_cs);
 80056e0:	7928      	ldrb	r0, [r5, #4]
 80056e2:	f7fe fffb 	bl	80046dc <select_sensor>
	status = HAL_SPI_TransmitReceive(dev->hspi, command, received, 10, 100);
 80056e6:	6828      	ldr	r0, [r5, #0]
 80056e8:	2364      	movs	r3, #100	; 0x64
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	3b5a      	subs	r3, #90	; 0x5a
 80056ee:	aa02      	add	r2, sp, #8
 80056f0:	0031      	movs	r1, r6
 80056f2:	f002 fa31 	bl	8007b58 <HAL_SPI_TransmitReceive>
 80056f6:	0005      	movs	r5, r0
	deselect_sensors();
 80056f8:	f7ff f8c2 	bl	8004880 <deselect_sensors>
	if (status != HAL_OK){
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	d14c      	bne.n	800579a <mcp795_read_time+0xe6>
		/* Couldn't communicate with sensor */
		return HAL_TIMEOUT;
	}

	rtc_time->milliseconds = ((received[2] & 0xf0) >> 4) * 10 + (received[2] & 0x0f);
 8005700:	a902      	add	r1, sp, #8
 8005702:	788a      	ldrb	r2, [r1, #2]
 8005704:	0910      	lsrs	r0, r2, #4
 8005706:	230f      	movs	r3, #15
 8005708:	401a      	ands	r2, r3
 800570a:	0086      	lsls	r6, r0, #2
 800570c:	1980      	adds	r0, r0, r6
 800570e:	0040      	lsls	r0, r0, #1
 8005710:	1812      	adds	r2, r2, r0
 8005712:	71e2      	strb	r2, [r4, #7]
	rtc_time->seconds = ((received[3] & 0x70) >> 4) * 10 + (received[3] & 0x0f);
 8005714:	78c8      	ldrb	r0, [r1, #3]
 8005716:	1102      	asrs	r2, r0, #4
 8005718:	4018      	ands	r0, r3
 800571a:	2607      	movs	r6, #7
 800571c:	4032      	ands	r2, r6
 800571e:	0097      	lsls	r7, r2, #2
 8005720:	19d2      	adds	r2, r2, r7
 8005722:	0052      	lsls	r2, r2, #1
 8005724:	1882      	adds	r2, r0, r2
 8005726:	71a2      	strb	r2, [r4, #6]
	rtc_time->minutes = ((received[4] & 0x70) >> 4) * 10 + (received[4] & 0x0f);
 8005728:	7908      	ldrb	r0, [r1, #4]
 800572a:	1102      	asrs	r2, r0, #4
 800572c:	4018      	ands	r0, r3
 800572e:	4032      	ands	r2, r6
 8005730:	0097      	lsls	r7, r2, #2
 8005732:	19d2      	adds	r2, r2, r7
 8005734:	0052      	lsls	r2, r2, #1
 8005736:	1882      	adds	r2, r0, r2
 8005738:	7162      	strb	r2, [r4, #5]
	rtc_time->hours = (((received[5] & 0x30) >> 4) * 10) + (received[5] & 0x0f);
 800573a:	794f      	ldrb	r7, [r1, #5]
 800573c:	1138      	asrs	r0, r7, #4
 800573e:	401f      	ands	r7, r3
 8005740:	2203      	movs	r2, #3
 8005742:	4690      	mov	r8, r2
 8005744:	4010      	ands	r0, r2
 8005746:	0082      	lsls	r2, r0, #2
 8005748:	4694      	mov	ip, r2
 800574a:	4460      	add	r0, ip
 800574c:	0040      	lsls	r0, r0, #1
 800574e:	1838      	adds	r0, r7, r0
 8005750:	7120      	strb	r0, [r4, #4]
	rtc_time->days =  received[6] & 0x07;
 8005752:	7988      	ldrb	r0, [r1, #6]
 8005754:	4006      	ands	r6, r0
 8005756:	70e6      	strb	r6, [r4, #3]
	rtc_time->date = (((received[7] & 0x30) >> 4) * 10) + (received[7] & 0x0f);
 8005758:	79c8      	ldrb	r0, [r1, #7]
 800575a:	1106      	asrs	r6, r0, #4
 800575c:	4018      	ands	r0, r3
 800575e:	4642      	mov	r2, r8
 8005760:	4032      	ands	r2, r6
 8005762:	0096      	lsls	r6, r2, #2
 8005764:	1992      	adds	r2, r2, r6
 8005766:	0052      	lsls	r2, r2, #1
 8005768:	1882      	adds	r2, r0, r2
 800576a:	70a2      	strb	r2, [r4, #2]
	rtc_time->month = (((received[8] & 0x10) >> 4) * 10) + (received[8] & 0x0f);
 800576c:	7a08      	ldrb	r0, [r1, #8]
 800576e:	1106      	asrs	r6, r0, #4
 8005770:	4018      	ands	r0, r3
 8005772:	2201      	movs	r2, #1
 8005774:	4032      	ands	r2, r6
 8005776:	0096      	lsls	r6, r2, #2
 8005778:	1992      	adds	r2, r2, r6
 800577a:	0052      	lsls	r2, r2, #1
 800577c:	1882      	adds	r2, r0, r2
 800577e:	7062      	strb	r2, [r4, #1]
	rtc_time->year = ((received[9] & 0xf0) >> 4) * 10 + (received[9] & 0x0f);
 8005780:	7a49      	ldrb	r1, [r1, #9]
 8005782:	090a      	lsrs	r2, r1, #4
 8005784:	400b      	ands	r3, r1
 8005786:	0091      	lsls	r1, r2, #2
 8005788:	1852      	adds	r2, r2, r1
 800578a:	0052      	lsls	r2, r2, #1
 800578c:	189b      	adds	r3, r3, r2
 800578e:	7023      	strb	r3, [r4, #0]
	return status;
}
 8005790:	0028      	movs	r0, r5
 8005792:	b008      	add	sp, #32
 8005794:	bc80      	pop	{r7}
 8005796:	46b8      	mov	r8, r7
 8005798:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return HAL_TIMEOUT;
 800579a:	2503      	movs	r5, #3
 800579c:	e7f8      	b.n	8005790 <mcp795_read_time+0xdc>
	...

080057a0 <mcp795_start_counting>:
		return HAL_TIMEOUT;
	}
	deselect_sensors();
	return status;
}
int mcp795_start_counting(mcp795_t *dev){
 80057a0:	b530      	push	{r4, r5, lr}
 80057a2:	b083      	sub	sp, #12
 80057a4:	0005      	movs	r5, r0
	int status = 0;
	uint8_t command[3] = {0};
 80057a6:	ac01      	add	r4, sp, #4
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <mcp795_start_counting+0x3c>)
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	8023      	strh	r3, [r4, #0]
 80057ae:	2300      	movs	r3, #0
 80057b0:	70a3      	strb	r3, [r4, #2]
	command[0] = WRITE;
 80057b2:	3312      	adds	r3, #18
 80057b4:	7023      	strb	r3, [r4, #0]
	command[1] = 0x01;
 80057b6:	3b11      	subs	r3, #17
 80057b8:	7063      	strb	r3, [r4, #1]
	command[2] = 0b10000000;
 80057ba:	337f      	adds	r3, #127	; 0x7f
 80057bc:	70a3      	strb	r3, [r4, #2]
	select_sensor(dev->sensor_cs);
 80057be:	7900      	ldrb	r0, [r0, #4]
 80057c0:	f7fe ff8c 	bl	80046dc <select_sensor>
	HAL_SPI_Transmit(dev->hspi, command, 3, 100);
 80057c4:	6828      	ldr	r0, [r5, #0]
 80057c6:	2364      	movs	r3, #100	; 0x64
 80057c8:	2203      	movs	r2, #3
 80057ca:	0021      	movs	r1, r4
 80057cc:	f002 f8ea 	bl	80079a4 <HAL_SPI_Transmit>
	if (status != HAL_OK){
		/* Couldn't communicate with sensor */
		return HAL_TIMEOUT;
	}
	deselect_sensors();
 80057d0:	f7ff f856 	bl	8004880 <deselect_sensors>
	return status;
}
 80057d4:	2000      	movs	r0, #0
 80057d6:	b003      	add	sp, #12
 80057d8:	bd30      	pop	{r4, r5, pc}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	0800d860 	.word	0x0800d860

080057e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e2:	4b0a      	ldr	r3, [pc, #40]	; (800580c <HAL_MspInit+0x2c>)
 80057e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057e6:	2201      	movs	r2, #1
 80057e8:	4311      	orrs	r1, r2
 80057ea:	6419      	str	r1, [r3, #64]	; 0x40
 80057ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80057ee:	400a      	ands	r2, r1
 80057f0:	9200      	str	r2, [sp, #0]
 80057f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057f6:	2180      	movs	r1, #128	; 0x80
 80057f8:	0549      	lsls	r1, r1, #21
 80057fa:	430a      	orrs	r2, r1
 80057fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	400b      	ands	r3, r1
 8005802:	9301      	str	r3, [sp, #4]
 8005804:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005806:	b002      	add	sp, #8
 8005808:	4770      	bx	lr
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	40021000 	.word	0x40021000

08005810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005810:	b510      	push	{r4, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005816:	2214      	movs	r2, #20
 8005818:	2100      	movs	r1, #0
 800581a:	a803      	add	r0, sp, #12
 800581c:	f005 f96b 	bl	800aaf6 <memset>
  if(hadc->Instance==ADC1)
 8005820:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_ADC_MspInit+0x9c>)
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d001      	beq.n	800582c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005828:	b008      	add	sp, #32
 800582a:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 800582c:	4b20      	ldr	r3, [pc, #128]	; (80058b0 <HAL_ADC_MspInit+0xa0>)
 800582e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005830:	2080      	movs	r0, #128	; 0x80
 8005832:	0340      	lsls	r0, r0, #13
 8005834:	4301      	orrs	r1, r0
 8005836:	6419      	str	r1, [r3, #64]	; 0x40
 8005838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800583a:	4002      	ands	r2, r0
 800583c:	9201      	str	r2, [sp, #4]
 800583e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005842:	2201      	movs	r2, #1
 8005844:	4311      	orrs	r1, r2
 8005846:	6359      	str	r1, [r3, #52]	; 0x34
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	401a      	ands	r2, r3
 800584c:	9202      	str	r2, [sp, #8]
 800584e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC_BAT_Pin|ADC_4V_Pin|ADC_3V3_Pin;
 8005850:	231c      	movs	r3, #28
 8005852:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005854:	3b19      	subs	r3, #25
 8005856:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005858:	20a0      	movs	r0, #160	; 0xa0
 800585a:	a903      	add	r1, sp, #12
 800585c:	05c0      	lsls	r0, r0, #23
 800585e:	f001 f8f5 	bl	8006a4c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8005862:	4814      	ldr	r0, [pc, #80]	; (80058b4 <HAL_ADC_MspInit+0xa4>)
 8005864:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <HAL_ADC_MspInit+0xa8>)
 8005866:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005868:	2305      	movs	r3, #5
 800586a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800586c:	2300      	movs	r3, #0
 800586e:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005870:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005876:	3280      	adds	r2, #128	; 0x80
 8005878:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	00d2      	lsls	r2, r2, #3
 800587e:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005880:	2220      	movs	r2, #32
 8005882:	61c2      	str	r2, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005884:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005886:	f000 ffd5 	bl	8006834 <HAL_DMA_Init>
 800588a:	2800      	cmp	r0, #0
 800588c:	d10b      	bne.n	80058a6 <HAL_ADC_MspInit+0x96>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <HAL_ADC_MspInit+0xa4>)
 8005890:	6523      	str	r3, [r4, #80]	; 0x50
 8005892:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8005894:	2200      	movs	r2, #0
 8005896:	2100      	movs	r1, #0
 8005898:	200c      	movs	r0, #12
 800589a:	f000 fead 	bl	80065f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800589e:	200c      	movs	r0, #12
 80058a0:	f000 feda 	bl	8006658 <HAL_NVIC_EnableIRQ>
}
 80058a4:	e7c0      	b.n	8005828 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80058a6:	f7ff f923 	bl	8004af0 <Error_Handler>
 80058aa:	e7f0      	b.n	800588e <HAL_ADC_MspInit+0x7e>
 80058ac:	40012400 	.word	0x40012400
 80058b0:	40021000 	.word	0x40021000
 80058b4:	20000d74 	.word	0x20000d74
 80058b8:	40020008 	.word	0x40020008

080058bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80058bc:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80058be:	6802      	ldr	r2, [r0, #0]
 80058c0:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <HAL_CRC_MspInit+0x24>)
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d001      	beq.n	80058ca <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80058c6:	b002      	add	sp, #8
 80058c8:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 80058ca:	4a06      	ldr	r2, [pc, #24]	; (80058e4 <HAL_CRC_MspInit+0x28>)
 80058cc:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80058ce:	2080      	movs	r0, #128	; 0x80
 80058d0:	0140      	lsls	r0, r0, #5
 80058d2:	4301      	orrs	r1, r0
 80058d4:	6391      	str	r1, [r2, #56]	; 0x38
 80058d6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80058d8:	4003      	ands	r3, r0
 80058da:	9301      	str	r3, [sp, #4]
 80058dc:	9b01      	ldr	r3, [sp, #4]
}
 80058de:	e7f2      	b.n	80058c6 <HAL_CRC_MspInit+0xa>
 80058e0:	40023000 	.word	0x40023000
 80058e4:	40021000 	.word	0x40021000

080058e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80058e8:	b510      	push	{r4, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ee:	2214      	movs	r2, #20
 80058f0:	2100      	movs	r1, #0
 80058f2:	a803      	add	r0, sp, #12
 80058f4:	f005 f8ff 	bl	800aaf6 <memset>
  if(hspi->Instance==SPI1)
 80058f8:	6822      	ldr	r2, [r4, #0]
 80058fa:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <HAL_SPI_MspInit+0x50>)
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005900:	b008      	add	sp, #32
 8005902:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <HAL_SPI_MspInit+0x54>)
 8005906:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005908:	2080      	movs	r0, #128	; 0x80
 800590a:	0140      	lsls	r0, r0, #5
 800590c:	4301      	orrs	r1, r0
 800590e:	6419      	str	r1, [r3, #64]	; 0x40
 8005910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005912:	4002      	ands	r2, r0
 8005914:	9201      	str	r2, [sp, #4]
 8005916:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005918:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800591a:	2202      	movs	r2, #2
 800591c:	4311      	orrs	r1, r2
 800591e:	6359      	str	r1, [r3, #52]	; 0x34
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	4013      	ands	r3, r2
 8005924:	9302      	str	r3, [sp, #8]
 8005926:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CLK_Pin|MISO_Pin|MOSI_Pin;
 8005928:	2338      	movs	r3, #56	; 0x38
 800592a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592c:	9204      	str	r2, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800592e:	a903      	add	r1, sp, #12
 8005930:	4803      	ldr	r0, [pc, #12]	; (8005940 <HAL_SPI_MspInit+0x58>)
 8005932:	f001 f88b 	bl	8006a4c <HAL_GPIO_Init>
}
 8005936:	e7e3      	b.n	8005900 <HAL_SPI_MspInit+0x18>
 8005938:	40013000 	.word	0x40013000
 800593c:	40021000 	.word	0x40021000
 8005940:	50000400 	.word	0x50000400

08005944 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005944:	b510      	push	{r4, lr}
 8005946:	b092      	sub	sp, #72	; 0x48
 8005948:	0004      	movs	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800594a:	2234      	movs	r2, #52	; 0x34
 800594c:	2100      	movs	r1, #0
 800594e:	a805      	add	r0, sp, #20
 8005950:	f005 f8d1 	bl	800aaf6 <memset>
  if(htim_base->Instance==TIM7)
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	4a3d      	ldr	r2, [pc, #244]	; (8005a4c <HAL_TIM_Base_MspInit+0x108>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00d      	beq.n	8005978 <HAL_TIM_Base_MspInit+0x34>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 800595c:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <HAL_TIM_Base_MspInit+0x10c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01c      	beq.n	800599c <HAL_TIM_Base_MspInit+0x58>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8005962:	4a3c      	ldr	r2, [pc, #240]	; (8005a54 <HAL_TIM_Base_MspInit+0x110>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_TIM_Base_MspInit+0x7e>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8005968:	4a3b      	ldr	r2, [pc, #236]	; (8005a58 <HAL_TIM_Base_MspInit+0x114>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d047      	beq.n	80059fe <HAL_TIM_Base_MspInit+0xba>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 800596e:	4a3b      	ldr	r2, [pc, #236]	; (8005a5c <HAL_TIM_Base_MspInit+0x118>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d057      	beq.n	8005a24 <HAL_TIM_Base_MspInit+0xe0>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8005974:	b012      	add	sp, #72	; 0x48
 8005976:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005978:	4a39      	ldr	r2, [pc, #228]	; (8005a60 <HAL_TIM_Base_MspInit+0x11c>)
 800597a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800597c:	2320      	movs	r3, #32
 800597e:	4319      	orrs	r1, r3
 8005980:	63d1      	str	r1, [r2, #60]	; 0x3c
 8005982:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005984:	4013      	ands	r3, r2
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_LPTIM2_IRQn, 0, 0);
 800598a:	2200      	movs	r2, #0
 800598c:	2100      	movs	r1, #0
 800598e:	2012      	movs	r0, #18
 8005990:	f000 fe32 	bl	80065f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_LPTIM2_IRQn);
 8005994:	2012      	movs	r0, #18
 8005996:	f000 fe5f 	bl	8006658 <HAL_NVIC_EnableIRQ>
 800599a:	e7eb      	b.n	8005974 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800599c:	4a30      	ldr	r2, [pc, #192]	; (8005a60 <HAL_TIM_Base_MspInit+0x11c>)
 800599e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80059a0:	2080      	movs	r0, #128	; 0x80
 80059a2:	0200      	lsls	r0, r0, #8
 80059a4:	4301      	orrs	r1, r0
 80059a6:	6411      	str	r1, [r2, #64]	; 0x40
 80059a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059aa:	4003      	ands	r3, r0
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80059b0:	2200      	movs	r2, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	2013      	movs	r0, #19
 80059b6:	f000 fe1f 	bl	80065f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80059ba:	2013      	movs	r0, #19
 80059bc:	f000 fe4c 	bl	8006658 <HAL_NVIC_EnableIRQ>
 80059c0:	e7d8      	b.n	8005974 <HAL_TIM_Base_MspInit+0x30>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	03db      	lsls	r3, r3, #15
 80059c6:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059c8:	a805      	add	r0, sp, #20
 80059ca:	f001 fccb 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d112      	bne.n	80059f8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80059d2:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <HAL_TIM_Base_MspInit+0x11c>)
 80059d4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80059d6:	2080      	movs	r0, #128	; 0x80
 80059d8:	0240      	lsls	r0, r0, #9
 80059da:	4301      	orrs	r1, r0
 80059dc:	6411      	str	r1, [r2, #64]	; 0x40
 80059de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80059e0:	4003      	ands	r3, r0
 80059e2:	9302      	str	r3, [sp, #8]
 80059e4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80059e6:	2200      	movs	r2, #0
 80059e8:	2100      	movs	r1, #0
 80059ea:	2014      	movs	r0, #20
 80059ec:	f000 fe04 	bl	80065f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80059f0:	2014      	movs	r0, #20
 80059f2:	f000 fe31 	bl	8006658 <HAL_NVIC_EnableIRQ>
 80059f6:	e7bd      	b.n	8005974 <HAL_TIM_Base_MspInit+0x30>
      Error_Handler();
 80059f8:	f7ff f87a 	bl	8004af0 <Error_Handler>
 80059fc:	e7e9      	b.n	80059d2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <HAL_TIM_Base_MspInit+0x11c>)
 8005a00:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005a02:	2080      	movs	r0, #128	; 0x80
 8005a04:	0280      	lsls	r0, r0, #10
 8005a06:	4301      	orrs	r1, r0
 8005a08:	6411      	str	r1, [r2, #64]	; 0x40
 8005a0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005a0c:	4003      	ands	r3, r0
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005a12:	2200      	movs	r2, #0
 8005a14:	2100      	movs	r1, #0
 8005a16:	2015      	movs	r0, #21
 8005a18:	f000 fdee 	bl	80065f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005a1c:	2015      	movs	r0, #21
 8005a1e:	f000 fe1b 	bl	8006658 <HAL_NVIC_EnableIRQ>
 8005a22:	e7a7      	b.n	8005974 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005a24:	4a0e      	ldr	r2, [pc, #56]	; (8005a60 <HAL_TIM_Base_MspInit+0x11c>)
 8005a26:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005a28:	2080      	movs	r0, #128	; 0x80
 8005a2a:	02c0      	lsls	r0, r0, #11
 8005a2c:	4301      	orrs	r1, r0
 8005a2e:	6411      	str	r1, [r2, #64]	; 0x40
 8005a30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005a32:	4003      	ands	r3, r0
 8005a34:	9304      	str	r3, [sp, #16]
 8005a36:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	2016      	movs	r0, #22
 8005a3e:	f000 fddb 	bl	80065f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005a42:	2016      	movs	r0, #22
 8005a44:	f000 fe08 	bl	8006658 <HAL_NVIC_EnableIRQ>
}
 8005a48:	e794      	b.n	8005974 <HAL_TIM_Base_MspInit+0x30>
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	40001400 	.word	0x40001400
 8005a50:	40002000 	.word	0x40002000
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40021000 	.word	0x40021000

08005a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a64:	b510      	push	{r4, lr}
 8005a66:	b096      	sub	sp, #88	; 0x58
 8005a68:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a6a:	2214      	movs	r2, #20
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	a811      	add	r0, sp, #68	; 0x44
 8005a70:	f005 f841 	bl	800aaf6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a74:	2234      	movs	r2, #52	; 0x34
 8005a76:	2100      	movs	r1, #0
 8005a78:	a804      	add	r0, sp, #16
 8005a7a:	f005 f83c 	bl	800aaf6 <memset>
  if(huart->Instance==USART1)
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <HAL_UART_MspInit+0xb8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_UART_MspInit+0x2c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART4)
 8005a86:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <HAL_UART_MspInit+0xbc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d029      	beq.n	8005ae0 <HAL_UART_MspInit+0x7c>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8005a8c:	b016      	add	sp, #88	; 0x58
 8005a8e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a94:	a804      	add	r0, sp, #16
 8005a96:	f001 fc65 	bl	8007364 <HAL_RCCEx_PeriphCLKConfig>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	d11d      	bne.n	8005ada <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a9e:	4b21      	ldr	r3, [pc, #132]	; (8005b24 <HAL_UART_MspInit+0xc0>)
 8005aa0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005aa2:	2080      	movs	r0, #128	; 0x80
 8005aa4:	01c0      	lsls	r0, r0, #7
 8005aa6:	4301      	orrs	r1, r0
 8005aa8:	6419      	str	r1, [r3, #64]	; 0x40
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aac:	4002      	ands	r2, r0
 8005aae:	9200      	str	r2, [sp, #0]
 8005ab0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ab2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	4311      	orrs	r1, r2
 8005ab8:	6359      	str	r1, [r3, #52]	; 0x34
 8005aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abc:	4013      	ands	r3, r2
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DEBUX_TX_Pin|DEBUX_RX_Pin;
 8005ac2:	23c0      	movs	r3, #192	; 0xc0
 8005ac4:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ac6:	9212      	str	r2, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005acc:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8005ace:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad0:	a911      	add	r1, sp, #68	; 0x44
 8005ad2:	4815      	ldr	r0, [pc, #84]	; (8005b28 <HAL_UART_MspInit+0xc4>)
 8005ad4:	f000 ffba 	bl	8006a4c <HAL_GPIO_Init>
 8005ad8:	e7d8      	b.n	8005a8c <HAL_UART_MspInit+0x28>
      Error_Handler();
 8005ada:	f7ff f809 	bl	8004af0 <Error_Handler>
 8005ade:	e7de      	b.n	8005a9e <HAL_UART_MspInit+0x3a>
    __HAL_RCC_USART4_CLK_ENABLE();
 8005ae0:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <HAL_UART_MspInit+0xc0>)
 8005ae2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005ae4:	2080      	movs	r0, #128	; 0x80
 8005ae6:	0300      	lsls	r0, r0, #12
 8005ae8:	4301      	orrs	r1, r0
 8005aea:	63d9      	str	r1, [r3, #60]	; 0x3c
 8005aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aee:	4002      	ands	r2, r0
 8005af0:	9202      	str	r2, [sp, #8]
 8005af2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005af6:	2201      	movs	r2, #1
 8005af8:	4311      	orrs	r1, r2
 8005afa:	6359      	str	r1, [r3, #52]	; 0x34
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	401a      	ands	r2, r3
 8005b00:	9203      	str	r2, [sp, #12]
 8005b02:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = COM_TX_Pin|COM_RX_Pin;
 8005b04:	2303      	movs	r3, #3
 8005b06:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b10:	20a0      	movs	r0, #160	; 0xa0
 8005b12:	a911      	add	r1, sp, #68	; 0x44
 8005b14:	05c0      	lsls	r0, r0, #23
 8005b16:	f000 ff99 	bl	8006a4c <HAL_GPIO_Init>
}
 8005b1a:	e7b7      	b.n	8005a8c <HAL_UART_MspInit+0x28>
 8005b1c:	40013800 	.word	0x40013800
 8005b20:	40004c00 	.word	0x40004c00
 8005b24:	40021000 	.word	0x40021000
 8005b28:	50000400 	.word	0x50000400

08005b2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b2c:	e7fe      	b.n	8005b2c <NMI_Handler>

08005b2e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b2e:	e7fe      	b.n	8005b2e <HardFault_Handler>

08005b30 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005b30:	4770      	bx	lr

08005b32 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b32:	4770      	bx	lr

08005b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b36:	f000 f901 	bl	8005d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b3a:	bd10      	pop	{r4, pc}

08005b3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005b3c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b3e:	4802      	ldr	r0, [pc, #8]	; (8005b48 <DMA1_Channel1_IRQHandler+0xc>)
 8005b40:	f000 ff1e 	bl	8006980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	46c0      	nop			; (mov r8, r8)
 8005b48:	20000d74 	.word	0x20000d74

08005b4c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8005b4c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005b4e:	4802      	ldr	r0, [pc, #8]	; (8005b58 <ADC1_COMP_IRQHandler+0xc>)
 8005b50:	f000 fa8e 	bl	8006070 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	20000cec 	.word	0x20000cec

08005b5c <TIM7_LPTIM2_IRQHandler>:

/**
  * @brief This function handles TIM7 and LPTIM2 interrupts (LPTIM2 interrupt through EXTI line 30).
  */
void TIM7_LPTIM2_IRQHandler(void)
{
 8005b5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 0 */

  /* USER CODE END TIM7_LPTIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005b5e:	4802      	ldr	r0, [pc, #8]	; (8005b68 <TIM7_LPTIM2_IRQHandler+0xc>)
 8005b60:	f002 fba4 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_LPTIM2_IRQn 1 */

  /* USER CODE END TIM7_LPTIM2_IRQn 1 */
}
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	46c0      	nop			; (mov r8, r8)
 8005b68:	20000f64 	.word	0x20000f64

08005b6c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005b6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005b6e:	4802      	ldr	r0, [pc, #8]	; (8005b78 <TIM14_IRQHandler+0xc>)
 8005b70:	f002 fb9c 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	20000e34 	.word	0x20000e34

08005b7c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8005b7c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005b7e:	4802      	ldr	r0, [pc, #8]	; (8005b88 <TIM15_IRQHandler+0xc>)
 8005b80:	f002 fb94 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8005b84:	bd10      	pop	{r4, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	20000e80 	.word	0x20000e80

08005b8c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005b8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005b8e:	4802      	ldr	r0, [pc, #8]	; (8005b98 <TIM16_IRQHandler+0xc>)
 8005b90:	f002 fb8c 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	20000ecc 	.word	0x20000ecc

08005b9c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005b9c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005b9e:	4802      	ldr	r0, [pc, #8]	; (8005ba8 <TIM17_IRQHandler+0xc>)
 8005ba0:	f002 fb84 	bl	80082ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005ba4:	bd10      	pop	{r4, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	20000f18 	.word	0x20000f18

08005bac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8005bac:	2001      	movs	r0, #1
 8005bae:	4770      	bx	lr

08005bb0 <_kill>:

int _kill(int pid, int sig)
{
 8005bb0:	b510      	push	{r4, lr}
	errno = EINVAL;
 8005bb2:	f004 ff6d 	bl	800aa90 <__errno>
 8005bb6:	2316      	movs	r3, #22
 8005bb8:	6003      	str	r3, [r0, #0]
	return -1;
 8005bba:	2001      	movs	r0, #1
}
 8005bbc:	4240      	negs	r0, r0
 8005bbe:	bd10      	pop	{r4, pc}

08005bc0 <_exit>:

void _exit (int status)
{
 8005bc0:	b510      	push	{r4, lr}
	_kill(status, -1);
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4249      	negs	r1, r1
 8005bc6:	f7ff fff3 	bl	8005bb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005bca:	e7fe      	b.n	8005bca <_exit+0xa>

08005bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	000c      	movs	r4, r1
 8005bd0:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bd2:	2500      	movs	r5, #0
 8005bd4:	e004      	b.n	8005be0 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 8005bd6:	e000      	b.n	8005bda <_read+0xe>
 8005bd8:	bf00      	nop
 8005bda:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bdc:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8005bde:	3401      	adds	r4, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005be0:	42b5      	cmp	r5, r6
 8005be2:	dbf8      	blt.n	8005bd6 <_read+0xa>
	}

return len;
}
 8005be4:	0030      	movs	r0, r6
 8005be6:	bd70      	pop	{r4, r5, r6, pc}

08005be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	0016      	movs	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bec:	2400      	movs	r4, #0
 8005bee:	e005      	b.n	8005bfc <_write+0x14>
	{
		__io_putchar(*ptr++);
 8005bf0:	1c4d      	adds	r5, r1, #1
 8005bf2:	7808      	ldrb	r0, [r1, #0]
 8005bf4:	f7fe fbfe 	bl	80043f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bf8:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8005bfa:	0029      	movs	r1, r5
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bfc:	42b4      	cmp	r4, r6
 8005bfe:	dbf7      	blt.n	8005bf0 <_write+0x8>
	}
	return len;
}
 8005c00:	0030      	movs	r0, r6
 8005c02:	bd70      	pop	{r4, r5, r6, pc}

08005c04 <_close>:

int _close(int file)
{
	return -1;
 8005c04:	2001      	movs	r0, #1
}
 8005c06:	4240      	negs	r0, r0
 8005c08:	4770      	bx	lr

08005c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	019b      	lsls	r3, r3, #6
 8005c0e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8005c10:	2000      	movs	r0, #0
 8005c12:	4770      	bx	lr

08005c14 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005c14:	2001      	movs	r0, #1
 8005c16:	4770      	bx	lr

08005c18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005c18:	2000      	movs	r0, #0
 8005c1a:	4770      	bx	lr

08005c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c20:	4a0c      	ldr	r2, [pc, #48]	; (8005c54 <_sbrk+0x38>)
 8005c22:	490d      	ldr	r1, [pc, #52]	; (8005c58 <_sbrk+0x3c>)
 8005c24:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c26:	490d      	ldr	r1, [pc, #52]	; (8005c5c <_sbrk+0x40>)
 8005c28:	6809      	ldr	r1, [r1, #0]
 8005c2a:	2900      	cmp	r1, #0
 8005c2c:	d007      	beq.n	8005c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c2e:	490b      	ldr	r1, [pc, #44]	; (8005c5c <_sbrk+0x40>)
 8005c30:	6808      	ldr	r0, [r1, #0]
 8005c32:	18c3      	adds	r3, r0, r3
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d806      	bhi.n	8005c46 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <_sbrk+0x40>)
 8005c3a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8005c3c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005c3e:	4907      	ldr	r1, [pc, #28]	; (8005c5c <_sbrk+0x40>)
 8005c40:	4807      	ldr	r0, [pc, #28]	; (8005c60 <_sbrk+0x44>)
 8005c42:	6008      	str	r0, [r1, #0]
 8005c44:	e7f3      	b.n	8005c2e <_sbrk+0x12>
    errno = ENOMEM;
 8005c46:	f004 ff23 	bl	800aa90 <__errno>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005c4e:	2001      	movs	r0, #1
 8005c50:	4240      	negs	r0, r0
 8005c52:	e7f3      	b.n	8005c3c <_sbrk+0x20>
 8005c54:	20009000 	.word	0x20009000
 8005c58:	00000400 	.word	0x00000400
 8005c5c:	2000111c 	.word	0x2000111c
 8005c60:	20001170 	.word	0x20001170

08005c64 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c64:	4770      	bx	lr
	...

08005c68 <Reset_Handler>:
*/

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8005c68:	480d      	ldr	r0, [pc, #52]	; (8005ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005c6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005c6c:	f7ff fffa 	bl	8005c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005c70:	480c      	ldr	r0, [pc, #48]	; (8005ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005c72:	490d      	ldr	r1, [pc, #52]	; (8005ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005c74:	4a0d      	ldr	r2, [pc, #52]	; (8005cac <LoopForever+0xe>)
  movs r3, #0
 8005c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c78:	e002      	b.n	8005c80 <LoopCopyDataInit>

08005c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c7e:	3304      	adds	r3, #4

08005c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c84:	d3f9      	bcc.n	8005c7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c86:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005c88:	4c0a      	ldr	r4, [pc, #40]	; (8005cb4 <LoopForever+0x16>)
  movs r3, #0
 8005c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c8c:	e001      	b.n	8005c92 <LoopFillZerobss>

08005c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c90:	3204      	adds	r2, #4

08005c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c94:	d3fb      	bcc.n	8005c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005c96:	f004 ff01 	bl	800aa9c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005c9a:	f7ff f9bf 	bl	800501c <main>

08005c9e <LoopForever>:

LoopForever:
  b LoopForever
 8005c9e:	e7fe      	b.n	8005c9e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8005ca0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005ca8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8005cac:	0800e51c 	.word	0x0800e51c
  ldr r2, =_sbss
 8005cb0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8005cb4:	20001170 	.word	0x20001170

08005cb8 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005cb8:	e7fe      	b.n	8005cb8 <CEC_IRQHandler>
	...

08005cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005cc0:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <HAL_InitTick+0x4c>)
 8005cc2:	7819      	ldrb	r1, [r3, #0]
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d101      	bne.n	8005ccc <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8005cc8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8005cca:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005ccc:	20fa      	movs	r0, #250	; 0xfa
 8005cce:	0080      	lsls	r0, r0, #2
 8005cd0:	f7fa fa3e 	bl	8000150 <__udivsi3>
 8005cd4:	0001      	movs	r1, r0
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <HAL_InitTick+0x50>)
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f7fa fa39 	bl	8000150 <__udivsi3>
 8005cde:	f000 fcc7 	bl	8006670 <HAL_SYSTICK_Config>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d10d      	bne.n	8005d02 <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ce6:	2c03      	cmp	r4, #3
 8005ce8:	d901      	bls.n	8005cee <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8005cea:	2001      	movs	r0, #1
 8005cec:	e7ed      	b.n	8005cca <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cee:	3001      	adds	r0, #1
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	0021      	movs	r1, r4
 8005cf4:	4240      	negs	r0, r0
 8005cf6:	f000 fc7f 	bl	80065f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <HAL_InitTick+0x54>)
 8005cfc:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e7e3      	b.n	8005cca <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8005d02:	2001      	movs	r0, #1
 8005d04:	e7e1      	b.n	8005cca <HAL_InitTick+0xe>
 8005d06:	46c0      	nop			; (mov r8, r8)
 8005d08:	20000004 	.word	0x20000004
 8005d0c:	20000000 	.word	0x20000000
 8005d10:	20000008 	.word	0x20000008

08005d14 <HAL_Init>:
{
 8005d14:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d16:	4a08      	ldr	r2, [pc, #32]	; (8005d38 <HAL_Init+0x24>)
 8005d18:	6811      	ldr	r1, [r2, #0]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	430b      	orrs	r3, r1
 8005d20:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d22:	2003      	movs	r0, #3
 8005d24:	f7ff ffca 	bl	8005cbc <HAL_InitTick>
 8005d28:	1e04      	subs	r4, r0, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8005d2c:	2401      	movs	r4, #1
}
 8005d2e:	0020      	movs	r0, r4
 8005d30:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8005d32:	f7ff fd55 	bl	80057e0 <HAL_MspInit>
 8005d36:	e7fa      	b.n	8005d2e <HAL_Init+0x1a>
 8005d38:	40022000 	.word	0x40022000

08005d3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005d3c:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <HAL_IncTick+0x10>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	4a03      	ldr	r2, [pc, #12]	; (8005d50 <HAL_IncTick+0x14>)
 8005d42:	6811      	ldr	r1, [r2, #0]
 8005d44:	185b      	adds	r3, r3, r1
 8005d46:	6013      	str	r3, [r2, #0]
}
 8005d48:	4770      	bx	lr
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	20000004 	.word	0x20000004
 8005d50:	20001120 	.word	0x20001120

08005d54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005d54:	4b01      	ldr	r3, [pc, #4]	; (8005d5c <HAL_GetTick+0x8>)
 8005d56:	6818      	ldr	r0, [r3, #0]
}
 8005d58:	4770      	bx	lr
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	20001120 	.word	0x20001120

08005d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005d64:	f7ff fff6 	bl	8005d54 <HAL_GetTick>
 8005d68:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d6a:	1c63      	adds	r3, r4, #1
 8005d6c:	d002      	beq.n	8005d74 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d6e:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <HAL_Delay+0x20>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d74:	f7ff ffee 	bl	8005d54 <HAL_GetTick>
 8005d78:	1b40      	subs	r0, r0, r5
 8005d7a:	42a0      	cmp	r0, r4
 8005d7c:	d3fa      	bcc.n	8005d74 <HAL_Delay+0x14>
  {
  }
}
 8005d7e:	bd70      	pop	{r4, r5, r6, pc}
 8005d80:	20000004 	.word	0x20000004

08005d84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d84:	b530      	push	{r4, r5, lr}
 8005d86:	b083      	sub	sp, #12
 8005d88:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d100      	bne.n	8005d94 <HAL_ADC_Init+0x10>
 8005d92:	e106      	b.n	8005fa2 <HAL_ADC_Init+0x21e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d94:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d013      	beq.n	8005dc2 <HAL_ADC_Init+0x3e>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d9a:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005d9c:	689a      	ldr	r2, [r3, #8]
 8005d9e:	00d2      	lsls	r2, r2, #3
 8005da0:	d41c      	bmi.n	8005ddc <HAL_ADC_Init+0x58>
  MODIFY_REG(ADCx->CR,
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	4980      	ldr	r1, [pc, #512]	; (8005fa8 <HAL_ADC_Init+0x224>)
 8005da6:	4011      	ands	r1, r2
 8005da8:	2280      	movs	r2, #128	; 0x80
 8005daa:	0552      	lsls	r2, r2, #21
 8005dac:	430a      	orrs	r2, r1
 8005dae:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005db0:	4b7e      	ldr	r3, [pc, #504]	; (8005fac <HAL_ADC_Init+0x228>)
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	497e      	ldr	r1, [pc, #504]	; (8005fb0 <HAL_ADC_Init+0x22c>)
 8005db6:	f7fa f9cb 	bl	8000150 <__udivsi3>
 8005dba:	3001      	adds	r0, #1
 8005dbc:	0040      	lsls	r0, r0, #1
 8005dbe:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8005dc0:	e009      	b.n	8005dd6 <HAL_ADC_Init+0x52>
    HAL_ADC_MspInit(hadc);
 8005dc2:	f7ff fd25 	bl	8005810 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8005dca:	2254      	movs	r2, #84	; 0x54
 8005dcc:	54a3      	strb	r3, [r4, r2]
 8005dce:	e7e4      	b.n	8005d9a <HAL_ADC_Init+0x16>
    {
      wait_loop_index--;
 8005dd0:	9b01      	ldr	r3, [sp, #4]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005dd6:	9b01      	ldr	r3, [sp, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f9      	bne.n	8005dd0 <HAL_ADC_Init+0x4c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ddc:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	00d2      	lsls	r2, r2, #3
 8005de2:	d500      	bpl.n	8005de6 <HAL_ADC_Init+0x62>
 8005de4:	e09d      	b.n	8005f22 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005de8:	2110      	movs	r1, #16
 8005dea:	430a      	orrs	r2, r1
 8005dec:	65a2      	str	r2, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005df0:	390f      	subs	r1, #15
 8005df2:	430a      	orrs	r2, r1
 8005df4:	65e2      	str	r2, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005df6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	000d      	movs	r5, r1
 8005dfe:	4015      	ands	r5, r2
 8005e00:	4211      	tst	r1, r2
 8005e02:	d000      	beq.n	8005e06 <HAL_ADC_Init+0x82>
 8005e04:	2501      	movs	r5, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e06:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005e08:	06d2      	lsls	r2, r2, #27
 8005e0a:	d500      	bpl.n	8005e0e <HAL_ADC_Init+0x8a>
 8005e0c:	e0c2      	b.n	8005f94 <HAL_ADC_Init+0x210>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	d000      	beq.n	8005e14 <HAL_ADC_Init+0x90>
 8005e12:	e0bf      	b.n	8005f94 <HAL_ADC_Init+0x210>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e14:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005e16:	4967      	ldr	r1, [pc, #412]	; (8005fb4 <HAL_ADC_Init+0x230>)
 8005e18:	400a      	ands	r2, r1
 8005e1a:	3106      	adds	r1, #6
 8005e1c:	31ff      	adds	r1, #255	; 0xff
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	07d2      	lsls	r2, r2, #31
 8005e26:	d452      	bmi.n	8005ece <HAL_ADC_Init+0x14a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e28:	7e22      	ldrb	r2, [r4, #24]
 8005e2a:	0392      	lsls	r2, r2, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005e2c:	68a1      	ldr	r1, [r4, #8]
 8005e2e:	430a      	orrs	r2, r1
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e30:	7e61      	ldrb	r1, [r4, #25]
 8005e32:	03c9      	lsls	r1, r1, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e34:	430a      	orrs	r2, r1
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e36:	7ea5      	ldrb	r5, [r4, #26]
 8005e38:	0369      	lsls	r1, r5, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e3a:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e3c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005e3e:	2900      	cmp	r1, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_ADC_Init+0xc2>
 8005e42:	2180      	movs	r1, #128	; 0x80
 8005e44:	0149      	lsls	r1, r1, #5
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e46:	430a      	orrs	r2, r1
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e48:	68e1      	ldr	r1, [r4, #12]
 8005e4a:	430a      	orrs	r2, r1
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e4c:	6921      	ldr	r1, [r4, #16]
 8005e4e:	2900      	cmp	r1, #0
 8005e50:	db69      	blt.n	8005f26 <HAL_ADC_Init+0x1a2>
 8005e52:	2180      	movs	r1, #128	; 0x80
 8005e54:	0389      	lsls	r1, r1, #14
                   hadc->Init.DataAlign                                           |
 8005e56:	430a      	orrs	r2, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e58:	212c      	movs	r1, #44	; 0x2c
 8005e5a:	5c61      	ldrb	r1, [r4, r1]
 8005e5c:	0049      	lsls	r1, r1, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e5e:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e60:	2120      	movs	r1, #32
 8005e62:	5c61      	ldrb	r1, [r4, r1]
 8005e64:	2901      	cmp	r1, #1
 8005e66:	d061      	beq.n	8005f2c <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005e6a:	2900      	cmp	r1, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e6e:	25e0      	movs	r5, #224	; 0xe0
 8005e70:	006d      	lsls	r5, r5, #1
 8005e72:	4029      	ands	r1, r5
 8005e74:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005e76:	4329      	orrs	r1, r5
 8005e78:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005e7a:	68d9      	ldr	r1, [r3, #12]
 8005e7c:	4d4e      	ldr	r5, [pc, #312]	; (8005fb8 <HAL_ADC_Init+0x234>)
 8005e7e:	4029      	ands	r1, r5
 8005e80:	430a      	orrs	r2, r1
 8005e82:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e84:	6863      	ldr	r3, [r4, #4]
 8005e86:	0f9b      	lsrs	r3, r3, #30
 8005e88:	079b      	lsls	r3, r3, #30
 8005e8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005e8c:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e8e:	213c      	movs	r1, #60	; 0x3c
 8005e90:	5c61      	ldrb	r1, [r4, r1]
 8005e92:	2901      	cmp	r1, #1
 8005e94:	d059      	beq.n	8005f4a <HAL_ADC_Init+0x1c6>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005e96:	6821      	ldr	r1, [r4, #0]
 8005e98:	690b      	ldr	r3, [r1, #16]
 8005e9a:	4d48      	ldr	r5, [pc, #288]	; (8005fbc <HAL_ADC_Init+0x238>)
 8005e9c:	402b      	ands	r3, r5
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005ea2:	6863      	ldr	r3, [r4, #4]
 8005ea4:	22c0      	movs	r2, #192	; 0xc0
 8005ea6:	0612      	lsls	r2, r2, #24
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d010      	beq.n	8005ece <HAL_ADC_Init+0x14a>
 8005eac:	2280      	movs	r2, #128	; 0x80
 8005eae:	05d2      	lsls	r2, r2, #23
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00c      	beq.n	8005ece <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005eb4:	2280      	movs	r2, #128	; 0x80
 8005eb6:	0612      	lsls	r2, r2, #24
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d008      	beq.n	8005ece <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005ebc:	4940      	ldr	r1, [pc, #256]	; (8005fc0 <HAL_ADC_Init+0x23c>)
 8005ebe:	680a      	ldr	r2, [r1, #0]
 8005ec0:	4d40      	ldr	r5, [pc, #256]	; (8005fc4 <HAL_ADC_Init+0x240>)
 8005ec2:	402a      	ands	r2, r5
 8005ec4:	25f0      	movs	r5, #240	; 0xf0
 8005ec6:	03ad      	lsls	r5, r5, #14
 8005ec8:	402b      	ands	r3, r5
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005ece:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8005ed0:	6953      	ldr	r3, [r2, #20]
 8005ed2:	2107      	movs	r1, #7
 8005ed4:	438b      	bics	r3, r1
 8005ed6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005edc:	6821      	ldr	r1, [r4, #0]
 8005ede:	694b      	ldr	r3, [r1, #20]
 8005ee0:	2270      	movs	r2, #112	; 0x70
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d135      	bne.n	8005f5e <HAL_ADC_Init+0x1da>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005ef6:	3b10      	subs	r3, #16
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005efc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	2307      	movs	r3, #7
 8005f02:	4013      	ands	r3, r2
 8005f04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d03b      	beq.n	8005f82 <HAL_ADC_Init+0x1fe>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f0c:	2212      	movs	r2, #18
 8005f0e:	4393      	bics	r3, r2
 8005f10:	3a02      	subs	r2, #2
 8005f12:	4313      	orrs	r3, r2
 8005f14:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f18:	3a0f      	subs	r2, #15
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005f1e:	2001      	movs	r0, #1
 8005f20:	e03d      	b.n	8005f9e <HAL_ADC_Init+0x21a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f22:	2000      	movs	r0, #0
 8005f24:	e768      	b.n	8005df8 <HAL_ADC_Init+0x74>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005f26:	0049      	lsls	r1, r1, #1
 8005f28:	0849      	lsrs	r1, r1, #1
 8005f2a:	e794      	b.n	8005e56 <HAL_ADC_Init+0xd2>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005f2c:	2d00      	cmp	r5, #0
 8005f2e:	d103      	bne.n	8005f38 <HAL_ADC_Init+0x1b4>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005f30:	2180      	movs	r1, #128	; 0x80
 8005f32:	0249      	lsls	r1, r1, #9
 8005f34:	430a      	orrs	r2, r1
 8005f36:	e797      	b.n	8005e68 <HAL_ADC_Init+0xe4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f38:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005f3a:	2520      	movs	r5, #32
 8005f3c:	4329      	orrs	r1, r5
 8005f3e:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005f42:	3d1f      	subs	r5, #31
 8005f44:	4329      	orrs	r1, r5
 8005f46:	65e1      	str	r1, [r4, #92]	; 0x5c
 8005f48:	e78e      	b.n	8005e68 <HAL_ADC_Init+0xe4>
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f4c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.Ratio         |
 8005f4e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005f50:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8005f52:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f54:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005f56:	4313      	orrs	r3, r2
 8005f58:	2201      	movs	r2, #1
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	e79b      	b.n	8005e96 <HAL_ADC_Init+0x112>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	0392      	lsls	r2, r2, #14
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d1ca      	bne.n	8005efc <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8005f66:	6821      	ldr	r1, [r4, #0]
 8005f68:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005f6a:	69e3      	ldr	r3, [r4, #28]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	221c      	movs	r2, #28
 8005f72:	401a      	ands	r2, r3
 8005f74:	2310      	movs	r3, #16
 8005f76:	425b      	negs	r3, r3
 8005f78:	4093      	lsls	r3, r2
 8005f7a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f80:	e7bc      	b.n	8005efc <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8005f82:	2300      	movs	r3, #0
 8005f84:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8005f86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f88:	2203      	movs	r2, #3
 8005f8a:	4393      	bics	r3, r2
 8005f8c:	3a02      	subs	r2, #2
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	65a3      	str	r3, [r4, #88]	; 0x58
 8005f92:	e004      	b.n	8005f9e <HAL_ADC_Init+0x21a>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f96:	2210      	movs	r2, #16
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f9c:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8005f9e:	b003      	add	sp, #12
 8005fa0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	e7fb      	b.n	8005f9e <HAL_ADC_Init+0x21a>
 8005fa6:	46c0      	nop			; (mov r8, r8)
 8005fa8:	6fffffe8 	.word	0x6fffffe8
 8005fac:	20000000 	.word	0x20000000
 8005fb0:	00030d40 	.word	0x00030d40
 8005fb4:	fffffefd 	.word	0xfffffefd
 8005fb8:	fffe0201 	.word	0xfffe0201
 8005fbc:	1ffffc02 	.word	0x1ffffc02
 8005fc0:	40012708 	.word	0x40012708
 8005fc4:	ffc3ffff 	.word	0xffc3ffff

08005fc8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fca:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005fcc:	f7fe fb76 	bl	80046bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fd0:	bd10      	pop	{r4, pc}

08005fd2 <HAL_ADC_LevelOutOfWindowCallback>:
}
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_ADC_ErrorCallback>:
}
 8005fd4:	4770      	bx	lr

08005fd6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fd6:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005fda:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005fdc:	2240      	movs	r2, #64	; 0x40
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005fe2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8005fe4:	3a3c      	subs	r2, #60	; 0x3c
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005fea:	f7ff fff3 	bl	8005fd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fee:	bd10      	pop	{r4, pc}

08005ff0 <ADC_DMAConvCplt>:
{
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005ff6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005ff8:	2150      	movs	r1, #80	; 0x50
 8005ffa:	4211      	tst	r1, r2
 8005ffc:	d12a      	bne.n	8006054 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ffe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006000:	2380      	movs	r3, #128	; 0x80
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4313      	orrs	r3, r2
 8006006:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006008:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800600a:	68d9      	ldr	r1, [r3, #12]
 800600c:	22c0      	movs	r2, #192	; 0xc0
 800600e:	0112      	lsls	r2, r2, #4
 8006010:	4211      	tst	r1, r2
 8006012:	d113      	bne.n	800603c <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8006014:	7e82      	ldrb	r2, [r0, #26]
 8006016:	2a00      	cmp	r2, #0
 8006018:	d110      	bne.n	800603c <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	0712      	lsls	r2, r2, #28
 800601e:	d50d      	bpl.n	800603c <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	0752      	lsls	r2, r2, #29
 8006024:	d40d      	bmi.n	8006042 <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	210c      	movs	r1, #12
 800602a:	438a      	bics	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800602e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006030:	4a0e      	ldr	r2, [pc, #56]	; (800606c <ADC_DMAConvCplt+0x7c>)
 8006032:	4013      	ands	r3, r2
 8006034:	3204      	adds	r2, #4
 8006036:	32ff      	adds	r2, #255	; 0xff
 8006038:	4313      	orrs	r3, r2
 800603a:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800603c:	f7fe fb46 	bl	80046cc <HAL_ADC_ConvCpltCallback>
}
 8006040:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006042:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006044:	2220      	movs	r2, #32
 8006046:	4313      	orrs	r3, r2
 8006048:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800604a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800604c:	3a1f      	subs	r2, #31
 800604e:	4313      	orrs	r3, r2
 8006050:	65c3      	str	r3, [r0, #92]	; 0x5c
 8006052:	e7f3      	b.n	800603c <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006054:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8006056:	06d2      	lsls	r2, r2, #27
 8006058:	d404      	bmi.n	8006064 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800605a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800605c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800605e:	0018      	movs	r0, r3
 8006060:	4790      	blx	r2
}
 8006062:	e7ed      	b.n	8006040 <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8006064:	f7ff ffb6 	bl	8005fd4 <HAL_ADC_ErrorCallback>
 8006068:	e7ea      	b.n	8006040 <ADC_DMAConvCplt+0x50>
 800606a:	46c0      	nop			; (mov r8, r8)
 800606c:	fffffefe 	.word	0xfffffefe

08006070 <HAL_ADC_IRQHandler>:
{
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	0004      	movs	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006074:	6803      	ldr	r3, [r0, #0]
 8006076:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006078:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800607a:	07b3      	lsls	r3, r6, #30
 800607c:	d50f      	bpl.n	800609e <HAL_ADC_IRQHandler+0x2e>
 800607e:	07ab      	lsls	r3, r5, #30
 8006080:	d50d      	bpl.n	800609e <HAL_ADC_IRQHandler+0x2e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006082:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006084:	06db      	lsls	r3, r3, #27
 8006086:	d404      	bmi.n	8006092 <HAL_ADC_IRQHandler+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006088:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	4313      	orrs	r3, r2
 8006090:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006092:	0020      	movs	r0, r4
 8006094:	f000 faae 	bl	80065f4 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	2202      	movs	r2, #2
 800609c:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800609e:	0773      	lsls	r3, r6, #29
 80060a0:	d501      	bpl.n	80060a6 <HAL_ADC_IRQHandler+0x36>
 80060a2:	076b      	lsls	r3, r5, #29
 80060a4:	d403      	bmi.n	80060ae <HAL_ADC_IRQHandler+0x3e>
 80060a6:	0733      	lsls	r3, r6, #28
 80060a8:	d529      	bpl.n	80060fe <HAL_ADC_IRQHandler+0x8e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80060aa:	072b      	lsls	r3, r5, #28
 80060ac:	d527      	bpl.n	80060fe <HAL_ADC_IRQHandler+0x8e>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060b0:	06db      	lsls	r3, r3, #27
 80060b2:	d404      	bmi.n	80060be <HAL_ADC_IRQHandler+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80060b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80060b6:	2380      	movs	r3, #128	; 0x80
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4313      	orrs	r3, r2
 80060bc:	65a3      	str	r3, [r4, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80060be:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80060c0:	68d9      	ldr	r1, [r3, #12]
 80060c2:	22c0      	movs	r2, #192	; 0xc0
 80060c4:	0112      	lsls	r2, r2, #4
 80060c6:	4211      	tst	r1, r2
 80060c8:	d113      	bne.n	80060f2 <HAL_ADC_IRQHandler+0x82>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80060ca:	7ea2      	ldrb	r2, [r4, #26]
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d110      	bne.n	80060f2 <HAL_ADC_IRQHandler+0x82>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	0712      	lsls	r2, r2, #28
 80060d4:	d50d      	bpl.n	80060f2 <HAL_ADC_IRQHandler+0x82>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	0752      	lsls	r2, r2, #29
 80060da:	d43b      	bmi.n	8006154 <HAL_ADC_IRQHandler+0xe4>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	210c      	movs	r1, #12
 80060e0:	438a      	bics	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80060e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060e6:	4a37      	ldr	r2, [pc, #220]	; (80061c4 <HAL_ADC_IRQHandler+0x154>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	3204      	adds	r2, #4
 80060ec:	32ff      	adds	r2, #255	; 0xff
 80060ee:	4313      	orrs	r3, r2
 80060f0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80060f2:	0020      	movs	r0, r4
 80060f4:	f7fe faea 	bl	80046cc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	220c      	movs	r2, #12
 80060fc:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80060fe:	0633      	lsls	r3, r6, #24
 8006100:	d501      	bpl.n	8006106 <HAL_ADC_IRQHandler+0x96>
 8006102:	062b      	lsls	r3, r5, #24
 8006104:	d42f      	bmi.n	8006166 <HAL_ADC_IRQHandler+0xf6>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006106:	05f3      	lsls	r3, r6, #23
 8006108:	d501      	bpl.n	800610e <HAL_ADC_IRQHandler+0x9e>
 800610a:	05eb      	lsls	r3, r5, #23
 800610c:	d437      	bmi.n	800617e <HAL_ADC_IRQHandler+0x10e>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800610e:	05b3      	lsls	r3, r6, #22
 8006110:	d501      	bpl.n	8006116 <HAL_ADC_IRQHandler+0xa6>
 8006112:	05ab      	lsls	r3, r5, #22
 8006114:	d440      	bmi.n	8006198 <HAL_ADC_IRQHandler+0x128>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006116:	06f3      	lsls	r3, r6, #27
 8006118:	d517      	bpl.n	800614a <HAL_ADC_IRQHandler+0xda>
 800611a:	06eb      	lsls	r3, r5, #27
 800611c:	d515      	bpl.n	800614a <HAL_ADC_IRQHandler+0xda>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800611e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <HAL_ADC_IRQHandler+0xbc>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8006124:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	079b      	lsls	r3, r3, #30
 800612a:	d00b      	beq.n	8006144 <HAL_ADC_IRQHandler+0xd4>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800612c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4313      	orrs	r3, r2
 8006134:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006136:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006138:	2202      	movs	r2, #2
 800613a:	4313      	orrs	r3, r2
 800613c:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 800613e:	0020      	movs	r0, r4
 8006140:	f7ff ff48 	bl	8005fd4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	2210      	movs	r2, #16
 8006148:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800614a:	04b3      	lsls	r3, r6, #18
 800614c:	d501      	bpl.n	8006152 <HAL_ADC_IRQHandler+0xe2>
 800614e:	04ab      	lsls	r3, r5, #18
 8006150:	d42f      	bmi.n	80061b2 <HAL_ADC_IRQHandler+0x142>
}
 8006152:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006154:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006156:	2220      	movs	r2, #32
 8006158:	4313      	orrs	r3, r2
 800615a:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800615c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800615e:	3a1f      	subs	r2, #31
 8006160:	4313      	orrs	r3, r2
 8006162:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006164:	e7c5      	b.n	80060f2 <HAL_ADC_IRQHandler+0x82>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006166:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	025b      	lsls	r3, r3, #9
 800616c:	4313      	orrs	r3, r2
 800616e:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006170:	0020      	movs	r0, r4
 8006172:	f7ff ff2e 	bl	8005fd2 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	2280      	movs	r2, #128	; 0x80
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	e7c3      	b.n	8006106 <HAL_ADC_IRQHandler+0x96>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800617e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	029b      	lsls	r3, r3, #10
 8006184:	4313      	orrs	r3, r2
 8006186:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006188:	0020      	movs	r0, r4
 800618a:	f000 fa31 	bl	80065f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	2280      	movs	r2, #128	; 0x80
 8006192:	0052      	lsls	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e7ba      	b.n	800610e <HAL_ADC_IRQHandler+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006198:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	02db      	lsls	r3, r3, #11
 800619e:	4313      	orrs	r3, r2
 80061a0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80061a2:	0020      	movs	r0, r4
 80061a4:	f000 fa25 	bl	80065f2 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	2280      	movs	r2, #128	; 0x80
 80061ac:	0092      	lsls	r2, r2, #2
 80061ae:	601a      	str	r2, [r3, #0]
 80061b0:	e7b1      	b.n	8006116 <HAL_ADC_IRQHandler+0xa6>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80061b2:	0020      	movs	r0, r4
 80061b4:	f000 fa1f 	bl	80065f6 <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	2280      	movs	r2, #128	; 0x80
 80061bc:	0192      	lsls	r2, r2, #6
 80061be:	601a      	str	r2, [r3, #0]
}
 80061c0:	e7c7      	b.n	8006152 <HAL_ADC_IRQHandler+0xe2>
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	fffffefe 	.word	0xfffffefe

080061c8 <HAL_ADC_ConfigChannel>:
{
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ca:	b083      	sub	sp, #12
 80061cc:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80061d2:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 80061d4:	3354      	adds	r3, #84	; 0x54
 80061d6:	5cc3      	ldrb	r3, [r0, r3]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d100      	bne.n	80061de <HAL_ADC_ConfigChannel+0x16>
 80061dc:	e130      	b.n	8006440 <HAL_ADC_ConfigChannel+0x278>
 80061de:	2354      	movs	r3, #84	; 0x54
 80061e0:	2201      	movs	r2, #1
 80061e2:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80061e4:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80061e6:	6883      	ldr	r3, [r0, #8]
 80061e8:	3203      	adds	r2, #3
 80061ea:	0016      	movs	r6, r2
 80061ec:	401e      	ands	r6, r3
 80061ee:	421a      	tst	r2, r3
 80061f0:	d009      	beq.n	8006206 <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061f4:	321c      	adds	r2, #28
 80061f6:	4313      	orrs	r3, r2
 80061f8:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80061fa:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80061fc:	2354      	movs	r3, #84	; 0x54
 80061fe:	2200      	movs	r2, #0
 8006200:	54e2      	strb	r2, [r4, r3]
}
 8006202:	b003      	add	sp, #12
 8006204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8006206:	684b      	ldr	r3, [r1, #4]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d100      	bne.n	800620e <HAL_ADC_ConfigChannel+0x46>
 800620c:	e0d6      	b.n	80063bc <HAL_ADC_ConfigChannel+0x1f4>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800620e:	2280      	movs	r2, #128	; 0x80
 8006210:	0612      	lsls	r2, r2, #24
 8006212:	4295      	cmp	r5, r2
 8006214:	d026      	beq.n	8006264 <HAL_ADC_ConfigChannel+0x9c>
 8006216:	4a8b      	ldr	r2, [pc, #556]	; (8006444 <HAL_ADC_ConfigChannel+0x27c>)
 8006218:	4295      	cmp	r5, r2
 800621a:	d023      	beq.n	8006264 <HAL_ADC_ConfigChannel+0x9c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800621c:	221f      	movs	r2, #31
 800621e:	4013      	ands	r3, r2
 8006220:	3a10      	subs	r2, #16
 8006222:	409a      	lsls	r2, r3
 8006224:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8006226:	4395      	bics	r5, r2
 8006228:	002a      	movs	r2, r5
 800622a:	680d      	ldr	r5, [r1, #0]
 800622c:	036f      	lsls	r7, r5, #13
 800622e:	d12f      	bne.n	8006290 <HAL_ADC_ConfigChannel+0xc8>
 8006230:	0ead      	lsrs	r5, r5, #26
 8006232:	261f      	movs	r6, #31
 8006234:	402e      	ands	r6, r5
 8006236:	409e      	lsls	r6, r3
 8006238:	4316      	orrs	r6, r2
 800623a:	6626      	str	r6, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800623c:	684d      	ldr	r5, [r1, #4]
 800623e:	08ab      	lsrs	r3, r5, #2
 8006240:	3301      	adds	r3, #1
 8006242:	69e2      	ldr	r2, [r4, #28]
 8006244:	4293      	cmp	r3, r2
 8006246:	d813      	bhi.n	8006270 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCx->CHSELR,
 8006248:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800624a:	231f      	movs	r3, #31
 800624c:	401d      	ands	r5, r3
 800624e:	3b10      	subs	r3, #16
 8006250:	001e      	movs	r6, r3
 8006252:	40ae      	lsls	r6, r5
 8006254:	43b2      	bics	r2, r6
 8006256:	680e      	ldr	r6, [r1, #0]
 8006258:	0eb6      	lsrs	r6, r6, #26
 800625a:	4033      	ands	r3, r6
 800625c:	40ab      	lsls	r3, r5
 800625e:	4313      	orrs	r3, r2
 8006260:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006262:	e005      	b.n	8006270 <HAL_ADC_ConfigChannel+0xa8>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006264:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006266:	680b      	ldr	r3, [r1, #0]
 8006268:	035b      	lsls	r3, r3, #13
 800626a:	0b5b      	lsrs	r3, r3, #13
 800626c:	4313      	orrs	r3, r2
 800626e:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006270:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8006272:	6942      	ldr	r2, [r0, #20]
 8006274:	680b      	ldr	r3, [r1, #0]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	439a      	bics	r2, r3
 800627a:	688d      	ldr	r5, [r1, #8]
 800627c:	402b      	ands	r3, r5
 800627e:	4d72      	ldr	r5, [pc, #456]	; (8006448 <HAL_ADC_ConfigChannel+0x280>)
 8006280:	402b      	ands	r3, r5
 8006282:	4313      	orrs	r3, r2
 8006284:	6143      	str	r3, [r0, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006286:	680b      	ldr	r3, [r1, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	db4f      	blt.n	800632c <HAL_ADC_ConfigChannel+0x164>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800628c:	2000      	movs	r0, #0
 800628e:	e7b5      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006290:	07ef      	lsls	r7, r5, #31
 8006292:	d4d0      	bmi.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006294:	07ae      	lsls	r6, r5, #30
 8006296:	d427      	bmi.n	80062e8 <HAL_ADC_ConfigChannel+0x120>
 8006298:	076e      	lsls	r6, r5, #29
 800629a:	d427      	bmi.n	80062ec <HAL_ADC_ConfigChannel+0x124>
 800629c:	072e      	lsls	r6, r5, #28
 800629e:	d427      	bmi.n	80062f0 <HAL_ADC_ConfigChannel+0x128>
 80062a0:	06ee      	lsls	r6, r5, #27
 80062a2:	d427      	bmi.n	80062f4 <HAL_ADC_ConfigChannel+0x12c>
 80062a4:	06ae      	lsls	r6, r5, #26
 80062a6:	d427      	bmi.n	80062f8 <HAL_ADC_ConfigChannel+0x130>
 80062a8:	066e      	lsls	r6, r5, #25
 80062aa:	d427      	bmi.n	80062fc <HAL_ADC_ConfigChannel+0x134>
 80062ac:	062e      	lsls	r6, r5, #24
 80062ae:	d427      	bmi.n	8006300 <HAL_ADC_ConfigChannel+0x138>
 80062b0:	05ee      	lsls	r6, r5, #23
 80062b2:	d427      	bmi.n	8006304 <HAL_ADC_ConfigChannel+0x13c>
 80062b4:	05ae      	lsls	r6, r5, #22
 80062b6:	d427      	bmi.n	8006308 <HAL_ADC_ConfigChannel+0x140>
 80062b8:	056e      	lsls	r6, r5, #21
 80062ba:	d427      	bmi.n	800630c <HAL_ADC_ConfigChannel+0x144>
 80062bc:	052e      	lsls	r6, r5, #20
 80062be:	d427      	bmi.n	8006310 <HAL_ADC_ConfigChannel+0x148>
 80062c0:	04ee      	lsls	r6, r5, #19
 80062c2:	d427      	bmi.n	8006314 <HAL_ADC_ConfigChannel+0x14c>
 80062c4:	04ae      	lsls	r6, r5, #18
 80062c6:	d427      	bmi.n	8006318 <HAL_ADC_ConfigChannel+0x150>
 80062c8:	046e      	lsls	r6, r5, #17
 80062ca:	d427      	bmi.n	800631c <HAL_ADC_ConfigChannel+0x154>
 80062cc:	042e      	lsls	r6, r5, #16
 80062ce:	d427      	bmi.n	8006320 <HAL_ADC_ConfigChannel+0x158>
 80062d0:	03ee      	lsls	r6, r5, #15
 80062d2:	d427      	bmi.n	8006324 <HAL_ADC_ConfigChannel+0x15c>
 80062d4:	03ae      	lsls	r6, r5, #14
 80062d6:	d427      	bmi.n	8006328 <HAL_ADC_ConfigChannel+0x160>
 80062d8:	2780      	movs	r7, #128	; 0x80
 80062da:	02ff      	lsls	r7, r7, #11
 80062dc:	002e      	movs	r6, r5
 80062de:	403e      	ands	r6, r7
 80062e0:	423d      	tst	r5, r7
 80062e2:	d0a8      	beq.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 80062e4:	2612      	movs	r6, #18
 80062e6:	e7a6      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 80062e8:	2601      	movs	r6, #1
 80062ea:	e7a4      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 80062ec:	2602      	movs	r6, #2
 80062ee:	e7a2      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 80062f0:	2603      	movs	r6, #3
 80062f2:	e7a0      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 80062f4:	2604      	movs	r6, #4
 80062f6:	e79e      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 80062f8:	2605      	movs	r6, #5
 80062fa:	e79c      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 80062fc:	2606      	movs	r6, #6
 80062fe:	e79a      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006300:	2607      	movs	r6, #7
 8006302:	e798      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006304:	2608      	movs	r6, #8
 8006306:	e796      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006308:	2609      	movs	r6, #9
 800630a:	e794      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 800630c:	260a      	movs	r6, #10
 800630e:	e792      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006310:	260b      	movs	r6, #11
 8006312:	e790      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006314:	260c      	movs	r6, #12
 8006316:	e78e      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006318:	260d      	movs	r6, #13
 800631a:	e78c      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 800631c:	260e      	movs	r6, #14
 800631e:	e78a      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006320:	260f      	movs	r6, #15
 8006322:	e788      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006324:	2610      	movs	r6, #16
 8006326:	e786      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
 8006328:	2611      	movs	r6, #17
 800632a:	e784      	b.n	8006236 <HAL_ADC_ConfigChannel+0x6e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800632c:	4a47      	ldr	r2, [pc, #284]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 800632e:	6811      	ldr	r1, [r2, #0]
 8006330:	22e0      	movs	r2, #224	; 0xe0
 8006332:	0452      	lsls	r2, r2, #17
 8006334:	400a      	ands	r2, r1
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006336:	4846      	ldr	r0, [pc, #280]	; (8006450 <HAL_ADC_ConfigChannel+0x288>)
 8006338:	4283      	cmp	r3, r0
 800633a:	d007      	beq.n	800634c <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800633c:	4845      	ldr	r0, [pc, #276]	; (8006454 <HAL_ADC_ConfigChannel+0x28c>)
 800633e:	4283      	cmp	r3, r0
 8006340:	d022      	beq.n	8006388 <HAL_ADC_ConfigChannel+0x1c0>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006342:	4845      	ldr	r0, [pc, #276]	; (8006458 <HAL_ADC_ConfigChannel+0x290>)
 8006344:	4283      	cmp	r3, r0
 8006346:	d02c      	beq.n	80063a2 <HAL_ADC_ConfigChannel+0x1da>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006348:	2000      	movs	r0, #0
 800634a:	e757      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800634c:	0208      	lsls	r0, r1, #8
 800634e:	d4f5      	bmi.n	800633c <HAL_ADC_ConfigChannel+0x174>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006356:	493d      	ldr	r1, [pc, #244]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 8006358:	680b      	ldr	r3, [r1, #0]
 800635a:	4840      	ldr	r0, [pc, #256]	; (800645c <HAL_ADC_ConfigChannel+0x294>)
 800635c:	4003      	ands	r3, r0
 800635e:	431a      	orrs	r2, r3
 8006360:	600a      	str	r2, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006362:	4b3f      	ldr	r3, [pc, #252]	; (8006460 <HAL_ADC_ConfigChannel+0x298>)
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	493f      	ldr	r1, [pc, #252]	; (8006464 <HAL_ADC_ConfigChannel+0x29c>)
 8006368:	f7f9 fef2 	bl	8000150 <__udivsi3>
 800636c:	3001      	adds	r0, #1
 800636e:	0043      	lsls	r3, r0, #1
 8006370:	181b      	adds	r3, r3, r0
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8006376:	e002      	b.n	800637e <HAL_ADC_ConfigChannel+0x1b6>
            wait_loop_index--;
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	3b01      	subs	r3, #1
 800637c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800637e:	9b01      	ldr	r3, [sp, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f9      	bne.n	8006378 <HAL_ADC_ConfigChannel+0x1b0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006384:	2000      	movs	r0, #0
 8006386:	e739      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006388:	01c8      	lsls	r0, r1, #7
 800638a:	d4da      	bmi.n	8006342 <HAL_ADC_ConfigChannel+0x17a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	045b      	lsls	r3, r3, #17
 8006390:	431a      	orrs	r2, r3
 8006392:	492e      	ldr	r1, [pc, #184]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 8006394:	680b      	ldr	r3, [r1, #0]
 8006396:	4831      	ldr	r0, [pc, #196]	; (800645c <HAL_ADC_ConfigChannel+0x294>)
 8006398:	4003      	ands	r3, r0
 800639a:	431a      	orrs	r2, r3
 800639c:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800639e:	2000      	movs	r0, #0
}
 80063a0:	e72c      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80063a2:	024b      	lsls	r3, r1, #9
 80063a4:	d44a      	bmi.n	800643c <HAL_ADC_ConfigChannel+0x274>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	03db      	lsls	r3, r3, #15
 80063aa:	431a      	orrs	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80063ac:	4927      	ldr	r1, [pc, #156]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 80063ae:	680b      	ldr	r3, [r1, #0]
 80063b0:	482a      	ldr	r0, [pc, #168]	; (800645c <HAL_ADC_ConfigChannel+0x294>)
 80063b2:	4003      	ands	r3, r0
 80063b4:	431a      	orrs	r2, r3
 80063b6:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063b8:	2000      	movs	r0, #0
}
 80063ba:	e71f      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063bc:	2380      	movs	r3, #128	; 0x80
 80063be:	061b      	lsls	r3, r3, #24
 80063c0:	429d      	cmp	r5, r3
 80063c2:	d002      	beq.n	80063ca <HAL_ADC_ConfigChannel+0x202>
 80063c4:	4b1f      	ldr	r3, [pc, #124]	; (8006444 <HAL_ADC_ConfigChannel+0x27c>)
 80063c6:	429d      	cmp	r5, r3
 80063c8:	d105      	bne.n	80063d6 <HAL_ADC_ConfigChannel+0x20e>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80063ca:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80063cc:	680b      	ldr	r3, [r1, #0]
 80063ce:	035b      	lsls	r3, r3, #13
 80063d0:	0b5b      	lsrs	r3, r3, #13
 80063d2:	439a      	bics	r2, r3
 80063d4:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80063d6:	680b      	ldr	r3, [r1, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	db01      	blt.n	80063e0 <HAL_ADC_ConfigChannel+0x218>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063dc:	2000      	movs	r0, #0
 80063de:	e70d      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063e0:	4a1a      	ldr	r2, [pc, #104]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 80063e2:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063e4:	491a      	ldr	r1, [pc, #104]	; (8006450 <HAL_ADC_ConfigChannel+0x288>)
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d007      	beq.n	80063fa <HAL_ADC_ConfigChannel+0x232>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80063ea:	491a      	ldr	r1, [pc, #104]	; (8006454 <HAL_ADC_ConfigChannel+0x28c>)
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d00f      	beq.n	8006410 <HAL_ADC_ConfigChannel+0x248>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80063f0:	4919      	ldr	r1, [pc, #100]	; (8006458 <HAL_ADC_ConfigChannel+0x290>)
 80063f2:	428b      	cmp	r3, r1
 80063f4:	d017      	beq.n	8006426 <HAL_ADC_ConfigChannel+0x25e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063f6:	2000      	movs	r0, #0
 80063f8:	e700      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063fa:	23a0      	movs	r3, #160	; 0xa0
 80063fc:	045b      	lsls	r3, r3, #17
 80063fe:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006400:	4912      	ldr	r1, [pc, #72]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 8006402:	680b      	ldr	r3, [r1, #0]
 8006404:	4815      	ldr	r0, [pc, #84]	; (800645c <HAL_ADC_ConfigChannel+0x294>)
 8006406:	4003      	ands	r3, r0
 8006408:	431a      	orrs	r2, r3
 800640a:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800640c:	2000      	movs	r0, #0
}
 800640e:	e6f5      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006410:	23c0      	movs	r3, #192	; 0xc0
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006416:	490d      	ldr	r1, [pc, #52]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 8006418:	680b      	ldr	r3, [r1, #0]
 800641a:	4810      	ldr	r0, [pc, #64]	; (800645c <HAL_ADC_ConfigChannel+0x294>)
 800641c:	4003      	ands	r3, r0
 800641e:	431a      	orrs	r2, r3
 8006420:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006422:	2000      	movs	r0, #0
}
 8006424:	e6ea      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006426:	23c0      	movs	r3, #192	; 0xc0
 8006428:	045b      	lsls	r3, r3, #17
 800642a:	401a      	ands	r2, r3
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800642c:	4907      	ldr	r1, [pc, #28]	; (800644c <HAL_ADC_ConfigChannel+0x284>)
 800642e:	680b      	ldr	r3, [r1, #0]
 8006430:	480a      	ldr	r0, [pc, #40]	; (800645c <HAL_ADC_ConfigChannel+0x294>)
 8006432:	4003      	ands	r3, r0
 8006434:	431a      	orrs	r2, r3
 8006436:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006438:	2000      	movs	r0, #0
}
 800643a:	e6df      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
 800643c:	2000      	movs	r0, #0
 800643e:	e6dd      	b.n	80061fc <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8006440:	2002      	movs	r0, #2
 8006442:	e6de      	b.n	8006202 <HAL_ADC_ConfigChannel+0x3a>
 8006444:	80000004 	.word	0x80000004
 8006448:	07ffff00 	.word	0x07ffff00
 800644c:	40012708 	.word	0x40012708
 8006450:	b0001000 	.word	0xb0001000
 8006454:	b8004000 	.word	0xb8004000
 8006458:	b4002000 	.word	0xb4002000
 800645c:	fe3fffff 	.word	0xfe3fffff
 8006460:	20000000 	.word	0x20000000
 8006464:	00030d40 	.word	0x00030d40

08006468 <ADC_Enable>:
{
 8006468:	b530      	push	{r4, r5, lr}
 800646a:	b083      	sub	sp, #12
 800646c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 800646e:	2300      	movs	r3, #0
 8006470:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006472:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	07d2      	lsls	r2, r2, #31
 8006478:	d44f      	bmi.n	800651a <ADC_Enable+0xb2>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800647a:	6899      	ldr	r1, [r3, #8]
 800647c:	4a28      	ldr	r2, [pc, #160]	; (8006520 <ADC_Enable+0xb8>)
 800647e:	4211      	tst	r1, r2
 8006480:	d111      	bne.n	80064a6 <ADC_Enable+0x3e>
  MODIFY_REG(ADCx->CR,
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	4927      	ldr	r1, [pc, #156]	; (8006524 <ADC_Enable+0xbc>)
 8006486:	400a      	ands	r2, r1
 8006488:	2101      	movs	r1, #1
 800648a:	430a      	orrs	r2, r1
 800648c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800648e:	4b26      	ldr	r3, [pc, #152]	; (8006528 <ADC_Enable+0xc0>)
 8006490:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	d517      	bpl.n	80064c6 <ADC_Enable+0x5e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006496:	4b25      	ldr	r3, [pc, #148]	; (800652c <ADC_Enable+0xc4>)
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	4925      	ldr	r1, [pc, #148]	; (8006530 <ADC_Enable+0xc8>)
 800649c:	f7f9 fe58 	bl	8000150 <__udivsi3>
 80064a0:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80064a2:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80064a4:	e00c      	b.n	80064c0 <ADC_Enable+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064a6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80064a8:	2210      	movs	r2, #16
 80064aa:	4313      	orrs	r3, r2
 80064ac:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ae:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80064b0:	3a0f      	subs	r2, #15
 80064b2:	4313      	orrs	r3, r2
 80064b4:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80064b6:	2001      	movs	r0, #1
 80064b8:	e030      	b.n	800651c <ADC_Enable+0xb4>
        wait_loop_index--;
 80064ba:	9b01      	ldr	r3, [sp, #4]
 80064bc:	3b01      	subs	r3, #1
 80064be:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80064c0:	9b01      	ldr	r3, [sp, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f9      	bne.n	80064ba <ADC_Enable+0x52>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80064c6:	7e63      	ldrb	r3, [r4, #25]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <ADC_Enable+0x68>
  return HAL_OK;
 80064cc:	2000      	movs	r0, #0
 80064ce:	e025      	b.n	800651c <ADC_Enable+0xb4>
      tickstart = HAL_GetTick();
 80064d0:	f7ff fc40 	bl	8005d54 <HAL_GetTick>
 80064d4:	0005      	movs	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	07d2      	lsls	r2, r2, #31
 80064dc:	d41b      	bmi.n	8006516 <ADC_Enable+0xae>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	07d2      	lsls	r2, r2, #31
 80064e2:	d405      	bmi.n	80064f0 <ADC_Enable+0x88>
  MODIFY_REG(ADCx->CR,
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	490f      	ldr	r1, [pc, #60]	; (8006524 <ADC_Enable+0xbc>)
 80064e8:	400a      	ands	r2, r1
 80064ea:	2101      	movs	r1, #1
 80064ec:	430a      	orrs	r2, r1
 80064ee:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064f0:	f7ff fc30 	bl	8005d54 <HAL_GetTick>
 80064f4:	1b40      	subs	r0, r0, r5
 80064f6:	2802      	cmp	r0, #2
 80064f8:	d9ed      	bls.n	80064d6 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	07db      	lsls	r3, r3, #31
 8006500:	d4e9      	bmi.n	80064d6 <ADC_Enable+0x6e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006504:	2210      	movs	r2, #16
 8006506:	4313      	orrs	r3, r2
 8006508:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800650a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800650c:	3a0f      	subs	r2, #15
 800650e:	4313      	orrs	r3, r2
 8006510:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8006512:	2001      	movs	r0, #1
 8006514:	e002      	b.n	800651c <ADC_Enable+0xb4>
  return HAL_OK;
 8006516:	2000      	movs	r0, #0
 8006518:	e000      	b.n	800651c <ADC_Enable+0xb4>
 800651a:	2000      	movs	r0, #0
}
 800651c:	b003      	add	sp, #12
 800651e:	bd30      	pop	{r4, r5, pc}
 8006520:	80000017 	.word	0x80000017
 8006524:	7fffffe8 	.word	0x7fffffe8
 8006528:	40012708 	.word	0x40012708
 800652c:	20000000 	.word	0x20000000
 8006530:	00030d40 	.word	0x00030d40

08006534 <HAL_ADC_Start_DMA>:
{
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	0004      	movs	r4, r0
 8006538:	000d      	movs	r5, r1
 800653a:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800653c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	0752      	lsls	r2, r2, #29
 8006542:	d447      	bmi.n	80065d4 <HAL_ADC_Start_DMA+0xa0>
    __HAL_LOCK(hadc);
 8006544:	2254      	movs	r2, #84	; 0x54
 8006546:	5c82      	ldrb	r2, [r0, r2]
 8006548:	2a01      	cmp	r2, #1
 800654a:	d045      	beq.n	80065d8 <HAL_ADC_Start_DMA+0xa4>
 800654c:	2201      	movs	r2, #1
 800654e:	2154      	movs	r1, #84	; 0x54
 8006550:	5442      	strb	r2, [r0, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006552:	68d9      	ldr	r1, [r3, #12]
 8006554:	420a      	tst	r2, r1
 8006556:	d10d      	bne.n	8006574 <HAL_ADC_Start_DMA+0x40>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	07d2      	lsls	r2, r2, #31
 800655c:	d505      	bpl.n	800656a <HAL_ADC_Start_DMA+0x36>
  MODIFY_REG(ADCx->CR,
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	491e      	ldr	r1, [pc, #120]	; (80065dc <HAL_ADC_Start_DMA+0xa8>)
 8006562:	400a      	ands	r2, r1
 8006564:	2102      	movs	r1, #2
 8006566:	430a      	orrs	r2, r1
 8006568:	609a      	str	r2, [r3, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	68d3      	ldr	r3, [r2, #12]
 800656e:	2101      	movs	r1, #1
 8006570:	430b      	orrs	r3, r1
 8006572:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8006574:	0020      	movs	r0, r4
 8006576:	f7ff ff77 	bl	8006468 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800657a:	2800      	cmp	r0, #0
 800657c:	d12b      	bne.n	80065d6 <HAL_ADC_Start_DMA+0xa2>
      ADC_STATE_CLR_SET(hadc->State,
 800657e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006580:	4a17      	ldr	r2, [pc, #92]	; (80065e0 <HAL_ADC_Start_DMA+0xac>)
 8006582:	401a      	ands	r2, r3
 8006584:	2380      	movs	r3, #128	; 0x80
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	4313      	orrs	r3, r2
 800658a:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800658c:	2300      	movs	r3, #0
 800658e:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006590:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006592:	4914      	ldr	r1, [pc, #80]	; (80065e4 <HAL_ADC_Start_DMA+0xb0>)
 8006594:	62d1      	str	r1, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006596:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006598:	4913      	ldr	r1, [pc, #76]	; (80065e8 <HAL_ADC_Start_DMA+0xb4>)
 800659a:	6311      	str	r1, [r2, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800659c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800659e:	4913      	ldr	r1, [pc, #76]	; (80065ec <HAL_ADC_Start_DMA+0xb8>)
 80065a0:	6351      	str	r1, [r2, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80065a2:	6822      	ldr	r2, [r4, #0]
 80065a4:	211c      	movs	r1, #28
 80065a6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 80065a8:	2254      	movs	r2, #84	; 0x54
 80065aa:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80065ac:	6822      	ldr	r2, [r4, #0]
 80065ae:	6853      	ldr	r3, [r2, #4]
 80065b0:	390c      	subs	r1, #12
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80065b6:	6821      	ldr	r1, [r4, #0]
 80065b8:	3140      	adds	r1, #64	; 0x40
 80065ba:	0033      	movs	r3, r6
 80065bc:	002a      	movs	r2, r5
 80065be:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80065c0:	f000 f990 	bl	80068e4 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80065c4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80065c6:	6893      	ldr	r3, [r2, #8]
 80065c8:	4904      	ldr	r1, [pc, #16]	; (80065dc <HAL_ADC_Start_DMA+0xa8>)
 80065ca:	400b      	ands	r3, r1
 80065cc:	2104      	movs	r1, #4
 80065ce:	430b      	orrs	r3, r1
 80065d0:	6093      	str	r3, [r2, #8]
}
 80065d2:	e000      	b.n	80065d6 <HAL_ADC_Start_DMA+0xa2>
    tmp_hal_status = HAL_BUSY;
 80065d4:	2002      	movs	r0, #2
}
 80065d6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 80065d8:	2002      	movs	r0, #2
 80065da:	e7fc      	b.n	80065d6 <HAL_ADC_Start_DMA+0xa2>
 80065dc:	7fffffe8 	.word	0x7fffffe8
 80065e0:	fffff0fe 	.word	0xfffff0fe
 80065e4:	08005ff1 	.word	0x08005ff1
 80065e8:	08005fc9 	.word	0x08005fc9
 80065ec:	08005fd7 	.word	0x08005fd7

080065f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80065f0:	4770      	bx	lr

080065f2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80065f2:	4770      	bx	lr

080065f4 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80065f4:	4770      	bx	lr

080065f6 <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80065f6:	4770      	bx	lr

080065f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065f8:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80065fa:	2800      	cmp	r0, #0
 80065fc:	db11      	blt.n	8006622 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80065fe:	0883      	lsrs	r3, r0, #2
 8006600:	4e13      	ldr	r6, [pc, #76]	; (8006650 <HAL_NVIC_SetPriority+0x58>)
 8006602:	33c0      	adds	r3, #192	; 0xc0
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	599d      	ldr	r5, [r3, r6]
 8006608:	2403      	movs	r4, #3
 800660a:	4020      	ands	r0, r4
 800660c:	00c0      	lsls	r0, r0, #3
 800660e:	22ff      	movs	r2, #255	; 0xff
 8006610:	0014      	movs	r4, r2
 8006612:	4084      	lsls	r4, r0
 8006614:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006616:	0189      	lsls	r1, r1, #6
 8006618:	400a      	ands	r2, r1
 800661a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800661c:	432a      	orrs	r2, r5
 800661e:	519a      	str	r2, [r3, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8006620:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006622:	230f      	movs	r3, #15
 8006624:	4003      	ands	r3, r0
 8006626:	3b08      	subs	r3, #8
 8006628:	089b      	lsrs	r3, r3, #2
 800662a:	3306      	adds	r3, #6
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4a09      	ldr	r2, [pc, #36]	; (8006654 <HAL_NVIC_SetPriority+0x5c>)
 8006630:	4694      	mov	ip, r2
 8006632:	4463      	add	r3, ip
 8006634:	685c      	ldr	r4, [r3, #4]
 8006636:	2203      	movs	r2, #3
 8006638:	4010      	ands	r0, r2
 800663a:	00c0      	lsls	r0, r0, #3
 800663c:	32fc      	adds	r2, #252	; 0xfc
 800663e:	0015      	movs	r5, r2
 8006640:	4085      	lsls	r5, r0
 8006642:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006644:	0189      	lsls	r1, r1, #6
 8006646:	400a      	ands	r2, r1
 8006648:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800664a:	4322      	orrs	r2, r4
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	e7e7      	b.n	8006620 <HAL_NVIC_SetPriority+0x28>
 8006650:	e000e100 	.word	0xe000e100
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006658:	2800      	cmp	r0, #0
 800665a:	db05      	blt.n	8006668 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800665c:	231f      	movs	r3, #31
 800665e:	4018      	ands	r0, r3
 8006660:	3b1e      	subs	r3, #30
 8006662:	4083      	lsls	r3, r0
 8006664:	4a01      	ldr	r2, [pc, #4]	; (800666c <HAL_NVIC_EnableIRQ+0x14>)
 8006666:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006668:	4770      	bx	lr
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	e000e100 	.word	0xe000e100

08006670 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006670:	3801      	subs	r0, #1
 8006672:	2380      	movs	r3, #128	; 0x80
 8006674:	045b      	lsls	r3, r3, #17
 8006676:	4298      	cmp	r0, r3
 8006678:	d20f      	bcs.n	800669a <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800667a:	4a09      	ldr	r2, [pc, #36]	; (80066a0 <HAL_SYSTICK_Config+0x30>)
 800667c:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800667e:	4809      	ldr	r0, [pc, #36]	; (80066a4 <HAL_SYSTICK_Config+0x34>)
 8006680:	6a03      	ldr	r3, [r0, #32]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	21c0      	movs	r1, #192	; 0xc0
 8006688:	0609      	lsls	r1, r1, #24
 800668a:	430b      	orrs	r3, r1
 800668c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800668e:	2300      	movs	r3, #0
 8006690:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006692:	3307      	adds	r3, #7
 8006694:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006696:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8006698:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800669a:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 800669c:	e7fc      	b.n	8006698 <HAL_SYSTICK_Config+0x28>
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	e000e010 	.word	0xe000e010
 80066a4:	e000ed00 	.word	0xe000ed00

080066a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80066a8:	b510      	push	{r4, lr}
 80066aa:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80066ac:	d039      	beq.n	8006722 <HAL_CRC_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80066ae:	7f43      	ldrb	r3, [r0, #29]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d025      	beq.n	8006700 <HAL_CRC_Init+0x58>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80066b4:	2302      	movs	r3, #2
 80066b6:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80066b8:	7923      	ldrb	r3, [r4, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d124      	bne.n	8006708 <HAL_CRC_Init+0x60>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	4a19      	ldr	r2, [pc, #100]	; (8006728 <HAL_CRC_Init+0x80>)
 80066c2:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	6893      	ldr	r3, [r2, #8]
 80066c8:	2118      	movs	r1, #24
 80066ca:	438b      	bics	r3, r1
 80066cc:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80066ce:	7963      	ldrb	r3, [r4, #5]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d122      	bne.n	800671a <HAL_CRC_Init+0x72>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	2201      	movs	r2, #1
 80066d8:	4252      	negs	r2, r2
 80066da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	6893      	ldr	r3, [r2, #8]
 80066e0:	2160      	movs	r1, #96	; 0x60
 80066e2:	438b      	bics	r3, r1
 80066e4:	6961      	ldr	r1, [r4, #20]
 80066e6:	430b      	orrs	r3, r1
 80066e8:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	6893      	ldr	r3, [r2, #8]
 80066ee:	2180      	movs	r1, #128	; 0x80
 80066f0:	438b      	bics	r3, r1
 80066f2:	69a1      	ldr	r1, [r4, #24]
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80066f8:	2301      	movs	r3, #1
 80066fa:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 80066fc:	2000      	movs	r0, #0
}
 80066fe:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8006700:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006702:	f7ff f8db 	bl	80058bc <HAL_CRC_MspInit>
 8006706:	e7d5      	b.n	80066b4 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006708:	68e2      	ldr	r2, [r4, #12]
 800670a:	68a1      	ldr	r1, [r4, #8]
 800670c:	0020      	movs	r0, r4
 800670e:	f000 f80d 	bl	800672c <HAL_CRCEx_Polynomial_Set>
 8006712:	2800      	cmp	r0, #0
 8006714:	d0db      	beq.n	80066ce <HAL_CRC_Init+0x26>
      return HAL_ERROR;
 8006716:	2001      	movs	r0, #1
 8006718:	e7f1      	b.n	80066fe <HAL_CRC_Init+0x56>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	611a      	str	r2, [r3, #16]
 8006720:	e7dc      	b.n	80066dc <HAL_CRC_Init+0x34>
    return HAL_ERROR;
 8006722:	2001      	movs	r0, #1
 8006724:	e7eb      	b.n	80066fe <HAL_CRC_Init+0x56>
 8006726:	46c0      	nop			; (mov r8, r8)
 8006728:	04c11db7 	.word	0x04c11db7

0800672c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800672c:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800672e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006730:	001c      	movs	r4, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	2c00      	cmp	r4, #0
 8006736:	d006      	beq.n	8006746 <HAL_CRCEx_Polynomial_Set+0x1a>
 8006738:	241f      	movs	r4, #31
 800673a:	401c      	ands	r4, r3
 800673c:	000d      	movs	r5, r1
 800673e:	40e5      	lsrs	r5, r4
 8006740:	002c      	movs	r4, r5
 8006742:	07e4      	lsls	r4, r4, #31
 8006744:	d5f4      	bpl.n	8006730 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8006746:	2a10      	cmp	r2, #16
 8006748:	d018      	beq.n	800677c <HAL_CRCEx_Polynomial_Set+0x50>
 800674a:	d809      	bhi.n	8006760 <HAL_CRCEx_Polynomial_Set+0x34>
 800674c:	2a00      	cmp	r2, #0
 800674e:	d00b      	beq.n	8006768 <HAL_CRCEx_Polynomial_Set+0x3c>
 8006750:	2a08      	cmp	r2, #8
 8006752:	d103      	bne.n	800675c <HAL_CRCEx_Polynomial_Set+0x30>
      {
        status =   HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006754:	2b0f      	cmp	r3, #15
 8006756:	d907      	bls.n	8006768 <HAL_CRCEx_Polynomial_Set+0x3c>
      {
        status =   HAL_ERROR;
 8006758:	2001      	movs	r0, #1
 800675a:	e00e      	b.n	800677a <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 800675c:	2001      	movs	r0, #1
 800675e:	e00c      	b.n	800677a <HAL_CRCEx_Polynomial_Set+0x4e>
 8006760:	2a18      	cmp	r2, #24
 8006762:	d10f      	bne.n	8006784 <HAL_CRCEx_Polynomial_Set+0x58>
      if (msb >= HAL_CRC_LENGTH_7B)
 8006764:	2b06      	cmp	r3, #6
 8006766:	d80f      	bhi.n	8006788 <HAL_CRCEx_Polynomial_Set+0x5c>
      break;
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006768:	6803      	ldr	r3, [r0, #0]
 800676a:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800676c:	6801      	ldr	r1, [r0, #0]
 800676e:	688b      	ldr	r3, [r1, #8]
 8006770:	2018      	movs	r0, #24
 8006772:	4383      	bics	r3, r0
 8006774:	431a      	orrs	r2, r3
 8006776:	608a      	str	r2, [r1, #8]
 8006778:	2000      	movs	r0, #0
  }
  /* Return function status */
  return status;
}
 800677a:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 800677c:	2b07      	cmp	r3, #7
 800677e:	d9f3      	bls.n	8006768 <HAL_CRCEx_Polynomial_Set+0x3c>
        status =   HAL_ERROR;
 8006780:	2001      	movs	r0, #1
 8006782:	e7fa      	b.n	800677a <HAL_CRCEx_Polynomial_Set+0x4e>
  switch (PolyLength)
 8006784:	2001      	movs	r0, #1
 8006786:	e7f8      	b.n	800677a <HAL_CRCEx_Polynomial_Set+0x4e>
        status =   HAL_ERROR;
 8006788:	2001      	movs	r0, #1
 800678a:	e7f6      	b.n	800677a <HAL_CRCEx_Polynomial_Set+0x4e>

0800678c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800678c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800678e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006790:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8006792:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006794:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8006796:	2c00      	cmp	r4, #0
 8006798:	d002      	beq.n	80067a0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800679a:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800679c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800679e:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80067a0:	4f0b      	ldr	r7, [pc, #44]	; (80067d0 <DMA_SetConfig+0x44>)
 80067a2:	687c      	ldr	r4, [r7, #4]
 80067a4:	261c      	movs	r6, #28
 80067a6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80067a8:	402e      	ands	r6, r5
 80067aa:	2501      	movs	r5, #1
 80067ac:	40b5      	lsls	r5, r6
 80067ae:	432c      	orrs	r4, r5
 80067b0:	607c      	str	r4, [r7, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067b2:	6804      	ldr	r4, [r0, #0]
 80067b4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067b6:	6883      	ldr	r3, [r0, #8]
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d004      	beq.n	80067c6 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80067bc:	6803      	ldr	r3, [r0, #0]
 80067be:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80067c0:	6803      	ldr	r3, [r0, #0]
 80067c2:	60da      	str	r2, [r3, #12]
  }
}
 80067c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80067c6:	6803      	ldr	r3, [r0, #0]
 80067c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80067ca:	6803      	ldr	r3, [r0, #0]
 80067cc:	60d9      	str	r1, [r3, #12]
 80067ce:	e7f9      	b.n	80067c4 <DMA_SetConfig+0x38>
 80067d0:	40020000 	.word	0x40020000

080067d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067d4:	b510      	push	{r4, lr}
 80067d6:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80067d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	4a09      	ldr	r2, [pc, #36]	; (8006804 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80067de:	4694      	mov	ip, r2
 80067e0:	4463      	add	r3, ip
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80067e6:	20ff      	movs	r0, #255	; 0xff
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	4018      	ands	r0, r3
 80067ec:	3808      	subs	r0, #8
 80067ee:	2114      	movs	r1, #20
 80067f0:	f7f9 fcae 	bl	8000150 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 80067f6:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067f8:	231f      	movs	r3, #31
 80067fa:	4018      	ands	r0, r3
 80067fc:	3b1e      	subs	r3, #30
 80067fe:	4083      	lsls	r3, r0
 8006800:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8006802:	bd10      	pop	{r4, pc}
 8006804:	10008200 	.word	0x10008200
 8006808:	40020880 	.word	0x40020880

0800680c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800680c:	233f      	movs	r3, #63	; 0x3f
 800680e:	6842      	ldr	r2, [r0, #4]
 8006810:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006812:	4a06      	ldr	r2, [pc, #24]	; (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8006814:	189a      	adds	r2, r3, r2
 8006816:	0092      	lsls	r2, r2, #2
 8006818:	6502      	str	r2, [r0, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800681a:	4a05      	ldr	r2, [pc, #20]	; (8006830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 800681c:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800681e:	3b01      	subs	r3, #1
 8006820:	2203      	movs	r2, #3
 8006822:	401a      	ands	r2, r3
 8006824:	2301      	movs	r3, #1
 8006826:	4093      	lsls	r3, r2
 8006828:	6583      	str	r3, [r0, #88]	; 0x58
}
 800682a:	4770      	bx	lr
 800682c:	1000823f 	.word	0x1000823f
 8006830:	40020940 	.word	0x40020940

08006834 <HAL_DMA_Init>:
{
 8006834:	b570      	push	{r4, r5, r6, lr}
 8006836:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8006838:	d04d      	beq.n	80068d6 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800683a:	6805      	ldr	r5, [r0, #0]
 800683c:	4b27      	ldr	r3, [pc, #156]	; (80068dc <HAL_DMA_Init+0xa8>)
 800683e:	18e8      	adds	r0, r5, r3
 8006840:	2114      	movs	r1, #20
 8006842:	f7f9 fc85 	bl	8000150 <__udivsi3>
 8006846:	0080      	lsls	r0, r0, #2
 8006848:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800684a:	2325      	movs	r3, #37	; 0x25
 800684c:	2202      	movs	r2, #2
 800684e:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	4a23      	ldr	r2, [pc, #140]	; (80068e0 <HAL_DMA_Init+0xac>)
 8006854:	4013      	ands	r3, r2
 8006856:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006858:	6821      	ldr	r1, [r4, #0]
 800685a:	680a      	ldr	r2, [r1, #0]
 800685c:	68a3      	ldr	r3, [r4, #8]
 800685e:	68e0      	ldr	r0, [r4, #12]
 8006860:	4303      	orrs	r3, r0
 8006862:	6920      	ldr	r0, [r4, #16]
 8006864:	4303      	orrs	r3, r0
 8006866:	6960      	ldr	r0, [r4, #20]
 8006868:	4303      	orrs	r3, r0
 800686a:	69a0      	ldr	r0, [r4, #24]
 800686c:	4303      	orrs	r3, r0
 800686e:	69e0      	ldr	r0, [r4, #28]
 8006870:	4303      	orrs	r3, r0
 8006872:	6a20      	ldr	r0, [r4, #32]
 8006874:	4303      	orrs	r3, r0
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800687a:	0020      	movs	r0, r4
 800687c:	f7ff ffaa 	bl	80067d4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	01db      	lsls	r3, r3, #7
 8006884:	68a2      	ldr	r2, [r4, #8]
 8006886:	429a      	cmp	r2, r3
 8006888:	d018      	beq.n	80068bc <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800688a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800688c:	233f      	movs	r3, #63	; 0x3f
 800688e:	6861      	ldr	r1, [r4, #4]
 8006890:	400b      	ands	r3, r1
 8006892:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006894:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006896:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006898:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800689a:	6863      	ldr	r3, [r4, #4]
 800689c:	3b01      	subs	r3, #1
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d90f      	bls.n	80068c2 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80068a6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068a8:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80068ae:	2225      	movs	r2, #37	; 0x25
 80068b0:	2101      	movs	r1, #1
 80068b2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80068b4:	3a01      	subs	r2, #1
 80068b6:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80068b8:	2000      	movs	r0, #0
}
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068bc:	2300      	movs	r3, #0
 80068be:	6063      	str	r3, [r4, #4]
 80068c0:	e7e3      	b.n	800688a <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068c2:	0020      	movs	r0, r4
 80068c4:	f7ff ffa2 	bl	800680c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80068c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80068d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80068d2:	605a      	str	r2, [r3, #4]
 80068d4:	e7e9      	b.n	80068aa <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80068d6:	2001      	movs	r0, #1
 80068d8:	e7ef      	b.n	80068ba <HAL_DMA_Init+0x86>
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	bffdfff8 	.word	0xbffdfff8
 80068e0:	ffff800f 	.word	0xffff800f

080068e4 <HAL_DMA_Start_IT>:
{
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80068e8:	2024      	movs	r0, #36	; 0x24
 80068ea:	5c20      	ldrb	r0, [r4, r0]
 80068ec:	2801      	cmp	r0, #1
 80068ee:	d045      	beq.n	800697c <HAL_DMA_Start_IT+0x98>
 80068f0:	2024      	movs	r0, #36	; 0x24
 80068f2:	2501      	movs	r5, #1
 80068f4:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80068f6:	3001      	adds	r0, #1
 80068f8:	5c20      	ldrb	r0, [r4, r0]
 80068fa:	2801      	cmp	r0, #1
 80068fc:	d006      	beq.n	800690c <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80068fe:	2380      	movs	r3, #128	; 0x80
 8006900:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8006902:	3b5c      	subs	r3, #92	; 0x5c
 8006904:	2200      	movs	r2, #0
 8006906:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8006908:	2001      	movs	r0, #1
}
 800690a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800690c:	3024      	adds	r0, #36	; 0x24
 800690e:	3501      	adds	r5, #1
 8006910:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006912:	2000      	movs	r0, #0
 8006914:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8006916:	6825      	ldr	r5, [r4, #0]
 8006918:	6828      	ldr	r0, [r5, #0]
 800691a:	2601      	movs	r6, #1
 800691c:	43b0      	bics	r0, r6
 800691e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006920:	0020      	movs	r0, r4
 8006922:	f7ff ff33 	bl	800678c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8006926:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006928:	2b00      	cmp	r3, #0
 800692a:	d01c      	beq.n	8006966 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	210e      	movs	r1, #14
 8006932:	430b      	orrs	r3, r1
 8006934:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006936:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	03d2      	lsls	r2, r2, #15
 800693c:	d504      	bpl.n	8006948 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	2280      	movs	r2, #128	; 0x80
 8006942:	0052      	lsls	r2, r2, #1
 8006944:	430a      	orrs	r2, r1
 8006946:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8006948:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	2280      	movs	r2, #128	; 0x80
 8006952:	0052      	lsls	r2, r2, #1
 8006954:	430a      	orrs	r2, r1
 8006956:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	2101      	movs	r1, #1
 800695e:	430b      	orrs	r3, r1
 8006960:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006962:	2000      	movs	r0, #0
 8006964:	e7d1      	b.n	800690a <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	6813      	ldr	r3, [r2, #0]
 800696a:	2104      	movs	r1, #4
 800696c:	438b      	bics	r3, r1
 800696e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006970:	6822      	ldr	r2, [r4, #0]
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	3106      	adds	r1, #6
 8006976:	430b      	orrs	r3, r1
 8006978:	6013      	str	r3, [r2, #0]
 800697a:	e7dc      	b.n	8006936 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 800697c:	2002      	movs	r0, #2
 800697e:	e7c4      	b.n	800690a <HAL_DMA_Start_IT+0x26>

08006980 <HAL_DMA_IRQHandler>:
{
 8006980:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8006982:	4b31      	ldr	r3, [pc, #196]	; (8006a48 <HAL_DMA_IRQHandler+0xc8>)
 8006984:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006986:	6804      	ldr	r4, [r0, #0]
 8006988:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800698a:	231c      	movs	r3, #28
 800698c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800698e:	4013      	ands	r3, r2
 8006990:	2204      	movs	r2, #4
 8006992:	409a      	lsls	r2, r3
 8006994:	4211      	tst	r1, r2
 8006996:	d016      	beq.n	80069c6 <HAL_DMA_IRQHandler+0x46>
 8006998:	076a      	lsls	r2, r5, #29
 800699a:	d514      	bpl.n	80069c6 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	069b      	lsls	r3, r3, #26
 80069a0:	d403      	bmi.n	80069aa <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	2204      	movs	r2, #4
 80069a6:	4393      	bics	r3, r2
 80069a8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80069aa:	4c27      	ldr	r4, [pc, #156]	; (8006a48 <HAL_DMA_IRQHandler+0xc8>)
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	211c      	movs	r1, #28
 80069b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80069b2:	4011      	ands	r1, r2
 80069b4:	2204      	movs	r2, #4
 80069b6:	408a      	lsls	r2, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	6063      	str	r3, [r4, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80069bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d000      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 80069c2:	4798      	blx	r3
}
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80069c6:	2202      	movs	r2, #2
 80069c8:	409a      	lsls	r2, r3
 80069ca:	4211      	tst	r1, r2
 80069cc:	d01c      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x88>
 80069ce:	07aa      	lsls	r2, r5, #30
 80069d0:	d51a      	bpl.n	8006a08 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	069b      	lsls	r3, r3, #26
 80069d6:	d406      	bmi.n	80069e6 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	220a      	movs	r2, #10
 80069dc:	4393      	bics	r3, r2
 80069de:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80069e0:	2325      	movs	r3, #37	; 0x25
 80069e2:	3a09      	subs	r2, #9
 80069e4:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80069e6:	4c18      	ldr	r4, [pc, #96]	; (8006a48 <HAL_DMA_IRQHandler+0xc8>)
 80069e8:	6863      	ldr	r3, [r4, #4]
 80069ea:	211c      	movs	r1, #28
 80069ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80069ee:	4011      	ands	r1, r2
 80069f0:	2202      	movs	r2, #2
 80069f2:	408a      	lsls	r2, r1
 80069f4:	4313      	orrs	r3, r2
 80069f6:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hdma);
 80069f8:	2324      	movs	r3, #36	; 0x24
 80069fa:	2200      	movs	r2, #0
 80069fc:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80069fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0df      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8006a04:	4798      	blx	r3
 8006a06:	e7dd      	b.n	80069c4 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006a08:	2208      	movs	r2, #8
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	4211      	tst	r1, r2
 8006a0e:	d0d9      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x44>
 8006a10:	072b      	lsls	r3, r5, #28
 8006a12:	d5d7      	bpl.n	80069c4 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	220e      	movs	r2, #14
 8006a18:	4393      	bics	r3, r2
 8006a1a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8006a1c:	4c0a      	ldr	r4, [pc, #40]	; (8006a48 <HAL_DMA_IRQHandler+0xc8>)
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	211c      	movs	r1, #28
 8006a22:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006a24:	4019      	ands	r1, r3
 8006a26:	2301      	movs	r3, #1
 8006a28:	001d      	movs	r5, r3
 8006a2a:	408d      	lsls	r5, r1
 8006a2c:	432a      	orrs	r2, r5
 8006a2e:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a30:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8006a32:	2225      	movs	r2, #37	; 0x25
 8006a34:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8006a36:	3323      	adds	r3, #35	; 0x23
 8006a38:	2200      	movs	r2, #0
 8006a3a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8006a3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0c0      	beq.n	80069c4 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8006a42:	4798      	blx	r3
  return;
 8006a44:	e7be      	b.n	80069c4 <HAL_DMA_IRQHandler+0x44>
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	40020000 	.word	0x40020000

08006a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8006a4e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a50:	e05a      	b.n	8006b08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a52:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006a54:	005f      	lsls	r7, r3, #1
 8006a56:	2603      	movs	r6, #3
 8006a58:	40be      	lsls	r6, r7
 8006a5a:	43b4      	bics	r4, r6
 8006a5c:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006a5e:	68cc      	ldr	r4, [r1, #12]
 8006a60:	40bc      	lsls	r4, r7
 8006a62:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8006a64:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a66:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a68:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a6a:	684a      	ldr	r2, [r1, #4]
 8006a6c:	0916      	lsrs	r6, r2, #4
 8006a6e:	2201      	movs	r2, #1
 8006a70:	4032      	ands	r2, r6
 8006a72:	409a      	lsls	r2, r3
 8006a74:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8006a76:	6042      	str	r2, [r0, #4]
 8006a78:	e056      	b.n	8006b28 <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a7a:	08dc      	lsrs	r4, r3, #3
 8006a7c:	3408      	adds	r4, #8
 8006a7e:	00a4      	lsls	r4, r4, #2
 8006a80:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a82:	3205      	adds	r2, #5
 8006a84:	401a      	ands	r2, r3
 8006a86:	0092      	lsls	r2, r2, #2
 8006a88:	270f      	movs	r7, #15
 8006a8a:	4097      	lsls	r7, r2
 8006a8c:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a8e:	690f      	ldr	r7, [r1, #16]
 8006a90:	4097      	lsls	r7, r2
 8006a92:	003a      	movs	r2, r7
 8006a94:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 8006a96:	5022      	str	r2, [r4, r0]
 8006a98:	e05a      	b.n	8006b50 <HAL_GPIO_Init+0x104>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006a9a:	2603      	movs	r6, #3
 8006a9c:	e000      	b.n	8006aa0 <HAL_GPIO_Init+0x54>
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	40a6      	lsls	r6, r4
 8006aa2:	0034      	movs	r4, r6
 8006aa4:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8006aa6:	4e43      	ldr	r6, [pc, #268]	; (8006bb4 <HAL_GPIO_Init+0x168>)
 8006aa8:	3218      	adds	r2, #24
 8006aaa:	0092      	lsls	r2, r2, #2
 8006aac:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006aae:	6834      	ldr	r4, [r6, #0]
        temp &= ~(iocurrent);
 8006ab0:	43ea      	mvns	r2, r5
 8006ab2:	0026      	movs	r6, r4
 8006ab4:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006ab6:	684f      	ldr	r7, [r1, #4]
 8006ab8:	02ff      	lsls	r7, r7, #11
 8006aba:	d501      	bpl.n	8006ac0 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8006abc:	432c      	orrs	r4, r5
 8006abe:	0026      	movs	r6, r4
        }
        EXTI->RTSR1 = temp;
 8006ac0:	4c3c      	ldr	r4, [pc, #240]	; (8006bb4 <HAL_GPIO_Init+0x168>)
 8006ac2:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8006ac4:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 8006ac6:	0026      	movs	r6, r4
 8006ac8:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006aca:	684f      	ldr	r7, [r1, #4]
 8006acc:	02bf      	lsls	r7, r7, #10
 8006ace:	d501      	bpl.n	8006ad4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8006ad0:	432c      	orrs	r4, r5
 8006ad2:	0026      	movs	r6, r4
        }
        EXTI->FTSR1 = temp;
 8006ad4:	4c37      	ldr	r4, [pc, #220]	; (8006bb4 <HAL_GPIO_Init+0x168>)
 8006ad6:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006ad8:	2684      	movs	r6, #132	; 0x84
 8006ada:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 8006adc:	0026      	movs	r6, r4
 8006ade:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ae0:	684f      	ldr	r7, [r1, #4]
 8006ae2:	03bf      	lsls	r7, r7, #14
 8006ae4:	d501      	bpl.n	8006aea <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8006ae6:	432c      	orrs	r4, r5
 8006ae8:	0026      	movs	r6, r4
        }
        EXTI->EMR1 = temp;
 8006aea:	4c32      	ldr	r4, [pc, #200]	; (8006bb4 <HAL_GPIO_Init+0x168>)
 8006aec:	2784      	movs	r7, #132	; 0x84
 8006aee:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 8006af0:	2680      	movs	r6, #128	; 0x80
 8006af2:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 8006af4:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006af6:	684e      	ldr	r6, [r1, #4]
 8006af8:	03f6      	lsls	r6, r6, #15
 8006afa:	d501      	bpl.n	8006b00 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8006afc:	002a      	movs	r2, r5
 8006afe:	4322      	orrs	r2, r4
        }
        EXTI->IMR1 = temp;
 8006b00:	4d2c      	ldr	r5, [pc, #176]	; (8006bb4 <HAL_GPIO_Init+0x168>)
 8006b02:	2480      	movs	r4, #128	; 0x80
 8006b04:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8006b06:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b08:	680c      	ldr	r4, [r1, #0]
 8006b0a:	0022      	movs	r2, r4
 8006b0c:	40da      	lsrs	r2, r3
 8006b0e:	d04f      	beq.n	8006bb0 <HAL_GPIO_Init+0x164>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b10:	2201      	movs	r2, #1
 8006b12:	409a      	lsls	r2, r3
 8006b14:	0025      	movs	r5, r4
 8006b16:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8006b18:	4214      	tst	r4, r2
 8006b1a:	d0f4      	beq.n	8006b06 <HAL_GPIO_Init+0xba>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b1c:	2403      	movs	r4, #3
 8006b1e:	684e      	ldr	r6, [r1, #4]
 8006b20:	4034      	ands	r4, r6
 8006b22:	3c01      	subs	r4, #1
 8006b24:	2c01      	cmp	r4, #1
 8006b26:	d994      	bls.n	8006a52 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b28:	2203      	movs	r2, #3
 8006b2a:	684c      	ldr	r4, [r1, #4]
 8006b2c:	4022      	ands	r2, r4
 8006b2e:	2a03      	cmp	r2, #3
 8006b30:	d009      	beq.n	8006b46 <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 8006b32:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006b34:	005e      	lsls	r6, r3, #1
 8006b36:	2403      	movs	r4, #3
 8006b38:	40b4      	lsls	r4, r6
 8006b3a:	43a2      	bics	r2, r4
 8006b3c:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006b3e:	688a      	ldr	r2, [r1, #8]
 8006b40:	40b2      	lsls	r2, r6
 8006b42:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8006b44:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b46:	2203      	movs	r2, #3
 8006b48:	684c      	ldr	r4, [r1, #4]
 8006b4a:	4022      	ands	r2, r4
 8006b4c:	2a02      	cmp	r2, #2
 8006b4e:	d094      	beq.n	8006a7a <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8006b50:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006b52:	005e      	lsls	r6, r3, #1
 8006b54:	2203      	movs	r2, #3
 8006b56:	0017      	movs	r7, r2
 8006b58:	40b7      	lsls	r7, r6
 8006b5a:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006b5c:	684f      	ldr	r7, [r1, #4]
 8006b5e:	403a      	ands	r2, r7
 8006b60:	40b2      	lsls	r2, r6
 8006b62:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8006b64:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b66:	22c0      	movs	r2, #192	; 0xc0
 8006b68:	0292      	lsls	r2, r2, #10
 8006b6a:	684c      	ldr	r4, [r1, #4]
 8006b6c:	4214      	tst	r4, r2
 8006b6e:	d0ca      	beq.n	8006b06 <HAL_GPIO_Init+0xba>
        temp = EXTI->EXTICR[position >> 2u];
 8006b70:	089a      	lsrs	r2, r3, #2
 8006b72:	0014      	movs	r4, r2
 8006b74:	3418      	adds	r4, #24
 8006b76:	00a4      	lsls	r4, r4, #2
 8006b78:	4e0e      	ldr	r6, [pc, #56]	; (8006bb4 <HAL_GPIO_Init+0x168>)
 8006b7a:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006b7c:	2403      	movs	r4, #3
 8006b7e:	401c      	ands	r4, r3
 8006b80:	00e4      	lsls	r4, r4, #3
 8006b82:	260f      	movs	r6, #15
 8006b84:	40a6      	lsls	r6, r4
 8006b86:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006b88:	26a0      	movs	r6, #160	; 0xa0
 8006b8a:	05f6      	lsls	r6, r6, #23
 8006b8c:	42b0      	cmp	r0, r6
 8006b8e:	d086      	beq.n	8006a9e <HAL_GPIO_Init+0x52>
 8006b90:	4e09      	ldr	r6, [pc, #36]	; (8006bb8 <HAL_GPIO_Init+0x16c>)
 8006b92:	42b0      	cmp	r0, r6
 8006b94:	d008      	beq.n	8006ba8 <HAL_GPIO_Init+0x15c>
 8006b96:	4e09      	ldr	r6, [pc, #36]	; (8006bbc <HAL_GPIO_Init+0x170>)
 8006b98:	42b0      	cmp	r0, r6
 8006b9a:	d007      	beq.n	8006bac <HAL_GPIO_Init+0x160>
 8006b9c:	4e08      	ldr	r6, [pc, #32]	; (8006bc0 <HAL_GPIO_Init+0x174>)
 8006b9e:	42b0      	cmp	r0, r6
 8006ba0:	d100      	bne.n	8006ba4 <HAL_GPIO_Init+0x158>
 8006ba2:	e77a      	b.n	8006a9a <HAL_GPIO_Init+0x4e>
 8006ba4:	2605      	movs	r6, #5
 8006ba6:	e77b      	b.n	8006aa0 <HAL_GPIO_Init+0x54>
 8006ba8:	2601      	movs	r6, #1
 8006baa:	e779      	b.n	8006aa0 <HAL_GPIO_Init+0x54>
 8006bac:	2602      	movs	r6, #2
 8006bae:	e777      	b.n	8006aa0 <HAL_GPIO_Init+0x54>
  }
}
 8006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	40021800 	.word	0x40021800
 8006bb8:	50000400 	.word	0x50000400
 8006bbc:	50000800 	.word	0x50000800
 8006bc0:	50000c00 	.word	0x50000c00

08006bc4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bc8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bca:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bcc:	6281      	str	r1, [r0, #40]	; 0x28
}
 8006bce:	e7fc      	b.n	8006bca <HAL_GPIO_WritePin+0x6>

08006bd0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006bd0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006bd2:	0013      	movs	r3, r2
 8006bd4:	400b      	ands	r3, r1
 8006bd6:	041b      	lsls	r3, r3, #16
 8006bd8:	4391      	bics	r1, r2
 8006bda:	4319      	orrs	r1, r3
 8006bdc:	6181      	str	r1, [r0, #24]
}
 8006bde:	4770      	bx	lr

08006be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006be0:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006be2:	4a10      	ldr	r2, [pc, #64]	; (8006c24 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8006be4:	6813      	ldr	r3, [r2, #0]
 8006be6:	4910      	ldr	r1, [pc, #64]	; (8006c28 <HAL_PWREx_ControlVoltageScaling+0x48>)
 8006be8:	400b      	ands	r3, r1
 8006bea:	4303      	orrs	r3, r0
 8006bec:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006bee:	2380      	movs	r3, #128	; 0x80
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4298      	cmp	r0, r3
 8006bf4:	d001      	beq.n	8006bfa <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006bf6:	2000      	movs	r0, #0
}
 8006bf8:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006bfa:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <HAL_PWREx_ControlVoltageScaling+0x4c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	0058      	lsls	r0, r3, #1
 8006c00:	18c0      	adds	r0, r0, r3
 8006c02:	0040      	lsls	r0, r0, #1
 8006c04:	490a      	ldr	r1, [pc, #40]	; (8006c30 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8006c06:	f7f9 faa3 	bl	8000150 <__udivsi3>
 8006c0a:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <HAL_PWREx_ControlVoltageScaling+0x44>)
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	055b      	lsls	r3, r3, #21
 8006c12:	d503      	bpl.n	8006c1c <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 8006c18:	3801      	subs	r0, #1
 8006c1a:	e7f7      	b.n	8006c0c <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e7eb      	b.n	8006bf8 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8006c20:	2003      	movs	r0, #3
 8006c22:	e7e9      	b.n	8006bf8 <HAL_PWREx_ControlVoltageScaling+0x18>
 8006c24:	40007000 	.word	0x40007000
 8006c28:	fffff9ff 	.word	0xfffff9ff
 8006c2c:	20000000 	.word	0x20000000
 8006c30:	000f4240 	.word	0x000f4240

08006c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c3a:	d100      	bne.n	8006c3e <HAL_RCC_OscConfig+0xa>
 8006c3c:	e231      	b.n	80070a2 <HAL_RCC_OscConfig+0x46e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c3e:	6803      	ldr	r3, [r0, #0]
 8006c40:	07db      	lsls	r3, r3, #31
 8006c42:	d539      	bpl.n	8006cb8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c44:	4ac1      	ldr	r2, [pc, #772]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006c46:	6891      	ldr	r1, [r2, #8]
 8006c48:	2338      	movs	r3, #56	; 0x38
 8006c4a:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c4c:	68d1      	ldr	r1, [r2, #12]
 8006c4e:	2203      	movs	r2, #3
 8006c50:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006c52:	2b10      	cmp	r3, #16
 8006c54:	d026      	beq.n	8006ca4 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d026      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	2280      	movs	r2, #128	; 0x80
 8006c5e:	0252      	lsls	r2, r2, #9
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d07f      	beq.n	8006d64 <HAL_RCC_OscConfig+0x130>
 8006c64:	22a0      	movs	r2, #160	; 0xa0
 8006c66:	02d2      	lsls	r2, r2, #11
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d100      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3a>
 8006c6c:	e081      	b.n	8006d72 <HAL_RCC_OscConfig+0x13e>
 8006c6e:	4bb7      	ldr	r3, [pc, #732]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	49b7      	ldr	r1, [pc, #732]	; (8006f50 <HAL_RCC_OscConfig+0x31c>)
 8006c74:	400a      	ands	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	49b6      	ldr	r1, [pc, #728]	; (8006f54 <HAL_RCC_OscConfig+0x320>)
 8006c7c:	400a      	ands	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c80:	6863      	ldr	r3, [r4, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d100      	bne.n	8006c88 <HAL_RCC_OscConfig+0x54>
 8006c86:	e080      	b.n	8006d8a <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7ff f864 	bl	8005d54 <HAL_GetTick>
 8006c8c:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c8e:	4baf      	ldr	r3, [pc, #700]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	039b      	lsls	r3, r3, #14
 8006c94:	d410      	bmi.n	8006cb8 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c96:	f7ff f85d 	bl	8005d54 <HAL_GetTick>
 8006c9a:	1b40      	subs	r0, r0, r5
 8006c9c:	2864      	cmp	r0, #100	; 0x64
 8006c9e:	d9f6      	bls.n	8006c8e <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8006ca0:	2003      	movs	r0, #3
 8006ca2:	e1ff      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006ca4:	2a03      	cmp	r2, #3
 8006ca6:	d1d6      	bne.n	8006c56 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	4ba8      	ldr	r3, [pc, #672]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	039b      	lsls	r3, r3, #14
 8006cae:	d503      	bpl.n	8006cb8 <HAL_RCC_OscConfig+0x84>
 8006cb0:	6863      	ldr	r3, [r4, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d100      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x84>
 8006cb6:	e1f7      	b.n	80070a8 <HAL_RCC_OscConfig+0x474>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	d531      	bpl.n	8006d22 <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cbe:	4aa3      	ldr	r2, [pc, #652]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006cc0:	6893      	ldr	r3, [r2, #8]
 8006cc2:	2138      	movs	r1, #56	; 0x38
 8006cc4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cc6:	68d1      	ldr	r1, [r2, #12]
 8006cc8:	2203      	movs	r2, #3
 8006cca:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006ccc:	2b10      	cmp	r3, #16
 8006cce:	d06a      	beq.n	8006da6 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d16b      	bne.n	8006dac <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cd4:	4a9d      	ldr	r2, [pc, #628]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	0552      	lsls	r2, r2, #21
 8006cda:	d503      	bpl.n	8006ce4 <HAL_RCC_OscConfig+0xb0>
 8006cdc:	68e2      	ldr	r2, [r4, #12]
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d100      	bne.n	8006ce4 <HAL_RCC_OscConfig+0xb0>
 8006ce2:	e1e3      	b.n	80070ac <HAL_RCC_OscConfig+0x478>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce4:	4899      	ldr	r0, [pc, #612]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006ce6:	6842      	ldr	r2, [r0, #4]
 8006ce8:	499b      	ldr	r1, [pc, #620]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006cea:	400a      	ands	r2, r1
 8006cec:	6961      	ldr	r1, [r4, #20]
 8006cee:	0209      	lsls	r1, r1, #8
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006cf8:	6803      	ldr	r3, [r0, #0]
 8006cfa:	4998      	ldr	r1, [pc, #608]	; (8006f5c <HAL_RCC_OscConfig+0x328>)
 8006cfc:	400b      	ands	r3, r1
 8006cfe:	6921      	ldr	r1, [r4, #16]
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006d04:	6803      	ldr	r3, [r0, #0]
 8006d06:	0adb      	lsrs	r3, r3, #11
 8006d08:	2207      	movs	r2, #7
 8006d0a:	401a      	ands	r2, r3
 8006d0c:	4b94      	ldr	r3, [pc, #592]	; (8006f60 <HAL_RCC_OscConfig+0x32c>)
 8006d0e:	40d3      	lsrs	r3, r2
 8006d10:	4a94      	ldr	r2, [pc, #592]	; (8006f64 <HAL_RCC_OscConfig+0x330>)
 8006d12:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006d14:	4b94      	ldr	r3, [pc, #592]	; (8006f68 <HAL_RCC_OscConfig+0x334>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	f7fe ffd0 	bl	8005cbc <HAL_InitTick>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d000      	beq.n	8006d22 <HAL_RCC_OscConfig+0xee>
 8006d20:	e1c6      	b.n	80070b0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	071b      	lsls	r3, r3, #28
 8006d26:	d400      	bmi.n	8006d2a <HAL_RCC_OscConfig+0xf6>
 8006d28:	e081      	b.n	8006e2e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006d2a:	4b88      	ldr	r3, [pc, #544]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	2338      	movs	r3, #56	; 0x38
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b18      	cmp	r3, #24
 8006d34:	d073      	beq.n	8006e1e <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d36:	69a3      	ldr	r3, [r4, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d100      	bne.n	8006d3e <HAL_RCC_OscConfig+0x10a>
 8006d3c:	e0b4      	b.n	8006ea8 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006d3e:	4a83      	ldr	r2, [pc, #524]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006d40:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8006d42:	2101      	movs	r1, #1
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d48:	f7ff f804 	bl	8005d54 <HAL_GetTick>
 8006d4c:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d4e:	4b7f      	ldr	r3, [pc, #508]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d52:	079b      	lsls	r3, r3, #30
 8006d54:	d46b      	bmi.n	8006e2e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d56:	f7fe fffd 	bl	8005d54 <HAL_GetTick>
 8006d5a:	1b40      	subs	r0, r0, r5
 8006d5c:	2802      	cmp	r0, #2
 8006d5e:	d9f6      	bls.n	8006d4e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8006d60:	2003      	movs	r0, #3
 8006d62:	e19f      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d64:	4a79      	ldr	r2, [pc, #484]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006d66:	6811      	ldr	r1, [r2, #0]
 8006d68:	2380      	movs	r3, #128	; 0x80
 8006d6a:	025b      	lsls	r3, r3, #9
 8006d6c:	430b      	orrs	r3, r1
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	e786      	b.n	8006c80 <HAL_RCC_OscConfig+0x4c>
 8006d72:	4b76      	ldr	r3, [pc, #472]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	02d2      	lsls	r2, r2, #11
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	6819      	ldr	r1, [r3, #0]
 8006d80:	2280      	movs	r2, #128	; 0x80
 8006d82:	0252      	lsls	r2, r2, #9
 8006d84:	430a      	orrs	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	e77a      	b.n	8006c80 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8006d8a:	f7fe ffe3 	bl	8005d54 <HAL_GetTick>
 8006d8e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d90:	4b6e      	ldr	r3, [pc, #440]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	039b      	lsls	r3, r3, #14
 8006d96:	d58f      	bpl.n	8006cb8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d98:	f7fe ffdc 	bl	8005d54 <HAL_GetTick>
 8006d9c:	1b40      	subs	r0, r0, r5
 8006d9e:	2864      	cmp	r0, #100	; 0x64
 8006da0:	d9f6      	bls.n	8006d90 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8006da2:	2003      	movs	r0, #3
 8006da4:	e17e      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006da6:	2a02      	cmp	r2, #2
 8006da8:	d192      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x9c>
 8006daa:	e793      	b.n	8006cd4 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dac:	68e3      	ldr	r3, [r4, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d022      	beq.n	8006df8 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006db2:	4a66      	ldr	r2, [pc, #408]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006db4:	6813      	ldr	r3, [r2, #0]
 8006db6:	4969      	ldr	r1, [pc, #420]	; (8006f5c <HAL_RCC_OscConfig+0x328>)
 8006db8:	400b      	ands	r3, r1
 8006dba:	6921      	ldr	r1, [r4, #16]
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8006dc0:	6811      	ldr	r1, [r2, #0]
 8006dc2:	2380      	movs	r3, #128	; 0x80
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006dca:	f7fe ffc3 	bl	8005d54 <HAL_GetTick>
 8006dce:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dd0:	4b5e      	ldr	r3, [pc, #376]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	055b      	lsls	r3, r3, #21
 8006dd6:	d406      	bmi.n	8006de6 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dd8:	f7fe ffbc 	bl	8005d54 <HAL_GetTick>
 8006ddc:	1b40      	subs	r0, r0, r5
 8006dde:	2802      	cmp	r0, #2
 8006de0:	d9f6      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8006de2:	2003      	movs	r0, #3
 8006de4:	e15e      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006de6:	4959      	ldr	r1, [pc, #356]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006de8:	684b      	ldr	r3, [r1, #4]
 8006dea:	4a5b      	ldr	r2, [pc, #364]	; (8006f58 <HAL_RCC_OscConfig+0x324>)
 8006dec:	4013      	ands	r3, r2
 8006dee:	6962      	ldr	r2, [r4, #20]
 8006df0:	0212      	lsls	r2, r2, #8
 8006df2:	4313      	orrs	r3, r2
 8006df4:	604b      	str	r3, [r1, #4]
 8006df6:	e794      	b.n	8006d22 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8006df8:	4a54      	ldr	r2, [pc, #336]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006dfa:	6813      	ldr	r3, [r2, #0]
 8006dfc:	495b      	ldr	r1, [pc, #364]	; (8006f6c <HAL_RCC_OscConfig+0x338>)
 8006dfe:	400b      	ands	r3, r1
 8006e00:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006e02:	f7fe ffa7 	bl	8005d54 <HAL_GetTick>
 8006e06:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e08:	4b50      	ldr	r3, [pc, #320]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	055b      	lsls	r3, r3, #21
 8006e0e:	d588      	bpl.n	8006d22 <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e10:	f7fe ffa0 	bl	8005d54 <HAL_GetTick>
 8006e14:	1b40      	subs	r0, r0, r5
 8006e16:	2802      	cmp	r0, #2
 8006e18:	d9f6      	bls.n	8006e08 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8006e1a:	2003      	movs	r0, #3
 8006e1c:	e142      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006e1e:	4b4b      	ldr	r3, [pc, #300]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e22:	079b      	lsls	r3, r3, #30
 8006e24:	d503      	bpl.n	8006e2e <HAL_RCC_OscConfig+0x1fa>
 8006e26:	69a3      	ldr	r3, [r4, #24]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d100      	bne.n	8006e2e <HAL_RCC_OscConfig+0x1fa>
 8006e2c:	e142      	b.n	80070b4 <HAL_RCC_OscConfig+0x480>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	075b      	lsls	r3, r3, #29
 8006e32:	d400      	bmi.n	8006e36 <HAL_RCC_OscConfig+0x202>
 8006e34:	e0a2      	b.n	8006f7c <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006e36:	4b45      	ldr	r3, [pc, #276]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006e38:	689a      	ldr	r2, [r3, #8]
 8006e3a:	2338      	movs	r3, #56	; 0x38
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d045      	beq.n	8006ece <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e42:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	d44a      	bmi.n	8006ee0 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006e4a:	4a40      	ldr	r2, [pc, #256]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006e4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006e4e:	2080      	movs	r0, #128	; 0x80
 8006e50:	0540      	lsls	r0, r0, #21
 8006e52:	4301      	orrs	r1, r0
 8006e54:	63d1      	str	r1, [r2, #60]	; 0x3c
 8006e56:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006e58:	4003      	ands	r3, r0
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8006e5e:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e60:	4b43      	ldr	r3, [pc, #268]	; (8006f70 <HAL_RCC_OscConfig+0x33c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	05db      	lsls	r3, r3, #23
 8006e66:	d53d      	bpl.n	8006ee4 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e68:	68a3      	ldr	r3, [r4, #8]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d04e      	beq.n	8006f0c <HAL_RCC_OscConfig+0x2d8>
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	d052      	beq.n	8006f18 <HAL_RCC_OscConfig+0x2e4>
 8006e72:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e76:	2101      	movs	r1, #1
 8006e78:	438a      	bics	r2, r1
 8006e7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8006e7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e7e:	3103      	adds	r1, #3
 8006e80:	438a      	bics	r2, r1
 8006e82:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e84:	68a3      	ldr	r3, [r4, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d050      	beq.n	8006f2c <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e8a:	f7fe ff63 	bl	8005d54 <HAL_GetTick>
 8006e8e:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e90:	4b2e      	ldr	r3, [pc, #184]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e94:	079b      	lsls	r3, r3, #30
 8006e96:	d46f      	bmi.n	8006f78 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e98:	f7fe ff5c 	bl	8005d54 <HAL_GetTick>
 8006e9c:	1b80      	subs	r0, r0, r6
 8006e9e:	4b35      	ldr	r3, [pc, #212]	; (8006f74 <HAL_RCC_OscConfig+0x340>)
 8006ea0:	4298      	cmp	r0, r3
 8006ea2:	d9f5      	bls.n	8006e90 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8006ea4:	2003      	movs	r0, #3
 8006ea6:	e0fd      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_LSI_DISABLE();
 8006ea8:	4a28      	ldr	r2, [pc, #160]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006eaa:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8006eac:	2101      	movs	r1, #1
 8006eae:	438b      	bics	r3, r1
 8006eb0:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8006eb2:	f7fe ff4f 	bl	8005d54 <HAL_GetTick>
 8006eb6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006eb8:	4b24      	ldr	r3, [pc, #144]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebc:	079b      	lsls	r3, r3, #30
 8006ebe:	d5b6      	bpl.n	8006e2e <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ec0:	f7fe ff48 	bl	8005d54 <HAL_GetTick>
 8006ec4:	1b40      	subs	r0, r0, r5
 8006ec6:	2802      	cmp	r0, #2
 8006ec8:	d9f6      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8006eca:	2003      	movs	r0, #3
 8006ecc:	e0ea      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006ece:	4b1f      	ldr	r3, [pc, #124]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed2:	079b      	lsls	r3, r3, #30
 8006ed4:	d552      	bpl.n	8006f7c <HAL_RCC_OscConfig+0x348>
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d14f      	bne.n	8006f7c <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8006edc:	2001      	movs	r0, #1
 8006ede:	e0e1      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
    FlagStatus       pwrclkchanged = RESET;
 8006ee0:	2500      	movs	r5, #0
 8006ee2:	e7bd      	b.n	8006e60 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ee4:	4a22      	ldr	r2, [pc, #136]	; (8006f70 <HAL_RCC_OscConfig+0x33c>)
 8006ee6:	6811      	ldr	r1, [r2, #0]
 8006ee8:	2380      	movs	r3, #128	; 0x80
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006ef0:	f7fe ff30 	bl	8005d54 <HAL_GetTick>
 8006ef4:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ef6:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <HAL_RCC_OscConfig+0x33c>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	05db      	lsls	r3, r3, #23
 8006efc:	d4b4      	bmi.n	8006e68 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006efe:	f7fe ff29 	bl	8005d54 <HAL_GetTick>
 8006f02:	1b80      	subs	r0, r0, r6
 8006f04:	2802      	cmp	r0, #2
 8006f06:	d9f6      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8006f08:	2003      	movs	r0, #3
 8006f0a:	e0cb      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f0c:	4a0f      	ldr	r2, [pc, #60]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006f0e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8006f10:	2101      	movs	r1, #1
 8006f12:	430b      	orrs	r3, r1
 8006f14:	65d3      	str	r3, [r2, #92]	; 0x5c
 8006f16:	e7b5      	b.n	8006e84 <HAL_RCC_OscConfig+0x250>
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f1c:	2104      	movs	r1, #4
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f24:	3903      	subs	r1, #3
 8006f26:	430a      	orrs	r2, r1
 8006f28:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f2a:	e7ab      	b.n	8006e84 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2c:	f7fe ff12 	bl	8005d54 <HAL_GetTick>
 8006f30:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_RCC_OscConfig+0x318>)
 8006f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f36:	079b      	lsls	r3, r3, #30
 8006f38:	d51e      	bpl.n	8006f78 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f3a:	f7fe ff0b 	bl	8005d54 <HAL_GetTick>
 8006f3e:	1b80      	subs	r0, r0, r6
 8006f40:	4b0c      	ldr	r3, [pc, #48]	; (8006f74 <HAL_RCC_OscConfig+0x340>)
 8006f42:	4298      	cmp	r0, r3
 8006f44:	d9f5      	bls.n	8006f32 <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8006f46:	2003      	movs	r0, #3
 8006f48:	e0ac      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	fffeffff 	.word	0xfffeffff
 8006f54:	fffbffff 	.word	0xfffbffff
 8006f58:	ffff80ff 	.word	0xffff80ff
 8006f5c:	ffffc7ff 	.word	0xffffc7ff
 8006f60:	00f42400 	.word	0x00f42400
 8006f64:	20000000 	.word	0x20000000
 8006f68:	20000008 	.word	0x20000008
 8006f6c:	fffffeff 	.word	0xfffffeff
 8006f70:	40007000 	.word	0x40007000
 8006f74:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006f78:	2d01      	cmp	r5, #1
 8006f7a:	d01e      	beq.n	8006fba <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f7c:	69e3      	ldr	r3, [r4, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d100      	bne.n	8006f84 <HAL_RCC_OscConfig+0x350>
 8006f82:	e099      	b.n	80070b8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f84:	4a54      	ldr	r2, [pc, #336]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8006f86:	6891      	ldr	r1, [r2, #8]
 8006f88:	2238      	movs	r2, #56	; 0x38
 8006f8a:	400a      	ands	r2, r1
 8006f8c:	2a10      	cmp	r2, #16
 8006f8e:	d060      	beq.n	8007052 <HAL_RCC_OscConfig+0x41e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d018      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f94:	4a50      	ldr	r2, [pc, #320]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8006f96:	6813      	ldr	r3, [r2, #0]
 8006f98:	4950      	ldr	r1, [pc, #320]	; (80070dc <HAL_RCC_OscConfig+0x4a8>)
 8006f9a:	400b      	ands	r3, r1
 8006f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9e:	f7fe fed9 	bl	8005d54 <HAL_GetTick>
 8006fa2:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fa4:	4b4c      	ldr	r3, [pc, #304]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	019b      	lsls	r3, r3, #6
 8006faa:	d54b      	bpl.n	8007044 <HAL_RCC_OscConfig+0x410>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fac:	f7fe fed2 	bl	8005d54 <HAL_GetTick>
 8006fb0:	1b00      	subs	r0, r0, r4
 8006fb2:	2802      	cmp	r0, #2
 8006fb4:	d9f6      	bls.n	8006fa4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006fb6:	2003      	movs	r0, #3
 8006fb8:	e074      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PWR_CLK_DISABLE();
 8006fba:	4a47      	ldr	r2, [pc, #284]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8006fbc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006fbe:	4948      	ldr	r1, [pc, #288]	; (80070e0 <HAL_RCC_OscConfig+0x4ac>)
 8006fc0:	400b      	ands	r3, r1
 8006fc2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006fc4:	e7da      	b.n	8006f7c <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8006fc6:	4a44      	ldr	r2, [pc, #272]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8006fc8:	6813      	ldr	r3, [r2, #0]
 8006fca:	4944      	ldr	r1, [pc, #272]	; (80070dc <HAL_RCC_OscConfig+0x4a8>)
 8006fcc:	400b      	ands	r3, r1
 8006fce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006fd0:	f7fe fec0 	bl	8005d54 <HAL_GetTick>
 8006fd4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fd6:	4b40      	ldr	r3, [pc, #256]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	019b      	lsls	r3, r3, #6
 8006fdc:	d506      	bpl.n	8006fec <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fde:	f7fe feb9 	bl	8005d54 <HAL_GetTick>
 8006fe2:	1b40      	subs	r0, r0, r5
 8006fe4:	2802      	cmp	r0, #2
 8006fe6:	d9f6      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 8006fe8:	2003      	movs	r0, #3
 8006fea:	e05b      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fec:	4a3a      	ldr	r2, [pc, #232]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8006fee:	68d3      	ldr	r3, [r2, #12]
 8006ff0:	493c      	ldr	r1, [pc, #240]	; (80070e4 <HAL_RCC_OscConfig+0x4b0>)
 8006ff2:	4019      	ands	r1, r3
 8006ff4:	6a23      	ldr	r3, [r4, #32]
 8006ff6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ff8:	4303      	orrs	r3, r0
 8006ffa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006ffc:	0200      	lsls	r0, r0, #8
 8006ffe:	4303      	orrs	r3, r0
 8007000:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007002:	4303      	orrs	r3, r0
 8007004:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007006:	4303      	orrs	r3, r0
 8007008:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800700a:	4303      	orrs	r3, r0
 800700c:	430b      	orrs	r3, r1
 800700e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8007010:	6811      	ldr	r1, [r2, #0]
 8007012:	2380      	movs	r3, #128	; 0x80
 8007014:	045b      	lsls	r3, r3, #17
 8007016:	430b      	orrs	r3, r1
 8007018:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800701a:	68d1      	ldr	r1, [r2, #12]
 800701c:	2380      	movs	r3, #128	; 0x80
 800701e:	055b      	lsls	r3, r3, #21
 8007020:	430b      	orrs	r3, r1
 8007022:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8007024:	f7fe fe96 	bl	8005d54 <HAL_GetTick>
 8007028:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800702a:	4b2b      	ldr	r3, [pc, #172]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	019b      	lsls	r3, r3, #6
 8007030:	d406      	bmi.n	8007040 <HAL_RCC_OscConfig+0x40c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007032:	f7fe fe8f 	bl	8005d54 <HAL_GetTick>
 8007036:	1b00      	subs	r0, r0, r4
 8007038:	2802      	cmp	r0, #2
 800703a:	d9f6      	bls.n	800702a <HAL_RCC_OscConfig+0x3f6>
            return HAL_TIMEOUT;
 800703c:	2003      	movs	r0, #3
 800703e:	e031      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8007040:	2000      	movs	r0, #0
 8007042:	e02f      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007044:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8007046:	68d3      	ldr	r3, [r2, #12]
 8007048:	4927      	ldr	r1, [pc, #156]	; (80070e8 <HAL_RCC_OscConfig+0x4b4>)
 800704a:	400b      	ands	r3, r1
 800704c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800704e:	2000      	movs	r0, #0
 8007050:	e028      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007052:	2b01      	cmp	r3, #1
 8007054:	d032      	beq.n	80070bc <HAL_RCC_OscConfig+0x488>
        temp_pllckcfg = RCC->PLLCFGR;
 8007056:	4b20      	ldr	r3, [pc, #128]	; (80070d8 <HAL_RCC_OscConfig+0x4a4>)
 8007058:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800705a:	2303      	movs	r3, #3
 800705c:	4013      	ands	r3, r2
 800705e:	6a21      	ldr	r1, [r4, #32]
 8007060:	428b      	cmp	r3, r1
 8007062:	d12d      	bne.n	80070c0 <HAL_RCC_OscConfig+0x48c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007064:	2370      	movs	r3, #112	; 0x70
 8007066:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007068:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800706a:	428b      	cmp	r3, r1
 800706c:	d12a      	bne.n	80070c4 <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800706e:	21fe      	movs	r1, #254	; 0xfe
 8007070:	01c9      	lsls	r1, r1, #7
 8007072:	4011      	ands	r1, r2
 8007074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007076:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007078:	4299      	cmp	r1, r3
 800707a:	d125      	bne.n	80070c8 <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800707c:	23f8      	movs	r3, #248	; 0xf8
 800707e:	039b      	lsls	r3, r3, #14
 8007080:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007082:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007084:	428b      	cmp	r3, r1
 8007086:	d121      	bne.n	80070cc <HAL_RCC_OscConfig+0x498>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007088:	23e0      	movs	r3, #224	; 0xe0
 800708a:	051b      	lsls	r3, r3, #20
 800708c:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800708e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007090:	428b      	cmp	r3, r1
 8007092:	d11d      	bne.n	80070d0 <HAL_RCC_OscConfig+0x49c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007094:	0f52      	lsrs	r2, r2, #29
 8007096:	0752      	lsls	r2, r2, #29
 8007098:	6b63      	ldr	r3, [r4, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800709a:	429a      	cmp	r2, r3
 800709c:	d11a      	bne.n	80070d4 <HAL_RCC_OscConfig+0x4a0>
  return HAL_OK;
 800709e:	2000      	movs	r0, #0
 80070a0:	e000      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
    return HAL_ERROR;
 80070a2:	2001      	movs	r0, #1
}
 80070a4:	b002      	add	sp, #8
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80070a8:	2001      	movs	r0, #1
 80070aa:	e7fb      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 80070ac:	2001      	movs	r0, #1
 80070ae:	e7f9      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 80070b0:	2001      	movs	r0, #1
 80070b2:	e7f7      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 80070b4:	2001      	movs	r0, #1
 80070b6:	e7f5      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
  return HAL_OK;
 80070b8:	2000      	movs	r0, #0
 80070ba:	e7f3      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
        return HAL_ERROR;
 80070bc:	2001      	movs	r0, #1
 80070be:	e7f1      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
          return HAL_ERROR;
 80070c0:	2001      	movs	r0, #1
 80070c2:	e7ef      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
 80070c4:	2001      	movs	r0, #1
 80070c6:	e7ed      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
 80070c8:	2001      	movs	r0, #1
 80070ca:	e7eb      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
 80070cc:	2001      	movs	r0, #1
 80070ce:	e7e9      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
 80070d0:	2001      	movs	r0, #1
 80070d2:	e7e7      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
 80070d4:	2001      	movs	r0, #1
 80070d6:	e7e5      	b.n	80070a4 <HAL_RCC_OscConfig+0x470>
 80070d8:	40021000 	.word	0x40021000
 80070dc:	feffffff 	.word	0xfeffffff
 80070e0:	efffffff 	.word	0xefffffff
 80070e4:	11c1808c 	.word	0x11c1808c
 80070e8:	eefefffc 	.word	0xeefefffc

080070ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070ec:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070ee:	4b2a      	ldr	r3, [pc, #168]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	2238      	movs	r2, #56	; 0x38
 80070f4:	421a      	tst	r2, r3
 80070f6:	d107      	bne.n	8007108 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80070f8:	4b27      	ldr	r3, [pc, #156]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	0ad2      	lsrs	r2, r2, #11
 80070fe:	2307      	movs	r3, #7
 8007100:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007102:	4826      	ldr	r0, [pc, #152]	; (800719c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007104:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8007106:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007108:	4b23      	ldr	r3, [pc, #140]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	2338      	movs	r3, #56	; 0x38
 800710e:	4013      	ands	r3, r2
 8007110:	2b08      	cmp	r3, #8
 8007112:	d03b      	beq.n	800718c <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007114:	4b20      	ldr	r3, [pc, #128]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	2338      	movs	r3, #56	; 0x38
 800711a:	4013      	ands	r3, r2
 800711c:	2b10      	cmp	r3, #16
 800711e:	d00d      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007120:	4b1d      	ldr	r3, [pc, #116]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 8007122:	689a      	ldr	r2, [r3, #8]
 8007124:	2338      	movs	r3, #56	; 0x38
 8007126:	4013      	ands	r3, r2
 8007128:	2b20      	cmp	r3, #32
 800712a:	d031      	beq.n	8007190 <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800712c:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	2338      	movs	r3, #56	; 0x38
 8007132:	4013      	ands	r3, r2
 8007134:	2b18      	cmp	r3, #24
 8007136:	d026      	beq.n	8007186 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8007138:	2000      	movs	r0, #0
  return sysclockfreq;
 800713a:	e7e4      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800713c:	4a16      	ldr	r2, [pc, #88]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 800713e:	68d1      	ldr	r1, [r2, #12]
 8007140:	3b0d      	subs	r3, #13
 8007142:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007144:	68d2      	ldr	r2, [r2, #12]
 8007146:	0912      	lsrs	r2, r2, #4
 8007148:	2107      	movs	r1, #7
 800714a:	4011      	ands	r1, r2
 800714c:	3101      	adds	r1, #1
    switch (pllsource)
 800714e:	2b03      	cmp	r3, #3
 8007150:	d00f      	beq.n	8007172 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007152:	4812      	ldr	r0, [pc, #72]	; (800719c <HAL_RCC_GetSysClockFreq+0xb0>)
 8007154:	f7f8 fffc 	bl	8000150 <__udivsi3>
 8007158:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	0a12      	lsrs	r2, r2, #8
 800715e:	237f      	movs	r3, #127	; 0x7f
 8007160:	4013      	ands	r3, r2
 8007162:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007164:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 8007166:	68d9      	ldr	r1, [r3, #12]
 8007168:	0f49      	lsrs	r1, r1, #29
 800716a:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800716c:	f7f8 fff0 	bl	8000150 <__udivsi3>
 8007170:	e7c9      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007172:	480b      	ldr	r0, [pc, #44]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007174:	f7f8 ffec 	bl	8000150 <__udivsi3>
 8007178:	4b07      	ldr	r3, [pc, #28]	; (8007198 <HAL_RCC_GetSysClockFreq+0xac>)
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	0a12      	lsrs	r2, r2, #8
 800717e:	237f      	movs	r3, #127	; 0x7f
 8007180:	4013      	ands	r3, r2
 8007182:	4358      	muls	r0, r3
        break;
 8007184:	e7ee      	b.n	8007164 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8007186:	20fa      	movs	r0, #250	; 0xfa
 8007188:	01c0      	lsls	r0, r0, #7
 800718a:	e7bc      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 800718c:	4804      	ldr	r0, [pc, #16]	; (80071a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800718e:	e7ba      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8007190:	2080      	movs	r0, #128	; 0x80
 8007192:	0200      	lsls	r0, r0, #8
 8007194:	e7b7      	b.n	8007106 <HAL_RCC_GetSysClockFreq+0x1a>
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	40021000 	.word	0x40021000
 800719c:	00f42400 	.word	0x00f42400
 80071a0:	007a1200 	.word	0x007a1200

080071a4 <HAL_RCC_ClockConfig>:
{
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	0004      	movs	r4, r0
 80071a8:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d100      	bne.n	80071b0 <HAL_RCC_ClockConfig+0xc>
 80071ae:	e0aa      	b.n	8007306 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071b0:	4b57      	ldr	r3, [pc, #348]	; (8007310 <HAL_RCC_ClockConfig+0x16c>)
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	2307      	movs	r3, #7
 80071b6:	4013      	ands	r3, r2
 80071b8:	428b      	cmp	r3, r1
 80071ba:	d321      	bcc.n	8007200 <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	079a      	lsls	r2, r3, #30
 80071c0:	d50e      	bpl.n	80071e0 <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c2:	075b      	lsls	r3, r3, #29
 80071c4:	d505      	bpl.n	80071d2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80071c6:	4a53      	ldr	r2, [pc, #332]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 80071c8:	6891      	ldr	r1, [r2, #8]
 80071ca:	23e0      	movs	r3, #224	; 0xe0
 80071cc:	01db      	lsls	r3, r3, #7
 80071ce:	430b      	orrs	r3, r1
 80071d0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071d2:	4a50      	ldr	r2, [pc, #320]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 80071d4:	6893      	ldr	r3, [r2, #8]
 80071d6:	4950      	ldr	r1, [pc, #320]	; (8007318 <HAL_RCC_ClockConfig+0x174>)
 80071d8:	400b      	ands	r3, r1
 80071da:	68a1      	ldr	r1, [r4, #8]
 80071dc:	430b      	orrs	r3, r1
 80071de:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	07db      	lsls	r3, r3, #31
 80071e4:	d554      	bpl.n	8007290 <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071e6:	6863      	ldr	r3, [r4, #4]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d020      	beq.n	800722e <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d03b      	beq.n	8007268 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d13f      	bne.n	8007274 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071f4:	4a47      	ldr	r2, [pc, #284]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 80071f6:	6812      	ldr	r2, [r2, #0]
 80071f8:	0552      	lsls	r2, r2, #21
 80071fa:	d41c      	bmi.n	8007236 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80071fc:	2001      	movs	r0, #1
 80071fe:	e06a      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007200:	4a43      	ldr	r2, [pc, #268]	; (8007310 <HAL_RCC_ClockConfig+0x16c>)
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	2107      	movs	r1, #7
 8007206:	438b      	bics	r3, r1
 8007208:	432b      	orrs	r3, r5
 800720a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800720c:	f7fe fda2 	bl	8005d54 <HAL_GetTick>
 8007210:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007212:	4b3f      	ldr	r3, [pc, #252]	; (8007310 <HAL_RCC_ClockConfig+0x16c>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	2307      	movs	r3, #7
 8007218:	4013      	ands	r3, r2
 800721a:	42ab      	cmp	r3, r5
 800721c:	d0ce      	beq.n	80071bc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800721e:	f7fe fd99 	bl	8005d54 <HAL_GetTick>
 8007222:	1b80      	subs	r0, r0, r6
 8007224:	4a3d      	ldr	r2, [pc, #244]	; (800731c <HAL_RCC_ClockConfig+0x178>)
 8007226:	4290      	cmp	r0, r2
 8007228:	d9f3      	bls.n	8007212 <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 800722a:	2003      	movs	r0, #3
 800722c:	e053      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800722e:	4a39      	ldr	r2, [pc, #228]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 8007230:	6812      	ldr	r2, [r2, #0]
 8007232:	0392      	lsls	r2, r2, #14
 8007234:	d569      	bpl.n	800730a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007236:	4937      	ldr	r1, [pc, #220]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 8007238:	688a      	ldr	r2, [r1, #8]
 800723a:	2007      	movs	r0, #7
 800723c:	4382      	bics	r2, r0
 800723e:	4313      	orrs	r3, r2
 8007240:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8007242:	f7fe fd87 	bl	8005d54 <HAL_GetTick>
 8007246:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007248:	4b32      	ldr	r3, [pc, #200]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	2238      	movs	r2, #56	; 0x38
 800724e:	401a      	ands	r2, r3
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	00db      	lsls	r3, r3, #3
 8007254:	429a      	cmp	r2, r3
 8007256:	d01b      	beq.n	8007290 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007258:	f7fe fd7c 	bl	8005d54 <HAL_GetTick>
 800725c:	1b80      	subs	r0, r0, r6
 800725e:	4b2f      	ldr	r3, [pc, #188]	; (800731c <HAL_RCC_ClockConfig+0x178>)
 8007260:	4298      	cmp	r0, r3
 8007262:	d9f1      	bls.n	8007248 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8007264:	2003      	movs	r0, #3
 8007266:	e036      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007268:	4a2a      	ldr	r2, [pc, #168]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	0192      	lsls	r2, r2, #6
 800726e:	d4e2      	bmi.n	8007236 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8007270:	2001      	movs	r0, #1
 8007272:	e030      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007274:	2b03      	cmp	r3, #3
 8007276:	d005      	beq.n	8007284 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007278:	4a26      	ldr	r2, [pc, #152]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 800727a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800727c:	0792      	lsls	r2, r2, #30
 800727e:	d4da      	bmi.n	8007236 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8007280:	2001      	movs	r0, #1
 8007282:	e028      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007284:	4a23      	ldr	r2, [pc, #140]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 8007286:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8007288:	0792      	lsls	r2, r2, #30
 800728a:	d4d4      	bmi.n	8007236 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800728c:	2001      	movs	r0, #1
 800728e:	e022      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007290:	4b1f      	ldr	r3, [pc, #124]	; (8007310 <HAL_RCC_ClockConfig+0x16c>)
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	2307      	movs	r3, #7
 8007296:	4013      	ands	r3, r2
 8007298:	42ab      	cmp	r3, r5
 800729a:	d81d      	bhi.n	80072d8 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	075b      	lsls	r3, r3, #29
 80072a0:	d506      	bpl.n	80072b0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80072a2:	4a1c      	ldr	r2, [pc, #112]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 80072a4:	6893      	ldr	r3, [r2, #8]
 80072a6:	491e      	ldr	r1, [pc, #120]	; (8007320 <HAL_RCC_ClockConfig+0x17c>)
 80072a8:	400b      	ands	r3, r1
 80072aa:	68e1      	ldr	r1, [r4, #12]
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80072b0:	f7ff ff1c 	bl	80070ec <HAL_RCC_GetSysClockFreq>
 80072b4:	4b17      	ldr	r3, [pc, #92]	; (8007314 <HAL_RCC_ClockConfig+0x170>)
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	0a12      	lsrs	r2, r2, #8
 80072ba:	230f      	movs	r3, #15
 80072bc:	4013      	ands	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4a18      	ldr	r2, [pc, #96]	; (8007324 <HAL_RCC_ClockConfig+0x180>)
 80072c2:	589a      	ldr	r2, [r3, r2]
 80072c4:	231f      	movs	r3, #31
 80072c6:	4013      	ands	r3, r2
 80072c8:	40d8      	lsrs	r0, r3
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <HAL_RCC_ClockConfig+0x184>)
 80072cc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <HAL_RCC_ClockConfig+0x188>)
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f7fe fcf3 	bl	8005cbc <HAL_InitTick>
}
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072d8:	4a0d      	ldr	r2, [pc, #52]	; (8007310 <HAL_RCC_ClockConfig+0x16c>)
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	2107      	movs	r1, #7
 80072de:	438b      	bics	r3, r1
 80072e0:	432b      	orrs	r3, r5
 80072e2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80072e4:	f7fe fd36 	bl	8005d54 <HAL_GetTick>
 80072e8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80072ea:	4b09      	ldr	r3, [pc, #36]	; (8007310 <HAL_RCC_ClockConfig+0x16c>)
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	2307      	movs	r3, #7
 80072f0:	4013      	ands	r3, r2
 80072f2:	42ab      	cmp	r3, r5
 80072f4:	d0d2      	beq.n	800729c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072f6:	f7fe fd2d 	bl	8005d54 <HAL_GetTick>
 80072fa:	1b80      	subs	r0, r0, r6
 80072fc:	4b07      	ldr	r3, [pc, #28]	; (800731c <HAL_RCC_ClockConfig+0x178>)
 80072fe:	4298      	cmp	r0, r3
 8007300:	d9f3      	bls.n	80072ea <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8007302:	2003      	movs	r0, #3
 8007304:	e7e7      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8007306:	2001      	movs	r0, #1
 8007308:	e7e5      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 800730a:	2001      	movs	r0, #1
 800730c:	e7e3      	b.n	80072d6 <HAL_RCC_ClockConfig+0x132>
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	40022000 	.word	0x40022000
 8007314:	40021000 	.word	0x40021000
 8007318:	fffff0ff 	.word	0xfffff0ff
 800731c:	00001388 	.word	0x00001388
 8007320:	ffff8fff 	.word	0xffff8fff
 8007324:	0800df6c 	.word	0x0800df6c
 8007328:	20000000 	.word	0x20000000
 800732c:	20000008 	.word	0x20000008

08007330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8007330:	4b01      	ldr	r3, [pc, #4]	; (8007338 <HAL_RCC_GetHCLKFreq+0x8>)
 8007332:	6818      	ldr	r0, [r3, #0]
}
 8007334:	4770      	bx	lr
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	20000000 	.word	0x20000000

0800733c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800733c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800733e:	f7ff fff7 	bl	8007330 <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007342:	4b06      	ldr	r3, [pc, #24]	; (800735c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	0b12      	lsrs	r2, r2, #12
 8007348:	2307      	movs	r3, #7
 800734a:	4013      	ands	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4a04      	ldr	r2, [pc, #16]	; (8007360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007350:	589a      	ldr	r2, [r3, r2]
 8007352:	231f      	movs	r3, #31
 8007354:	4013      	ands	r3, r2
 8007356:	40d8      	lsrs	r0, r3
}
 8007358:	bd10      	pop	{r4, pc}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	40021000 	.word	0x40021000
 8007360:	0800dfac 	.word	0x0800dfac

08007364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007366:	b083      	sub	sp, #12
 8007368:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800736a:	6803      	ldr	r3, [r0, #0]
 800736c:	039b      	lsls	r3, r3, #14
 800736e:	d562      	bpl.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007370:	4b81      	ldr	r3, [pc, #516]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007374:	00db      	lsls	r3, r3, #3
 8007376:	d41e      	bmi.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007378:	4a7f      	ldr	r2, [pc, #508]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800737a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800737c:	2080      	movs	r0, #128	; 0x80
 800737e:	0540      	lsls	r0, r0, #21
 8007380:	4301      	orrs	r1, r0
 8007382:	63d1      	str	r1, [r2, #60]	; 0x3c
 8007384:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007386:	4003      	ands	r3, r0
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800738c:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800738e:	4a7b      	ldr	r2, [pc, #492]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007390:	6811      	ldr	r1, [r2, #0]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	430b      	orrs	r3, r1
 8007398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800739a:	f7fe fcdb 	bl	8005d54 <HAL_GetTick>
 800739e:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073a0:	4b76      	ldr	r3, [pc, #472]	; (800757c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	05db      	lsls	r3, r3, #23
 80073a6:	d408      	bmi.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a8:	f7fe fcd4 	bl	8005d54 <HAL_GetTick>
 80073ac:	1b40      	subs	r0, r0, r5
 80073ae:	2802      	cmp	r0, #2
 80073b0:	d9f6      	bls.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 80073b2:	2503      	movs	r5, #3
 80073b4:	e002      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 80073b6:	2600      	movs	r6, #0
 80073b8:	e7e9      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80073ba:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 80073bc:	2d00      	cmp	r5, #0
 80073be:	d123      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073c0:	4b6d      	ldr	r3, [pc, #436]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80073c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80073c4:	22c0      	movs	r2, #192	; 0xc0
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	000b      	movs	r3, r1
 80073ca:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073cc:	4211      	tst	r1, r2
 80073ce:	d010      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80073d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d00d      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073d6:	4a68      	ldr	r2, [pc, #416]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80073d8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80073da:	4969      	ldr	r1, [pc, #420]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80073dc:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073de:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80073e0:	2180      	movs	r1, #128	; 0x80
 80073e2:	0249      	lsls	r1, r1, #9
 80073e4:	4301      	orrs	r1, r0
 80073e6:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073e8:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 80073ea:	4866      	ldr	r0, [pc, #408]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80073ec:	4001      	ands	r1, r0
 80073ee:	65d1      	str	r1, [r2, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073f0:	65d3      	str	r3, [r2, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073f2:	07db      	lsls	r3, r3, #31
 80073f4:	d410      	bmi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 80073f6:	2d00      	cmp	r5, #0
 80073f8:	d106      	bne.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073fa:	4a5f      	ldr	r2, [pc, #380]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80073fc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80073fe:	4960      	ldr	r1, [pc, #384]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8007400:	400b      	ands	r3, r1
 8007402:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007404:	430b      	orrs	r3, r1
 8007406:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007408:	2e01      	cmp	r6, #1
 800740a:	d115      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800740c:	4a5a      	ldr	r2, [pc, #360]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800740e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007410:	495d      	ldr	r1, [pc, #372]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8007412:	400b      	ands	r3, r1
 8007414:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007416:	e00f      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8007418:	f7fe fc9c 	bl	8005d54 <HAL_GetTick>
 800741c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800741e:	4b56      	ldr	r3, [pc, #344]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007422:	079b      	lsls	r3, r3, #30
 8007424:	d4e7      	bmi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007426:	f7fe fc95 	bl	8005d54 <HAL_GetTick>
 800742a:	1bc0      	subs	r0, r0, r7
 800742c:	4b57      	ldr	r3, [pc, #348]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800742e:	4298      	cmp	r0, r3
 8007430:	d9f5      	bls.n	800741e <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 8007432:	2503      	movs	r5, #3
 8007434:	e7df      	b.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007436:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007438:	6823      	ldr	r3, [r4, #0]
 800743a:	07db      	lsls	r3, r3, #31
 800743c:	d506      	bpl.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800743e:	4a4e      	ldr	r2, [pc, #312]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007440:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007442:	2103      	movs	r1, #3
 8007444:	438b      	bics	r3, r1
 8007446:	6861      	ldr	r1, [r4, #4]
 8007448:	430b      	orrs	r3, r1
 800744a:	6553      	str	r3, [r2, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	079b      	lsls	r3, r3, #30
 8007450:	d506      	bpl.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007452:	4a49      	ldr	r2, [pc, #292]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007454:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007456:	210c      	movs	r1, #12
 8007458:	438b      	bics	r3, r1
 800745a:	68a1      	ldr	r1, [r4, #8]
 800745c:	430b      	orrs	r3, r1
 800745e:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	06db      	lsls	r3, r3, #27
 8007464:	d506      	bpl.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007466:	4a44      	ldr	r2, [pc, #272]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007468:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800746a:	4949      	ldr	r1, [pc, #292]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800746c:	400b      	ands	r3, r1
 800746e:	68e1      	ldr	r1, [r4, #12]
 8007470:	430b      	orrs	r3, r1
 8007472:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	059b      	lsls	r3, r3, #22
 8007478:	d506      	bpl.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800747a:	4a3f      	ldr	r2, [pc, #252]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800747c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800747e:	4945      	ldr	r1, [pc, #276]	; (8007594 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007480:	400b      	ands	r3, r1
 8007482:	69a1      	ldr	r1, [r4, #24]
 8007484:	430b      	orrs	r3, r1
 8007486:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	055b      	lsls	r3, r3, #21
 800748c:	d506      	bpl.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800748e:	4a3a      	ldr	r2, [pc, #232]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007490:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007492:	4941      	ldr	r1, [pc, #260]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007494:	400b      	ands	r3, r1
 8007496:	69e1      	ldr	r1, [r4, #28]
 8007498:	430b      	orrs	r3, r1
 800749a:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800749c:	6823      	ldr	r3, [r4, #0]
 800749e:	069b      	lsls	r3, r3, #26
 80074a0:	d506      	bpl.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074a2:	4a35      	ldr	r2, [pc, #212]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80074a4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074a6:	493d      	ldr	r1, [pc, #244]	; (800759c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80074a8:	400b      	ands	r3, r1
 80074aa:	6921      	ldr	r1, [r4, #16]
 80074ac:	430b      	orrs	r3, r1
 80074ae:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	045b      	lsls	r3, r3, #17
 80074b4:	d50b      	bpl.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074b6:	4a30      	ldr	r2, [pc, #192]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80074b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	089b      	lsrs	r3, r3, #2
 80074be:	6a21      	ldr	r1, [r4, #32]
 80074c0:	430b      	orrs	r3, r1
 80074c2:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	05db      	lsls	r3, r3, #23
 80074c8:	6a22      	ldr	r2, [r4, #32]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d039      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	031b      	lsls	r3, r3, #12
 80074d2:	d506      	bpl.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074d4:	4a28      	ldr	r2, [pc, #160]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80074d6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074d8:	2140      	movs	r1, #64	; 0x40
 80074da:	438b      	bics	r3, r1
 80074dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074de:	430b      	orrs	r3, r1
 80074e0:	6553      	str	r3, [r2, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	029b      	lsls	r3, r3, #10
 80074e6:	d50b      	bpl.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80074e8:	4a23      	ldr	r2, [pc, #140]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80074ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80074ec:	492c      	ldr	r1, [pc, #176]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80074ee:	400b      	ands	r3, r1
 80074f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80074f2:	430b      	orrs	r3, r1
 80074f4:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	03db      	lsls	r3, r3, #15
 80074fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d027      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	025b      	lsls	r3, r3, #9
 8007504:	d50b      	bpl.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007506:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007508:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800750a:	4926      	ldr	r1, [pc, #152]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800750c:	400b      	ands	r3, r1
 800750e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007510:	430b      	orrs	r3, r1
 8007512:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	045b      	lsls	r3, r3, #17
 8007518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800751a:	429a      	cmp	r2, r3
 800751c:	d01f      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	051b      	lsls	r3, r3, #20
 8007522:	d50b      	bpl.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007524:	4a14      	ldr	r2, [pc, #80]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007526:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007528:	491f      	ldr	r1, [pc, #124]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800752a:	400b      	ands	r3, r1
 800752c:	6961      	ldr	r1, [r4, #20]
 800752e:	430b      	orrs	r3, r1
 8007530:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007532:	6962      	ldr	r2, [r4, #20]
 8007534:	2380      	movs	r3, #128	; 0x80
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	429a      	cmp	r2, r3
 800753a:	d015      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x204>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800753c:	0028      	movs	r0, r5
 800753e:	b003      	add	sp, #12
 8007540:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007542:	4a0d      	ldr	r2, [pc, #52]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007544:	68d1      	ldr	r1, [r2, #12]
 8007546:	2380      	movs	r3, #128	; 0x80
 8007548:	025b      	lsls	r3, r3, #9
 800754a:	430b      	orrs	r3, r1
 800754c:	60d3      	str	r3, [r2, #12]
 800754e:	e7be      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007550:	4a09      	ldr	r2, [pc, #36]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007552:	68d1      	ldr	r1, [r2, #12]
 8007554:	2380      	movs	r3, #128	; 0x80
 8007556:	045b      	lsls	r3, r3, #17
 8007558:	430b      	orrs	r3, r1
 800755a:	60d3      	str	r3, [r2, #12]
 800755c:	e7d0      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800755e:	4a06      	ldr	r2, [pc, #24]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007560:	68d1      	ldr	r1, [r2, #12]
 8007562:	430b      	orrs	r3, r1
 8007564:	60d3      	str	r3, [r2, #12]
 8007566:	e7da      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007568:	4a03      	ldr	r2, [pc, #12]	; (8007578 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800756a:	68d1      	ldr	r1, [r2, #12]
 800756c:	2380      	movs	r3, #128	; 0x80
 800756e:	025b      	lsls	r3, r3, #9
 8007570:	430b      	orrs	r3, r1
 8007572:	60d3      	str	r3, [r2, #12]
 8007574:	e7e2      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007576:	46c0      	nop			; (mov r8, r8)
 8007578:	40021000 	.word	0x40021000
 800757c:	40007000 	.word	0x40007000
 8007580:	fffffcff 	.word	0xfffffcff
 8007584:	fffeffff 	.word	0xfffeffff
 8007588:	efffffff 	.word	0xefffffff
 800758c:	00001388 	.word	0x00001388
 8007590:	fffff3ff 	.word	0xfffff3ff
 8007594:	fff3ffff 	.word	0xfff3ffff
 8007598:	ffcfffff 	.word	0xffcfffff
 800759c:	ffffcfff 	.word	0xffffcfff
 80075a0:	ffbfffff 	.word	0xffbfffff
 80075a4:	feffffff 	.word	0xfeffffff
 80075a8:	ffff3fff 	.word	0xffff3fff

080075ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ae:	46d6      	mov	lr, sl
 80075b0:	464f      	mov	r7, r9
 80075b2:	4646      	mov	r6, r8
 80075b4:	b5c0      	push	{r6, r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	0006      	movs	r6, r0
 80075ba:	000d      	movs	r5, r1
 80075bc:	4690      	mov	r8, r2
 80075be:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075c0:	f7fe fbc8 	bl	8005d54 <HAL_GetTick>
 80075c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c6:	1a18      	subs	r0, r3, r0
 80075c8:	4681      	mov	r9, r0
 80075ca:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 80075cc:	f7fe fbc2 	bl	8005d54 <HAL_GetTick>
 80075d0:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075d2:	4b2e      	ldr	r3, [pc, #184]	; (800768c <SPI_WaitFlagStateUntilTimeout+0xe0>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	015b      	lsls	r3, r3, #5
 80075d8:	0d1b      	lsrs	r3, r3, #20
 80075da:	464a      	mov	r2, r9
 80075dc:	4353      	muls	r3, r2
 80075de:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075e0:	6833      	ldr	r3, [r6, #0]
 80075e2:	689c      	ldr	r4, [r3, #8]
 80075e4:	402c      	ands	r4, r5
 80075e6:	1b64      	subs	r4, r4, r5
 80075e8:	4263      	negs	r3, r4
 80075ea:	415c      	adcs	r4, r3
 80075ec:	4544      	cmp	r4, r8
 80075ee:	d045      	beq.n	800767c <SPI_WaitFlagStateUntilTimeout+0xd0>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075f0:	1c7b      	adds	r3, r7, #1
 80075f2:	d0f5      	beq.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075f4:	f7fe fbae 	bl	8005d54 <HAL_GetTick>
 80075f8:	4653      	mov	r3, sl
 80075fa:	1ac0      	subs	r0, r0, r3
 80075fc:	4548      	cmp	r0, r9
 80075fe:	d20b      	bcs.n	8007618 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8007600:	464b      	mov	r3, r9
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007606:	9a01      	ldr	r2, [sp, #4]
 8007608:	2a00      	cmp	r2, #0
 800760a:	d000      	beq.n	800760e <SPI_WaitFlagStateUntilTimeout+0x62>
 800760c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	3b01      	subs	r3, #1
 8007612:	9301      	str	r3, [sp, #4]
 8007614:	4691      	mov	r9, r2
 8007616:	e7e3      	b.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007618:	6832      	ldr	r2, [r6, #0]
 800761a:	6853      	ldr	r3, [r2, #4]
 800761c:	21e0      	movs	r1, #224	; 0xe0
 800761e:	438b      	bics	r3, r1
 8007620:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007622:	2382      	movs	r3, #130	; 0x82
 8007624:	005b      	lsls	r3, r3, #1
 8007626:	6872      	ldr	r2, [r6, #4]
 8007628:	429a      	cmp	r2, r3
 800762a:	d00c      	beq.n	8007646 <SPI_WaitFlagStateUntilTimeout+0x9a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800762c:	2380      	movs	r3, #128	; 0x80
 800762e:	019b      	lsls	r3, r3, #6
 8007630:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8007632:	429a      	cmp	r2, r3
 8007634:	d016      	beq.n	8007664 <SPI_WaitFlagStateUntilTimeout+0xb8>
        hspi->State = HAL_SPI_STATE_READY;
 8007636:	235d      	movs	r3, #93	; 0x5d
 8007638:	2201      	movs	r2, #1
 800763a:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 800763c:	3b01      	subs	r3, #1
 800763e:	2200      	movs	r2, #0
 8007640:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8007642:	2003      	movs	r0, #3
 8007644:	e01b      	b.n	800767e <SPI_WaitFlagStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007646:	68b3      	ldr	r3, [r6, #8]
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	0212      	lsls	r2, r2, #8
 800764c:	4293      	cmp	r3, r2
 800764e:	d003      	beq.n	8007658 <SPI_WaitFlagStateUntilTimeout+0xac>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007650:	2280      	movs	r2, #128	; 0x80
 8007652:	00d2      	lsls	r2, r2, #3
 8007654:	4293      	cmp	r3, r2
 8007656:	d1e9      	bne.n	800762c <SPI_WaitFlagStateUntilTimeout+0x80>
          __HAL_SPI_DISABLE(hspi);
 8007658:	6832      	ldr	r2, [r6, #0]
 800765a:	6813      	ldr	r3, [r2, #0]
 800765c:	2140      	movs	r1, #64	; 0x40
 800765e:	438b      	bics	r3, r1
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e7e3      	b.n	800762c <SPI_WaitFlagStateUntilTimeout+0x80>
          SPI_RESET_CRC(hspi);
 8007664:	6832      	ldr	r2, [r6, #0]
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	4909      	ldr	r1, [pc, #36]	; (8007690 <SPI_WaitFlagStateUntilTimeout+0xe4>)
 800766a:	400b      	ands	r3, r1
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	6832      	ldr	r2, [r6, #0]
 8007670:	6811      	ldr	r1, [r2, #0]
 8007672:	2380      	movs	r3, #128	; 0x80
 8007674:	019b      	lsls	r3, r3, #6
 8007676:	430b      	orrs	r3, r1
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e7dc      	b.n	8007636 <SPI_WaitFlagStateUntilTimeout+0x8a>
    }
  }

  return HAL_OK;
 800767c:	2000      	movs	r0, #0
}
 800767e:	b002      	add	sp, #8
 8007680:	bce0      	pop	{r5, r6, r7}
 8007682:	46ba      	mov	sl, r7
 8007684:	46b1      	mov	r9, r6
 8007686:	46a8      	mov	r8, r5
 8007688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	20000000 	.word	0x20000000
 8007690:	ffffdfff 	.word	0xffffdfff

08007694 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007696:	46de      	mov	lr, fp
 8007698:	4657      	mov	r7, sl
 800769a:	464e      	mov	r6, r9
 800769c:	4645      	mov	r5, r8
 800769e:	b5e0      	push	{r5, r6, r7, lr}
 80076a0:	b083      	sub	sp, #12
 80076a2:	0007      	movs	r7, r0
 80076a4:	000d      	movs	r5, r1
 80076a6:	0016      	movs	r6, r2
 80076a8:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076aa:	466b      	mov	r3, sp
 80076ac:	2200      	movs	r2, #0
 80076ae:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076b0:	f7fe fb50 	bl	8005d54 <HAL_GetTick>
 80076b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076b6:	1a18      	subs	r0, r3, r0
 80076b8:	4440      	add	r0, r8
 80076ba:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 80076bc:	f7fe fb4a 	bl	8005d54 <HAL_GetTick>
 80076c0:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076c6:	4b36      	ldr	r3, [pc, #216]	; (80077a0 <SPI_WaitFifoStateUntilTimeout+0x10c>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	0093      	lsls	r3, r2, #2
 80076cc:	189a      	adds	r2, r3, r2
 80076ce:	00d3      	lsls	r3, r2, #3
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	0d1b      	lsrs	r3, r3, #20
 80076d4:	464a      	mov	r2, r9
 80076d6:	4353      	muls	r3, r2
 80076d8:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80076da:	e002      	b.n	80076e2 <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80076dc:	4643      	mov	r3, r8
 80076de:	3301      	adds	r3, #1
 80076e0:	d111      	bne.n	8007706 <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689c      	ldr	r4, [r3, #8]
 80076e6:	402c      	ands	r4, r5
 80076e8:	42b4      	cmp	r4, r6
 80076ea:	d050      	beq.n	800778e <SPI_WaitFifoStateUntilTimeout+0xfa>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80076ec:	23c0      	movs	r3, #192	; 0xc0
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	429d      	cmp	r5, r3
 80076f2:	d1f3      	bne.n	80076dc <SPI_WaitFifoStateUntilTimeout+0x48>
 80076f4:	2e00      	cmp	r6, #0
 80076f6:	d1f1      	bne.n	80076dc <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 80076f8:	465b      	mov	r3, fp
 80076fa:	7b1b      	ldrb	r3, [r3, #12]
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	466a      	mov	r2, sp
 8007700:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 8007702:	78d3      	ldrb	r3, [r2, #3]
 8007704:	e7ea      	b.n	80076dc <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007706:	f7fe fb25 	bl	8005d54 <HAL_GetTick>
 800770a:	4653      	mov	r3, sl
 800770c:	1ac0      	subs	r0, r0, r3
 800770e:	4548      	cmp	r0, r9
 8007710:	d20b      	bcs.n	800772a <SPI_WaitFifoStateUntilTimeout+0x96>
 8007712:	464b      	mov	r3, r9
 8007714:	2b00      	cmp	r3, #0
 8007716:	d008      	beq.n	800772a <SPI_WaitFifoStateUntilTimeout+0x96>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007718:	9a01      	ldr	r2, [sp, #4]
 800771a:	2a00      	cmp	r2, #0
 800771c:	d000      	beq.n	8007720 <SPI_WaitFifoStateUntilTimeout+0x8c>
 800771e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	3b01      	subs	r3, #1
 8007724:	9301      	str	r3, [sp, #4]
 8007726:	4691      	mov	r9, r2
 8007728:	e7db      	b.n	80076e2 <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	6853      	ldr	r3, [r2, #4]
 800772e:	21e0      	movs	r1, #224	; 0xe0
 8007730:	438b      	bics	r3, r1
 8007732:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007734:	2382      	movs	r3, #130	; 0x82
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	429a      	cmp	r2, r3
 800773c:	d00c      	beq.n	8007758 <SPI_WaitFifoStateUntilTimeout+0xc4>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800773e:	2380      	movs	r3, #128	; 0x80
 8007740:	019b      	lsls	r3, r3, #6
 8007742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007744:	429a      	cmp	r2, r3
 8007746:	d016      	beq.n	8007776 <SPI_WaitFifoStateUntilTimeout+0xe2>
        hspi->State = HAL_SPI_STATE_READY;
 8007748:	235d      	movs	r3, #93	; 0x5d
 800774a:	2201      	movs	r2, #1
 800774c:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 800774e:	3b01      	subs	r3, #1
 8007750:	2200      	movs	r2, #0
 8007752:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8007754:	2003      	movs	r0, #3
 8007756:	e01b      	b.n	8007790 <SPI_WaitFifoStateUntilTimeout+0xfc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2280      	movs	r2, #128	; 0x80
 800775c:	0212      	lsls	r2, r2, #8
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <SPI_WaitFifoStateUntilTimeout+0xd6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007762:	2280      	movs	r2, #128	; 0x80
 8007764:	00d2      	lsls	r2, r2, #3
 8007766:	4293      	cmp	r3, r2
 8007768:	d1e9      	bne.n	800773e <SPI_WaitFifoStateUntilTimeout+0xaa>
          __HAL_SPI_DISABLE(hspi);
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	6813      	ldr	r3, [r2, #0]
 800776e:	2140      	movs	r1, #64	; 0x40
 8007770:	438b      	bics	r3, r1
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	e7e3      	b.n	800773e <SPI_WaitFifoStateUntilTimeout+0xaa>
          SPI_RESET_CRC(hspi);
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	6813      	ldr	r3, [r2, #0]
 800777a:	490a      	ldr	r1, [pc, #40]	; (80077a4 <SPI_WaitFifoStateUntilTimeout+0x110>)
 800777c:	400b      	ands	r3, r1
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	6811      	ldr	r1, [r2, #0]
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	019b      	lsls	r3, r3, #6
 8007788:	430b      	orrs	r3, r1
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e7dc      	b.n	8007748 <SPI_WaitFifoStateUntilTimeout+0xb4>
    }
  }

  return HAL_OK;
 800778e:	2000      	movs	r0, #0
}
 8007790:	b003      	add	sp, #12
 8007792:	bcf0      	pop	{r4, r5, r6, r7}
 8007794:	46bb      	mov	fp, r7
 8007796:	46b2      	mov	sl, r6
 8007798:	46a9      	mov	r9, r5
 800779a:	46a0      	mov	r8, r4
 800779c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779e:	46c0      	nop			; (mov r8, r8)
 80077a0:	20000000 	.word	0x20000000
 80077a4:	ffffdfff 	.word	0xffffdfff

080077a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b570      	push	{r4, r5, r6, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	0004      	movs	r4, r0
 80077ae:	000d      	movs	r5, r1
 80077b0:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077b2:	21c0      	movs	r1, #192	; 0xc0
 80077b4:	9200      	str	r2, [sp, #0]
 80077b6:	002b      	movs	r3, r5
 80077b8:	2200      	movs	r2, #0
 80077ba:	0149      	lsls	r1, r1, #5
 80077bc:	f7ff ff6a 	bl	8007694 <SPI_WaitFifoStateUntilTimeout>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d118      	bne.n	80077f6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077c4:	9600      	str	r6, [sp, #0]
 80077c6:	002b      	movs	r3, r5
 80077c8:	2200      	movs	r2, #0
 80077ca:	2180      	movs	r1, #128	; 0x80
 80077cc:	0020      	movs	r0, r4
 80077ce:	f7ff feed 	bl	80075ac <SPI_WaitFlagStateUntilTimeout>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d116      	bne.n	8007804 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077d6:	21c0      	movs	r1, #192	; 0xc0
 80077d8:	9600      	str	r6, [sp, #0]
 80077da:	002b      	movs	r3, r5
 80077dc:	2200      	movs	r2, #0
 80077de:	00c9      	lsls	r1, r1, #3
 80077e0:	0020      	movs	r0, r4
 80077e2:	f7ff ff57 	bl	8007694 <SPI_WaitFifoStateUntilTimeout>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d00a      	beq.n	8007800 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ea:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80077ec:	2220      	movs	r2, #32
 80077ee:	4313      	orrs	r3, r2
 80077f0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80077f2:	2003      	movs	r0, #3
 80077f4:	e004      	b.n	8007800 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80077f8:	2220      	movs	r2, #32
 80077fa:	4313      	orrs	r3, r2
 80077fc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80077fe:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8007800:	b002      	add	sp, #8
 8007802:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007804:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007806:	2220      	movs	r2, #32
 8007808:	4313      	orrs	r3, r2
 800780a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800780c:	2003      	movs	r0, #3
 800780e:	e7f7      	b.n	8007800 <SPI_EndRxTxTransaction+0x58>

08007810 <SPI_EndRxTransaction>:
{
 8007810:	b570      	push	{r4, r5, r6, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	0004      	movs	r4, r0
 8007816:	000d      	movs	r5, r1
 8007818:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800781a:	2382      	movs	r3, #130	; 0x82
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	6842      	ldr	r2, [r0, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d00f      	beq.n	8007844 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007824:	9600      	str	r6, [sp, #0]
 8007826:	002b      	movs	r3, r5
 8007828:	2200      	movs	r2, #0
 800782a:	2180      	movs	r1, #128	; 0x80
 800782c:	0020      	movs	r0, r4
 800782e:	f7ff febd 	bl	80075ac <SPI_WaitFlagStateUntilTimeout>
 8007832:	2800      	cmp	r0, #0
 8007834:	d115      	bne.n	8007862 <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007836:	2382      	movs	r3, #130	; 0x82
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d016      	beq.n	800786e <SPI_EndRxTransaction+0x5e>
}
 8007840:	b002      	add	sp, #8
 8007842:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007844:	6883      	ldr	r3, [r0, #8]
 8007846:	2280      	movs	r2, #128	; 0x80
 8007848:	0212      	lsls	r2, r2, #8
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800784e:	2280      	movs	r2, #128	; 0x80
 8007850:	00d2      	lsls	r2, r2, #3
 8007852:	4293      	cmp	r3, r2
 8007854:	d1e6      	bne.n	8007824 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	2140      	movs	r1, #64	; 0x40
 800785c:	438b      	bics	r3, r1
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	e7e0      	b.n	8007824 <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007862:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007864:	2220      	movs	r2, #32
 8007866:	4313      	orrs	r3, r2
 8007868:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800786a:	2003      	movs	r0, #3
 800786c:	e7e8      	b.n	8007840 <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800786e:	68a3      	ldr	r3, [r4, #8]
 8007870:	2280      	movs	r2, #128	; 0x80
 8007872:	0212      	lsls	r2, r2, #8
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007878:	2280      	movs	r2, #128	; 0x80
 800787a:	00d2      	lsls	r2, r2, #3
 800787c:	4293      	cmp	r3, r2
 800787e:	d1df      	bne.n	8007840 <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007880:	21c0      	movs	r1, #192	; 0xc0
 8007882:	9600      	str	r6, [sp, #0]
 8007884:	002b      	movs	r3, r5
 8007886:	2200      	movs	r2, #0
 8007888:	00c9      	lsls	r1, r1, #3
 800788a:	0020      	movs	r0, r4
 800788c:	f7ff ff02 	bl	8007694 <SPI_WaitFifoStateUntilTimeout>
 8007890:	2800      	cmp	r0, #0
 8007892:	d0d5      	beq.n	8007840 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007894:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007896:	2220      	movs	r2, #32
 8007898:	4313      	orrs	r3, r2
 800789a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800789c:	2003      	movs	r0, #3
 800789e:	e7cf      	b.n	8007840 <SPI_EndRxTransaction+0x30>

080078a0 <HAL_SPI_Init>:
{
 80078a0:	b570      	push	{r4, r5, r6, lr}
 80078a2:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80078a4:	d100      	bne.n	80078a8 <HAL_SPI_Init+0x8>
 80078a6:	e078      	b.n	800799a <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d107      	bne.n	80078be <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ae:	3305      	adds	r3, #5
 80078b0:	33ff      	adds	r3, #255	; 0xff
 80078b2:	6842      	ldr	r2, [r0, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d005      	beq.n	80078c4 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61c3      	str	r3, [r0, #28]
 80078bc:	e002      	b.n	80078c4 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078be:	2300      	movs	r3, #0
 80078c0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078c2:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80078c8:	335d      	adds	r3, #93	; 0x5d
 80078ca:	5ce3      	ldrb	r3, [r4, r3]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d05a      	beq.n	8007986 <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 80078d0:	235d      	movs	r3, #93	; 0x5d
 80078d2:	2202      	movs	r2, #2
 80078d4:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	6813      	ldr	r3, [r2, #0]
 80078da:	2140      	movs	r1, #64	; 0x40
 80078dc:	438b      	bics	r3, r1
 80078de:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078e0:	68e3      	ldr	r3, [r4, #12]
 80078e2:	22e0      	movs	r2, #224	; 0xe0
 80078e4:	00d2      	lsls	r2, r2, #3
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d954      	bls.n	8007994 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078ea:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078ec:	21f0      	movs	r1, #240	; 0xf0
 80078ee:	0109      	lsls	r1, r1, #4
 80078f0:	428b      	cmp	r3, r1
 80078f2:	d005      	beq.n	8007900 <HAL_SPI_Init+0x60>
 80078f4:	21e0      	movs	r1, #224	; 0xe0
 80078f6:	00c9      	lsls	r1, r1, #3
 80078f8:	428b      	cmp	r3, r1
 80078fa:	d001      	beq.n	8007900 <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007900:	2382      	movs	r3, #130	; 0x82
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	6861      	ldr	r1, [r4, #4]
 8007906:	400b      	ands	r3, r1
 8007908:	2184      	movs	r1, #132	; 0x84
 800790a:	0209      	lsls	r1, r1, #8
 800790c:	68a0      	ldr	r0, [r4, #8]
 800790e:	4001      	ands	r1, r0
 8007910:	430b      	orrs	r3, r1
 8007912:	2102      	movs	r1, #2
 8007914:	6920      	ldr	r0, [r4, #16]
 8007916:	4001      	ands	r1, r0
 8007918:	430b      	orrs	r3, r1
 800791a:	2101      	movs	r1, #1
 800791c:	6960      	ldr	r0, [r4, #20]
 800791e:	4008      	ands	r0, r1
 8007920:	4303      	orrs	r3, r0
 8007922:	2080      	movs	r0, #128	; 0x80
 8007924:	0080      	lsls	r0, r0, #2
 8007926:	69a5      	ldr	r5, [r4, #24]
 8007928:	4028      	ands	r0, r5
 800792a:	4303      	orrs	r3, r0
 800792c:	2038      	movs	r0, #56	; 0x38
 800792e:	69e5      	ldr	r5, [r4, #28]
 8007930:	4028      	ands	r0, r5
 8007932:	4303      	orrs	r3, r0
 8007934:	2080      	movs	r0, #128	; 0x80
 8007936:	6a25      	ldr	r5, [r4, #32]
 8007938:	4028      	ands	r0, r5
 800793a:	4303      	orrs	r3, r0
 800793c:	2080      	movs	r0, #128	; 0x80
 800793e:	0180      	lsls	r0, r0, #6
 8007940:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007942:	4028      	ands	r0, r5
 8007944:	4303      	orrs	r3, r0
 8007946:	6820      	ldr	r0, [r4, #0]
 8007948:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800794a:	8b60      	ldrh	r0, [r4, #26]
 800794c:	2304      	movs	r3, #4
 800794e:	4003      	ands	r3, r0
 8007950:	2010      	movs	r0, #16
 8007952:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007954:	4028      	ands	r0, r5
 8007956:	4303      	orrs	r3, r0
 8007958:	2008      	movs	r0, #8
 800795a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800795c:	4028      	ands	r0, r5
 800795e:	4303      	orrs	r3, r0
 8007960:	20f0      	movs	r0, #240	; 0xf0
 8007962:	0100      	lsls	r0, r0, #4
 8007964:	68e5      	ldr	r5, [r4, #12]
 8007966:	4028      	ands	r0, r5
 8007968:	4303      	orrs	r3, r0
 800796a:	6820      	ldr	r0, [r4, #0]
 800796c:	4313      	orrs	r3, r2
 800796e:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	69d3      	ldr	r3, [r2, #28]
 8007974:	480a      	ldr	r0, [pc, #40]	; (80079a0 <HAL_SPI_Init+0x100>)
 8007976:	4003      	ands	r3, r0
 8007978:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800797a:	2300      	movs	r3, #0
 800797c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800797e:	335d      	adds	r3, #93	; 0x5d
 8007980:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 8007982:	2000      	movs	r0, #0
}
 8007984:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8007986:	335c      	adds	r3, #92	; 0x5c
 8007988:	2200      	movs	r2, #0
 800798a:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800798c:	0020      	movs	r0, r4
 800798e:	f7fd ffab 	bl	80058e8 <HAL_SPI_MspInit>
 8007992:	e79d      	b.n	80078d0 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007994:	2280      	movs	r2, #128	; 0x80
 8007996:	0152      	lsls	r2, r2, #5
 8007998:	e7a8      	b.n	80078ec <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800799a:	2001      	movs	r0, #1
 800799c:	e7f2      	b.n	8007984 <HAL_SPI_Init+0xe4>
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	fffff7ff 	.word	0xfffff7ff

080079a4 <HAL_SPI_Transmit>:
{
 80079a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a6:	46ce      	mov	lr, r9
 80079a8:	b500      	push	{lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	0004      	movs	r4, r0
 80079ae:	9101      	str	r1, [sp, #4]
 80079b0:	4691      	mov	r9, r2
 80079b2:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80079b4:	235c      	movs	r3, #92	; 0x5c
 80079b6:	5cc3      	ldrb	r3, [r0, r3]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d100      	bne.n	80079be <HAL_SPI_Transmit+0x1a>
 80079bc:	e0c9      	b.n	8007b52 <HAL_SPI_Transmit+0x1ae>
 80079be:	235c      	movs	r3, #92	; 0x5c
 80079c0:	2201      	movs	r2, #1
 80079c2:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80079c4:	f7fe f9c6 	bl	8005d54 <HAL_GetTick>
 80079c8:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80079ca:	235d      	movs	r3, #93	; 0x5d
 80079cc:	5ce3      	ldrb	r3, [r4, r3]
 80079ce:	b2df      	uxtb	r7, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d000      	beq.n	80079d6 <HAL_SPI_Transmit+0x32>
 80079d4:	e0a9      	b.n	8007b2a <HAL_SPI_Transmit+0x186>
  if ((pData == NULL) || (Size == 0U))
 80079d6:	9901      	ldr	r1, [sp, #4]
 80079d8:	2900      	cmp	r1, #0
 80079da:	d100      	bne.n	80079de <HAL_SPI_Transmit+0x3a>
 80079dc:	e0a6      	b.n	8007b2c <HAL_SPI_Transmit+0x188>
 80079de:	464b      	mov	r3, r9
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d100      	bne.n	80079e6 <HAL_SPI_Transmit+0x42>
 80079e4:	e0a2      	b.n	8007b2c <HAL_SPI_Transmit+0x188>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079e6:	235d      	movs	r3, #93	; 0x5d
 80079e8:	2203      	movs	r2, #3
 80079ea:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ec:	2300      	movs	r3, #0
 80079ee:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079f0:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80079f2:	464a      	mov	r2, r9
 80079f4:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80079f6:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079f8:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80079fa:	2244      	movs	r2, #68	; 0x44
 80079fc:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80079fe:	3202      	adds	r2, #2
 8007a00:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8007a02:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007a04:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a06:	2380      	movs	r3, #128	; 0x80
 8007a08:	021b      	lsls	r3, r3, #8
 8007a0a:	68a2      	ldr	r2, [r4, #8]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d01e      	beq.n	8007a4e <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	0652      	lsls	r2, r2, #25
 8007a16:	d403      	bmi.n	8007a20 <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	2140      	movs	r1, #64	; 0x40
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a20:	23e0      	movs	r3, #224	; 0xe0
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	68e2      	ldr	r2, [r4, #12]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d939      	bls.n	8007a9e <HAL_SPI_Transmit+0xfa>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2a:	6863      	ldr	r3, [r4, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <HAL_SPI_Transmit+0x92>
 8007a30:	464b      	mov	r3, r9
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d120      	bne.n	8007a78 <HAL_SPI_Transmit+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a3a:	8812      	ldrh	r2, [r2, #0]
 8007a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a40:	3302      	adds	r3, #2
 8007a42:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007a44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007a4c:	e014      	b.n	8007a78 <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_DISABLE(hspi);
 8007a4e:	6822      	ldr	r2, [r4, #0]
 8007a50:	6813      	ldr	r3, [r2, #0]
 8007a52:	2140      	movs	r1, #64	; 0x40
 8007a54:	438b      	bics	r3, r1
 8007a56:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	6811      	ldr	r1, [r2, #0]
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	430b      	orrs	r3, r1
 8007a62:	6013      	str	r3, [r2, #0]
 8007a64:	e7d4      	b.n	8007a10 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a66:	f7fe f975 	bl	8005d54 <HAL_GetTick>
 8007a6a:	1b80      	subs	r0, r0, r6
 8007a6c:	42a8      	cmp	r0, r5
 8007a6e:	d301      	bcc.n	8007a74 <HAL_SPI_Transmit+0xd0>
 8007a70:	1c6b      	adds	r3, r5, #1
 8007a72:	d166      	bne.n	8007b42 <HAL_SPI_Transmit+0x19e>
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	d066      	beq.n	8007b46 <HAL_SPI_Transmit+0x1a2>
    while (hspi->TxXferCount > 0U)
 8007a78:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8007a7a:	b289      	uxth	r1, r1
 8007a7c:	2900      	cmp	r1, #0
 8007a7e:	d03c      	beq.n	8007afa <HAL_SPI_Transmit+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	0792      	lsls	r2, r2, #30
 8007a86:	d5ee      	bpl.n	8007a66 <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007a8a:	8812      	ldrh	r2, [r2, #0]
 8007a8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a90:	3302      	adds	r3, #2
 8007a92:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007a94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007a96:	3b01      	subs	r3, #1
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007a9c:	e7ec      	b.n	8007a78 <HAL_SPI_Transmit+0xd4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a9e:	6863      	ldr	r3, [r4, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SPI_Transmit+0x106>
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d114      	bne.n	8007ad4 <HAL_SPI_Transmit+0x130>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ab2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007ab8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007ac0:	e008      	b.n	8007ad4 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ac2:	f7fe f947 	bl	8005d54 <HAL_GetTick>
 8007ac6:	1b80      	subs	r0, r0, r6
 8007ac8:	42a8      	cmp	r0, r5
 8007aca:	d301      	bcc.n	8007ad0 <HAL_SPI_Transmit+0x12c>
 8007acc:	1c6b      	adds	r3, r5, #1
 8007ace:	d13c      	bne.n	8007b4a <HAL_SPI_Transmit+0x1a6>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	d03c      	beq.n	8007b4e <HAL_SPI_Transmit+0x1aa>
    while (hspi->TxXferCount > 0U)
 8007ad4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8007ad6:	b289      	uxth	r1, r1
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	d00e      	beq.n	8007afa <HAL_SPI_Transmit+0x156>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	0792      	lsls	r2, r2, #30
 8007ae2:	d5ee      	bpl.n	8007ac2 <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ae4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007ae6:	7812      	ldrb	r2, [r2, #0]
 8007ae8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007aec:	3301      	adds	r3, #1
 8007aee:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007af0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8007af8:	e7ec      	b.n	8007ad4 <HAL_SPI_Transmit+0x130>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007afa:	0032      	movs	r2, r6
 8007afc:	0029      	movs	r1, r5
 8007afe:	0020      	movs	r0, r4
 8007b00:	f7ff fe52 	bl	80077a8 <SPI_EndRxTxTransaction>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_SPI_Transmit+0x168>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b08:	2320      	movs	r3, #32
 8007b0a:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b0c:	68a3      	ldr	r3, [r4, #8]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	9203      	str	r2, [sp, #12]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	9303      	str	r3, [sp, #12]
 8007b1e:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d102      	bne.n	8007b2c <HAL_SPI_Transmit+0x188>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b26:	2700      	movs	r7, #0
 8007b28:	e000      	b.n	8007b2c <HAL_SPI_Transmit+0x188>
    errorcode = HAL_BUSY;
 8007b2a:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007b2c:	235d      	movs	r3, #93	; 0x5d
 8007b2e:	2201      	movs	r2, #1
 8007b30:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2200      	movs	r2, #0
 8007b36:	54e2      	strb	r2, [r4, r3]
}
 8007b38:	0038      	movs	r0, r7
 8007b3a:	b004      	add	sp, #16
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	46b9      	mov	r9, r7
 8007b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
          errorcode = HAL_TIMEOUT;
 8007b42:	2703      	movs	r7, #3
 8007b44:	e7f2      	b.n	8007b2c <HAL_SPI_Transmit+0x188>
 8007b46:	2703      	movs	r7, #3
 8007b48:	e7f0      	b.n	8007b2c <HAL_SPI_Transmit+0x188>
          errorcode = HAL_TIMEOUT;
 8007b4a:	2703      	movs	r7, #3
 8007b4c:	e7ee      	b.n	8007b2c <HAL_SPI_Transmit+0x188>
 8007b4e:	2703      	movs	r7, #3
 8007b50:	e7ec      	b.n	8007b2c <HAL_SPI_Transmit+0x188>
  __HAL_LOCK(hspi);
 8007b52:	2702      	movs	r7, #2
 8007b54:	e7f0      	b.n	8007b38 <HAL_SPI_Transmit+0x194>
	...

08007b58 <HAL_SPI_TransmitReceive>:
{
 8007b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	0004      	movs	r4, r0
 8007b5e:	9100      	str	r1, [sp, #0]
 8007b60:	9201      	str	r2, [sp, #4]
 8007b62:	001e      	movs	r6, r3
 8007b64:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8007b66:	235c      	movs	r3, #92	; 0x5c
 8007b68:	5cc3      	ldrb	r3, [r0, r3]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d100      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x18>
 8007b6e:	e116      	b.n	8007d9e <HAL_SPI_TransmitReceive+0x246>
 8007b70:	235c      	movs	r3, #92	; 0x5c
 8007b72:	2201      	movs	r2, #1
 8007b74:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8007b76:	f7fe f8ed 	bl	8005d54 <HAL_GetTick>
 8007b7a:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 8007b7c:	235d      	movs	r3, #93	; 0x5d
 8007b7e:	5ce3      	ldrb	r3, [r4, r3]
 8007b80:	b2d9      	uxtb	r1, r3
  tmp_mode            = hspi->Init.Mode;
 8007b82:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d00b      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x48>
 8007b88:	2382      	movs	r3, #130	; 0x82
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d000      	beq.n	8007b92 <HAL_SPI_TransmitReceive+0x3a>
 8007b90:	e0ec      	b.n	8007d6c <HAL_SPI_TransmitReceive+0x214>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b92:	68a3      	ldr	r3, [r4, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d000      	beq.n	8007b9a <HAL_SPI_TransmitReceive+0x42>
 8007b98:	e0f1      	b.n	8007d7e <HAL_SPI_TransmitReceive+0x226>
 8007b9a:	2904      	cmp	r1, #4
 8007b9c:	d000      	beq.n	8007ba0 <HAL_SPI_TransmitReceive+0x48>
 8007b9e:	e0f0      	b.n	8007d82 <HAL_SPI_TransmitReceive+0x22a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ba0:	9b00      	ldr	r3, [sp, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d100      	bne.n	8007ba8 <HAL_SPI_TransmitReceive+0x50>
 8007ba6:	e0ee      	b.n	8007d86 <HAL_SPI_TransmitReceive+0x22e>
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d100      	bne.n	8007bb0 <HAL_SPI_TransmitReceive+0x58>
 8007bae:	e0ec      	b.n	8007d8a <HAL_SPI_TransmitReceive+0x232>
 8007bb0:	2e00      	cmp	r6, #0
 8007bb2:	d100      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x5e>
 8007bb4:	e0eb      	b.n	8007d8e <HAL_SPI_TransmitReceive+0x236>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007bb6:	235d      	movs	r3, #93	; 0x5d
 8007bb8:	5ce3      	ldrb	r3, [r4, r3]
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d002      	beq.n	8007bc4 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bbe:	235d      	movs	r3, #93	; 0x5d
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bc8:	9a01      	ldr	r2, [sp, #4]
 8007bca:	6422      	str	r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007bcc:	2246      	movs	r2, #70	; 0x46
 8007bce:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferSize  = Size;
 8007bd0:	3a02      	subs	r2, #2
 8007bd2:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bd4:	9a00      	ldr	r2, [sp, #0]
 8007bd6:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007bd8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007bda:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8007bdc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007bde:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be0:	23e0      	movs	r3, #224	; 0xe0
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	68e2      	ldr	r2, [r4, #12]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d923      	bls.n	8007c32 <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bea:	6822      	ldr	r2, [r4, #0]
 8007bec:	6853      	ldr	r3, [r2, #4]
 8007bee:	496d      	ldr	r1, [pc, #436]	; (8007da4 <HAL_SPI_TransmitReceive+0x24c>)
 8007bf0:	400b      	ands	r3, r1
 8007bf2:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	0652      	lsls	r2, r2, #25
 8007bfa:	d403      	bmi.n	8007c04 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	2140      	movs	r1, #64	; 0x40
 8007c00:	430a      	orrs	r2, r1
 8007c02:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c04:	23e0      	movs	r3, #224	; 0xe0
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	68e2      	ldr	r2, [r4, #12]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d954      	bls.n	8007cb8 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c0e:	6863      	ldr	r3, [r4, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <HAL_SPI_TransmitReceive+0xc0>
 8007c14:	2e01      	cmp	r6, #1
 8007c16:	d10a      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c18:	6823      	ldr	r3, [r4, #0]
 8007c1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007c1c:	8812      	ldrh	r2, [r2, #0]
 8007c1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c22:	3302      	adds	r3, #2
 8007c24:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007c26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007c2e:	2601      	movs	r6, #1
 8007c30:	e02e      	b.n	8007c90 <HAL_SPI_TransmitReceive+0x138>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	6851      	ldr	r1, [r2, #4]
 8007c36:	2380      	movs	r3, #128	; 0x80
 8007c38:	015b      	lsls	r3, r3, #5
 8007c3a:	430b      	orrs	r3, r1
 8007c3c:	6053      	str	r3, [r2, #4]
 8007c3e:	e7d9      	b.n	8007bf4 <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007c42:	8812      	ldrh	r2, [r2, #0]
 8007c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c48:	3302      	adds	r3, #2
 8007c4a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007c4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007c54:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	07d2      	lsls	r2, r2, #31
 8007c5c:	d510      	bpl.n	8007c80 <HAL_SPI_TransmitReceive+0x128>
 8007c5e:	2246      	movs	r2, #70	; 0x46
 8007c60:	5aa2      	ldrh	r2, [r4, r2]
 8007c62:	b292      	uxth	r2, r2
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	d00b      	beq.n	8007c80 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007c6c:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c70:	3302      	adds	r3, #2
 8007c72:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007c74:	2246      	movs	r2, #70	; 0x46
 8007c76:	5aa3      	ldrh	r3, [r4, r2]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8007c7e:	2601      	movs	r6, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007c80:	f7fe f868 	bl	8005d54 <HAL_GetTick>
 8007c84:	1bc0      	subs	r0, r0, r7
 8007c86:	42a8      	cmp	r0, r5
 8007c88:	d302      	bcc.n	8007c90 <HAL_SPI_TransmitReceive+0x138>
 8007c8a:	1c6b      	adds	r3, r5, #1
 8007c8c:	d000      	beq.n	8007c90 <HAL_SPI_TransmitReceive+0x138>
 8007c8e:	e080      	b.n	8007d92 <HAL_SPI_TransmitReceive+0x23a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d104      	bne.n	8007ca2 <HAL_SPI_TransmitReceive+0x14a>
 8007c98:	3346      	adds	r3, #70	; 0x46
 8007c9a:	5ae3      	ldrh	r3, [r4, r3]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d059      	beq.n	8007d56 <HAL_SPI_TransmitReceive+0x1fe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	0792      	lsls	r2, r2, #30
 8007ca8:	d5d5      	bpl.n	8007c56 <HAL_SPI_TransmitReceive+0xfe>
 8007caa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007cac:	b292      	uxth	r2, r2
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	d0d1      	beq.n	8007c56 <HAL_SPI_TransmitReceive+0xfe>
 8007cb2:	2e01      	cmp	r6, #1
 8007cb4:	d1cf      	bne.n	8007c56 <HAL_SPI_TransmitReceive+0xfe>
 8007cb6:	e7c3      	b.n	8007c40 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cb8:	6863      	ldr	r3, [r4, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <HAL_SPI_TransmitReceive+0x16a>
 8007cbe:	2e01      	cmp	r6, #1
 8007cc0:	d10a      	bne.n	8007cd8 <HAL_SPI_TransmitReceive+0x180>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007cca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ccc:	3301      	adds	r3, #1
 8007cce:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8007cd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8007cd8:	2601      	movs	r6, #1
 8007cda:	e01d      	b.n	8007d18 <HAL_SPI_TransmitReceive+0x1c0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	07d2      	lsls	r2, r2, #31
 8007ce2:	d510      	bpl.n	8007d06 <HAL_SPI_TransmitReceive+0x1ae>
 8007ce4:	2246      	movs	r2, #70	; 0x46
 8007ce6:	5aa2      	ldrh	r2, [r4, r2]
 8007ce8:	b292      	uxth	r2, r2
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	d00b      	beq.n	8007d06 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cee:	7b1b      	ldrb	r3, [r3, #12]
 8007cf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007cf2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8007cf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007cfa:	2246      	movs	r2, #70	; 0x46
 8007cfc:	5aa3      	ldrh	r3, [r4, r2]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8007d04:	2601      	movs	r6, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007d06:	f7fe f825 	bl	8005d54 <HAL_GetTick>
 8007d0a:	1bc0      	subs	r0, r0, r7
 8007d0c:	42a8      	cmp	r0, r5
 8007d0e:	d301      	bcc.n	8007d14 <HAL_SPI_TransmitReceive+0x1bc>
 8007d10:	1c6b      	adds	r3, r5, #1
 8007d12:	d140      	bne.n	8007d96 <HAL_SPI_TransmitReceive+0x23e>
 8007d14:	2d00      	cmp	r5, #0
 8007d16:	d040      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x242>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d104      	bne.n	8007d2a <HAL_SPI_TransmitReceive+0x1d2>
 8007d20:	3346      	adds	r3, #70	; 0x46
 8007d22:	5ae3      	ldrh	r3, [r4, r3]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d015      	beq.n	8007d56 <HAL_SPI_TransmitReceive+0x1fe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d2a:	6823      	ldr	r3, [r4, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	0792      	lsls	r2, r2, #30
 8007d30:	d5d4      	bpl.n	8007cdc <HAL_SPI_TransmitReceive+0x184>
 8007d32:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8007d34:	b292      	uxth	r2, r2
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	d0d0      	beq.n	8007cdc <HAL_SPI_TransmitReceive+0x184>
 8007d3a:	2e01      	cmp	r6, #1
 8007d3c:	d1ce      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x184>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007d3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d40:	7812      	ldrb	r2, [r2, #0]
 8007d42:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007d44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d46:	3301      	adds	r3, #1
 8007d48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8007d4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8007d52:	2600      	movs	r6, #0
 8007d54:	e7c2      	b.n	8007cdc <HAL_SPI_TransmitReceive+0x184>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d56:	003a      	movs	r2, r7
 8007d58:	0029      	movs	r1, r5
 8007d5a:	0020      	movs	r0, r4
 8007d5c:	f7ff fd24 	bl	80077a8 <SPI_EndRxTxTransaction>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d004      	beq.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d64:	2320      	movs	r3, #32
 8007d66:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007d68:	2001      	movs	r0, #1
 8007d6a:	e000      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
    errorcode = HAL_BUSY;
 8007d6c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007d6e:	235d      	movs	r3, #93	; 0x5d
 8007d70:	2201      	movs	r2, #1
 8007d72:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8007d74:	3b01      	subs	r3, #1
 8007d76:	2200      	movs	r2, #0
 8007d78:	54e2      	strb	r2, [r4, r3]
}
 8007d7a:	b003      	add	sp, #12
 8007d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 8007d7e:	2002      	movs	r0, #2
 8007d80:	e7f5      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
 8007d82:	2002      	movs	r0, #2
 8007d84:	e7f3      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
    errorcode = HAL_ERROR;
 8007d86:	2001      	movs	r0, #1
 8007d88:	e7f1      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
 8007d8a:	2001      	movs	r0, #1
 8007d8c:	e7ef      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
 8007d8e:	2001      	movs	r0, #1
 8007d90:	e7ed      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
        errorcode = HAL_TIMEOUT;
 8007d92:	2003      	movs	r0, #3
 8007d94:	e7eb      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
        errorcode = HAL_TIMEOUT;
 8007d96:	2003      	movs	r0, #3
 8007d98:	e7e9      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
 8007d9a:	2003      	movs	r0, #3
 8007d9c:	e7e7      	b.n	8007d6e <HAL_SPI_TransmitReceive+0x216>
  __HAL_LOCK(hspi);
 8007d9e:	2002      	movs	r0, #2
 8007da0:	e7eb      	b.n	8007d7a <HAL_SPI_TransmitReceive+0x222>
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	ffffefff 	.word	0xffffefff

08007da8 <HAL_SPI_Receive>:
{
 8007da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007daa:	46c6      	mov	lr, r8
 8007dac:	b500      	push	{lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	0004      	movs	r4, r0
 8007db2:	9103      	str	r1, [sp, #12]
 8007db4:	4690      	mov	r8, r2
 8007db6:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007db8:	2382      	movs	r3, #130	; 0x82
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	6842      	ldr	r2, [r0, #4]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d045      	beq.n	8007e4e <HAL_SPI_Receive+0xa6>
  __HAL_LOCK(hspi);
 8007dc2:	235c      	movs	r3, #92	; 0x5c
 8007dc4:	5ce3      	ldrb	r3, [r4, r3]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d100      	bne.n	8007dcc <HAL_SPI_Receive+0x24>
 8007dca:	e0bd      	b.n	8007f48 <HAL_SPI_Receive+0x1a0>
 8007dcc:	235c      	movs	r3, #92	; 0x5c
 8007dce:	2201      	movs	r2, #1
 8007dd0:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8007dd2:	f7fd ffbf 	bl	8005d54 <HAL_GetTick>
 8007dd6:	0007      	movs	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007dd8:	235d      	movs	r3, #93	; 0x5d
 8007dda:	5ce3      	ldrb	r3, [r4, r3]
 8007ddc:	b2de      	uxtb	r6, r3
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d000      	beq.n	8007de4 <HAL_SPI_Receive+0x3c>
 8007de2:	e09d      	b.n	8007f20 <HAL_SPI_Receive+0x178>
  if ((pData == NULL) || (Size == 0U))
 8007de4:	9903      	ldr	r1, [sp, #12]
 8007de6:	2900      	cmp	r1, #0
 8007de8:	d100      	bne.n	8007dec <HAL_SPI_Receive+0x44>
 8007dea:	e09a      	b.n	8007f22 <HAL_SPI_Receive+0x17a>
 8007dec:	4643      	mov	r3, r8
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d100      	bne.n	8007df4 <HAL_SPI_Receive+0x4c>
 8007df2:	e096      	b.n	8007f22 <HAL_SPI_Receive+0x17a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007df4:	235d      	movs	r3, #93	; 0x5d
 8007df6:	2204      	movs	r2, #4
 8007df8:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007dfe:	6421      	str	r1, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007e00:	3240      	adds	r2, #64	; 0x40
 8007e02:	4641      	mov	r1, r8
 8007e04:	52a1      	strh	r1, [r4, r2]
  hspi->RxXferCount = Size;
 8007e06:	3202      	adds	r2, #2
 8007e08:	52a1      	strh	r1, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007e0a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007e0c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007e0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007e10:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e12:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e14:	23e0      	movs	r3, #224	; 0xe0
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	68e2      	ldr	r2, [r4, #12]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d924      	bls.n	8007e68 <HAL_SPI_Receive+0xc0>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	6853      	ldr	r3, [r2, #4]
 8007e22:	494a      	ldr	r1, [pc, #296]	; (8007f4c <HAL_SPI_Receive+0x1a4>)
 8007e24:	400b      	ands	r3, r1
 8007e26:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e28:	2380      	movs	r3, #128	; 0x80
 8007e2a:	021b      	lsls	r3, r3, #8
 8007e2c:	68a2      	ldr	r2, [r4, #8]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d021      	beq.n	8007e76 <HAL_SPI_Receive+0xce>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	0652      	lsls	r2, r2, #25
 8007e38:	d403      	bmi.n	8007e42 <HAL_SPI_Receive+0x9a>
    __HAL_SPI_ENABLE(hspi);
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	2140      	movs	r1, #64	; 0x40
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007e42:	23e0      	movs	r3, #224	; 0xe0
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	68e2      	ldr	r2, [r4, #12]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d928      	bls.n	8007e9e <HAL_SPI_Receive+0xf6>
 8007e4c:	e045      	b.n	8007eda <HAL_SPI_Receive+0x132>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007e4e:	6883      	ldr	r3, [r0, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1b6      	bne.n	8007dc2 <HAL_SPI_Receive+0x1a>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007e54:	335d      	adds	r3, #93	; 0x5d
 8007e56:	2204      	movs	r2, #4
 8007e58:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007e5a:	9500      	str	r5, [sp, #0]
 8007e5c:	4643      	mov	r3, r8
 8007e5e:	000a      	movs	r2, r1
 8007e60:	f7ff fe7a 	bl	8007b58 <HAL_SPI_TransmitReceive>
 8007e64:	0006      	movs	r6, r0
 8007e66:	e062      	b.n	8007f2e <HAL_SPI_Receive+0x186>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e68:	6822      	ldr	r2, [r4, #0]
 8007e6a:	6851      	ldr	r1, [r2, #4]
 8007e6c:	2380      	movs	r3, #128	; 0x80
 8007e6e:	015b      	lsls	r3, r3, #5
 8007e70:	430b      	orrs	r3, r1
 8007e72:	6053      	str	r3, [r2, #4]
 8007e74:	e7d8      	b.n	8007e28 <HAL_SPI_Receive+0x80>
    __HAL_SPI_DISABLE(hspi);
 8007e76:	6822      	ldr	r2, [r4, #0]
 8007e78:	6813      	ldr	r3, [r2, #0]
 8007e7a:	2140      	movs	r1, #64	; 0x40
 8007e7c:	438b      	bics	r3, r1
 8007e7e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8007e80:	6822      	ldr	r2, [r4, #0]
 8007e82:	6813      	ldr	r3, [r2, #0]
 8007e84:	4932      	ldr	r1, [pc, #200]	; (8007f50 <HAL_SPI_Receive+0x1a8>)
 8007e86:	400b      	ands	r3, r1
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	e7d2      	b.n	8007e32 <HAL_SPI_Receive+0x8a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e8c:	f7fd ff62 	bl	8005d54 <HAL_GetTick>
 8007e90:	1bc0      	subs	r0, r0, r7
 8007e92:	42a8      	cmp	r0, r5
 8007e94:	d301      	bcc.n	8007e9a <HAL_SPI_Receive+0xf2>
 8007e96:	1c6b      	adds	r3, r5, #1
 8007e98:	d14e      	bne.n	8007f38 <HAL_SPI_Receive+0x190>
 8007e9a:	2d00      	cmp	r5, #0
 8007e9c:	d04e      	beq.n	8007f3c <HAL_SPI_Receive+0x194>
    while (hspi->RxXferCount > 0U)
 8007e9e:	2346      	movs	r3, #70	; 0x46
 8007ea0:	5ae1      	ldrh	r1, [r4, r3]
 8007ea2:	b289      	uxth	r1, r1
 8007ea4:	2900      	cmp	r1, #0
 8007ea6:	d02d      	beq.n	8007f04 <HAL_SPI_Receive+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	07d2      	lsls	r2, r2, #31
 8007eae:	d5ed      	bpl.n	8007e8c <HAL_SPI_Receive+0xe4>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007eb0:	7b1b      	ldrb	r3, [r3, #12]
 8007eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007eb4:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb8:	3301      	adds	r3, #1
 8007eba:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007ebc:	2246      	movs	r2, #70	; 0x46
 8007ebe:	5aa3      	ldrh	r3, [r4, r2]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	52a3      	strh	r3, [r4, r2]
 8007ec6:	e7ea      	b.n	8007e9e <HAL_SPI_Receive+0xf6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ec8:	f7fd ff44 	bl	8005d54 <HAL_GetTick>
 8007ecc:	1bc0      	subs	r0, r0, r7
 8007ece:	42a8      	cmp	r0, r5
 8007ed0:	d301      	bcc.n	8007ed6 <HAL_SPI_Receive+0x12e>
 8007ed2:	1c6b      	adds	r3, r5, #1
 8007ed4:	d134      	bne.n	8007f40 <HAL_SPI_Receive+0x198>
 8007ed6:	2d00      	cmp	r5, #0
 8007ed8:	d034      	beq.n	8007f44 <HAL_SPI_Receive+0x19c>
    while (hspi->RxXferCount > 0U)
 8007eda:	2346      	movs	r3, #70	; 0x46
 8007edc:	5ae1      	ldrh	r1, [r4, r3]
 8007ede:	b289      	uxth	r1, r1
 8007ee0:	2900      	cmp	r1, #0
 8007ee2:	d00f      	beq.n	8007f04 <HAL_SPI_Receive+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	07d2      	lsls	r2, r2, #31
 8007eea:	d5ed      	bpl.n	8007ec8 <HAL_SPI_Receive+0x120>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ef0:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8007ef8:	2246      	movs	r2, #70	; 0x46
 8007efa:	5aa3      	ldrh	r3, [r4, r2]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	52a3      	strh	r3, [r4, r2]
 8007f02:	e7ea      	b.n	8007eda <HAL_SPI_Receive+0x132>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f04:	003a      	movs	r2, r7
 8007f06:	0029      	movs	r1, r5
 8007f08:	0020      	movs	r0, r4
 8007f0a:	f7ff fc81 	bl	8007810 <SPI_EndRxTransaction>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_SPI_Receive+0x16e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f12:	2320      	movs	r3, #32
 8007f14:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <HAL_SPI_Receive+0x17a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	e000      	b.n	8007f22 <HAL_SPI_Receive+0x17a>
    errorcode = HAL_BUSY;
 8007f20:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007f22:	235d      	movs	r3, #93	; 0x5d
 8007f24:	2201      	movs	r2, #1
 8007f26:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	54e2      	strb	r2, [r4, r3]
}
 8007f2e:	0030      	movs	r0, r6
 8007f30:	b004      	add	sp, #16
 8007f32:	bc80      	pop	{r7}
 8007f34:	46b8      	mov	r8, r7
 8007f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
          errorcode = HAL_TIMEOUT;
 8007f38:	2603      	movs	r6, #3
 8007f3a:	e7f2      	b.n	8007f22 <HAL_SPI_Receive+0x17a>
 8007f3c:	2603      	movs	r6, #3
 8007f3e:	e7f0      	b.n	8007f22 <HAL_SPI_Receive+0x17a>
          errorcode = HAL_TIMEOUT;
 8007f40:	2603      	movs	r6, #3
 8007f42:	e7ee      	b.n	8007f22 <HAL_SPI_Receive+0x17a>
 8007f44:	2603      	movs	r6, #3
 8007f46:	e7ec      	b.n	8007f22 <HAL_SPI_Receive+0x17a>
  __HAL_LOCK(hspi);
 8007f48:	2602      	movs	r6, #2
 8007f4a:	e7f0      	b.n	8007f2e <HAL_SPI_Receive+0x186>
 8007f4c:	ffffefff 	.word	0xffffefff
 8007f50:	ffffbfff 	.word	0xffffbfff

08007f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f54:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f56:	6a03      	ldr	r3, [r0, #32]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4393      	bics	r3, r2
 8007f5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f60:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f62:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f64:	4d18      	ldr	r5, [pc, #96]	; (8007fc8 <TIM_OC1_SetConfig+0x74>)
 8007f66:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f68:	680d      	ldr	r5, [r1, #0]
 8007f6a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f6c:	2502      	movs	r5, #2
 8007f6e:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f70:	688d      	ldr	r5, [r1, #8]
 8007f72:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f74:	4d15      	ldr	r5, [pc, #84]	; (8007fcc <TIM_OC1_SetConfig+0x78>)
 8007f76:	42a8      	cmp	r0, r5
 8007f78:	d008      	beq.n	8007f8c <TIM_OC1_SetConfig+0x38>
 8007f7a:	4d15      	ldr	r5, [pc, #84]	; (8007fd0 <TIM_OC1_SetConfig+0x7c>)
 8007f7c:	42a8      	cmp	r0, r5
 8007f7e:	d005      	beq.n	8007f8c <TIM_OC1_SetConfig+0x38>
 8007f80:	4d14      	ldr	r5, [pc, #80]	; (8007fd4 <TIM_OC1_SetConfig+0x80>)
 8007f82:	42a8      	cmp	r0, r5
 8007f84:	d002      	beq.n	8007f8c <TIM_OC1_SetConfig+0x38>
 8007f86:	4d14      	ldr	r5, [pc, #80]	; (8007fd8 <TIM_OC1_SetConfig+0x84>)
 8007f88:	42a8      	cmp	r0, r5
 8007f8a:	d105      	bne.n	8007f98 <TIM_OC1_SetConfig+0x44>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f8c:	2508      	movs	r5, #8
 8007f8e:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f90:	68cd      	ldr	r5, [r1, #12]
 8007f92:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f94:	2504      	movs	r5, #4
 8007f96:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f98:	4d0c      	ldr	r5, [pc, #48]	; (8007fcc <TIM_OC1_SetConfig+0x78>)
 8007f9a:	42a8      	cmp	r0, r5
 8007f9c:	d008      	beq.n	8007fb0 <TIM_OC1_SetConfig+0x5c>
 8007f9e:	4d0c      	ldr	r5, [pc, #48]	; (8007fd0 <TIM_OC1_SetConfig+0x7c>)
 8007fa0:	42a8      	cmp	r0, r5
 8007fa2:	d005      	beq.n	8007fb0 <TIM_OC1_SetConfig+0x5c>
 8007fa4:	4d0b      	ldr	r5, [pc, #44]	; (8007fd4 <TIM_OC1_SetConfig+0x80>)
 8007fa6:	42a8      	cmp	r0, r5
 8007fa8:	d002      	beq.n	8007fb0 <TIM_OC1_SetConfig+0x5c>
 8007faa:	4d0b      	ldr	r5, [pc, #44]	; (8007fd8 <TIM_OC1_SetConfig+0x84>)
 8007fac:	42a8      	cmp	r0, r5
 8007fae:	d105      	bne.n	8007fbc <TIM_OC1_SetConfig+0x68>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fb0:	4d0a      	ldr	r5, [pc, #40]	; (8007fdc <TIM_OC1_SetConfig+0x88>)
 8007fb2:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fb4:	694d      	ldr	r5, [r1, #20]
 8007fb6:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fb8:	698d      	ldr	r5, [r1, #24]
 8007fba:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fbc:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fbe:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fc0:	684a      	ldr	r2, [r1, #4]
 8007fc2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc4:	6203      	str	r3, [r0, #32]
}
 8007fc6:	bd30      	pop	{r4, r5, pc}
 8007fc8:	fffeff8c 	.word	0xfffeff8c
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40014000 	.word	0x40014000
 8007fd4:	40014400 	.word	0x40014400
 8007fd8:	40014800 	.word	0x40014800
 8007fdc:	fffffcff 	.word	0xfffffcff

08007fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fe2:	6a03      	ldr	r3, [r0, #32]
 8007fe4:	4a19      	ldr	r2, [pc, #100]	; (800804c <TIM_OC3_SetConfig+0x6c>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fea:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fee:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ff0:	4d17      	ldr	r5, [pc, #92]	; (8008050 <TIM_OC3_SetConfig+0x70>)
 8007ff2:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff4:	680e      	ldr	r6, [r1, #0]
 8007ff6:	4326      	orrs	r6, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ff8:	4c16      	ldr	r4, [pc, #88]	; (8008054 <TIM_OC3_SetConfig+0x74>)
 8007ffa:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ffc:	688c      	ldr	r4, [r1, #8]
 8007ffe:	0224      	lsls	r4, r4, #8
 8008000:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008002:	4c15      	ldr	r4, [pc, #84]	; (8008058 <TIM_OC3_SetConfig+0x78>)
 8008004:	42a0      	cmp	r0, r4
 8008006:	d019      	beq.n	800803c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008008:	4c13      	ldr	r4, [pc, #76]	; (8008058 <TIM_OC3_SetConfig+0x78>)
 800800a:	42a0      	cmp	r0, r4
 800800c:	d008      	beq.n	8008020 <TIM_OC3_SetConfig+0x40>
 800800e:	4c13      	ldr	r4, [pc, #76]	; (800805c <TIM_OC3_SetConfig+0x7c>)
 8008010:	42a0      	cmp	r0, r4
 8008012:	d005      	beq.n	8008020 <TIM_OC3_SetConfig+0x40>
 8008014:	4c12      	ldr	r4, [pc, #72]	; (8008060 <TIM_OC3_SetConfig+0x80>)
 8008016:	42a0      	cmp	r0, r4
 8008018:	d002      	beq.n	8008020 <TIM_OC3_SetConfig+0x40>
 800801a:	4c12      	ldr	r4, [pc, #72]	; (8008064 <TIM_OC3_SetConfig+0x84>)
 800801c:	42a0      	cmp	r0, r4
 800801e:	d107      	bne.n	8008030 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008020:	4c11      	ldr	r4, [pc, #68]	; (8008068 <TIM_OC3_SetConfig+0x88>)
 8008022:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008024:	694a      	ldr	r2, [r1, #20]
 8008026:	0112      	lsls	r2, r2, #4
 8008028:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800802a:	698c      	ldr	r4, [r1, #24]
 800802c:	0125      	lsls	r5, r4, #4
 800802e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008030:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008032:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008034:	684a      	ldr	r2, [r1, #4]
 8008036:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008038:	6203      	str	r3, [r0, #32]
}
 800803a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 800803c:	4c0b      	ldr	r4, [pc, #44]	; (800806c <TIM_OC3_SetConfig+0x8c>)
 800803e:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008040:	68cb      	ldr	r3, [r1, #12]
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8008046:	4c0a      	ldr	r4, [pc, #40]	; (8008070 <TIM_OC3_SetConfig+0x90>)
 8008048:	4023      	ands	r3, r4
 800804a:	e7dd      	b.n	8008008 <TIM_OC3_SetConfig+0x28>
 800804c:	fffffeff 	.word	0xfffffeff
 8008050:	fffeff8c 	.word	0xfffeff8c
 8008054:	fffffdff 	.word	0xfffffdff
 8008058:	40012c00 	.word	0x40012c00
 800805c:	40014000 	.word	0x40014000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800
 8008068:	ffffcfff 	.word	0xffffcfff
 800806c:	fffff7ff 	.word	0xfffff7ff
 8008070:	fffffbff 	.word	0xfffffbff

08008074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008074:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008076:	6a03      	ldr	r3, [r0, #32]
 8008078:	4a13      	ldr	r2, [pc, #76]	; (80080c8 <TIM_OC4_SetConfig+0x54>)
 800807a:	4013      	ands	r3, r2
 800807c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008080:	6843      	ldr	r3, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008082:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008084:	4d11      	ldr	r5, [pc, #68]	; (80080cc <TIM_OC4_SetConfig+0x58>)
 8008086:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008088:	680d      	ldr	r5, [r1, #0]
 800808a:	022d      	lsls	r5, r5, #8
 800808c:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800808e:	4d10      	ldr	r5, [pc, #64]	; (80080d0 <TIM_OC4_SetConfig+0x5c>)
 8008090:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008092:	688a      	ldr	r2, [r1, #8]
 8008094:	0312      	lsls	r2, r2, #12
 8008096:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008098:	4d0e      	ldr	r5, [pc, #56]	; (80080d4 <TIM_OC4_SetConfig+0x60>)
 800809a:	42a8      	cmp	r0, r5
 800809c:	d008      	beq.n	80080b0 <TIM_OC4_SetConfig+0x3c>
 800809e:	4d0e      	ldr	r5, [pc, #56]	; (80080d8 <TIM_OC4_SetConfig+0x64>)
 80080a0:	42a8      	cmp	r0, r5
 80080a2:	d005      	beq.n	80080b0 <TIM_OC4_SetConfig+0x3c>
 80080a4:	4d0d      	ldr	r5, [pc, #52]	; (80080dc <TIM_OC4_SetConfig+0x68>)
 80080a6:	42a8      	cmp	r0, r5
 80080a8:	d002      	beq.n	80080b0 <TIM_OC4_SetConfig+0x3c>
 80080aa:	4d0d      	ldr	r5, [pc, #52]	; (80080e0 <TIM_OC4_SetConfig+0x6c>)
 80080ac:	42a8      	cmp	r0, r5
 80080ae:	d104      	bne.n	80080ba <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080b0:	4d0c      	ldr	r5, [pc, #48]	; (80080e4 <TIM_OC4_SetConfig+0x70>)
 80080b2:	402b      	ands	r3, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080b4:	694d      	ldr	r5, [r1, #20]
 80080b6:	01ad      	lsls	r5, r5, #6
 80080b8:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ba:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080bc:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080be:	684b      	ldr	r3, [r1, #4]
 80080c0:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c2:	6202      	str	r2, [r0, #32]
}
 80080c4:	bd30      	pop	{r4, r5, pc}
 80080c6:	46c0      	nop			; (mov r8, r8)
 80080c8:	ffffefff 	.word	0xffffefff
 80080cc:	feff8cff 	.word	0xfeff8cff
 80080d0:	ffffdfff 	.word	0xffffdfff
 80080d4:	40012c00 	.word	0x40012c00
 80080d8:	40014000 	.word	0x40014000
 80080dc:	40014400 	.word	0x40014400
 80080e0:	40014800 	.word	0x40014800
 80080e4:	ffffbfff 	.word	0xffffbfff

080080e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080e8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080ea:	6a03      	ldr	r3, [r0, #32]
 80080ec:	4a12      	ldr	r2, [pc, #72]	; (8008138 <TIM_OC5_SetConfig+0x50>)
 80080ee:	4013      	ands	r3, r2
 80080f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f4:	6843      	ldr	r3, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080f6:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080f8:	4d10      	ldr	r5, [pc, #64]	; (800813c <TIM_OC5_SetConfig+0x54>)
 80080fa:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080fc:	680d      	ldr	r5, [r1, #0]
 80080fe:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008100:	4d0f      	ldr	r5, [pc, #60]	; (8008140 <TIM_OC5_SetConfig+0x58>)
 8008102:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008104:	688a      	ldr	r2, [r1, #8]
 8008106:	0412      	lsls	r2, r2, #16
 8008108:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810a:	4d0e      	ldr	r5, [pc, #56]	; (8008144 <TIM_OC5_SetConfig+0x5c>)
 800810c:	42a8      	cmp	r0, r5
 800810e:	d008      	beq.n	8008122 <TIM_OC5_SetConfig+0x3a>
 8008110:	4d0d      	ldr	r5, [pc, #52]	; (8008148 <TIM_OC5_SetConfig+0x60>)
 8008112:	42a8      	cmp	r0, r5
 8008114:	d005      	beq.n	8008122 <TIM_OC5_SetConfig+0x3a>
 8008116:	4d0d      	ldr	r5, [pc, #52]	; (800814c <TIM_OC5_SetConfig+0x64>)
 8008118:	42a8      	cmp	r0, r5
 800811a:	d002      	beq.n	8008122 <TIM_OC5_SetConfig+0x3a>
 800811c:	4d0c      	ldr	r5, [pc, #48]	; (8008150 <TIM_OC5_SetConfig+0x68>)
 800811e:	42a8      	cmp	r0, r5
 8008120:	d104      	bne.n	800812c <TIM_OC5_SetConfig+0x44>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008122:	4d05      	ldr	r5, [pc, #20]	; (8008138 <TIM_OC5_SetConfig+0x50>)
 8008124:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008126:	694d      	ldr	r5, [r1, #20]
 8008128:	022d      	lsls	r5, r5, #8
 800812a:	432b      	orrs	r3, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800812c:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800812e:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008130:	684b      	ldr	r3, [r1, #4]
 8008132:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008134:	6202      	str	r2, [r0, #32]
}
 8008136:	bd30      	pop	{r4, r5, pc}
 8008138:	fffeffff 	.word	0xfffeffff
 800813c:	fffeff8f 	.word	0xfffeff8f
 8008140:	fffdffff 	.word	0xfffdffff
 8008144:	40012c00 	.word	0x40012c00
 8008148:	40014000 	.word	0x40014000
 800814c:	40014400 	.word	0x40014400
 8008150:	40014800 	.word	0x40014800

08008154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008154:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008156:	6a03      	ldr	r3, [r0, #32]
 8008158:	4a13      	ldr	r2, [pc, #76]	; (80081a8 <TIM_OC6_SetConfig+0x54>)
 800815a:	4013      	ands	r3, r2
 800815c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008160:	6843      	ldr	r3, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008162:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008164:	4d11      	ldr	r5, [pc, #68]	; (80081ac <TIM_OC6_SetConfig+0x58>)
 8008166:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008168:	680d      	ldr	r5, [r1, #0]
 800816a:	022d      	lsls	r5, r5, #8
 800816c:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800816e:	4d10      	ldr	r5, [pc, #64]	; (80081b0 <TIM_OC6_SetConfig+0x5c>)
 8008170:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008172:	688a      	ldr	r2, [r1, #8]
 8008174:	0512      	lsls	r2, r2, #20
 8008176:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008178:	4d0e      	ldr	r5, [pc, #56]	; (80081b4 <TIM_OC6_SetConfig+0x60>)
 800817a:	42a8      	cmp	r0, r5
 800817c:	d008      	beq.n	8008190 <TIM_OC6_SetConfig+0x3c>
 800817e:	4d0e      	ldr	r5, [pc, #56]	; (80081b8 <TIM_OC6_SetConfig+0x64>)
 8008180:	42a8      	cmp	r0, r5
 8008182:	d005      	beq.n	8008190 <TIM_OC6_SetConfig+0x3c>
 8008184:	4d0d      	ldr	r5, [pc, #52]	; (80081bc <TIM_OC6_SetConfig+0x68>)
 8008186:	42a8      	cmp	r0, r5
 8008188:	d002      	beq.n	8008190 <TIM_OC6_SetConfig+0x3c>
 800818a:	4d0d      	ldr	r5, [pc, #52]	; (80081c0 <TIM_OC6_SetConfig+0x6c>)
 800818c:	42a8      	cmp	r0, r5
 800818e:	d104      	bne.n	800819a <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008190:	4d0c      	ldr	r5, [pc, #48]	; (80081c4 <TIM_OC6_SetConfig+0x70>)
 8008192:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008194:	694d      	ldr	r5, [r1, #20]
 8008196:	02ad      	lsls	r5, r5, #10
 8008198:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819a:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800819c:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800819e:	684b      	ldr	r3, [r1, #4]
 80081a0:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a2:	6202      	str	r2, [r0, #32]
}
 80081a4:	bd30      	pop	{r4, r5, pc}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	ffefffff 	.word	0xffefffff
 80081ac:	feff8fff 	.word	0xfeff8fff
 80081b0:	ffdfffff 	.word	0xffdfffff
 80081b4:	40012c00 	.word	0x40012c00
 80081b8:	40014000 	.word	0x40014000
 80081bc:	40014400 	.word	0x40014400
 80081c0:	40014800 	.word	0x40014800
 80081c4:	fffbffff 	.word	0xfffbffff

080081c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081ca:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081cc:	6a04      	ldr	r4, [r0, #32]
 80081ce:	2501      	movs	r5, #1
 80081d0:	43ac      	bics	r4, r5
 80081d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081d6:	35ef      	adds	r5, #239	; 0xef
 80081d8:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081da:	0112      	lsls	r2, r2, #4
 80081dc:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081de:	240a      	movs	r4, #10
 80081e0:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 80081e2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081e4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80081e6:	6203      	str	r3, [r0, #32]
}
 80081e8:	bd30      	pop	{r4, r5, pc}
	...

080081ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081ec:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ee:	6a03      	ldr	r3, [r0, #32]
 80081f0:	2410      	movs	r4, #16
 80081f2:	43a3      	bics	r3, r4
 80081f4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081f6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80081f8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081fa:	4d05      	ldr	r5, [pc, #20]	; (8008210 <TIM_TI2_ConfigInputStage+0x24>)
 80081fc:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081fe:	0312      	lsls	r2, r2, #12
 8008200:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008202:	24a0      	movs	r4, #160	; 0xa0
 8008204:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8008206:	0109      	lsls	r1, r1, #4
 8008208:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800820a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800820c:	6201      	str	r1, [r0, #32]
}
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	ffff0fff 	.word	0xffff0fff

08008214 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008214:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008216:	4a03      	ldr	r2, [pc, #12]	; (8008224 <TIM_ITRx_SetConfig+0x10>)
 8008218:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800821a:	430b      	orrs	r3, r1
 800821c:	2107      	movs	r1, #7
 800821e:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008220:	6083      	str	r3, [r0, #8]
}
 8008222:	4770      	bx	lr
 8008224:	ffcfff8f 	.word	0xffcfff8f

08008228 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8008228:	233d      	movs	r3, #61	; 0x3d
 800822a:	5cc3      	ldrb	r3, [r0, r3]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d129      	bne.n	8008284 <HAL_TIM_Base_Start_IT+0x5c>
  htim->State = HAL_TIM_STATE_BUSY;
 8008230:	333c      	adds	r3, #60	; 0x3c
 8008232:	2202      	movs	r2, #2
 8008234:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008236:	6802      	ldr	r2, [r0, #0]
 8008238:	68d3      	ldr	r3, [r2, #12]
 800823a:	2101      	movs	r1, #1
 800823c:	430b      	orrs	r3, r1
 800823e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008240:	6803      	ldr	r3, [r0, #0]
 8008242:	4a13      	ldr	r2, [pc, #76]	; (8008290 <HAL_TIM_Base_Start_IT+0x68>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d00f      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x40>
 8008248:	2280      	movs	r2, #128	; 0x80
 800824a:	05d2      	lsls	r2, r2, #23
 800824c:	4293      	cmp	r3, r2
 800824e:	d00b      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x40>
 8008250:	4a10      	ldr	r2, [pc, #64]	; (8008294 <HAL_TIM_Base_Start_IT+0x6c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d008      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x40>
 8008256:	4a10      	ldr	r2, [pc, #64]	; (8008298 <HAL_TIM_Base_Start_IT+0x70>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d005      	beq.n	8008268 <HAL_TIM_Base_Start_IT+0x40>
    __HAL_TIM_ENABLE(htim);
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	2101      	movs	r1, #1
 8008260:	430a      	orrs	r2, r1
 8008262:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008264:	2000      	movs	r0, #0
 8008266:	e00e      	b.n	8008286 <HAL_TIM_Base_Start_IT+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	490c      	ldr	r1, [pc, #48]	; (800829c <HAL_TIM_Base_Start_IT+0x74>)
 800826c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826e:	2a06      	cmp	r2, #6
 8008270:	d00a      	beq.n	8008288 <HAL_TIM_Base_Start_IT+0x60>
 8008272:	3907      	subs	r1, #7
 8008274:	428a      	cmp	r2, r1
 8008276:	d009      	beq.n	800828c <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	2101      	movs	r1, #1
 800827c:	430a      	orrs	r2, r1
 800827e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008280:	2000      	movs	r0, #0
 8008282:	e000      	b.n	8008286 <HAL_TIM_Base_Start_IT+0x5e>
    return HAL_ERROR;
 8008284:	2001      	movs	r0, #1
}
 8008286:	4770      	bx	lr
  return HAL_OK;
 8008288:	2000      	movs	r0, #0
 800828a:	e7fc      	b.n	8008286 <HAL_TIM_Base_Start_IT+0x5e>
 800828c:	2000      	movs	r0, #0
 800828e:	e7fa      	b.n	8008286 <HAL_TIM_Base_Start_IT+0x5e>
 8008290:	40012c00 	.word	0x40012c00
 8008294:	40000400 	.word	0x40000400
 8008298:	40014000 	.word	0x40014000
 800829c:	00010007 	.word	0x00010007

080082a0 <HAL_TIM_OC_MspInit>:
}
 80082a0:	4770      	bx	lr

080082a2 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80082a2:	4770      	bx	lr

080082a4 <HAL_TIM_IC_CaptureCallback>:
}
 80082a4:	4770      	bx	lr

080082a6 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80082a6:	4770      	bx	lr

080082a8 <HAL_TIM_TriggerCallback>:
}
 80082a8:	4770      	bx	lr
	...

080082ac <HAL_TIM_IRQHandler>:
{
 80082ac:	b510      	push	{r4, lr}
 80082ae:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082b0:	6803      	ldr	r3, [r0, #0]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	0792      	lsls	r2, r2, #30
 80082b6:	d50f      	bpl.n	80082d8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	0792      	lsls	r2, r2, #30
 80082bc:	d50c      	bpl.n	80082d8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082be:	2203      	movs	r2, #3
 80082c0:	4252      	negs	r2, r2
 80082c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082c4:	2301      	movs	r3, #1
 80082c6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082c8:	6803      	ldr	r3, [r0, #0]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	079b      	lsls	r3, r3, #30
 80082ce:	d06a      	beq.n	80083a6 <HAL_TIM_IRQHandler+0xfa>
          HAL_TIM_IC_CaptureCallback(htim);
 80082d0:	f7ff ffe8 	bl	80082a4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d4:	2300      	movs	r3, #0
 80082d6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	0752      	lsls	r2, r2, #29
 80082de:	d512      	bpl.n	8008306 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	0752      	lsls	r2, r2, #29
 80082e4:	d50f      	bpl.n	8008306 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082e6:	2205      	movs	r2, #5
 80082e8:	4252      	negs	r2, r2
 80082ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ec:	2302      	movs	r3, #2
 80082ee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	23c0      	movs	r3, #192	; 0xc0
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	421a      	tst	r2, r3
 80082fa:	d05a      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 80082fc:	0020      	movs	r0, r4
 80082fe:	f7ff ffd1 	bl	80082a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008302:	2300      	movs	r3, #0
 8008304:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008306:	6823      	ldr	r3, [r4, #0]
 8008308:	691a      	ldr	r2, [r3, #16]
 800830a:	0712      	lsls	r2, r2, #28
 800830c:	d510      	bpl.n	8008330 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	0712      	lsls	r2, r2, #28
 8008312:	d50d      	bpl.n	8008330 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008314:	2209      	movs	r2, #9
 8008316:	4252      	negs	r2, r2
 8008318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800831a:	2304      	movs	r3, #4
 800831c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	079b      	lsls	r3, r3, #30
 8008324:	d04c      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x114>
        HAL_TIM_IC_CaptureCallback(htim);
 8008326:	0020      	movs	r0, r4
 8008328:	f7ff ffbc 	bl	80082a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800832c:	2300      	movs	r3, #0
 800832e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	691a      	ldr	r2, [r3, #16]
 8008334:	06d2      	lsls	r2, r2, #27
 8008336:	d512      	bpl.n	800835e <HAL_TIM_IRQHandler+0xb2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	06d2      	lsls	r2, r2, #27
 800833c:	d50f      	bpl.n	800835e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800833e:	2211      	movs	r2, #17
 8008340:	4252      	negs	r2, r2
 8008342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008344:	2308      	movs	r3, #8
 8008346:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	69da      	ldr	r2, [r3, #28]
 800834c:	23c0      	movs	r3, #192	; 0xc0
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	421a      	tst	r2, r3
 8008352:	d03c      	beq.n	80083ce <HAL_TIM_IRQHandler+0x122>
        HAL_TIM_IC_CaptureCallback(htim);
 8008354:	0020      	movs	r0, r4
 8008356:	f7ff ffa5 	bl	80082a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800835a:	2300      	movs	r3, #0
 800835c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	07d2      	lsls	r2, r2, #31
 8008364:	d502      	bpl.n	800836c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	07d2      	lsls	r2, r2, #31
 800836a:	d437      	bmi.n	80083dc <HAL_TIM_IRQHandler+0x130>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	691a      	ldr	r2, [r3, #16]
 8008370:	0612      	lsls	r2, r2, #24
 8008372:	d502      	bpl.n	800837a <HAL_TIM_IRQHandler+0xce>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	0612      	lsls	r2, r2, #24
 8008378:	d437      	bmi.n	80083ea <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	05d2      	lsls	r2, r2, #23
 8008380:	d502      	bpl.n	8008388 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	0612      	lsls	r2, r2, #24
 8008386:	d437      	bmi.n	80083f8 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	0652      	lsls	r2, r2, #25
 800838e:	d502      	bpl.n	8008396 <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	0652      	lsls	r2, r2, #25
 8008394:	d436      	bmi.n	8008404 <HAL_TIM_IRQHandler+0x158>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	0692      	lsls	r2, r2, #26
 800839c:	d502      	bpl.n	80083a4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	0692      	lsls	r2, r2, #26
 80083a2:	d436      	bmi.n	8008412 <HAL_TIM_IRQHandler+0x166>
}
 80083a4:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083a6:	f7ff ff7c 	bl	80082a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083aa:	0020      	movs	r0, r4
 80083ac:	f7ff ff7b 	bl	80082a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80083b0:	e790      	b.n	80082d4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b2:	0020      	movs	r0, r4
 80083b4:	f7ff ff75 	bl	80082a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b8:	0020      	movs	r0, r4
 80083ba:	f7ff ff74 	bl	80082a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80083be:	e7a0      	b.n	8008302 <HAL_TIM_IRQHandler+0x56>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c0:	0020      	movs	r0, r4
 80083c2:	f7ff ff6e 	bl	80082a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083c6:	0020      	movs	r0, r4
 80083c8:	f7ff ff6d 	bl	80082a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80083cc:	e7ae      	b.n	800832c <HAL_TIM_IRQHandler+0x80>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	0020      	movs	r0, r4
 80083d0:	f7ff ff67 	bl	80082a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	0020      	movs	r0, r4
 80083d6:	f7ff ff66 	bl	80082a6 <HAL_TIM_PWM_PulseFinishedCallback>
 80083da:	e7be      	b.n	800835a <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083dc:	2202      	movs	r2, #2
 80083de:	4252      	negs	r2, r2
 80083e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80083e2:	0020      	movs	r0, r4
 80083e4:	f7fc f816 	bl	8004414 <HAL_TIM_PeriodElapsedCallback>
 80083e8:	e7c0      	b.n	800836c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083ea:	2281      	movs	r2, #129	; 0x81
 80083ec:	4252      	negs	r2, r2
 80083ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80083f0:	0020      	movs	r0, r4
 80083f2:	f000 fa7a 	bl	80088ea <HAL_TIMEx_BreakCallback>
 80083f6:	e7c0      	b.n	800837a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083f8:	4a09      	ldr	r2, [pc, #36]	; (8008420 <HAL_TIM_IRQHandler+0x174>)
 80083fa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80083fc:	0020      	movs	r0, r4
 80083fe:	f000 fa75 	bl	80088ec <HAL_TIMEx_Break2Callback>
 8008402:	e7c1      	b.n	8008388 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008404:	2241      	movs	r2, #65	; 0x41
 8008406:	4252      	negs	r2, r2
 8008408:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800840a:	0020      	movs	r0, r4
 800840c:	f7ff ff4c 	bl	80082a8 <HAL_TIM_TriggerCallback>
 8008410:	e7c1      	b.n	8008396 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008412:	2221      	movs	r2, #33	; 0x21
 8008414:	4252      	negs	r2, r2
 8008416:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8008418:	0020      	movs	r0, r4
 800841a:	f000 fa65 	bl	80088e8 <HAL_TIMEx_CommutCallback>
}
 800841e:	e7c1      	b.n	80083a4 <HAL_TIM_IRQHandler+0xf8>
 8008420:	fffffeff 	.word	0xfffffeff

08008424 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8008424:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008426:	4a21      	ldr	r2, [pc, #132]	; (80084ac <TIM_Base_SetConfig+0x88>)
 8008428:	4290      	cmp	r0, r2
 800842a:	d006      	beq.n	800843a <TIM_Base_SetConfig+0x16>
 800842c:	2280      	movs	r2, #128	; 0x80
 800842e:	05d2      	lsls	r2, r2, #23
 8008430:	4290      	cmp	r0, r2
 8008432:	d002      	beq.n	800843a <TIM_Base_SetConfig+0x16>
 8008434:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <TIM_Base_SetConfig+0x8c>)
 8008436:	4290      	cmp	r0, r2
 8008438:	d103      	bne.n	8008442 <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800843a:	2270      	movs	r2, #112	; 0x70
 800843c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800843e:	684a      	ldr	r2, [r1, #4]
 8008440:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008442:	4a1a      	ldr	r2, [pc, #104]	; (80084ac <TIM_Base_SetConfig+0x88>)
 8008444:	4290      	cmp	r0, r2
 8008446:	d012      	beq.n	800846e <TIM_Base_SetConfig+0x4a>
 8008448:	2280      	movs	r2, #128	; 0x80
 800844a:	05d2      	lsls	r2, r2, #23
 800844c:	4290      	cmp	r0, r2
 800844e:	d00e      	beq.n	800846e <TIM_Base_SetConfig+0x4a>
 8008450:	4a17      	ldr	r2, [pc, #92]	; (80084b0 <TIM_Base_SetConfig+0x8c>)
 8008452:	4290      	cmp	r0, r2
 8008454:	d00b      	beq.n	800846e <TIM_Base_SetConfig+0x4a>
 8008456:	4a17      	ldr	r2, [pc, #92]	; (80084b4 <TIM_Base_SetConfig+0x90>)
 8008458:	4290      	cmp	r0, r2
 800845a:	d008      	beq.n	800846e <TIM_Base_SetConfig+0x4a>
 800845c:	4a16      	ldr	r2, [pc, #88]	; (80084b8 <TIM_Base_SetConfig+0x94>)
 800845e:	4290      	cmp	r0, r2
 8008460:	d005      	beq.n	800846e <TIM_Base_SetConfig+0x4a>
 8008462:	4a16      	ldr	r2, [pc, #88]	; (80084bc <TIM_Base_SetConfig+0x98>)
 8008464:	4290      	cmp	r0, r2
 8008466:	d002      	beq.n	800846e <TIM_Base_SetConfig+0x4a>
 8008468:	4a15      	ldr	r2, [pc, #84]	; (80084c0 <TIM_Base_SetConfig+0x9c>)
 800846a:	4290      	cmp	r0, r2
 800846c:	d103      	bne.n	8008476 <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 800846e:	4a15      	ldr	r2, [pc, #84]	; (80084c4 <TIM_Base_SetConfig+0xa0>)
 8008470:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008472:	68ca      	ldr	r2, [r1, #12]
 8008474:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008476:	2280      	movs	r2, #128	; 0x80
 8008478:	4393      	bics	r3, r2
 800847a:	694a      	ldr	r2, [r1, #20]
 800847c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800847e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008480:	688b      	ldr	r3, [r1, #8]
 8008482:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008484:	680b      	ldr	r3, [r1, #0]
 8008486:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008488:	4b08      	ldr	r3, [pc, #32]	; (80084ac <TIM_Base_SetConfig+0x88>)
 800848a:	4298      	cmp	r0, r3
 800848c:	d008      	beq.n	80084a0 <TIM_Base_SetConfig+0x7c>
 800848e:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <TIM_Base_SetConfig+0x94>)
 8008490:	4298      	cmp	r0, r3
 8008492:	d005      	beq.n	80084a0 <TIM_Base_SetConfig+0x7c>
 8008494:	4b09      	ldr	r3, [pc, #36]	; (80084bc <TIM_Base_SetConfig+0x98>)
 8008496:	4298      	cmp	r0, r3
 8008498:	d002      	beq.n	80084a0 <TIM_Base_SetConfig+0x7c>
 800849a:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <TIM_Base_SetConfig+0x9c>)
 800849c:	4298      	cmp	r0, r3
 800849e:	d101      	bne.n	80084a4 <TIM_Base_SetConfig+0x80>
    TIMx->RCR = Structure->RepetitionCounter;
 80084a0:	690b      	ldr	r3, [r1, #16]
 80084a2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80084a4:	2301      	movs	r3, #1
 80084a6:	6143      	str	r3, [r0, #20]
}
 80084a8:	4770      	bx	lr
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	40012c00 	.word	0x40012c00
 80084b0:	40000400 	.word	0x40000400
 80084b4:	40002000 	.word	0x40002000
 80084b8:	40014000 	.word	0x40014000
 80084bc:	40014400 	.word	0x40014400
 80084c0:	40014800 	.word	0x40014800
 80084c4:	fffffcff 	.word	0xfffffcff

080084c8 <HAL_TIM_Base_Init>:
{
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80084cc:	d02a      	beq.n	8008524 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80084ce:	233d      	movs	r3, #61	; 0x3d
 80084d0:	5cc3      	ldrb	r3, [r0, r3]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d020      	beq.n	8008518 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80084d6:	253d      	movs	r5, #61	; 0x3d
 80084d8:	2302      	movs	r3, #2
 80084da:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084dc:	0021      	movs	r1, r4
 80084de:	c901      	ldmia	r1!, {r0}
 80084e0:	f7ff ffa0 	bl	8008424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e4:	2301      	movs	r3, #1
 80084e6:	2248      	movs	r2, #72	; 0x48
 80084e8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ea:	3a0a      	subs	r2, #10
 80084ec:	54a3      	strb	r3, [r4, r2]
 80084ee:	3201      	adds	r2, #1
 80084f0:	54a3      	strb	r3, [r4, r2]
 80084f2:	3201      	adds	r2, #1
 80084f4:	54a3      	strb	r3, [r4, r2]
 80084f6:	3201      	adds	r2, #1
 80084f8:	54a3      	strb	r3, [r4, r2]
 80084fa:	3201      	adds	r2, #1
 80084fc:	54a3      	strb	r3, [r4, r2]
 80084fe:	3201      	adds	r2, #1
 8008500:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008502:	3201      	adds	r2, #1
 8008504:	54a3      	strb	r3, [r4, r2]
 8008506:	3201      	adds	r2, #1
 8008508:	54a3      	strb	r3, [r4, r2]
 800850a:	3201      	adds	r2, #1
 800850c:	54a3      	strb	r3, [r4, r2]
 800850e:	3201      	adds	r2, #1
 8008510:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8008512:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008514:	2000      	movs	r0, #0
}
 8008516:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008518:	333c      	adds	r3, #60	; 0x3c
 800851a:	2200      	movs	r2, #0
 800851c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800851e:	f7fd fa11 	bl	8005944 <HAL_TIM_Base_MspInit>
 8008522:	e7d8      	b.n	80084d6 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8008524:	2001      	movs	r0, #1
 8008526:	e7f6      	b.n	8008516 <HAL_TIM_Base_Init+0x4e>

08008528 <HAL_TIM_OC_Init>:
{
 8008528:	b570      	push	{r4, r5, r6, lr}
 800852a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 800852c:	d02a      	beq.n	8008584 <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800852e:	233d      	movs	r3, #61	; 0x3d
 8008530:	5cc3      	ldrb	r3, [r0, r3]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d020      	beq.n	8008578 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8008536:	253d      	movs	r5, #61	; 0x3d
 8008538:	2302      	movs	r3, #2
 800853a:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800853c:	0021      	movs	r1, r4
 800853e:	c901      	ldmia	r1!, {r0}
 8008540:	f7ff ff70 	bl	8008424 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008544:	2301      	movs	r3, #1
 8008546:	2248      	movs	r2, #72	; 0x48
 8008548:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854a:	3a0a      	subs	r2, #10
 800854c:	54a3      	strb	r3, [r4, r2]
 800854e:	3201      	adds	r2, #1
 8008550:	54a3      	strb	r3, [r4, r2]
 8008552:	3201      	adds	r2, #1
 8008554:	54a3      	strb	r3, [r4, r2]
 8008556:	3201      	adds	r2, #1
 8008558:	54a3      	strb	r3, [r4, r2]
 800855a:	3201      	adds	r2, #1
 800855c:	54a3      	strb	r3, [r4, r2]
 800855e:	3201      	adds	r2, #1
 8008560:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008562:	3201      	adds	r2, #1
 8008564:	54a3      	strb	r3, [r4, r2]
 8008566:	3201      	adds	r2, #1
 8008568:	54a3      	strb	r3, [r4, r2]
 800856a:	3201      	adds	r2, #1
 800856c:	54a3      	strb	r3, [r4, r2]
 800856e:	3201      	adds	r2, #1
 8008570:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8008572:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8008574:	2000      	movs	r0, #0
}
 8008576:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008578:	333c      	adds	r3, #60	; 0x3c
 800857a:	2200      	movs	r2, #0
 800857c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 800857e:	f7ff fe8f 	bl	80082a0 <HAL_TIM_OC_MspInit>
 8008582:	e7d8      	b.n	8008536 <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 8008584:	2001      	movs	r0, #1
 8008586:	e7f6      	b.n	8008576 <HAL_TIM_OC_Init+0x4e>

08008588 <TIM_OC2_SetConfig>:
{
 8008588:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800858a:	6a03      	ldr	r3, [r0, #32]
 800858c:	2210      	movs	r2, #16
 800858e:	4393      	bics	r3, r2
 8008590:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8008592:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008594:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008596:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008598:	4d17      	ldr	r5, [pc, #92]	; (80085f8 <TIM_OC2_SetConfig+0x70>)
 800859a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800859c:	680d      	ldr	r5, [r1, #0]
 800859e:	022d      	lsls	r5, r5, #8
 80085a0:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 80085a2:	2420      	movs	r4, #32
 80085a4:	43a3      	bics	r3, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085a6:	688c      	ldr	r4, [r1, #8]
 80085a8:	0124      	lsls	r4, r4, #4
 80085aa:	4323      	orrs	r3, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085ac:	4c13      	ldr	r4, [pc, #76]	; (80085fc <TIM_OC2_SetConfig+0x74>)
 80085ae:	42a0      	cmp	r0, r4
 80085b0:	d019      	beq.n	80085e6 <TIM_OC2_SetConfig+0x5e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b2:	4c12      	ldr	r4, [pc, #72]	; (80085fc <TIM_OC2_SetConfig+0x74>)
 80085b4:	42a0      	cmp	r0, r4
 80085b6:	d008      	beq.n	80085ca <TIM_OC2_SetConfig+0x42>
 80085b8:	4c11      	ldr	r4, [pc, #68]	; (8008600 <TIM_OC2_SetConfig+0x78>)
 80085ba:	42a0      	cmp	r0, r4
 80085bc:	d005      	beq.n	80085ca <TIM_OC2_SetConfig+0x42>
 80085be:	4c11      	ldr	r4, [pc, #68]	; (8008604 <TIM_OC2_SetConfig+0x7c>)
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d002      	beq.n	80085ca <TIM_OC2_SetConfig+0x42>
 80085c4:	4c10      	ldr	r4, [pc, #64]	; (8008608 <TIM_OC2_SetConfig+0x80>)
 80085c6:	42a0      	cmp	r0, r4
 80085c8:	d107      	bne.n	80085da <TIM_OC2_SetConfig+0x52>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80085ca:	4c10      	ldr	r4, [pc, #64]	; (800860c <TIM_OC2_SetConfig+0x84>)
 80085cc:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80085ce:	694a      	ldr	r2, [r1, #20]
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	4322      	orrs	r2, r4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085d4:	698c      	ldr	r4, [r1, #24]
 80085d6:	00a6      	lsls	r6, r4, #2
 80085d8:	4332      	orrs	r2, r6
  TIMx->CR2 = tmpcr2;
 80085da:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80085dc:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80085de:	684a      	ldr	r2, [r1, #4]
 80085e0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80085e2:	6203      	str	r3, [r0, #32]
}
 80085e4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 80085e6:	2480      	movs	r4, #128	; 0x80
 80085e8:	43a3      	bics	r3, r4
 80085ea:	001c      	movs	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085ec:	68cb      	ldr	r3, [r1, #12]
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 80085f2:	2440      	movs	r4, #64	; 0x40
 80085f4:	43a3      	bics	r3, r4
 80085f6:	e7dc      	b.n	80085b2 <TIM_OC2_SetConfig+0x2a>
 80085f8:	feff8cff 	.word	0xfeff8cff
 80085fc:	40012c00 	.word	0x40012c00
 8008600:	40014000 	.word	0x40014000
 8008604:	40014400 	.word	0x40014400
 8008608:	40014800 	.word	0x40014800
 800860c:	fffff3ff 	.word	0xfffff3ff

08008610 <HAL_TIM_OC_ConfigChannel>:
{
 8008610:	b510      	push	{r4, lr}
 8008612:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8008614:	233c      	movs	r3, #60	; 0x3c
 8008616:	5cc3      	ldrb	r3, [r0, r3]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d02b      	beq.n	8008674 <HAL_TIM_OC_ConfigChannel+0x64>
 800861c:	233c      	movs	r3, #60	; 0x3c
 800861e:	2001      	movs	r0, #1
 8008620:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 8008622:	2a14      	cmp	r2, #20
 8008624:	d821      	bhi.n	800866a <HAL_TIM_OC_ConfigChannel+0x5a>
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	4b13      	ldr	r3, [pc, #76]	; (8008678 <HAL_TIM_OC_ConfigChannel+0x68>)
 800862a:	589b      	ldr	r3, [r3, r2]
 800862c:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	f7ff fc90 	bl	8007f54 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008634:	2000      	movs	r0, #0
      break;
 8008636:	e019      	b.n	800866c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	f7ff ffa5 	bl	8008588 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800863e:	2000      	movs	r0, #0
      break;
 8008640:	e014      	b.n	800866c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008642:	6820      	ldr	r0, [r4, #0]
 8008644:	f7ff fccc 	bl	8007fe0 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008648:	2000      	movs	r0, #0
      break;
 800864a:	e00f      	b.n	800866c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	f7ff fd11 	bl	8008074 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2000      	movs	r0, #0
      break;
 8008654:	e00a      	b.n	800866c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008656:	6820      	ldr	r0, [r4, #0]
 8008658:	f7ff fd46 	bl	80080e8 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800865c:	2000      	movs	r0, #0
      break;
 800865e:	e005      	b.n	800866c <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008660:	6820      	ldr	r0, [r4, #0]
 8008662:	f7ff fd77 	bl	8008154 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008666:	2000      	movs	r0, #0
      break;
 8008668:	e000      	b.n	800866c <HAL_TIM_OC_ConfigChannel+0x5c>
  switch (Channel)
 800866a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800866c:	233c      	movs	r3, #60	; 0x3c
 800866e:	2200      	movs	r2, #0
 8008670:	54e2      	strb	r2, [r4, r3]
}
 8008672:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8008674:	2002      	movs	r0, #2
 8008676:	e7fc      	b.n	8008672 <HAL_TIM_OC_ConfigChannel+0x62>
 8008678:	0800dfcc 	.word	0x0800dfcc

0800867c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800867c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800867e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008680:	4d03      	ldr	r5, [pc, #12]	; (8008690 <TIM_ETR_SetConfig+0x14>)
 8008682:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008684:	021b      	lsls	r3, r3, #8
 8008686:	4313      	orrs	r3, r2
 8008688:	430b      	orrs	r3, r1
 800868a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800868c:	6083      	str	r3, [r0, #8]
}
 800868e:	bd30      	pop	{r4, r5, pc}
 8008690:	ffff00ff 	.word	0xffff00ff

08008694 <HAL_TIM_ConfigClockSource>:
{
 8008694:	b510      	push	{r4, lr}
 8008696:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8008698:	233c      	movs	r3, #60	; 0x3c
 800869a:	5cc3      	ldrb	r3, [r0, r3]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d100      	bne.n	80086a2 <HAL_TIM_ConfigClockSource+0xe>
 80086a0:	e078      	b.n	8008794 <HAL_TIM_ConfigClockSource+0x100>
 80086a2:	233c      	movs	r3, #60	; 0x3c
 80086a4:	2201      	movs	r2, #1
 80086a6:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80086a8:	3301      	adds	r3, #1
 80086aa:	3201      	adds	r2, #1
 80086ac:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80086ae:	6802      	ldr	r2, [r0, #0]
 80086b0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b2:	4839      	ldr	r0, [pc, #228]	; (8008798 <HAL_TIM_ConfigClockSource+0x104>)
 80086b4:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80086b6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80086b8:	680b      	ldr	r3, [r1, #0]
 80086ba:	2b60      	cmp	r3, #96	; 0x60
 80086bc:	d050      	beq.n	8008760 <HAL_TIM_ConfigClockSource+0xcc>
 80086be:	d82a      	bhi.n	8008716 <HAL_TIM_ConfigClockSource+0x82>
 80086c0:	2b40      	cmp	r3, #64	; 0x40
 80086c2:	d058      	beq.n	8008776 <HAL_TIM_ConfigClockSource+0xe2>
 80086c4:	d90c      	bls.n	80086e0 <HAL_TIM_ConfigClockSource+0x4c>
 80086c6:	2b50      	cmp	r3, #80	; 0x50
 80086c8:	d123      	bne.n	8008712 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ca:	68ca      	ldr	r2, [r1, #12]
 80086cc:	6849      	ldr	r1, [r1, #4]
 80086ce:	6820      	ldr	r0, [r4, #0]
 80086d0:	f7ff fd7a 	bl	80081c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086d4:	2150      	movs	r1, #80	; 0x50
 80086d6:	6820      	ldr	r0, [r4, #0]
 80086d8:	f7ff fd9c 	bl	8008214 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80086dc:	2000      	movs	r0, #0
      break;
 80086de:	e005      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d00e      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x6e>
 80086e4:	d909      	bls.n	80086fa <HAL_TIM_ConfigClockSource+0x66>
 80086e6:	2b30      	cmp	r3, #48	; 0x30
 80086e8:	d00b      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80086ea:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80086ec:	233d      	movs	r3, #61	; 0x3d
 80086ee:	2201      	movs	r2, #1
 80086f0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80086f2:	3b01      	subs	r3, #1
 80086f4:	2200      	movs	r2, #0
 80086f6:	54e2      	strb	r2, [r4, r3]
}
 80086f8:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x6e>
 80086fe:	2b10      	cmp	r3, #16
 8008700:	d105      	bne.n	800870e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008702:	0019      	movs	r1, r3
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	f7ff fd85 	bl	8008214 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800870a:	2000      	movs	r0, #0
      break;
 800870c:	e7ee      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 800870e:	2001      	movs	r0, #1
 8008710:	e7ec      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
 8008712:	2001      	movs	r0, #1
 8008714:	e7ea      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8008716:	2280      	movs	r2, #128	; 0x80
 8008718:	0152      	lsls	r2, r2, #5
 800871a:	4293      	cmp	r3, r2
 800871c:	d036      	beq.n	800878c <HAL_TIM_ConfigClockSource+0xf8>
 800871e:	2280      	movs	r2, #128	; 0x80
 8008720:	0192      	lsls	r2, r2, #6
 8008722:	4293      	cmp	r3, r2
 8008724:	d10d      	bne.n	8008742 <HAL_TIM_ConfigClockSource+0xae>
      TIM_ETR_SetConfig(htim->Instance,
 8008726:	68cb      	ldr	r3, [r1, #12]
 8008728:	684a      	ldr	r2, [r1, #4]
 800872a:	6889      	ldr	r1, [r1, #8]
 800872c:	6820      	ldr	r0, [r4, #0]
 800872e:	f7ff ffa5 	bl	800867c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008732:	6822      	ldr	r2, [r4, #0]
 8008734:	6891      	ldr	r1, [r2, #8]
 8008736:	2380      	movs	r3, #128	; 0x80
 8008738:	01db      	lsls	r3, r3, #7
 800873a:	430b      	orrs	r3, r1
 800873c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800873e:	2000      	movs	r0, #0
      break;
 8008740:	e7d4      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 8008742:	2b70      	cmp	r3, #112	; 0x70
 8008744:	d124      	bne.n	8008790 <HAL_TIM_ConfigClockSource+0xfc>
      TIM_ETR_SetConfig(htim->Instance,
 8008746:	68cb      	ldr	r3, [r1, #12]
 8008748:	684a      	ldr	r2, [r1, #4]
 800874a:	6889      	ldr	r1, [r1, #8]
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	f7ff ff95 	bl	800867c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008752:	6822      	ldr	r2, [r4, #0]
 8008754:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008756:	2177      	movs	r1, #119	; 0x77
 8008758:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 800875a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800875c:	2000      	movs	r0, #0
      break;
 800875e:	e7c5      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008760:	68ca      	ldr	r2, [r1, #12]
 8008762:	6849      	ldr	r1, [r1, #4]
 8008764:	6820      	ldr	r0, [r4, #0]
 8008766:	f7ff fd41 	bl	80081ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800876a:	2160      	movs	r1, #96	; 0x60
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	f7ff fd51 	bl	8008214 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008772:	2000      	movs	r0, #0
      break;
 8008774:	e7ba      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008776:	68ca      	ldr	r2, [r1, #12]
 8008778:	6849      	ldr	r1, [r1, #4]
 800877a:	6820      	ldr	r0, [r4, #0]
 800877c:	f7ff fd24 	bl	80081c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008780:	2140      	movs	r1, #64	; 0x40
 8008782:	6820      	ldr	r0, [r4, #0]
 8008784:	f7ff fd46 	bl	8008214 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8008788:	2000      	movs	r0, #0
      break;
 800878a:	e7af      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
  switch (sClockSourceConfig->ClockSource)
 800878c:	2000      	movs	r0, #0
 800878e:	e7ad      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
      status = HAL_ERROR;
 8008790:	2001      	movs	r0, #1
 8008792:	e7ab      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x58>
  __HAL_LOCK(htim);
 8008794:	2002      	movs	r0, #2
 8008796:	e7af      	b.n	80086f8 <HAL_TIM_ConfigClockSource+0x64>
 8008798:	ffce0088 	.word	0xffce0088

0800879c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800879c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800879e:	233c      	movs	r3, #60	; 0x3c
 80087a0:	5cc3      	ldrb	r3, [r0, r3]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d030      	beq.n	8008808 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80087a6:	233c      	movs	r3, #60	; 0x3c
 80087a8:	2201      	movs	r2, #1
 80087aa:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ac:	3301      	adds	r3, #1
 80087ae:	3201      	adds	r2, #1
 80087b0:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087b2:	6802      	ldr	r2, [r0, #0]
 80087b4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087b6:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087b8:	4d14      	ldr	r5, [pc, #80]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80087ba:	42aa      	cmp	r2, r5
 80087bc:	d01f      	beq.n	80087fe <HAL_TIMEx_MasterConfigSynchronization+0x62>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087be:	2570      	movs	r5, #112	; 0x70
 80087c0:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087c2:	680d      	ldr	r5, [r1, #0]
 80087c4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087c6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c8:	6803      	ldr	r3, [r0, #0]
 80087ca:	4a10      	ldr	r2, [pc, #64]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d009      	beq.n	80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80087d0:	2280      	movs	r2, #128	; 0x80
 80087d2:	05d2      	lsls	r2, r2, #23
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d005      	beq.n	80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80087d8:	4a0d      	ldr	r2, [pc, #52]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d002      	beq.n	80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80087de:	4a0d      	ldr	r2, [pc, #52]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d104      	bne.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087e4:	2280      	movs	r2, #128	; 0x80
 80087e6:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087e8:	688a      	ldr	r2, [r1, #8]
 80087ea:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087ec:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ee:	233d      	movs	r3, #61	; 0x3d
 80087f0:	2201      	movs	r2, #1
 80087f2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80087f4:	3b01      	subs	r3, #1
 80087f6:	2200      	movs	r2, #0
 80087f8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80087fa:	2000      	movs	r0, #0
}
 80087fc:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087fe:	4d06      	ldr	r5, [pc, #24]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 8008800:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008802:	684d      	ldr	r5, [r1, #4]
 8008804:	432b      	orrs	r3, r5
 8008806:	e7da      	b.n	80087be <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8008808:	2002      	movs	r0, #2
 800880a:	e7f7      	b.n	80087fc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800880c:	40012c00 	.word	0x40012c00
 8008810:	40000400 	.word	0x40000400
 8008814:	40014000 	.word	0x40014000
 8008818:	ff0fffff 	.word	0xff0fffff

0800881c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800881c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800881e:	233c      	movs	r3, #60	; 0x3c
 8008820:	5cc3      	ldrb	r3, [r0, r3]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d044      	beq.n	80088b0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008826:	233c      	movs	r3, #60	; 0x3c
 8008828:	2201      	movs	r2, #1
 800882a:	54c2      	strb	r2, [r0, r3]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800882c:	4b21      	ldr	r3, [pc, #132]	; (80088b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800882e:	68ca      	ldr	r2, [r1, #12]
 8008830:	4013      	ands	r3, r2
 8008832:	688a      	ldr	r2, [r1, #8]
 8008834:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008836:	4a20      	ldr	r2, [pc, #128]	; (80088b8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8008838:	4013      	ands	r3, r2
 800883a:	684a      	ldr	r2, [r1, #4]
 800883c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800883e:	4a1f      	ldr	r2, [pc, #124]	; (80088bc <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8008840:	4013      	ands	r3, r2
 8008842:	680a      	ldr	r2, [r1, #0]
 8008844:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008846:	4a1e      	ldr	r2, [pc, #120]	; (80088c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8008848:	4013      	ands	r3, r2
 800884a:	690a      	ldr	r2, [r1, #16]
 800884c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800884e:	4a1d      	ldr	r2, [pc, #116]	; (80088c4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008850:	4013      	ands	r3, r2
 8008852:	694a      	ldr	r2, [r1, #20]
 8008854:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008856:	4a1c      	ldr	r2, [pc, #112]	; (80088c8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8008858:	4013      	ands	r3, r2
 800885a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800885c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800885e:	4a1b      	ldr	r2, [pc, #108]	; (80088cc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8008860:	4013      	ands	r3, r2
 8008862:	698a      	ldr	r2, [r1, #24]
 8008864:	0412      	lsls	r2, r2, #16
 8008866:	4313      	orrs	r3, r2

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008868:	6802      	ldr	r2, [r0, #0]
 800886a:	4c19      	ldr	r4, [pc, #100]	; (80088d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800886c:	42a2      	cmp	r2, r4
 800886e:	d008      	beq.n	8008882 <HAL_TIMEx_ConfigBreakDeadTime+0x66>

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008870:	4c17      	ldr	r4, [pc, #92]	; (80088d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8008872:	42a2      	cmp	r2, r4
 8008874:	d00a      	beq.n	800888c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008876:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008878:	233c      	movs	r3, #60	; 0x3c
 800887a:	2200      	movs	r2, #0
 800887c:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 800887e:	2000      	movs	r0, #0
}
 8008880:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008882:	4c14      	ldr	r4, [pc, #80]	; (80088d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8008884:	4023      	ands	r3, r4
 8008886:	69cc      	ldr	r4, [r1, #28]
 8008888:	4323      	orrs	r3, r4
 800888a:	e7f1      	b.n	8008870 <HAL_TIMEx_ConfigBreakDeadTime+0x54>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800888c:	4c12      	ldr	r4, [pc, #72]	; (80088d8 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 800888e:	4023      	ands	r3, r4
 8008890:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8008892:	0524      	lsls	r4, r4, #20
 8008894:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008896:	4c11      	ldr	r4, [pc, #68]	; (80088dc <HAL_TIMEx_ConfigBreakDeadTime+0xc0>)
 8008898:	4023      	ands	r3, r4
 800889a:	6a0c      	ldr	r4, [r1, #32]
 800889c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800889e:	4c10      	ldr	r4, [pc, #64]	; (80088e0 <HAL_TIMEx_ConfigBreakDeadTime+0xc4>)
 80088a0:	4023      	ands	r3, r4
 80088a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80088a4:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80088a6:	4c0f      	ldr	r4, [pc, #60]	; (80088e4 <HAL_TIMEx_ConfigBreakDeadTime+0xc8>)
 80088a8:	4023      	ands	r3, r4
 80088aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80088ac:	430b      	orrs	r3, r1
 80088ae:	e7e2      	b.n	8008876 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  __HAL_LOCK(htim);
 80088b0:	2002      	movs	r0, #2
 80088b2:	e7e5      	b.n	8008880 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80088b4:	fffffcff 	.word	0xfffffcff
 80088b8:	fffffbff 	.word	0xfffffbff
 80088bc:	fffff7ff 	.word	0xfffff7ff
 80088c0:	ffffefff 	.word	0xffffefff
 80088c4:	ffffdfff 	.word	0xffffdfff
 80088c8:	ffffbfff 	.word	0xffffbfff
 80088cc:	fff0ffff 	.word	0xfff0ffff
 80088d0:	40012c00 	.word	0x40012c00
 80088d4:	efffffff 	.word	0xefffffff
 80088d8:	ff0fffff 	.word	0xff0fffff
 80088dc:	feffffff 	.word	0xfeffffff
 80088e0:	fdffffff 	.word	0xfdffffff
 80088e4:	dfffffff 	.word	0xdfffffff

080088e8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088e8:	4770      	bx	lr

080088ea <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088ea:	4770      	bx	lr

080088ec <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088ec:	4770      	bx	lr
	...

080088f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	0004      	movs	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80088f4:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088f6:	6883      	ldr	r3, [r0, #8]
 80088f8:	6902      	ldr	r2, [r0, #16]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	6942      	ldr	r2, [r0, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	69c2      	ldr	r2, [r0, #28]
 8008902:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008904:	680a      	ldr	r2, [r1, #0]
 8008906:	48aa      	ldr	r0, [pc, #680]	; (8008bb0 <UART_SetConfig+0x2c0>)
 8008908:	4002      	ands	r2, r0
 800890a:	4313      	orrs	r3, r2
 800890c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800890e:	6822      	ldr	r2, [r4, #0]
 8008910:	6853      	ldr	r3, [r2, #4]
 8008912:	49a8      	ldr	r1, [pc, #672]	; (8008bb4 <UART_SetConfig+0x2c4>)
 8008914:	400b      	ands	r3, r1
 8008916:	68e1      	ldr	r1, [r4, #12]
 8008918:	430b      	orrs	r3, r1
 800891a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800891c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800891e:	6822      	ldr	r2, [r4, #0]
 8008920:	4ba5      	ldr	r3, [pc, #660]	; (8008bb8 <UART_SetConfig+0x2c8>)
 8008922:	429a      	cmp	r2, r3
 8008924:	d001      	beq.n	800892a <UART_SetConfig+0x3a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008926:	6a23      	ldr	r3, [r4, #32]
 8008928:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800892a:	6893      	ldr	r3, [r2, #8]
 800892c:	48a3      	ldr	r0, [pc, #652]	; (8008bbc <UART_SetConfig+0x2cc>)
 800892e:	4003      	ands	r3, r0
 8008930:	430b      	orrs	r3, r1
 8008932:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008934:	6822      	ldr	r2, [r4, #0]
 8008936:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008938:	210f      	movs	r1, #15
 800893a:	438b      	bics	r3, r1
 800893c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800893e:	430b      	orrs	r3, r1
 8008940:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008942:	6822      	ldr	r2, [r4, #0]
 8008944:	4b9e      	ldr	r3, [pc, #632]	; (8008bc0 <UART_SetConfig+0x2d0>)
 8008946:	429a      	cmp	r2, r3
 8008948:	d00e      	beq.n	8008968 <UART_SetConfig+0x78>
 800894a:	4b9e      	ldr	r3, [pc, #632]	; (8008bc4 <UART_SetConfig+0x2d4>)
 800894c:	429a      	cmp	r2, r3
 800894e:	d048      	beq.n	80089e2 <UART_SetConfig+0xf2>
 8008950:	4b9d      	ldr	r3, [pc, #628]	; (8008bc8 <UART_SetConfig+0x2d8>)
 8008952:	429a      	cmp	r2, r3
 8008954:	d100      	bne.n	8008958 <UART_SetConfig+0x68>
 8008956:	e07b      	b.n	8008a50 <UART_SetConfig+0x160>
 8008958:	4b9c      	ldr	r3, [pc, #624]	; (8008bcc <UART_SetConfig+0x2dc>)
 800895a:	429a      	cmp	r2, r3
 800895c:	d07a      	beq.n	8008a54 <UART_SetConfig+0x164>
 800895e:	4b96      	ldr	r3, [pc, #600]	; (8008bb8 <UART_SetConfig+0x2c8>)
 8008960:	429a      	cmp	r2, r3
 8008962:	d04f      	beq.n	8008a04 <UART_SetConfig+0x114>
 8008964:	2310      	movs	r3, #16
 8008966:	e00b      	b.n	8008980 <UART_SetConfig+0x90>
 8008968:	4b99      	ldr	r3, [pc, #612]	; (8008bd0 <UART_SetConfig+0x2e0>)
 800896a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800896c:	2303      	movs	r3, #3
 800896e:	400b      	ands	r3, r1
 8008970:	2b02      	cmp	r3, #2
 8008972:	d05f      	beq.n	8008a34 <UART_SetConfig+0x144>
 8008974:	d831      	bhi.n	80089da <UART_SetConfig+0xea>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d05e      	beq.n	8008a38 <UART_SetConfig+0x148>
 800897a:	2b01      	cmp	r3, #1
 800897c:	d15e      	bne.n	8008a3c <UART_SetConfig+0x14c>
 800897e:	3303      	adds	r3, #3

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008980:	498d      	ldr	r1, [pc, #564]	; (8008bb8 <UART_SetConfig+0x2c8>)
 8008982:	428a      	cmp	r2, r1
 8008984:	d070      	beq.n	8008a68 <UART_SetConfig+0x178>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008986:	69e0      	ldr	r0, [r4, #28]
 8008988:	2280      	movs	r2, #128	; 0x80
 800898a:	0212      	lsls	r2, r2, #8
 800898c:	4290      	cmp	r0, r2
 800898e:	d100      	bne.n	8008992 <UART_SetConfig+0xa2>
 8008990:	e0b4      	b.n	8008afc <UART_SetConfig+0x20c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008992:	2b04      	cmp	r3, #4
 8008994:	d100      	bne.n	8008998 <UART_SetConfig+0xa8>
 8008996:	e0fd      	b.n	8008b94 <UART_SetConfig+0x2a4>
 8008998:	d900      	bls.n	800899c <UART_SetConfig+0xac>
 800899a:	e0e5      	b.n	8008b68 <UART_SetConfig+0x278>
 800899c:	2b00      	cmp	r3, #0
 800899e:	d100      	bne.n	80089a2 <UART_SetConfig+0xb2>
 80089a0:	e0f1      	b.n	8008b86 <UART_SetConfig+0x296>
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d000      	beq.n	80089a8 <UART_SetConfig+0xb8>
 80089a6:	e0dd      	b.n	8008b64 <UART_SetConfig+0x274>
 80089a8:	488a      	ldr	r0, [pc, #552]	; (8008bd4 <UART_SetConfig+0x2e4>)
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089ac:	005b      	lsls	r3, r3, #1
 80089ae:	4a8a      	ldr	r2, [pc, #552]	; (8008bd8 <UART_SetConfig+0x2e8>)
 80089b0:	5a99      	ldrh	r1, [r3, r2]
 80089b2:	f7f7 fbcd 	bl	8000150 <__udivsi3>
 80089b6:	6863      	ldr	r3, [r4, #4]
 80089b8:	085b      	lsrs	r3, r3, #1
 80089ba:	18c0      	adds	r0, r0, r3
 80089bc:	6861      	ldr	r1, [r4, #4]
 80089be:	f7f7 fbc7 	bl	8000150 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c2:	0002      	movs	r2, r0
 80089c4:	3a10      	subs	r2, #16
 80089c6:	4b85      	ldr	r3, [pc, #532]	; (8008bdc <UART_SetConfig+0x2ec>)
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d900      	bls.n	80089ce <UART_SetConfig+0xde>
 80089cc:	e0ed      	b.n	8008baa <UART_SetConfig+0x2ba>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	0400      	lsls	r0, r0, #16
 80089d2:	0c00      	lsrs	r0, r0, #16
 80089d4:	60d8      	str	r0, [r3, #12]
 80089d6:	2000      	movs	r0, #0
 80089d8:	e0cc      	b.n	8008b74 <UART_SetConfig+0x284>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089da:	2b03      	cmp	r3, #3
 80089dc:	d130      	bne.n	8008a40 <UART_SetConfig+0x150>
 80089de:	3305      	adds	r3, #5
 80089e0:	e7ce      	b.n	8008980 <UART_SetConfig+0x90>
 80089e2:	4b7b      	ldr	r3, [pc, #492]	; (8008bd0 <UART_SetConfig+0x2e0>)
 80089e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089e6:	230c      	movs	r3, #12
 80089e8:	400b      	ands	r3, r1
 80089ea:	2b08      	cmp	r3, #8
 80089ec:	d02a      	beq.n	8008a44 <UART_SetConfig+0x154>
 80089ee:	d805      	bhi.n	80089fc <UART_SetConfig+0x10c>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d029      	beq.n	8008a48 <UART_SetConfig+0x158>
 80089f4:	2b04      	cmp	r3, #4
 80089f6:	d0c3      	beq.n	8008980 <UART_SetConfig+0x90>
 80089f8:	2310      	movs	r3, #16
 80089fa:	e7c1      	b.n	8008980 <UART_SetConfig+0x90>
 80089fc:	2b0c      	cmp	r3, #12
 80089fe:	d125      	bne.n	8008a4c <UART_SetConfig+0x15c>
 8008a00:	3b04      	subs	r3, #4
 8008a02:	e7bd      	b.n	8008980 <UART_SetConfig+0x90>
 8008a04:	4b72      	ldr	r3, [pc, #456]	; (8008bd0 <UART_SetConfig+0x2e0>)
 8008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a08:	21c0      	movs	r1, #192	; 0xc0
 8008a0a:	0109      	lsls	r1, r1, #4
 8008a0c:	400b      	ands	r3, r1
 8008a0e:	2180      	movs	r1, #128	; 0x80
 8008a10:	0109      	lsls	r1, r1, #4
 8008a12:	428b      	cmp	r3, r1
 8008a14:	d020      	beq.n	8008a58 <UART_SetConfig+0x168>
 8008a16:	d807      	bhi.n	8008a28 <UART_SetConfig+0x138>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01f      	beq.n	8008a5c <UART_SetConfig+0x16c>
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	00c9      	lsls	r1, r1, #3
 8008a20:	428b      	cmp	r3, r1
 8008a22:	d11d      	bne.n	8008a60 <UART_SetConfig+0x170>
 8008a24:	2304      	movs	r3, #4
 8008a26:	e7ab      	b.n	8008980 <UART_SetConfig+0x90>
 8008a28:	21c0      	movs	r1, #192	; 0xc0
 8008a2a:	0109      	lsls	r1, r1, #4
 8008a2c:	428b      	cmp	r3, r1
 8008a2e:	d119      	bne.n	8008a64 <UART_SetConfig+0x174>
 8008a30:	2308      	movs	r3, #8
 8008a32:	e7a5      	b.n	8008980 <UART_SetConfig+0x90>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e7a3      	b.n	8008980 <UART_SetConfig+0x90>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e7a1      	b.n	8008980 <UART_SetConfig+0x90>
 8008a3c:	2310      	movs	r3, #16
 8008a3e:	e79f      	b.n	8008980 <UART_SetConfig+0x90>
 8008a40:	2310      	movs	r3, #16
 8008a42:	e79d      	b.n	8008980 <UART_SetConfig+0x90>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e79b      	b.n	8008980 <UART_SetConfig+0x90>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e799      	b.n	8008980 <UART_SetConfig+0x90>
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	e797      	b.n	8008980 <UART_SetConfig+0x90>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e795      	b.n	8008980 <UART_SetConfig+0x90>
 8008a54:	2300      	movs	r3, #0
 8008a56:	e793      	b.n	8008980 <UART_SetConfig+0x90>
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e791      	b.n	8008980 <UART_SetConfig+0x90>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e78f      	b.n	8008980 <UART_SetConfig+0x90>
 8008a60:	2310      	movs	r3, #16
 8008a62:	e78d      	b.n	8008980 <UART_SetConfig+0x90>
 8008a64:	2310      	movs	r3, #16
 8008a66:	e78b      	b.n	8008980 <UART_SetConfig+0x90>
    switch (clocksource)
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d043      	beq.n	8008af4 <UART_SetConfig+0x204>
 8008a6c:	d834      	bhi.n	8008ad8 <UART_SetConfig+0x1e8>
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d039      	beq.n	8008ae6 <UART_SetConfig+0x1f6>
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d12e      	bne.n	8008ad4 <UART_SetConfig+0x1e4>
        pclk = (uint32_t) HSI_VALUE;
 8008a76:	4d57      	ldr	r5, [pc, #348]	; (8008bd4 <UART_SetConfig+0x2e4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4a56      	ldr	r2, [pc, #344]	; (8008bd8 <UART_SetConfig+0x2e8>)
 8008a7e:	5a9f      	ldrh	r7, [r3, r2]
 8008a80:	0039      	movs	r1, r7
 8008a82:	0028      	movs	r0, r5
 8008a84:	f7f7 fb64 	bl	8000150 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a88:	6866      	ldr	r6, [r4, #4]
 8008a8a:	0073      	lsls	r3, r6, #1
 8008a8c:	199b      	adds	r3, r3, r6
 8008a8e:	4283      	cmp	r3, r0
 8008a90:	d900      	bls.n	8008a94 <UART_SetConfig+0x1a4>
 8008a92:	e082      	b.n	8008b9a <UART_SetConfig+0x2aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008a94:	0333      	lsls	r3, r6, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a96:	4283      	cmp	r3, r0
 8008a98:	d200      	bcs.n	8008a9c <UART_SetConfig+0x1ac>
 8008a9a:	e080      	b.n	8008b9e <UART_SetConfig+0x2ae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a9c:	003a      	movs	r2, r7
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	0028      	movs	r0, r5
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	f7f7 fd2c 	bl	8000500 <__aeabi_uldivmod>
 8008aa8:	0e05      	lsrs	r5, r0, #24
 8008aaa:	020b      	lsls	r3, r1, #8
 8008aac:	432b      	orrs	r3, r5
 8008aae:	0202      	lsls	r2, r0, #8
 8008ab0:	0870      	lsrs	r0, r6, #1
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	1880      	adds	r0, r0, r2
 8008ab6:	4159      	adcs	r1, r3
 8008ab8:	0032      	movs	r2, r6
 8008aba:	2300      	movs	r3, #0
 8008abc:	f7f7 fd20 	bl	8000500 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ac0:	4b47      	ldr	r3, [pc, #284]	; (8008be0 <UART_SetConfig+0x2f0>)
 8008ac2:	18c2      	adds	r2, r0, r3
 8008ac4:	4b47      	ldr	r3, [pc, #284]	; (8008be4 <UART_SetConfig+0x2f4>)
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d900      	bls.n	8008acc <UART_SetConfig+0x1dc>
 8008aca:	e06a      	b.n	8008ba2 <UART_SetConfig+0x2b2>
          huart->Instance->BRR = usartdiv;
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	60d8      	str	r0, [r3, #12]
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	e04f      	b.n	8008b74 <UART_SetConfig+0x284>
    switch (clocksource)
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	e04d      	b.n	8008b74 <UART_SetConfig+0x284>
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d102      	bne.n	8008ae2 <UART_SetConfig+0x1f2>
 8008adc:	2580      	movs	r5, #128	; 0x80
 8008ade:	022d      	lsls	r5, r5, #8
 8008ae0:	e7ca      	b.n	8008a78 <UART_SetConfig+0x188>
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	e046      	b.n	8008b74 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ae6:	f7fe fc29 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8008aea:	0005      	movs	r5, r0
    if (pclk != 0U)
 8008aec:	2d00      	cmp	r5, #0
 8008aee:	d1c3      	bne.n	8008a78 <UART_SetConfig+0x188>
 8008af0:	2000      	movs	r0, #0
 8008af2:	e03f      	b.n	8008b74 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetSysClockFreq();
 8008af4:	f7fe fafa 	bl	80070ec <HAL_RCC_GetSysClockFreq>
 8008af8:	0005      	movs	r5, r0
        break;
 8008afa:	e7f7      	b.n	8008aec <UART_SetConfig+0x1fc>
    switch (clocksource)
 8008afc:	2b04      	cmp	r3, #4
 8008afe:	d02e      	beq.n	8008b5e <UART_SetConfig+0x26e>
 8008b00:	d823      	bhi.n	8008b4a <UART_SetConfig+0x25a>
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d025      	beq.n	8008b52 <UART_SetConfig+0x262>
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d11d      	bne.n	8008b46 <UART_SetConfig+0x256>
 8008b0a:	4832      	ldr	r0, [pc, #200]	; (8008bd4 <UART_SetConfig+0x2e4>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	4a31      	ldr	r2, [pc, #196]	; (8008bd8 <UART_SetConfig+0x2e8>)
 8008b12:	5a99      	ldrh	r1, [r3, r2]
 8008b14:	f7f7 fb1c 	bl	8000150 <__udivsi3>
 8008b18:	0040      	lsls	r0, r0, #1
 8008b1a:	6863      	ldr	r3, [r4, #4]
 8008b1c:	085b      	lsrs	r3, r3, #1
 8008b1e:	18c0      	adds	r0, r0, r3
 8008b20:	6861      	ldr	r1, [r4, #4]
 8008b22:	f7f7 fb15 	bl	8000150 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b26:	0002      	movs	r2, r0
 8008b28:	3a10      	subs	r2, #16
 8008b2a:	4b2c      	ldr	r3, [pc, #176]	; (8008bdc <UART_SetConfig+0x2ec>)
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d83a      	bhi.n	8008ba6 <UART_SetConfig+0x2b6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b30:	b282      	uxth	r2, r0
 8008b32:	230f      	movs	r3, #15
 8008b34:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b36:	0840      	lsrs	r0, r0, #1
 8008b38:	3b08      	subs	r3, #8
 8008b3a:	4018      	ands	r0, r3
 8008b3c:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	60d8      	str	r0, [r3, #12]
 8008b42:	2000      	movs	r0, #0
 8008b44:	e016      	b.n	8008b74 <UART_SetConfig+0x284>
    switch (clocksource)
 8008b46:	2001      	movs	r0, #1
 8008b48:	e014      	b.n	8008b74 <UART_SetConfig+0x284>
 8008b4a:	2b08      	cmp	r3, #8
 8008b4c:	d0de      	beq.n	8008b0c <UART_SetConfig+0x21c>
 8008b4e:	2001      	movs	r0, #1
 8008b50:	e010      	b.n	8008b74 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b52:	f7fe fbf3 	bl	800733c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008b56:	2800      	cmp	r0, #0
 8008b58:	d1d8      	bne.n	8008b0c <UART_SetConfig+0x21c>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e00a      	b.n	8008b74 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetSysClockFreq();
 8008b5e:	f7fe fac5 	bl	80070ec <HAL_RCC_GetSysClockFreq>
        break;
 8008b62:	e7f8      	b.n	8008b56 <UART_SetConfig+0x266>
    switch (clocksource)
 8008b64:	2001      	movs	r0, #1
 8008b66:	e005      	b.n	8008b74 <UART_SetConfig+0x284>
 8008b68:	2b08      	cmp	r3, #8
 8008b6a:	d102      	bne.n	8008b72 <UART_SetConfig+0x282>
        pclk = (uint32_t) LSE_VALUE;
 8008b6c:	2080      	movs	r0, #128	; 0x80
 8008b6e:	0200      	lsls	r0, r0, #8
 8008b70:	e71b      	b.n	80089aa <UART_SetConfig+0xba>
    switch (clocksource)
 8008b72:	2001      	movs	r0, #1
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b74:	2301      	movs	r3, #1
 8008b76:	226a      	movs	r2, #106	; 0x6a
 8008b78:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8008b7a:	3a02      	subs	r2, #2
 8008b7c:	52a3      	strh	r3, [r4, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8008b82:	67a3      	str	r3, [r4, #120]	; 0x78

  return ret;
}
 8008b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b86:	f7fe fbd9 	bl	800733c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d000      	beq.n	8008b90 <UART_SetConfig+0x2a0>
 8008b8e:	e70c      	b.n	80089aa <UART_SetConfig+0xba>
 8008b90:	2000      	movs	r0, #0
 8008b92:	e7ef      	b.n	8008b74 <UART_SetConfig+0x284>
        pclk = HAL_RCC_GetSysClockFreq();
 8008b94:	f7fe faaa 	bl	80070ec <HAL_RCC_GetSysClockFreq>
        break;
 8008b98:	e7f7      	b.n	8008b8a <UART_SetConfig+0x29a>
        ret = HAL_ERROR;
 8008b9a:	2001      	movs	r0, #1
 8008b9c:	e7ea      	b.n	8008b74 <UART_SetConfig+0x284>
 8008b9e:	2001      	movs	r0, #1
 8008ba0:	e7e8      	b.n	8008b74 <UART_SetConfig+0x284>
          ret = HAL_ERROR;
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	e7e6      	b.n	8008b74 <UART_SetConfig+0x284>
        ret = HAL_ERROR;
 8008ba6:	2001      	movs	r0, #1
 8008ba8:	e7e4      	b.n	8008b74 <UART_SetConfig+0x284>
        ret = HAL_ERROR;
 8008baa:	2001      	movs	r0, #1
 8008bac:	e7e2      	b.n	8008b74 <UART_SetConfig+0x284>
 8008bae:	46c0      	nop			; (mov r8, r8)
 8008bb0:	cfff69f3 	.word	0xcfff69f3
 8008bb4:	ffffcfff 	.word	0xffffcfff
 8008bb8:	40008000 	.word	0x40008000
 8008bbc:	11fff4ff 	.word	0x11fff4ff
 8008bc0:	40013800 	.word	0x40013800
 8008bc4:	40004400 	.word	0x40004400
 8008bc8:	40004800 	.word	0x40004800
 8008bcc:	40004c00 	.word	0x40004c00
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	00f42400 	.word	0x00f42400
 8008bd8:	0800e020 	.word	0x0800e020
 8008bdc:	0000ffef 	.word	0x0000ffef
 8008be0:	fffffd00 	.word	0xfffffd00
 8008be4:	000ffcff 	.word	0x000ffcff

08008be8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008be8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008bea:	07db      	lsls	r3, r3, #31
 8008bec:	d506      	bpl.n	8008bfc <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bee:	6802      	ldr	r2, [r0, #0]
 8008bf0:	6853      	ldr	r3, [r2, #4]
 8008bf2:	492c      	ldr	r1, [pc, #176]	; (8008ca4 <UART_AdvFeatureConfig+0xbc>)
 8008bf4:	400b      	ands	r3, r1
 8008bf6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008bf8:	430b      	orrs	r3, r1
 8008bfa:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008bfe:	079b      	lsls	r3, r3, #30
 8008c00:	d506      	bpl.n	8008c10 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c02:	6802      	ldr	r2, [r0, #0]
 8008c04:	6853      	ldr	r3, [r2, #4]
 8008c06:	4928      	ldr	r1, [pc, #160]	; (8008ca8 <UART_AdvFeatureConfig+0xc0>)
 8008c08:	400b      	ands	r3, r1
 8008c0a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008c0c:	430b      	orrs	r3, r1
 8008c0e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c12:	075b      	lsls	r3, r3, #29
 8008c14:	d506      	bpl.n	8008c24 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c16:	6802      	ldr	r2, [r0, #0]
 8008c18:	6853      	ldr	r3, [r2, #4]
 8008c1a:	4924      	ldr	r1, [pc, #144]	; (8008cac <UART_AdvFeatureConfig+0xc4>)
 8008c1c:	400b      	ands	r3, r1
 8008c1e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008c20:	430b      	orrs	r3, r1
 8008c22:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c26:	071b      	lsls	r3, r3, #28
 8008c28:	d506      	bpl.n	8008c38 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c2a:	6802      	ldr	r2, [r0, #0]
 8008c2c:	6853      	ldr	r3, [r2, #4]
 8008c2e:	4920      	ldr	r1, [pc, #128]	; (8008cb0 <UART_AdvFeatureConfig+0xc8>)
 8008c30:	400b      	ands	r3, r1
 8008c32:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008c34:	430b      	orrs	r3, r1
 8008c36:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c38:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c3a:	06db      	lsls	r3, r3, #27
 8008c3c:	d506      	bpl.n	8008c4c <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c3e:	6802      	ldr	r2, [r0, #0]
 8008c40:	6893      	ldr	r3, [r2, #8]
 8008c42:	491c      	ldr	r1, [pc, #112]	; (8008cb4 <UART_AdvFeatureConfig+0xcc>)
 8008c44:	400b      	ands	r3, r1
 8008c46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c4e:	069b      	lsls	r3, r3, #26
 8008c50:	d506      	bpl.n	8008c60 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c52:	6802      	ldr	r2, [r0, #0]
 8008c54:	6893      	ldr	r3, [r2, #8]
 8008c56:	4918      	ldr	r1, [pc, #96]	; (8008cb8 <UART_AdvFeatureConfig+0xd0>)
 8008c58:	400b      	ands	r3, r1
 8008c5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c62:	065b      	lsls	r3, r3, #25
 8008c64:	d50b      	bpl.n	8008c7e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c66:	6802      	ldr	r2, [r0, #0]
 8008c68:	6853      	ldr	r3, [r2, #4]
 8008c6a:	4914      	ldr	r1, [pc, #80]	; (8008cbc <UART_AdvFeatureConfig+0xd4>)
 8008c6c:	400b      	ands	r3, r1
 8008c6e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008c70:	430b      	orrs	r3, r1
 8008c72:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c74:	2380      	movs	r3, #128	; 0x80
 8008c76:	035b      	lsls	r3, r3, #13
 8008c78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c80:	061b      	lsls	r3, r3, #24
 8008c82:	d506      	bpl.n	8008c92 <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c84:	6802      	ldr	r2, [r0, #0]
 8008c86:	6853      	ldr	r3, [r2, #4]
 8008c88:	490d      	ldr	r1, [pc, #52]	; (8008cc0 <UART_AdvFeatureConfig+0xd8>)
 8008c8a:	400b      	ands	r3, r1
 8008c8c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	6053      	str	r3, [r2, #4]
  }
}
 8008c92:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c94:	6802      	ldr	r2, [r0, #0]
 8008c96:	6853      	ldr	r3, [r2, #4]
 8008c98:	490a      	ldr	r1, [pc, #40]	; (8008cc4 <UART_AdvFeatureConfig+0xdc>)
 8008c9a:	400b      	ands	r3, r1
 8008c9c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008c9e:	430b      	orrs	r3, r1
 8008ca0:	6053      	str	r3, [r2, #4]
 8008ca2:	e7ec      	b.n	8008c7e <UART_AdvFeatureConfig+0x96>
 8008ca4:	fffdffff 	.word	0xfffdffff
 8008ca8:	fffeffff 	.word	0xfffeffff
 8008cac:	fffbffff 	.word	0xfffbffff
 8008cb0:	ffff7fff 	.word	0xffff7fff
 8008cb4:	ffffefff 	.word	0xffffefff
 8008cb8:	ffffdfff 	.word	0xffffdfff
 8008cbc:	ffefffff 	.word	0xffefffff
 8008cc0:	fff7ffff 	.word	0xfff7ffff
 8008cc4:	ff9fffff 	.word	0xff9fffff

08008cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	46ce      	mov	lr, r9
 8008ccc:	4647      	mov	r7, r8
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	0006      	movs	r6, r0
 8008cd2:	000d      	movs	r5, r1
 8008cd4:	0017      	movs	r7, r2
 8008cd6:	4699      	mov	r9, r3
 8008cd8:	9b08      	ldr	r3, [sp, #32]
 8008cda:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cdc:	6833      	ldr	r3, [r6, #0]
 8008cde:	69dc      	ldr	r4, [r3, #28]
 8008ce0:	402c      	ands	r4, r5
 8008ce2:	1b64      	subs	r4, r4, r5
 8008ce4:	4263      	negs	r3, r4
 8008ce6:	415c      	adcs	r4, r3
 8008ce8:	42bc      	cmp	r4, r7
 8008cea:	d157      	bne.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xd4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cec:	4643      	mov	r3, r8
 8008cee:	3301      	adds	r3, #1
 8008cf0:	d0f4      	beq.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x14>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7fd f82f 	bl	8005d54 <HAL_GetTick>
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	1ac0      	subs	r0, r0, r3
 8008cfa:	4540      	cmp	r0, r8
 8008cfc:	d82e      	bhi.n	8008d5c <UART_WaitOnFlagUntilTimeout+0x94>
 8008cfe:	4643      	mov	r3, r8
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d02b      	beq.n	8008d5c <UART_WaitOnFlagUntilTimeout+0x94>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d04:	6833      	ldr	r3, [r6, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	0752      	lsls	r2, r2, #29
 8008d0a:	d5e7      	bpl.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x14>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d0c:	69da      	ldr	r2, [r3, #28]
 8008d0e:	0512      	lsls	r2, r2, #20
 8008d10:	d5e4      	bpl.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x14>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d12:	2280      	movs	r2, #128	; 0x80
 8008d14:	0112      	lsls	r2, r2, #4
 8008d16:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d18:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f382 8810 	msr	PRIMASK, r2

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d22:	6831      	ldr	r1, [r6, #0]
 8008d24:	680b      	ldr	r3, [r1, #0]
 8008d26:	4c20      	ldr	r4, [pc, #128]	; (8008da8 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8008d28:	4023      	ands	r3, r4
 8008d2a:	600b      	str	r3, [r1, #0]
 8008d2c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d30:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d34:	f382 8810 	msr	PRIMASK, r2
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d38:	6831      	ldr	r1, [r6, #0]
 8008d3a:	688b      	ldr	r3, [r1, #8]
 8008d3c:	4393      	bics	r3, r2
 8008d3e:	608b      	str	r3, [r1, #8]
 8008d40:	f380 8810 	msr	PRIMASK, r0

          huart->gState = HAL_UART_STATE_READY;
 8008d44:	2320      	movs	r3, #32
 8008d46:	3287      	adds	r2, #135	; 0x87
 8008d48:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	3204      	adds	r2, #4
 8008d4c:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d4e:	3204      	adds	r2, #4
 8008d50:	50b3      	str	r3, [r6, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d52:	3364      	adds	r3, #100	; 0x64
 8008d54:	2200      	movs	r2, #0
 8008d56:	54f2      	strb	r2, [r6, r3]

          return HAL_TIMEOUT;
 8008d58:	2003      	movs	r0, #3
 8008d5a:	e020      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d5c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d60:	2201      	movs	r2, #1
 8008d62:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d66:	6831      	ldr	r1, [r6, #0]
 8008d68:	680b      	ldr	r3, [r1, #0]
 8008d6a:	4c0f      	ldr	r4, [pc, #60]	; (8008da8 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8008d6c:	4023      	ands	r3, r4
 8008d6e:	600b      	str	r3, [r1, #0]
 8008d70:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d74:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d78:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7c:	6831      	ldr	r1, [r6, #0]
 8008d7e:	688b      	ldr	r3, [r1, #8]
 8008d80:	4393      	bics	r3, r2
 8008d82:	608b      	str	r3, [r1, #8]
 8008d84:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8008d88:	2320      	movs	r3, #32
 8008d8a:	3287      	adds	r2, #135	; 0x87
 8008d8c:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	3204      	adds	r2, #4
 8008d90:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 8008d92:	3364      	adds	r3, #100	; 0x64
 8008d94:	2200      	movs	r2, #0
 8008d96:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8008d98:	2003      	movs	r0, #3
 8008d9a:	e000      	b.n	8008d9e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
      }
    }
  }
  return HAL_OK;
 8008d9c:	2000      	movs	r0, #0
}
 8008d9e:	bcc0      	pop	{r6, r7}
 8008da0:	46b9      	mov	r9, r7
 8008da2:	46b0      	mov	r8, r6
 8008da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	fffffe5f 	.word	0xfffffe5f

08008dac <HAL_UART_Transmit>:
{
 8008dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dae:	46c6      	mov	lr, r8
 8008db0:	b500      	push	{lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	0004      	movs	r4, r0
 8008db6:	000d      	movs	r5, r1
 8008db8:	4690      	mov	r8, r2
 8008dba:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008dbc:	2388      	movs	r3, #136	; 0x88
 8008dbe:	58c3      	ldr	r3, [r0, r3]
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d15c      	bne.n	8008e7e <HAL_UART_Transmit+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d05f      	beq.n	8008e88 <HAL_UART_Transmit+0xdc>
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	d05f      	beq.n	8008e8c <HAL_UART_Transmit+0xe0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dcc:	2380      	movs	r3, #128	; 0x80
 8008dce:	015b      	lsls	r3, r3, #5
 8008dd0:	6882      	ldr	r2, [r0, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d104      	bne.n	8008de0 <HAL_UART_Transmit+0x34>
 8008dd6:	6903      	ldr	r3, [r0, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8008ddc:	07cb      	lsls	r3, r1, #31
 8008dde:	d457      	bmi.n	8008e90 <HAL_UART_Transmit+0xe4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de0:	2390      	movs	r3, #144	; 0x90
 8008de2:	2200      	movs	r2, #0
 8008de4:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008de6:	3b08      	subs	r3, #8
 8008de8:	3221      	adds	r2, #33	; 0x21
 8008dea:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8008dec:	f7fc ffb2 	bl	8005d54 <HAL_GetTick>
 8008df0:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8008df2:	2354      	movs	r3, #84	; 0x54
 8008df4:	4642      	mov	r2, r8
 8008df6:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8008df8:	3302      	adds	r3, #2
 8008dfa:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dfc:	2380      	movs	r3, #128	; 0x80
 8008dfe:	015b      	lsls	r3, r3, #5
 8008e00:	68a2      	ldr	r2, [r4, #8]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d002      	beq.n	8008e0c <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	4698      	mov	r8, r3
 8008e0a:	e013      	b.n	8008e34 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e0c:	6923      	ldr	r3, [r4, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d025      	beq.n	8008e5e <HAL_UART_Transmit+0xb2>
      pdata16bits = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	4698      	mov	r8, r3
 8008e16:	e00d      	b.n	8008e34 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e18:	4643      	mov	r3, r8
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	6822      	ldr	r2, [r4, #0]
 8008e1e:	05db      	lsls	r3, r3, #23
 8008e20:	0ddb      	lsrs	r3, r3, #23
 8008e22:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8008e24:	2302      	movs	r3, #2
 8008e26:	469c      	mov	ip, r3
 8008e28:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8008e2a:	2356      	movs	r3, #86	; 0x56
 8008e2c:	5ae2      	ldrh	r2, [r4, r3]
 8008e2e:	3a01      	subs	r2, #1
 8008e30:	b292      	uxth	r2, r2
 8008e32:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8008e34:	2356      	movs	r3, #86	; 0x56
 8008e36:	5ae3      	ldrh	r3, [r4, r3]
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d012      	beq.n	8008e64 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e3e:	9600      	str	r6, [sp, #0]
 8008e40:	003b      	movs	r3, r7
 8008e42:	2200      	movs	r2, #0
 8008e44:	2180      	movs	r1, #128	; 0x80
 8008e46:	0020      	movs	r0, r4
 8008e48:	f7ff ff3e 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d121      	bne.n	8008e94 <HAL_UART_Transmit+0xe8>
      if (pdata8bits == NULL)
 8008e50:	2d00      	cmp	r5, #0
 8008e52:	d0e1      	beq.n	8008e18 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e54:	782a      	ldrb	r2, [r5, #0]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e5a:	3501      	adds	r5, #1
 8008e5c:	e7e5      	b.n	8008e2a <HAL_UART_Transmit+0x7e>
      pdata16bits = (const uint16_t *) pData;
 8008e5e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8008e60:	2500      	movs	r5, #0
 8008e62:	e7e7      	b.n	8008e34 <HAL_UART_Transmit+0x88>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e64:	9600      	str	r6, [sp, #0]
 8008e66:	003b      	movs	r3, r7
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2140      	movs	r1, #64	; 0x40
 8008e6c:	0020      	movs	r0, r4
 8008e6e:	f7ff ff2b 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d110      	bne.n	8008e98 <HAL_UART_Transmit+0xec>
    huart->gState = HAL_UART_STATE_READY;
 8008e76:	2388      	movs	r3, #136	; 0x88
 8008e78:	2220      	movs	r2, #32
 8008e7a:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8008e7c:	e000      	b.n	8008e80 <HAL_UART_Transmit+0xd4>
    return HAL_BUSY;
 8008e7e:	2002      	movs	r0, #2
}
 8008e80:	b002      	add	sp, #8
 8008e82:	bc80      	pop	{r7}
 8008e84:	46b8      	mov	r8, r7
 8008e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e7f9      	b.n	8008e80 <HAL_UART_Transmit+0xd4>
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	e7f7      	b.n	8008e80 <HAL_UART_Transmit+0xd4>
        return  HAL_ERROR;
 8008e90:	2001      	movs	r0, #1
 8008e92:	e7f5      	b.n	8008e80 <HAL_UART_Transmit+0xd4>
        return HAL_TIMEOUT;
 8008e94:	2003      	movs	r0, #3
 8008e96:	e7f3      	b.n	8008e80 <HAL_UART_Transmit+0xd4>
      return HAL_TIMEOUT;
 8008e98:	2003      	movs	r0, #3
 8008e9a:	e7f1      	b.n	8008e80 <HAL_UART_Transmit+0xd4>

08008e9c <UART_CheckIdleState>:
{
 8008e9c:	b530      	push	{r4, r5, lr}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea2:	2390      	movs	r3, #144	; 0x90
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8008ea8:	f7fc ff54 	bl	8005d54 <HAL_GetTick>
 8008eac:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	6812      	ldr	r2, [r2, #0]
 8008eb2:	0713      	lsls	r3, r2, #28
 8008eb4:	d410      	bmi.n	8008ed8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	075b      	lsls	r3, r3, #29
 8008ebc:	d419      	bmi.n	8008ef2 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8008ebe:	2320      	movs	r3, #32
 8008ec0:	2288      	movs	r2, #136	; 0x88
 8008ec2:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008ec4:	3204      	adds	r2, #4
 8008ec6:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ecc:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8008ece:	3a08      	subs	r2, #8
 8008ed0:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8008ed2:	2000      	movs	r0, #0
}
 8008ed4:	b003      	add	sp, #12
 8008ed6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed8:	2180      	movs	r1, #128	; 0x80
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <UART_CheckIdleState+0x70>)
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	0003      	movs	r3, r0
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	0389      	lsls	r1, r1, #14
 8008ee4:	0020      	movs	r0, r4
 8008ee6:	f7ff feef 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d0e3      	beq.n	8008eb6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8008eee:	2003      	movs	r0, #3
 8008ef0:	e7f0      	b.n	8008ed4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ef2:	2180      	movs	r1, #128	; 0x80
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <UART_CheckIdleState+0x70>)
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	002b      	movs	r3, r5
 8008efa:	2200      	movs	r2, #0
 8008efc:	03c9      	lsls	r1, r1, #15
 8008efe:	0020      	movs	r0, r4
 8008f00:	f7ff fee2 	bl	8008cc8 <UART_WaitOnFlagUntilTimeout>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d0da      	beq.n	8008ebe <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8008f08:	2003      	movs	r0, #3
 8008f0a:	e7e3      	b.n	8008ed4 <UART_CheckIdleState+0x38>
 8008f0c:	01ffffff 	.word	0x01ffffff

08008f10 <HAL_UART_Init>:
{
 8008f10:	b510      	push	{r4, lr}
 8008f12:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8008f14:	d030      	beq.n	8008f78 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008f16:	2388      	movs	r3, #136	; 0x88
 8008f18:	58c3      	ldr	r3, [r0, r3]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d022      	beq.n	8008f64 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8008f1e:	2388      	movs	r3, #136	; 0x88
 8008f20:	2224      	movs	r2, #36	; 0x24
 8008f22:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8008f24:	6822      	ldr	r2, [r4, #0]
 8008f26:	6813      	ldr	r3, [r2, #0]
 8008f28:	2101      	movs	r1, #1
 8008f2a:	438b      	bics	r3, r1
 8008f2c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f2e:	0020      	movs	r0, r4
 8008f30:	f7ff fcde 	bl	80088f0 <UART_SetConfig>
 8008f34:	2801      	cmp	r0, #1
 8008f36:	d014      	beq.n	8008f62 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d118      	bne.n	8008f70 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f3e:	6822      	ldr	r2, [r4, #0]
 8008f40:	6853      	ldr	r3, [r2, #4]
 8008f42:	490e      	ldr	r1, [pc, #56]	; (8008f7c <HAL_UART_Init+0x6c>)
 8008f44:	400b      	ands	r3, r1
 8008f46:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	6893      	ldr	r3, [r2, #8]
 8008f4c:	212a      	movs	r1, #42	; 0x2a
 8008f4e:	438b      	bics	r3, r1
 8008f50:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	3929      	subs	r1, #41	; 0x29
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8008f5c:	0020      	movs	r0, r4
 8008f5e:	f7ff ff9d 	bl	8008e9c <UART_CheckIdleState>
}
 8008f62:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8008f64:	3384      	adds	r3, #132	; 0x84
 8008f66:	2200      	movs	r2, #0
 8008f68:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8008f6a:	f7fc fd7b 	bl	8005a64 <HAL_UART_MspInit>
 8008f6e:	e7d6      	b.n	8008f1e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8008f70:	0020      	movs	r0, r4
 8008f72:	f7ff fe39 	bl	8008be8 <UART_AdvFeatureConfig>
 8008f76:	e7e2      	b.n	8008f3e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8008f78:	2001      	movs	r0, #1
 8008f7a:	e7f2      	b.n	8008f62 <HAL_UART_Init+0x52>
 8008f7c:	ffffb7ff 	.word	0xffffb7ff

08008f80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f84:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d105      	bne.n	8008f96 <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	226a      	movs	r2, #106	; 0x6a
 8008f8e:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 8008f90:	3a02      	subs	r2, #2
 8008f92:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f96:	6802      	ldr	r2, [r0, #0]
 8008f98:	6895      	ldr	r5, [r2, #8]
 8008f9a:	0e6d      	lsrs	r5, r5, #25
 8008f9c:	2307      	movs	r3, #7
 8008f9e:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fa0:	6892      	ldr	r2, [r2, #8]
 8008fa2:	0f52      	lsrs	r2, r2, #29
 8008fa4:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fa6:	4f08      	ldr	r7, [pc, #32]	; (8008fc8 <UARTEx_SetNbDataToProcess+0x48>)
 8008fa8:	5cf8      	ldrb	r0, [r7, r3]
 8008faa:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fac:	4e07      	ldr	r6, [pc, #28]	; (8008fcc <UARTEx_SetNbDataToProcess+0x4c>)
 8008fae:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fb0:	f7f7 f958 	bl	8000264 <__divsi3>
 8008fb4:	236a      	movs	r3, #106	; 0x6a
 8008fb6:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fb8:	5d78      	ldrb	r0, [r7, r5]
 8008fba:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fbc:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fbe:	f7f7 f951 	bl	8000264 <__divsi3>
 8008fc2:	2368      	movs	r3, #104	; 0x68
 8008fc4:	52e0      	strh	r0, [r4, r3]
}
 8008fc6:	e7e5      	b.n	8008f94 <UARTEx_SetNbDataToProcess+0x14>
 8008fc8:	0800e040 	.word	0x0800e040
 8008fcc:	0800e038 	.word	0x0800e038

08008fd0 <HAL_UARTEx_DisableFifoMode>:
{
 8008fd0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8008fd2:	2384      	movs	r3, #132	; 0x84
 8008fd4:	5cc3      	ldrb	r3, [r0, r3]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d015      	beq.n	8009006 <HAL_UARTEx_DisableFifoMode+0x36>
 8008fda:	2484      	movs	r4, #132	; 0x84
 8008fdc:	2601      	movs	r6, #1
 8008fde:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8008fe0:	2588      	movs	r5, #136	; 0x88
 8008fe2:	2324      	movs	r3, #36	; 0x24
 8008fe4:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fe6:	6802      	ldr	r2, [r0, #0]
 8008fe8:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008fea:	6811      	ldr	r1, [r2, #0]
 8008fec:	43b1      	bics	r1, r6
 8008fee:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ff0:	4a06      	ldr	r2, [pc, #24]	; (800900c <HAL_UARTEx_DisableFifoMode+0x3c>)
 8008ff2:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff8:	6801      	ldr	r1, [r0, #0]
 8008ffa:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008ffc:	2320      	movs	r3, #32
 8008ffe:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8009000:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8009002:	2000      	movs	r0, #0
}
 8009004:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8009006:	2002      	movs	r0, #2
 8009008:	e7fc      	b.n	8009004 <HAL_UARTEx_DisableFifoMode+0x34>
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	dfffffff 	.word	0xdfffffff

08009010 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009012:	0004      	movs	r4, r0
 8009014:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8009016:	2384      	movs	r3, #132	; 0x84
 8009018:	5cc3      	ldrb	r3, [r0, r3]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d01b      	beq.n	8009056 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800901e:	2584      	movs	r5, #132	; 0x84
 8009020:	2001      	movs	r0, #1
 8009022:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8009024:	2688      	movs	r6, #136	; 0x88
 8009026:	2324      	movs	r3, #36	; 0x24
 8009028:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	4381      	bics	r1, r0
 8009032:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009034:	6820      	ldr	r0, [r4, #0]
 8009036:	6883      	ldr	r3, [r0, #8]
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	08d9      	lsrs	r1, r3, #3
 800903c:	4311      	orrs	r1, r2
 800903e:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009040:	0020      	movs	r0, r4
 8009042:	f7ff ff9d 	bl	8008f80 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800904a:	2320      	movs	r3, #32
 800904c:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800904e:	2300      	movs	r3, #0
 8009050:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8009052:	2000      	movs	r0, #0
}
 8009054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8009056:	2002      	movs	r0, #2
 8009058:	e7fc      	b.n	8009054 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

0800905c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	0004      	movs	r4, r0
 8009060:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8009062:	2284      	movs	r2, #132	; 0x84
 8009064:	5c82      	ldrb	r2, [r0, r2]
 8009066:	2a01      	cmp	r2, #1
 8009068:	d01b      	beq.n	80090a2 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800906a:	2584      	movs	r5, #132	; 0x84
 800906c:	2001      	movs	r0, #1
 800906e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8009070:	2688      	movs	r6, #136	; 0x88
 8009072:	2224      	movs	r2, #36	; 0x24
 8009074:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009076:	6822      	ldr	r2, [r4, #0]
 8009078:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800907a:	6811      	ldr	r1, [r2, #0]
 800907c:	4381      	bics	r1, r0
 800907e:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	6891      	ldr	r1, [r2, #8]
 8009084:	4808      	ldr	r0, [pc, #32]	; (80090a8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8009086:	4001      	ands	r1, r0
 8009088:	4319      	orrs	r1, r3
 800908a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800908c:	0020      	movs	r0, r4
 800908e:	f7ff ff77 	bl	8008f80 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009096:	2320      	movs	r3, #32
 8009098:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800909a:	2300      	movs	r3, #0
 800909c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800909e:	2000      	movs	r0, #0
}
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80090a2:	2002      	movs	r0, #2
 80090a4:	e7fc      	b.n	80090a0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80090a6:	46c0      	nop			; (mov r8, r8)
 80090a8:	f1ffffff 	.word	0xf1ffffff

080090ac <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80090ac:	b510      	push	{r4, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80090ae:	4906      	ldr	r1, [pc, #24]	; (80090c8 <MX_FATFS_Init+0x1c>)
 80090b0:	4806      	ldr	r0, [pc, #24]	; (80090cc <MX_FATFS_Init+0x20>)
 80090b2:	f001 fce7 	bl	800aa84 <FATFS_LinkDriver>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d103      	bne.n	80090c2 <MX_FATFS_Init+0x16>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 80090ba:	4b05      	ldr	r3, [pc, #20]	; (80090d0 <MX_FATFS_Init+0x24>)
 80090bc:	2201      	movs	r2, #1
 80090be:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 80090c0:	bd10      	pop	{r4, pc}
    return APP_ERROR;
 80090c2:	2001      	movs	r0, #1
 80090c4:	4240      	negs	r0, r0
 80090c6:	e7fb      	b.n	80090c0 <MX_FATFS_Init+0x14>
 80090c8:	20001128 	.word	0x20001128
 80090cc:	20000010 	.word	0x20000010
 80090d0:	20001124 	.word	0x20001124

080090d4 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80090d4:	2000      	movs	r0, #0
 80090d6:	4770      	bx	lr

080090d8 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80090d8:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <USER_initialize+0xc>)
 80090da:	2201      	movs	r2, #1
 80090dc:	701a      	strb	r2, [r3, #0]
    return Stat;
 80090de:	7818      	ldrb	r0, [r3, #0]
 80090e0:	b2c0      	uxtb	r0, r0
  /* USER CODE END INIT */
}
 80090e2:	4770      	bx	lr
 80090e4:	2000000c 	.word	0x2000000c

080090e8 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80090e8:	4b02      	ldr	r3, [pc, #8]	; (80090f4 <USER_status+0xc>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	701a      	strb	r2, [r3, #0]
    return Stat;
 80090ee:	7818      	ldrb	r0, [r3, #0]
 80090f0:	b2c0      	uxtb	r0, r0
  /* USER CODE END STATUS */
}
 80090f2:	4770      	bx	lr
 80090f4:	2000000c 	.word	0x2000000c

080090f8 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 80090f8:	2000      	movs	r0, #0
 80090fa:	4770      	bx	lr

080090fc <USER_write>:
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 80090fc:	2000      	movs	r0, #0
 80090fe:	4770      	bx	lr

08009100 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8009100:	2001      	movs	r0, #1
 8009102:	4770      	bx	lr

08009104 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009104:	b510      	push	{r4, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009106:	4b04      	ldr	r3, [pc, #16]	; (8009118 <disk_status+0x14>)
 8009108:	0082      	lsls	r2, r0, #2
 800910a:	189a      	adds	r2, r3, r2
 800910c:	6852      	ldr	r2, [r2, #4]
 800910e:	6852      	ldr	r2, [r2, #4]
 8009110:	181b      	adds	r3, r3, r0
 8009112:	7a18      	ldrb	r0, [r3, #8]
 8009114:	4790      	blx	r2
  return stat;
}
 8009116:	bd10      	pop	{r4, pc}
 8009118:	20001154 	.word	0x20001154

0800911c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800911c:	b510      	push	{r4, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800911e:	4b08      	ldr	r3, [pc, #32]	; (8009140 <disk_initialize+0x24>)
 8009120:	5c1b      	ldrb	r3, [r3, r0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10a      	bne.n	800913c <disk_initialize+0x20>
  {
    disk.is_initialized[pdrv] = 1;
 8009126:	4b06      	ldr	r3, [pc, #24]	; (8009140 <disk_initialize+0x24>)
 8009128:	2201      	movs	r2, #1
 800912a:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800912c:	0082      	lsls	r2, r0, #2
 800912e:	189a      	adds	r2, r3, r2
 8009130:	6852      	ldr	r2, [r2, #4]
 8009132:	6812      	ldr	r2, [r2, #0]
 8009134:	1818      	adds	r0, r3, r0
 8009136:	7a00      	ldrb	r0, [r0, #8]
 8009138:	4790      	blx	r2
  }
  return stat;
}
 800913a:	bd10      	pop	{r4, pc}
  DSTATUS stat = RES_OK;
 800913c:	2000      	movs	r0, #0
 800913e:	e7fc      	b.n	800913a <disk_initialize+0x1e>
 8009140:	20001154 	.word	0x20001154

08009144 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009144:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009146:	4c04      	ldr	r4, [pc, #16]	; (8009158 <disk_read+0x14>)
 8009148:	0085      	lsls	r5, r0, #2
 800914a:	1965      	adds	r5, r4, r5
 800914c:	686d      	ldr	r5, [r5, #4]
 800914e:	68ad      	ldr	r5, [r5, #8]
 8009150:	1824      	adds	r4, r4, r0
 8009152:	7a20      	ldrb	r0, [r4, #8]
 8009154:	47a8      	blx	r5
  return res;
}
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	20001154 	.word	0x20001154

0800915c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800915c:	b570      	push	{r4, r5, r6, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800915e:	4c04      	ldr	r4, [pc, #16]	; (8009170 <disk_write+0x14>)
 8009160:	0085      	lsls	r5, r0, #2
 8009162:	1965      	adds	r5, r4, r5
 8009164:	686d      	ldr	r5, [r5, #4]
 8009166:	68ed      	ldr	r5, [r5, #12]
 8009168:	1824      	adds	r4, r4, r0
 800916a:	7a20      	ldrb	r0, [r4, #8]
 800916c:	47a8      	blx	r5
  return res;
}
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	20001154 	.word	0x20001154

08009174 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009174:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009176:	4b04      	ldr	r3, [pc, #16]	; (8009188 <disk_ioctl+0x14>)
 8009178:	0084      	lsls	r4, r0, #2
 800917a:	191c      	adds	r4, r3, r4
 800917c:	6864      	ldr	r4, [r4, #4]
 800917e:	6924      	ldr	r4, [r4, #16]
 8009180:	181b      	adds	r3, r3, r0
 8009182:	7a18      	ldrb	r0, [r3, #8]
 8009184:	47a0      	blx	r4
  return res;
}
 8009186:	bd10      	pop	{r4, pc}
 8009188:	20001154 	.word	0x20001154

0800918c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800918c:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 800918e:	021b      	lsls	r3, r3, #8
 8009190:	7800      	ldrb	r0, [r0, #0]
 8009192:	4318      	orrs	r0, r3
	return rv;
}
 8009194:	4770      	bx	lr

08009196 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009196:	0003      	movs	r3, r0
	DWORD rv;

	rv = ptr[3];
 8009198:	78c0      	ldrb	r0, [r0, #3]
	rv = rv << 8 | ptr[2];
 800919a:	0200      	lsls	r0, r0, #8
 800919c:	789a      	ldrb	r2, [r3, #2]
 800919e:	4310      	orrs	r0, r2
	rv = rv << 8 | ptr[1];
 80091a0:	0200      	lsls	r0, r0, #8
 80091a2:	785a      	ldrb	r2, [r3, #1]
 80091a4:	4310      	orrs	r0, r2
	rv = rv << 8 | ptr[0];
 80091a6:	0200      	lsls	r0, r0, #8
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	4318      	orrs	r0, r3
	return rv;
}
 80091ac:	4770      	bx	lr

080091ae <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80091ae:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 80091b0:	0a09      	lsrs	r1, r1, #8
 80091b2:	7041      	strb	r1, [r0, #1]
}
 80091b4:	4770      	bx	lr

080091b6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80091b6:	7001      	strb	r1, [r0, #0]
 80091b8:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80091ba:	7043      	strb	r3, [r0, #1]
 80091bc:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80091be:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80091c0:	0e09      	lsrs	r1, r1, #24
 80091c2:	70c1      	strb	r1, [r0, #3]
}
 80091c4:	4770      	bx	lr

080091c6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80091c6:	b510      	push	{r4, lr}
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	d006      	beq.n	80091da <mem_cpy+0x14>
		do {
			*d++ = *s++;
 80091cc:	780c      	ldrb	r4, [r1, #0]
 80091ce:	3101      	adds	r1, #1
 80091d0:	7004      	strb	r4, [r0, #0]
 80091d2:	3001      	adds	r0, #1
		} while (--cnt);
 80091d4:	3a01      	subs	r2, #1
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	d1f8      	bne.n	80091cc <mem_cpy+0x6>
	}
}
 80091da:	bd10      	pop	{r4, pc}

080091dc <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80091dc:	7001      	strb	r1, [r0, #0]
 80091de:	3001      	adds	r0, #1
	} while (--cnt);
 80091e0:	3a01      	subs	r2, #1
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	d1fa      	bne.n	80091dc <mem_set>
}
 80091e6:	4770      	bx	lr

080091e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80091e8:	b510      	push	{r4, lr}
 80091ea:	0004      	movs	r4, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 80091ec:	7820      	ldrb	r0, [r4, #0]
 80091ee:	3401      	adds	r4, #1
 80091f0:	780b      	ldrb	r3, [r1, #0]
 80091f2:	3101      	adds	r1, #1
 80091f4:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 80091f6:	3a01      	subs	r2, #1
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	d001      	beq.n	8009200 <mem_cmp+0x18>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d0f5      	beq.n	80091ec <mem_cmp+0x4>

	return r;
}
 8009200:	bd10      	pop	{r4, pc}

08009202 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009202:	0003      	movs	r3, r0
	while (*str && *str != chr) str++;
 8009204:	e000      	b.n	8009208 <chk_chr+0x6>
 8009206:	3301      	adds	r3, #1
 8009208:	7818      	ldrb	r0, [r3, #0]
 800920a:	2800      	cmp	r0, #0
 800920c:	d001      	beq.n	8009212 <chk_chr+0x10>
 800920e:	4288      	cmp	r0, r1
 8009210:	d1f9      	bne.n	8009206 <chk_chr+0x4>
	return *str;
}
 8009212:	4770      	bx	lr

08009214 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009214:	b530      	push	{r4, r5, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009216:	2500      	movs	r5, #0
 8009218:	2300      	movs	r3, #0
 800921a:	e001      	b.n	8009220 <chk_lock+0xc>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800921c:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800921e:	3301      	adds	r3, #1
 8009220:	2b01      	cmp	r3, #1
 8009222:	d815      	bhi.n	8009250 <chk_lock+0x3c>
		if (Files[i].fs) {	/* Existing entry */
 8009224:	011a      	lsls	r2, r3, #4
 8009226:	4c18      	ldr	r4, [pc, #96]	; (8009288 <chk_lock+0x74>)
 8009228:	5912      	ldr	r2, [r2, r4]
 800922a:	2a00      	cmp	r2, #0
 800922c:	d0f6      	beq.n	800921c <chk_lock+0x8>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800922e:	6804      	ldr	r4, [r0, #0]
 8009230:	42a2      	cmp	r2, r4
 8009232:	d1f4      	bne.n	800921e <chk_lock+0xa>
				Files[i].clu == dp->obj.sclust &&
 8009234:	011c      	lsls	r4, r3, #4
 8009236:	4a14      	ldr	r2, [pc, #80]	; (8009288 <chk_lock+0x74>)
 8009238:	1912      	adds	r2, r2, r4
 800923a:	6852      	ldr	r2, [r2, #4]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800923c:	6884      	ldr	r4, [r0, #8]
 800923e:	42a2      	cmp	r2, r4
 8009240:	d1ed      	bne.n	800921e <chk_lock+0xa>
				Files[i].ofs == dp->dptr) break;
 8009242:	011c      	lsls	r4, r3, #4
 8009244:	4a10      	ldr	r2, [pc, #64]	; (8009288 <chk_lock+0x74>)
 8009246:	1912      	adds	r2, r2, r4
 8009248:	6892      	ldr	r2, [r2, #8]
				Files[i].clu == dp->obj.sclust &&
 800924a:	6944      	ldr	r4, [r0, #20]
 800924c:	42a2      	cmp	r2, r4
 800924e:	d1e6      	bne.n	800921e <chk_lock+0xa>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009250:	2b02      	cmp	r3, #2
 8009252:	d00b      	beq.n	800926c <chk_lock+0x58>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009254:	2900      	cmp	r1, #0
 8009256:	d115      	bne.n	8009284 <chk_lock+0x70>
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	4a0b      	ldr	r2, [pc, #44]	; (8009288 <chk_lock+0x74>)
 800925c:	18d3      	adds	r3, r2, r3
 800925e:	899a      	ldrh	r2, [r3, #12]
 8009260:	2380      	movs	r3, #128	; 0x80
 8009262:	005b      	lsls	r3, r3, #1
 8009264:	429a      	cmp	r2, r3
 8009266:	d00b      	beq.n	8009280 <chk_lock+0x6c>
 8009268:	2000      	movs	r0, #0
}
 800926a:	bd30      	pop	{r4, r5, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800926c:	2d00      	cmp	r5, #0
 800926e:	d105      	bne.n	800927c <chk_lock+0x68>
 8009270:	2902      	cmp	r1, #2
 8009272:	d001      	beq.n	8009278 <chk_lock+0x64>
 8009274:	2012      	movs	r0, #18
 8009276:	e7f8      	b.n	800926a <chk_lock+0x56>
 8009278:	2000      	movs	r0, #0
 800927a:	e7f6      	b.n	800926a <chk_lock+0x56>
 800927c:	2000      	movs	r0, #0
 800927e:	e7f4      	b.n	800926a <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009280:	2010      	movs	r0, #16
 8009282:	e7f2      	b.n	800926a <chk_lock+0x56>
 8009284:	2010      	movs	r0, #16
 8009286:	e7f0      	b.n	800926a <chk_lock+0x56>
 8009288:	20001130 	.word	0x20001130

0800928c <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800928c:	2000      	movs	r0, #0
 800928e:	e000      	b.n	8009292 <enq_lock+0x6>
 8009290:	3001      	adds	r0, #1
 8009292:	2801      	cmp	r0, #1
 8009294:	d804      	bhi.n	80092a0 <enq_lock+0x14>
 8009296:	0103      	lsls	r3, r0, #4
 8009298:	4a03      	ldr	r2, [pc, #12]	; (80092a8 <enq_lock+0x1c>)
 800929a:	589b      	ldr	r3, [r3, r2]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1f7      	bne.n	8009290 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
 80092a0:	3802      	subs	r0, #2
 80092a2:	1e43      	subs	r3, r0, #1
 80092a4:	4198      	sbcs	r0, r3
}
 80092a6:	4770      	bx	lr
 80092a8:	20001130 	.word	0x20001130

080092ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80092ac:	b530      	push	{r4, r5, lr}
 80092ae:	0002      	movs	r2, r0
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092b0:	2000      	movs	r0, #0
 80092b2:	e000      	b.n	80092b6 <inc_lock+0xa>
 80092b4:	3001      	adds	r0, #1
 80092b6:	2801      	cmp	r0, #1
 80092b8:	d813      	bhi.n	80092e2 <inc_lock+0x36>
		if (Files[i].fs == dp->obj.fs &&
 80092ba:	0103      	lsls	r3, r0, #4
 80092bc:	4c24      	ldr	r4, [pc, #144]	; (8009350 <inc_lock+0xa4>)
 80092be:	591b      	ldr	r3, [r3, r4]
 80092c0:	6814      	ldr	r4, [r2, #0]
 80092c2:	42a3      	cmp	r3, r4
 80092c4:	d1f6      	bne.n	80092b4 <inc_lock+0x8>
			Files[i].clu == dp->obj.sclust &&
 80092c6:	0104      	lsls	r4, r0, #4
 80092c8:	4b21      	ldr	r3, [pc, #132]	; (8009350 <inc_lock+0xa4>)
 80092ca:	191b      	adds	r3, r3, r4
 80092cc:	685b      	ldr	r3, [r3, #4]
		if (Files[i].fs == dp->obj.fs &&
 80092ce:	6894      	ldr	r4, [r2, #8]
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	d1ef      	bne.n	80092b4 <inc_lock+0x8>
			Files[i].ofs == dp->dptr) break;
 80092d4:	0104      	lsls	r4, r0, #4
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <inc_lock+0xa4>)
 80092d8:	191b      	adds	r3, r3, r4
 80092da:	689b      	ldr	r3, [r3, #8]
			Files[i].clu == dp->obj.sclust &&
 80092dc:	6954      	ldr	r4, [r2, #20]
 80092de:	42a3      	cmp	r3, r4
 80092e0:	d1e8      	bne.n	80092b4 <inc_lock+0x8>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80092e2:	2802      	cmp	r0, #2
 80092e4:	d010      	beq.n	8009308 <inc_lock+0x5c>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80092e6:	2900      	cmp	r1, #0
 80092e8:	d005      	beq.n	80092f6 <inc_lock+0x4a>
 80092ea:	0102      	lsls	r2, r0, #4
 80092ec:	4b18      	ldr	r3, [pc, #96]	; (8009350 <inc_lock+0xa4>)
 80092ee:	189b      	adds	r3, r3, r2
 80092f0:	899b      	ldrh	r3, [r3, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d12a      	bne.n	800934c <inc_lock+0xa0>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80092f6:	2900      	cmp	r1, #0
 80092f8:	d11e      	bne.n	8009338 <inc_lock+0x8c>
 80092fa:	0102      	lsls	r2, r0, #4
 80092fc:	4b14      	ldr	r3, [pc, #80]	; (8009350 <inc_lock+0xa4>)
 80092fe:	189b      	adds	r3, r3, r2
 8009300:	899a      	ldrh	r2, [r3, #12]
 8009302:	3201      	adds	r2, #1
 8009304:	b292      	uxth	r2, r2
 8009306:	e019      	b.n	800933c <inc_lock+0x90>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009308:	2000      	movs	r0, #0
 800930a:	2801      	cmp	r0, #1
 800930c:	d806      	bhi.n	800931c <inc_lock+0x70>
 800930e:	0103      	lsls	r3, r0, #4
 8009310:	4c0f      	ldr	r4, [pc, #60]	; (8009350 <inc_lock+0xa4>)
 8009312:	591b      	ldr	r3, [r3, r4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <inc_lock+0x70>
 8009318:	3001      	adds	r0, #1
 800931a:	e7f6      	b.n	800930a <inc_lock+0x5e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800931c:	2802      	cmp	r0, #2
 800931e:	d013      	beq.n	8009348 <inc_lock+0x9c>
		Files[i].fs = dp->obj.fs;
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <inc_lock+0xa4>)
 8009322:	0104      	lsls	r4, r0, #4
 8009324:	6815      	ldr	r5, [r2, #0]
 8009326:	50e5      	str	r5, [r4, r3]
		Files[i].clu = dp->obj.sclust;
 8009328:	191b      	adds	r3, r3, r4
 800932a:	6894      	ldr	r4, [r2, #8]
 800932c:	605c      	str	r4, [r3, #4]
		Files[i].ofs = dp->dptr;
 800932e:	6952      	ldr	r2, [r2, #20]
 8009330:	609a      	str	r2, [r3, #8]
		Files[i].ctr = 0;
 8009332:	2200      	movs	r2, #0
 8009334:	819a      	strh	r2, [r3, #12]
 8009336:	e7d6      	b.n	80092e6 <inc_lock+0x3a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009338:	2280      	movs	r2, #128	; 0x80
 800933a:	0052      	lsls	r2, r2, #1
 800933c:	0101      	lsls	r1, r0, #4
 800933e:	4b04      	ldr	r3, [pc, #16]	; (8009350 <inc_lock+0xa4>)
 8009340:	185b      	adds	r3, r3, r1
 8009342:	819a      	strh	r2, [r3, #12]

	return i + 1;
 8009344:	3001      	adds	r0, #1
}
 8009346:	bd30      	pop	{r4, r5, pc}
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009348:	2000      	movs	r0, #0
 800934a:	e7fc      	b.n	8009346 <inc_lock+0x9a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800934c:	2000      	movs	r0, #0
 800934e:	e7fa      	b.n	8009346 <inc_lock+0x9a>
 8009350:	20001130 	.word	0x20001130

08009354 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009354:	b510      	push	{r4, lr}
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009356:	2300      	movs	r3, #0
 8009358:	e000      	b.n	800935c <clear_lock+0x8>
 800935a:	3301      	adds	r3, #1
 800935c:	2b01      	cmp	r3, #1
 800935e:	d808      	bhi.n	8009372 <clear_lock+0x1e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009360:	011a      	lsls	r2, r3, #4
 8009362:	4904      	ldr	r1, [pc, #16]	; (8009374 <clear_lock+0x20>)
 8009364:	5852      	ldr	r2, [r2, r1]
 8009366:	4282      	cmp	r2, r0
 8009368:	d1f7      	bne.n	800935a <clear_lock+0x6>
 800936a:	011a      	lsls	r2, r3, #4
 800936c:	2400      	movs	r4, #0
 800936e:	5054      	str	r4, [r2, r1]
 8009370:	e7f3      	b.n	800935a <clear_lock+0x6>
	}
}
 8009372:	bd10      	pop	{r4, pc}
 8009374:	20001130 	.word	0x20001130

08009378 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 8009378:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800937a:	6943      	ldr	r3, [r0, #20]
 800937c:	3b02      	subs	r3, #2
 800937e:	428b      	cmp	r3, r1
 8009380:	d904      	bls.n	800938c <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 8009382:	8943      	ldrh	r3, [r0, #10]
 8009384:	4359      	muls	r1, r3
 8009386:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8009388:	1808      	adds	r0, r1, r0
}
 800938a:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800938c:	2000      	movs	r0, #0
 800938e:	e7fc      	b.n	800938a <clust2sect+0x12>

08009390 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009390:	b510      	push	{r4, lr}
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009392:	6803      	ldr	r3, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009394:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8009396:	3404      	adds	r4, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009398:	0a48      	lsrs	r0, r1, #9
 800939a:	8959      	ldrh	r1, [r3, #10]
 800939c:	f7f6 fed8 	bl	8000150 <__udivsi3>
 80093a0:	0003      	movs	r3, r0
 80093a2:	e001      	b.n	80093a8 <clmt_clust+0x18>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 80093a4:	1a1b      	subs	r3, r3, r0
 80093a6:	3408      	adds	r4, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80093a8:	6820      	ldr	r0, [r4, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d003      	beq.n	80093b6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80093ae:	4283      	cmp	r3, r0
 80093b0:	d2f8      	bcs.n	80093a4 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80093b2:	6860      	ldr	r0, [r4, #4]
 80093b4:	18c0      	adds	r0, r0, r3
}
 80093b6:	bd10      	pop	{r4, pc}

080093b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	0006      	movs	r6, r0
 80093bc:	000c      	movs	r4, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80093be:	0008      	movs	r0, r1
 80093c0:	301a      	adds	r0, #26
 80093c2:	f7ff fee3 	bl	800918c <ld_word>
 80093c6:	0005      	movs	r5, r0
	if (fs->fs_type == FS_FAT32) {
 80093c8:	7833      	ldrb	r3, [r6, #0]
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d000      	beq.n	80093d0 <ld_clust+0x18>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 80093ce:	bd70      	pop	{r4, r5, r6, pc}
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80093d0:	0020      	movs	r0, r4
 80093d2:	3014      	adds	r0, #20
 80093d4:	f7ff feda 	bl	800918c <ld_word>
 80093d8:	0400      	lsls	r0, r0, #16
 80093da:	4328      	orrs	r0, r5
	return cl;
 80093dc:	e7f7      	b.n	80093ce <ld_clust+0x16>

080093de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80093de:	b570      	push	{r4, r5, r6, lr}
 80093e0:	0006      	movs	r6, r0
 80093e2:	000c      	movs	r4, r1
 80093e4:	0015      	movs	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80093e6:	b291      	uxth	r1, r2
 80093e8:	0020      	movs	r0, r4
 80093ea:	301a      	adds	r0, #26
 80093ec:	f7ff fedf 	bl	80091ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 80093f0:	7833      	ldrb	r3, [r6, #0]
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d000      	beq.n	80093f8 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80093f8:	0c29      	lsrs	r1, r5, #16
 80093fa:	0020      	movs	r0, r4
 80093fc:	3014      	adds	r0, #20
 80093fe:	f7ff fed6 	bl	80091ae <st_word>
}
 8009402:	e7f8      	b.n	80093f6 <st_clust+0x18>

08009404 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	46de      	mov	lr, fp
 8009408:	4657      	mov	r7, sl
 800940a:	464e      	mov	r6, r9
 800940c:	4645      	mov	r5, r8
 800940e:	b5e0      	push	{r5, r6, r7, lr}
 8009410:	4681      	mov	r9, r0
 8009412:	468a      	mov	sl, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009414:	680f      	ldr	r7, [r1, #0]
 8009416:	2324      	movs	r3, #36	; 0x24
 8009418:	444b      	add	r3, r9
 800941a:	469b      	mov	fp, r3
	mem_set(sfn, ' ', 11);
 800941c:	220b      	movs	r2, #11
 800941e:	2120      	movs	r1, #32
 8009420:	0018      	movs	r0, r3
 8009422:	f7ff fedb 	bl	80091dc <mem_set>
	si = i = 0; ni = 8;
 8009426:	2600      	movs	r6, #0
 8009428:	2300      	movs	r3, #0
 800942a:	2208      	movs	r2, #8
 800942c:	4690      	mov	r8, r2
 800942e:	e02f      	b.n	8009490 <create_name+0x8c>
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009430:	3501      	adds	r5, #1
 8009432:	5d7b      	ldrb	r3, [r7, r5]
 8009434:	2b2f      	cmp	r3, #47	; 0x2f
 8009436:	d0fb      	beq.n	8009430 <create_name+0x2c>
 8009438:	2b5c      	cmp	r3, #92	; 0x5c
 800943a:	d0f9      	beq.n	8009430 <create_name+0x2c>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800943c:	197d      	adds	r5, r7, r5
 800943e:	4653      	mov	r3, sl
 8009440:	601d      	str	r5, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009442:	2e00      	cmp	r6, #0
 8009444:	d04b      	beq.n	80094de <create_name+0xda>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009446:	2324      	movs	r3, #36	; 0x24
 8009448:	464a      	mov	r2, r9
 800944a:	5cd3      	ldrb	r3, [r2, r3]
 800944c:	2be5      	cmp	r3, #229	; 0xe5
 800944e:	d03b      	beq.n	80094c8 <create_name+0xc4>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009450:	2c20      	cmp	r4, #32
 8009452:	d83e      	bhi.n	80094d2 <create_name+0xce>
 8009454:	2204      	movs	r2, #4
 8009456:	232f      	movs	r3, #47	; 0x2f
 8009458:	4649      	mov	r1, r9
 800945a:	54ca      	strb	r2, [r1, r3]

	return FR_OK;
 800945c:	2000      	movs	r0, #0
 800945e:	e029      	b.n	80094b4 <create_name+0xb0>
			i = 8; ni = 11;				/* Goto extension */
 8009460:	2608      	movs	r6, #8
 8009462:	230b      	movs	r3, #11
 8009464:	4698      	mov	r8, r3
 8009466:	e012      	b.n	800948e <create_name+0x8a>
		if (c >= 0x80) {				/* Extended character? */
 8009468:	b263      	sxtb	r3, r4
 800946a:	2b00      	cmp	r3, #0
 800946c:	db28      	blt.n	80094c0 <create_name+0xbc>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800946e:	0021      	movs	r1, r4
 8009470:	481c      	ldr	r0, [pc, #112]	; (80094e4 <create_name+0xe0>)
 8009472:	f7ff fec6 	bl	8009202 <chk_chr>
 8009476:	2800      	cmp	r0, #0
 8009478:	d12f      	bne.n	80094da <create_name+0xd6>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800947a:	0023      	movs	r3, r4
 800947c:	3b61      	subs	r3, #97	; 0x61
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b19      	cmp	r3, #25
 8009482:	d801      	bhi.n	8009488 <create_name+0x84>
 8009484:	3c20      	subs	r4, #32
 8009486:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
 8009488:	465b      	mov	r3, fp
 800948a:	559c      	strb	r4, [r3, r6]
 800948c:	3601      	adds	r6, #1
			i = 8; ni = 11;				/* Goto extension */
 800948e:	002b      	movs	r3, r5
		c = (BYTE)p[si++];
 8009490:	1c5d      	adds	r5, r3, #1
 8009492:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009494:	2c20      	cmp	r4, #32
 8009496:	d9d1      	bls.n	800943c <create_name+0x38>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009498:	2c2f      	cmp	r4, #47	; 0x2f
 800949a:	d0ca      	beq.n	8009432 <create_name+0x2e>
 800949c:	2c5c      	cmp	r4, #92	; 0x5c
 800949e:	d0c8      	beq.n	8009432 <create_name+0x2e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80094a0:	2c2e      	cmp	r4, #46	; 0x2e
 80094a2:	d001      	beq.n	80094a8 <create_name+0xa4>
 80094a4:	45b0      	cmp	r8, r6
 80094a6:	d8df      	bhi.n	8009468 <create_name+0x64>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80094a8:	4643      	mov	r3, r8
 80094aa:	2b0b      	cmp	r3, #11
 80094ac:	d013      	beq.n	80094d6 <create_name+0xd2>
 80094ae:	2c2e      	cmp	r4, #46	; 0x2e
 80094b0:	d0d6      	beq.n	8009460 <create_name+0x5c>
 80094b2:	2006      	movs	r0, #6
#endif /* _USE_LFN != 0 */
}
 80094b4:	bcf0      	pop	{r4, r5, r6, r7}
 80094b6:	46bb      	mov	fp, r7
 80094b8:	46b2      	mov	sl, r6
 80094ba:	46a9      	mov	r9, r5
 80094bc:	46a0      	mov	r8, r4
 80094be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80094c0:	3c80      	subs	r4, #128	; 0x80
 80094c2:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <create_name+0xe4>)
 80094c4:	5d1c      	ldrb	r4, [r3, r4]
 80094c6:	e7d2      	b.n	800946e <create_name+0x6a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80094c8:	3bc1      	subs	r3, #193	; 0xc1
 80094ca:	2205      	movs	r2, #5
 80094cc:	4649      	mov	r1, r9
 80094ce:	54ca      	strb	r2, [r1, r3]
 80094d0:	e7be      	b.n	8009450 <create_name+0x4c>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80094d2:	2200      	movs	r2, #0
 80094d4:	e7bf      	b.n	8009456 <create_name+0x52>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80094d6:	2006      	movs	r0, #6
 80094d8:	e7ec      	b.n	80094b4 <create_name+0xb0>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80094da:	2006      	movs	r0, #6
 80094dc:	e7ea      	b.n	80094b4 <create_name+0xb0>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80094de:	2006      	movs	r0, #6
 80094e0:	e7e8      	b.n	80094b4 <create_name+0xb0>
 80094e2:	46c0      	nop			; (mov r8, r8)
 80094e4:	0800e048 	.word	0x0800e048
 80094e8:	0800e0b4 	.word	0x0800e0b4

080094ec <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80094ec:	b510      	push	{r4, lr}
 80094ee:	0001      	movs	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80094f0:	6800      	ldr	r0, [r0, #0]
 80094f2:	2800      	cmp	r0, #0
 80094f4:	d007      	beq.n	8009506 <get_ldnumber+0x1a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80094f6:	0002      	movs	r2, r0
 80094f8:	7813      	ldrb	r3, [r2, #0]
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	d905      	bls.n	800950a <get_ldnumber+0x1e>
 80094fe:	2b3a      	cmp	r3, #58	; 0x3a
 8009500:	d003      	beq.n	800950a <get_ldnumber+0x1e>
 8009502:	3201      	adds	r2, #1
 8009504:	e7f8      	b.n	80094f8 <get_ldnumber+0xc>
	int vol = -1;
 8009506:	3801      	subs	r0, #1
 8009508:	e002      	b.n	8009510 <get_ldnumber+0x24>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800950a:	2b3a      	cmp	r3, #58	; 0x3a
 800950c:	d001      	beq.n	8009512 <get_ldnumber+0x26>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800950e:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8009510:	bd10      	pop	{r4, pc}
			i = *tp++ - '0';
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	7800      	ldrb	r0, [r0, #0]
 8009516:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009518:	2809      	cmp	r0, #9
 800951a:	d809      	bhi.n	8009530 <get_ldnumber+0x44>
 800951c:	429a      	cmp	r2, r3
 800951e:	d002      	beq.n	8009526 <get_ldnumber+0x3a>
	int vol = -1;
 8009520:	2001      	movs	r0, #1
 8009522:	4240      	negs	r0, r0
 8009524:	e7f4      	b.n	8009510 <get_ldnumber+0x24>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009526:	2800      	cmp	r0, #0
 8009528:	d105      	bne.n	8009536 <get_ldnumber+0x4a>
					*path = ++tt;
 800952a:	3201      	adds	r2, #1
 800952c:	600a      	str	r2, [r1, #0]
 800952e:	e7ef      	b.n	8009510 <get_ldnumber+0x24>
	int vol = -1;
 8009530:	2001      	movs	r0, #1
 8009532:	4240      	negs	r0, r0
 8009534:	e7ec      	b.n	8009510 <get_ldnumber+0x24>
 8009536:	2001      	movs	r0, #1
 8009538:	4240      	negs	r0, r0
			return vol;
 800953a:	e7e9      	b.n	8009510 <get_ldnumber+0x24>

0800953c <putc_init>:
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
 800953c:	6001      	str	r1, [r0, #0]
	pb->nchr = pb->idx = 0;
 800953e:	2300      	movs	r3, #0
 8009540:	6043      	str	r3, [r0, #4]
 8009542:	6083      	str	r3, [r0, #8]
}
 8009544:	4770      	bx	lr

08009546 <validate>:
{
 8009546:	b570      	push	{r4, r5, r6, lr}
 8009548:	0004      	movs	r4, r0
 800954a:	000d      	movs	r5, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800954c:	2800      	cmp	r0, #0
 800954e:	d018      	beq.n	8009582 <validate+0x3c>
 8009550:	6803      	ldr	r3, [r0, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d017      	beq.n	8009586 <validate+0x40>
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	2a00      	cmp	r2, #0
 800955a:	d017      	beq.n	800958c <validate+0x46>
 800955c:	8881      	ldrh	r1, [r0, #4]
 800955e:	88da      	ldrh	r2, [r3, #6]
 8009560:	4291      	cmp	r1, r2
 8009562:	d003      	beq.n	800956c <validate+0x26>
	FRESULT res = FR_INVALID_OBJECT;
 8009564:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009566:	2400      	movs	r4, #0
 8009568:	602c      	str	r4, [r5, #0]
}
 800956a:	bd70      	pop	{r4, r5, r6, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800956c:	7858      	ldrb	r0, [r3, #1]
 800956e:	f7ff fdc9 	bl	8009104 <disk_status>
 8009572:	0003      	movs	r3, r0
 8009574:	2201      	movs	r2, #1
 8009576:	0010      	movs	r0, r2
 8009578:	4018      	ands	r0, r3
 800957a:	421a      	tst	r2, r3
 800957c:	d109      	bne.n	8009592 <validate+0x4c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800957e:	6824      	ldr	r4, [r4, #0]
 8009580:	e7f2      	b.n	8009568 <validate+0x22>
	FRESULT res = FR_INVALID_OBJECT;
 8009582:	2009      	movs	r0, #9
 8009584:	e7f0      	b.n	8009568 <validate+0x22>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009586:	001c      	movs	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 8009588:	2009      	movs	r0, #9
 800958a:	e7ed      	b.n	8009568 <validate+0x22>
 800958c:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800958e:	2400      	movs	r4, #0
 8009590:	e7ea      	b.n	8009568 <validate+0x22>
	FRESULT res = FR_INVALID_OBJECT;
 8009592:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009594:	2400      	movs	r4, #0
 8009596:	e7e7      	b.n	8009568 <validate+0x22>

08009598 <sync_window>:
{
 8009598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959a:	46c6      	mov	lr, r8
 800959c:	b500      	push	{lr}
 800959e:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80095a0:	78c5      	ldrb	r5, [r0, #3]
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	d103      	bne.n	80095ae <sync_window+0x16>
}
 80095a6:	0028      	movs	r0, r5
 80095a8:	bc80      	pop	{r7}
 80095aa:	46b8      	mov	r8, r7
 80095ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80095ae:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80095b0:	2330      	movs	r3, #48	; 0x30
 80095b2:	4698      	mov	r8, r3
 80095b4:	4480      	add	r8, r0
 80095b6:	7840      	ldrb	r0, [r0, #1]
 80095b8:	3b2f      	subs	r3, #47	; 0x2f
 80095ba:	003a      	movs	r2, r7
 80095bc:	4641      	mov	r1, r8
 80095be:	f7ff fdcd 	bl	800915c <disk_write>
 80095c2:	1e05      	subs	r5, r0, #0
 80095c4:	d115      	bne.n	80095f2 <sync_window+0x5a>
			fs->wflag = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80095ca:	6a23      	ldr	r3, [r4, #32]
 80095cc:	1afb      	subs	r3, r7, r3
 80095ce:	69a2      	ldr	r2, [r4, #24]
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d2e8      	bcs.n	80095a6 <sync_window+0xe>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80095d4:	78a6      	ldrb	r6, [r4, #2]
 80095d6:	e009      	b.n	80095ec <sync_window+0x54>
					wsect += fs->fsize;
 80095d8:	69a3      	ldr	r3, [r4, #24]
 80095da:	469c      	mov	ip, r3
 80095dc:	4467      	add	r7, ip
					disk_write(fs->drv, fs->win, wsect, 1);
 80095de:	7860      	ldrb	r0, [r4, #1]
 80095e0:	2301      	movs	r3, #1
 80095e2:	003a      	movs	r2, r7
 80095e4:	4641      	mov	r1, r8
 80095e6:	f7ff fdb9 	bl	800915c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80095ea:	3e01      	subs	r6, #1
 80095ec:	2e01      	cmp	r6, #1
 80095ee:	d8f3      	bhi.n	80095d8 <sync_window+0x40>
 80095f0:	e7d9      	b.n	80095a6 <sync_window+0xe>
			res = FR_DISK_ERR;
 80095f2:	2501      	movs	r5, #1
 80095f4:	e7d7      	b.n	80095a6 <sync_window+0xe>

080095f6 <move_window>:
{
 80095f6:	b570      	push	{r4, r5, r6, lr}
 80095f8:	0004      	movs	r4, r0
 80095fa:	000d      	movs	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80095fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80095fe:	428b      	cmp	r3, r1
 8009600:	d102      	bne.n	8009608 <move_window+0x12>
	FRESULT res = FR_OK;
 8009602:	2600      	movs	r6, #0
}
 8009604:	0030      	movs	r0, r6
 8009606:	bd70      	pop	{r4, r5, r6, pc}
		res = sync_window(fs);		/* Write-back changes */
 8009608:	f7ff ffc6 	bl	8009598 <sync_window>
 800960c:	1e06      	subs	r6, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 800960e:	d1f9      	bne.n	8009604 <move_window+0xe>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009610:	0021      	movs	r1, r4
 8009612:	3130      	adds	r1, #48	; 0x30
 8009614:	7860      	ldrb	r0, [r4, #1]
 8009616:	2301      	movs	r3, #1
 8009618:	002a      	movs	r2, r5
 800961a:	f7ff fd93 	bl	8009144 <disk_read>
 800961e:	2800      	cmp	r0, #0
 8009620:	d002      	beq.n	8009628 <move_window+0x32>
				res = FR_DISK_ERR;
 8009622:	3601      	adds	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009624:	2501      	movs	r5, #1
 8009626:	426d      	negs	r5, r5
			fs->winsect = sector;
 8009628:	62e5      	str	r5, [r4, #44]	; 0x2c
 800962a:	e7eb      	b.n	8009604 <move_window+0xe>

0800962c <check_fs>:
{
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	0004      	movs	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009630:	2300      	movs	r3, #0
 8009632:	70c3      	strb	r3, [r0, #3]
 8009634:	3b01      	subs	r3, #1
 8009636:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009638:	f7ff ffdd 	bl	80095f6 <move_window>
 800963c:	1e05      	subs	r5, r0, #0
 800963e:	d124      	bne.n	800968a <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009640:	4b14      	ldr	r3, [pc, #80]	; (8009694 <check_fs+0x68>)
 8009642:	18e0      	adds	r0, r4, r3
 8009644:	f7ff fda2 	bl	800918c <ld_word>
 8009648:	4b13      	ldr	r3, [pc, #76]	; (8009698 <check_fs+0x6c>)
 800964a:	4298      	cmp	r0, r3
 800964c:	d11f      	bne.n	800968e <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800964e:	2330      	movs	r3, #48	; 0x30
 8009650:	5ce3      	ldrb	r3, [r4, r3]
 8009652:	2be9      	cmp	r3, #233	; 0xe9
 8009654:	d007      	beq.n	8009666 <check_fs+0x3a>
 8009656:	4b11      	ldr	r3, [pc, #68]	; (800969c <check_fs+0x70>)
 8009658:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800965a:	4013      	ands	r3, r2
 800965c:	4a10      	ldr	r2, [pc, #64]	; (80096a0 <check_fs+0x74>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d001      	beq.n	8009666 <check_fs+0x3a>
	return 2;
 8009662:	2502      	movs	r5, #2
 8009664:	e014      	b.n	8009690 <check_fs+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009666:	0020      	movs	r0, r4
 8009668:	3066      	adds	r0, #102	; 0x66
 800966a:	f7ff fd94 	bl	8009196 <ld_dword>
 800966e:	0200      	lsls	r0, r0, #8
 8009670:	0a00      	lsrs	r0, r0, #8
 8009672:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <check_fs+0x78>)
 8009674:	4298      	cmp	r0, r3
 8009676:	d00b      	beq.n	8009690 <check_fs+0x64>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009678:	0020      	movs	r0, r4
 800967a:	3082      	adds	r0, #130	; 0x82
 800967c:	f7ff fd8b 	bl	8009196 <ld_dword>
 8009680:	4b09      	ldr	r3, [pc, #36]	; (80096a8 <check_fs+0x7c>)
 8009682:	4298      	cmp	r0, r3
 8009684:	d004      	beq.n	8009690 <check_fs+0x64>
	return 2;
 8009686:	2502      	movs	r5, #2
 8009688:	e002      	b.n	8009690 <check_fs+0x64>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800968a:	2504      	movs	r5, #4
 800968c:	e000      	b.n	8009690 <check_fs+0x64>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800968e:	2503      	movs	r5, #3
}
 8009690:	0028      	movs	r0, r5
 8009692:	bd70      	pop	{r4, r5, r6, pc}
 8009694:	0000022e 	.word	0x0000022e
 8009698:	0000aa55 	.word	0x0000aa55
 800969c:	00ff00ff 	.word	0x00ff00ff
 80096a0:	009000eb 	.word	0x009000eb
 80096a4:	00544146 	.word	0x00544146
 80096a8:	33544146 	.word	0x33544146

080096ac <find_volume>:
{
 80096ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ae:	46de      	mov	lr, fp
 80096b0:	4657      	mov	r7, sl
 80096b2:	464e      	mov	r6, r9
 80096b4:	4645      	mov	r5, r8
 80096b6:	b5e0      	push	{r5, r6, r7, lr}
 80096b8:	b087      	sub	sp, #28
 80096ba:	000f      	movs	r7, r1
 80096bc:	0015      	movs	r5, r2
	*rfs = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 80096c2:	f7ff ff13 	bl	80094ec <get_ldnumber>
 80096c6:	1e06      	subs	r6, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 80096c8:	da00      	bge.n	80096cc <find_volume+0x20>
 80096ca:	e14f      	b.n	800996c <find_volume+0x2c0>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096cc:	0083      	lsls	r3, r0, #2
 80096ce:	4abd      	ldr	r2, [pc, #756]	; (80099c4 <find_volume+0x318>)
 80096d0:	589c      	ldr	r4, [r3, r2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	d100      	bne.n	80096d8 <find_volume+0x2c>
 80096d6:	e152      	b.n	800997e <find_volume+0x2d2>
	*rfs = fs;							/* Return pointer to the file system object */
 80096d8:	603c      	str	r4, [r7, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80096da:	2301      	movs	r3, #1
 80096dc:	439d      	bics	r5, r3
 80096de:	002f      	movs	r7, r5
	if (fs->fs_type) {					/* If the volume has been mounted */
 80096e0:	7823      	ldrb	r3, [r4, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00f      	beq.n	8009706 <find_volume+0x5a>
		stat = disk_status(fs->drv);
 80096e6:	7860      	ldrb	r0, [r4, #1]
 80096e8:	f7ff fd0c 	bl	8009104 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80096ec:	2301      	movs	r3, #1
 80096ee:	001d      	movs	r5, r3
 80096f0:	4005      	ands	r5, r0
 80096f2:	4203      	tst	r3, r0
 80096f4:	d107      	bne.n	8009706 <find_volume+0x5a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80096f6:	2f00      	cmp	r7, #0
 80096f8:	d100      	bne.n	80096fc <find_volume+0x50>
 80096fa:	e138      	b.n	800996e <find_volume+0x2c2>
 80096fc:	0743      	lsls	r3, r0, #29
 80096fe:	d400      	bmi.n	8009702 <find_volume+0x56>
 8009700:	e135      	b.n	800996e <find_volume+0x2c2>
				return FR_WRITE_PROTECTED;
 8009702:	250a      	movs	r5, #10
 8009704:	e133      	b.n	800996e <find_volume+0x2c2>
	fs->fs_type = 0;					/* Clear the file system object */
 8009706:	2300      	movs	r3, #0
 8009708:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800970a:	b2f0      	uxtb	r0, r6
 800970c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800970e:	f7ff fd05 	bl	800911c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009712:	2301      	movs	r3, #1
 8009714:	001d      	movs	r5, r3
 8009716:	4005      	ands	r5, r0
 8009718:	4203      	tst	r3, r0
 800971a:	d000      	beq.n	800971e <find_volume+0x72>
 800971c:	e131      	b.n	8009982 <find_volume+0x2d6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800971e:	2f00      	cmp	r7, #0
 8009720:	d002      	beq.n	8009728 <find_volume+0x7c>
 8009722:	0743      	lsls	r3, r0, #29
 8009724:	d500      	bpl.n	8009728 <find_volume+0x7c>
 8009726:	e12e      	b.n	8009986 <find_volume+0x2da>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009728:	2100      	movs	r1, #0
 800972a:	0020      	movs	r0, r4
 800972c:	f7ff ff7e 	bl	800962c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009730:	2802      	cmp	r0, #2
 8009732:	d100      	bne.n	8009736 <find_volume+0x8a>
 8009734:	e0bc      	b.n	80098b0 <find_volume+0x204>
	bsect = 0;
 8009736:	2600      	movs	r6, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009738:	2804      	cmp	r0, #4
 800973a:	d100      	bne.n	800973e <find_volume+0x92>
 800973c:	e125      	b.n	800998a <find_volume+0x2de>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800973e:	2801      	cmp	r0, #1
 8009740:	d900      	bls.n	8009744 <find_volume+0x98>
 8009742:	e124      	b.n	800998e <find_volume+0x2e2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009744:	0020      	movs	r0, r4
 8009746:	303b      	adds	r0, #59	; 0x3b
 8009748:	f7ff fd20 	bl	800918c <ld_word>
 800974c:	2380      	movs	r3, #128	; 0x80
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	4298      	cmp	r0, r3
 8009752:	d000      	beq.n	8009756 <find_volume+0xaa>
 8009754:	e11d      	b.n	8009992 <find_volume+0x2e6>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009756:	0020      	movs	r0, r4
 8009758:	3046      	adds	r0, #70	; 0x46
 800975a:	f7ff fd17 	bl	800918c <ld_word>
 800975e:	1e07      	subs	r7, r0, #0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009760:	d104      	bne.n	800976c <find_volume+0xc0>
 8009762:	0020      	movs	r0, r4
 8009764:	3054      	adds	r0, #84	; 0x54
 8009766:	f7ff fd16 	bl	8009196 <ld_dword>
 800976a:	0007      	movs	r7, r0
		fs->fsize = fasize;
 800976c:	61a7      	str	r7, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800976e:	2340      	movs	r3, #64	; 0x40
 8009770:	5ce2      	ldrb	r2, [r4, r3]
 8009772:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009774:	1e53      	subs	r3, r2, #1
 8009776:	b2db      	uxtb	r3, r3
 8009778:	2b01      	cmp	r3, #1
 800977a:	d900      	bls.n	800977e <find_volume+0xd2>
 800977c:	e10b      	b.n	8009996 <find_volume+0x2ea>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800977e:	437a      	muls	r2, r7
 8009780:	4690      	mov	r8, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009782:	233d      	movs	r3, #61	; 0x3d
 8009784:	5ce3      	ldrb	r3, [r4, r3]
 8009786:	469a      	mov	sl, r3
 8009788:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800978a:	2b00      	cmp	r3, #0
 800978c:	d100      	bne.n	8009790 <find_volume+0xe4>
 800978e:	e104      	b.n	800999a <find_volume+0x2ee>
 8009790:	3b01      	subs	r3, #1
 8009792:	4652      	mov	r2, sl
 8009794:	4213      	tst	r3, r2
 8009796:	d000      	beq.n	800979a <find_volume+0xee>
 8009798:	e101      	b.n	800999e <find_volume+0x2f2>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800979a:	0020      	movs	r0, r4
 800979c:	3041      	adds	r0, #65	; 0x41
 800979e:	f7ff fcf5 	bl	800918c <ld_word>
 80097a2:	4681      	mov	r9, r0
 80097a4:	0003      	movs	r3, r0
 80097a6:	9000      	str	r0, [sp, #0]
 80097a8:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80097aa:	071b      	lsls	r3, r3, #28
 80097ac:	d000      	beq.n	80097b0 <find_volume+0x104>
 80097ae:	e0f8      	b.n	80099a2 <find_volume+0x2f6>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80097b0:	0020      	movs	r0, r4
 80097b2:	3043      	adds	r0, #67	; 0x43
 80097b4:	f7ff fcea 	bl	800918c <ld_word>
 80097b8:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d104      	bne.n	80097c8 <find_volume+0x11c>
 80097be:	0020      	movs	r0, r4
 80097c0:	3050      	adds	r0, #80	; 0x50
 80097c2:	f7ff fce8 	bl	8009196 <ld_dword>
 80097c6:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80097c8:	0020      	movs	r0, r4
 80097ca:	303e      	adds	r0, #62	; 0x3e
 80097cc:	f7ff fcde 	bl	800918c <ld_word>
 80097d0:	1e03      	subs	r3, r0, #0
 80097d2:	9001      	str	r0, [sp, #4]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80097d4:	d100      	bne.n	80097d8 <find_volume+0x12c>
 80097d6:	e0e6      	b.n	80099a6 <find_volume+0x2fa>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80097d8:	4443      	add	r3, r8
 80097da:	464a      	mov	r2, r9
 80097dc:	0910      	lsrs	r0, r2, #4
 80097de:	b280      	uxth	r0, r0
 80097e0:	4699      	mov	r9, r3
 80097e2:	4481      	add	r9, r0
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80097e4:	45cb      	cmp	fp, r9
 80097e6:	d200      	bcs.n	80097ea <find_volume+0x13e>
 80097e8:	e0df      	b.n	80099aa <find_volume+0x2fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80097ea:	465b      	mov	r3, fp
 80097ec:	464a      	mov	r2, r9
 80097ee:	1a9b      	subs	r3, r3, r2
 80097f0:	469b      	mov	fp, r3
 80097f2:	4651      	mov	r1, sl
 80097f4:	0018      	movs	r0, r3
 80097f6:	f7f6 fcab 	bl	8000150 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80097fa:	45d3      	cmp	fp, sl
 80097fc:	d200      	bcs.n	8009800 <find_volume+0x154>
 80097fe:	e0d6      	b.n	80099ae <find_volume+0x302>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009800:	4b71      	ldr	r3, [pc, #452]	; (80099c8 <find_volume+0x31c>)
 8009802:	4298      	cmp	r0, r3
 8009804:	d96a      	bls.n	80098dc <find_volume+0x230>
		fmt = FS_FAT32;
 8009806:	2303      	movs	r3, #3
 8009808:	469a      	mov	sl, r3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800980a:	4b70      	ldr	r3, [pc, #448]	; (80099cc <find_volume+0x320>)
 800980c:	4298      	cmp	r0, r3
 800980e:	d801      	bhi.n	8009814 <find_volume+0x168>
 8009810:	2301      	movs	r3, #1
 8009812:	469a      	mov	sl, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009814:	1c83      	adds	r3, r0, #2
 8009816:	469b      	mov	fp, r3
 8009818:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800981a:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	1998      	adds	r0, r3, r6
 8009820:	6220      	str	r0, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8009822:	464b      	mov	r3, r9
 8009824:	18f3      	adds	r3, r6, r3
 8009826:	62a3      	str	r3, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8009828:	4653      	mov	r3, sl
 800982a:	2b03      	cmp	r3, #3
 800982c:	d059      	beq.n	80098e2 <find_volume+0x236>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800982e:	9b00      	ldr	r3, [sp, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d100      	bne.n	8009836 <find_volume+0x18a>
 8009834:	e0c1      	b.n	80099ba <find_volume+0x30e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009836:	4440      	add	r0, r8
 8009838:	6260      	str	r0, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800983a:	4653      	mov	r3, sl
 800983c:	2b02      	cmp	r3, #2
 800983e:	d061      	beq.n	8009904 <find_volume+0x258>
 8009840:	465b      	mov	r3, fp
 8009842:	005b      	lsls	r3, r3, #1
 8009844:	445b      	add	r3, fp
 8009846:	085b      	lsrs	r3, r3, #1
 8009848:	2201      	movs	r2, #1
 800984a:	4659      	mov	r1, fp
 800984c:	400a      	ands	r2, r1
 800984e:	189b      	adds	r3, r3, r2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009850:	4a5f      	ldr	r2, [pc, #380]	; (80099d0 <find_volume+0x324>)
 8009852:	4694      	mov	ip, r2
 8009854:	4463      	add	r3, ip
 8009856:	0a5b      	lsrs	r3, r3, #9
 8009858:	42bb      	cmp	r3, r7
 800985a:	d900      	bls.n	800985e <find_volume+0x1b2>
 800985c:	e0af      	b.n	80099be <find_volume+0x312>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800985e:	2301      	movs	r3, #1
 8009860:	425b      	negs	r3, r3
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
 8009866:	3381      	adds	r3, #129	; 0x81
 8009868:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800986a:	4653      	mov	r3, sl
 800986c:	2b03      	cmp	r3, #3
 800986e:	d04c      	beq.n	800990a <find_volume+0x25e>
	fs->fs_type = fmt;		/* FAT sub-type */
 8009870:	4653      	mov	r3, sl
 8009872:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009874:	4a57      	ldr	r2, [pc, #348]	; (80099d4 <find_volume+0x328>)
 8009876:	8813      	ldrh	r3, [r2, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	b29b      	uxth	r3, r3
 800987c:	8013      	strh	r3, [r2, #0]
 800987e:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 8009880:	0020      	movs	r0, r4
 8009882:	f7ff fd67 	bl	8009354 <clear_lock>
	return FR_OK;
 8009886:	e072      	b.n	800996e <find_volume+0x2c2>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009888:	2000      	movs	r0, #0
 800988a:	00b3      	lsls	r3, r6, #2
 800988c:	aa02      	add	r2, sp, #8
 800988e:	5098      	str	r0, [r3, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009890:	3601      	adds	r6, #1
 8009892:	2e03      	cmp	r6, #3
 8009894:	d80e      	bhi.n	80098b4 <find_volume+0x208>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009896:	0023      	movs	r3, r4
 8009898:	3330      	adds	r3, #48	; 0x30
 800989a:	0132      	lsls	r2, r6, #4
 800989c:	32bf      	adds	r2, #191	; 0xbf
 800989e:	32ff      	adds	r2, #255	; 0xff
 80098a0:	1898      	adds	r0, r3, r2
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80098a2:	7903      	ldrb	r3, [r0, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0ef      	beq.n	8009888 <find_volume+0x1dc>
 80098a8:	3008      	adds	r0, #8
 80098aa:	f7ff fc74 	bl	8009196 <ld_dword>
 80098ae:	e7ec      	b.n	800988a <find_volume+0x1de>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80098b0:	2600      	movs	r6, #0
 80098b2:	e7ee      	b.n	8009892 <find_volume+0x1e6>
 80098b4:	2700      	movs	r7, #0
 80098b6:	e00a      	b.n	80098ce <find_volume+0x222>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80098b8:	0031      	movs	r1, r6
 80098ba:	0020      	movs	r0, r4
 80098bc:	f7ff feb6 	bl	800962c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80098c0:	2801      	cmp	r0, #1
 80098c2:	d800      	bhi.n	80098c6 <find_volume+0x21a>
 80098c4:	e738      	b.n	8009738 <find_volume+0x8c>
 80098c6:	3701      	adds	r7, #1
 80098c8:	2f03      	cmp	r7, #3
 80098ca:	d900      	bls.n	80098ce <find_volume+0x222>
 80098cc:	e734      	b.n	8009738 <find_volume+0x8c>
			bsect = br[i];
 80098ce:	00bb      	lsls	r3, r7, #2
 80098d0:	aa02      	add	r2, sp, #8
 80098d2:	589e      	ldr	r6, [r3, r2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	d1ef      	bne.n	80098b8 <find_volume+0x20c>
 80098d8:	2003      	movs	r0, #3
 80098da:	e7f4      	b.n	80098c6 <find_volume+0x21a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80098dc:	2302      	movs	r3, #2
 80098de:	469a      	mov	sl, r3
 80098e0:	e793      	b.n	800980a <find_volume+0x15e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80098e2:	0020      	movs	r0, r4
 80098e4:	305a      	adds	r0, #90	; 0x5a
 80098e6:	f7ff fc51 	bl	800918c <ld_word>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	d161      	bne.n	80099b2 <find_volume+0x306>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80098ee:	9b00      	ldr	r3, [sp, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d160      	bne.n	80099b6 <find_volume+0x30a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80098f4:	0020      	movs	r0, r4
 80098f6:	305c      	adds	r0, #92	; 0x5c
 80098f8:	f7ff fc4d 	bl	8009196 <ld_dword>
 80098fc:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80098fe:	465b      	mov	r3, fp
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	e7a5      	b.n	8009850 <find_volume+0x1a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009904:	465b      	mov	r3, fp
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	e7a2      	b.n	8009850 <find_volume+0x1a4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800990a:	0020      	movs	r0, r4
 800990c:	3060      	adds	r0, #96	; 0x60
 800990e:	f7ff fc3d 	bl	800918c <ld_word>
 8009912:	2801      	cmp	r0, #1
 8009914:	d1ac      	bne.n	8009870 <find_volume+0x1c4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009916:	1c71      	adds	r1, r6, #1
 8009918:	0020      	movs	r0, r4
 800991a:	f7ff fe6c 	bl	80095f6 <move_window>
 800991e:	2800      	cmp	r0, #0
 8009920:	d1a6      	bne.n	8009870 <find_volume+0x1c4>
			fs->fsi_flag = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009926:	4b2c      	ldr	r3, [pc, #176]	; (80099d8 <find_volume+0x32c>)
 8009928:	18e0      	adds	r0, r4, r3
 800992a:	f7ff fc2f 	bl	800918c <ld_word>
 800992e:	4b2b      	ldr	r3, [pc, #172]	; (80099dc <find_volume+0x330>)
 8009930:	4298      	cmp	r0, r3
 8009932:	d19d      	bne.n	8009870 <find_volume+0x1c4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009934:	0020      	movs	r0, r4
 8009936:	3030      	adds	r0, #48	; 0x30
 8009938:	f7ff fc2d 	bl	8009196 <ld_dword>
 800993c:	4b28      	ldr	r3, [pc, #160]	; (80099e0 <find_volume+0x334>)
 800993e:	4298      	cmp	r0, r3
 8009940:	d196      	bne.n	8009870 <find_volume+0x1c4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009942:	2385      	movs	r3, #133	; 0x85
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	18e0      	adds	r0, r4, r3
 8009948:	f7ff fc25 	bl	8009196 <ld_dword>
 800994c:	4b25      	ldr	r3, [pc, #148]	; (80099e4 <find_volume+0x338>)
 800994e:	4298      	cmp	r0, r3
 8009950:	d18e      	bne.n	8009870 <find_volume+0x1c4>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009952:	2386      	movs	r3, #134	; 0x86
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	18e0      	adds	r0, r4, r3
 8009958:	f7ff fc1d 	bl	8009196 <ld_dword>
 800995c:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800995e:	2387      	movs	r3, #135	; 0x87
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	18e0      	adds	r0, r4, r3
 8009964:	f7ff fc17 	bl	8009196 <ld_dword>
 8009968:	60e0      	str	r0, [r4, #12]
 800996a:	e781      	b.n	8009870 <find_volume+0x1c4>
	if (vol < 0) return FR_INVALID_DRIVE;
 800996c:	250b      	movs	r5, #11
}
 800996e:	0028      	movs	r0, r5
 8009970:	b007      	add	sp, #28
 8009972:	bcf0      	pop	{r4, r5, r6, r7}
 8009974:	46bb      	mov	fp, r7
 8009976:	46b2      	mov	sl, r6
 8009978:	46a9      	mov	r9, r5
 800997a:	46a0      	mov	r8, r4
 800997c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800997e:	250c      	movs	r5, #12
 8009980:	e7f5      	b.n	800996e <find_volume+0x2c2>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009982:	2503      	movs	r5, #3
 8009984:	e7f3      	b.n	800996e <find_volume+0x2c2>
		return FR_WRITE_PROTECTED;
 8009986:	250a      	movs	r5, #10
 8009988:	e7f1      	b.n	800996e <find_volume+0x2c2>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800998a:	2501      	movs	r5, #1
 800998c:	e7ef      	b.n	800996e <find_volume+0x2c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800998e:	250d      	movs	r5, #13
 8009990:	e7ed      	b.n	800996e <find_volume+0x2c2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009992:	250d      	movs	r5, #13
 8009994:	e7eb      	b.n	800996e <find_volume+0x2c2>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009996:	250d      	movs	r5, #13
 8009998:	e7e9      	b.n	800996e <find_volume+0x2c2>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800999a:	250d      	movs	r5, #13
 800999c:	e7e7      	b.n	800996e <find_volume+0x2c2>
 800999e:	250d      	movs	r5, #13
 80099a0:	e7e5      	b.n	800996e <find_volume+0x2c2>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80099a2:	250d      	movs	r5, #13
 80099a4:	e7e3      	b.n	800996e <find_volume+0x2c2>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80099a6:	250d      	movs	r5, #13
 80099a8:	e7e1      	b.n	800996e <find_volume+0x2c2>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80099aa:	250d      	movs	r5, #13
 80099ac:	e7df      	b.n	800996e <find_volume+0x2c2>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80099ae:	250d      	movs	r5, #13
 80099b0:	e7dd      	b.n	800996e <find_volume+0x2c2>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80099b2:	250d      	movs	r5, #13
 80099b4:	e7db      	b.n	800996e <find_volume+0x2c2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80099b6:	250d      	movs	r5, #13
 80099b8:	e7d9      	b.n	800996e <find_volume+0x2c2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80099ba:	250d      	movs	r5, #13
 80099bc:	e7d7      	b.n	800996e <find_volume+0x2c2>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80099be:	250d      	movs	r5, #13
 80099c0:	e7d5      	b.n	800996e <find_volume+0x2c2>
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	2000112c 	.word	0x2000112c
 80099c8:	0000fff5 	.word	0x0000fff5
 80099cc:	00000ff5 	.word	0x00000ff5
 80099d0:	000001ff 	.word	0x000001ff
 80099d4:	20001150 	.word	0x20001150
 80099d8:	0000022e 	.word	0x0000022e
 80099dc:	0000aa55 	.word	0x0000aa55
 80099e0:	41615252 	.word	0x41615252
 80099e4:	61417272 	.word	0x61417272

080099e8 <put_fat>:
{
 80099e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ea:	46d6      	mov	lr, sl
 80099ec:	464f      	mov	r7, r9
 80099ee:	4646      	mov	r6, r8
 80099f0:	b5c0      	push	{r6, r7, lr}
 80099f2:	0006      	movs	r6, r0
 80099f4:	000c      	movs	r4, r1
 80099f6:	0017      	movs	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80099f8:	2901      	cmp	r1, #1
 80099fa:	d800      	bhi.n	80099fe <put_fat+0x16>
 80099fc:	e092      	b.n	8009b24 <put_fat+0x13c>
 80099fe:	6943      	ldr	r3, [r0, #20]
 8009a00:	428b      	cmp	r3, r1
 8009a02:	d800      	bhi.n	8009a06 <put_fat+0x1e>
 8009a04:	e090      	b.n	8009b28 <put_fat+0x140>
		switch (fs->fs_type) {
 8009a06:	7803      	ldrb	r3, [r0, #0]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d058      	beq.n	8009abe <put_fat+0xd6>
 8009a0c:	2b03      	cmp	r3, #3
 8009a0e:	d100      	bne.n	8009a12 <put_fat+0x2a>
 8009a10:	e06a      	b.n	8009ae8 <put_fat+0x100>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d006      	beq.n	8009a24 <put_fat+0x3c>
 8009a16:	2502      	movs	r5, #2
}
 8009a18:	0028      	movs	r0, r5
 8009a1a:	bce0      	pop	{r5, r6, r7}
 8009a1c:	46ba      	mov	sl, r7
 8009a1e:	46b1      	mov	r9, r6
 8009a20:	46a8      	mov	r8, r5
 8009a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
 8009a24:	084b      	lsrs	r3, r1, #1
 8009a26:	4698      	mov	r8, r3
 8009a28:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a2a:	4643      	mov	r3, r8
 8009a2c:	0a59      	lsrs	r1, r3, #9
 8009a2e:	6a03      	ldr	r3, [r0, #32]
 8009a30:	469c      	mov	ip, r3
 8009a32:	4461      	add	r1, ip
 8009a34:	f7ff fddf 	bl	80095f6 <move_window>
 8009a38:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8009a3a:	d1ed      	bne.n	8009a18 <put_fat+0x30>
			p = fs->win + bc++ % SS(fs);
 8009a3c:	2330      	movs	r3, #48	; 0x30
 8009a3e:	469a      	mov	sl, r3
 8009a40:	44b2      	add	sl, r6
 8009a42:	3b2f      	subs	r3, #47	; 0x2f
 8009a44:	4443      	add	r3, r8
 8009a46:	4699      	mov	r9, r3
 8009a48:	4643      	mov	r3, r8
 8009a4a:	05db      	lsls	r3, r3, #23
 8009a4c:	0ddb      	lsrs	r3, r3, #23
 8009a4e:	4453      	add	r3, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a50:	2201      	movs	r2, #1
 8009a52:	0011      	movs	r1, r2
 8009a54:	4021      	ands	r1, r4
 8009a56:	4688      	mov	r8, r1
 8009a58:	4222      	tst	r2, r4
 8009a5a:	d023      	beq.n	8009aa4 <put_fat+0xbc>
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	5659      	ldrsb	r1, [r3, r1]
 8009a60:	320e      	adds	r2, #14
 8009a62:	400a      	ands	r2, r1
 8009a64:	0139      	lsls	r1, r7, #4
 8009a66:	20ff      	movs	r0, #255	; 0xff
 8009a68:	0100      	lsls	r0, r0, #4
 8009a6a:	4001      	ands	r1, r0
 8009a6c:	430a      	orrs	r2, r1
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009a72:	2301      	movs	r3, #1
 8009a74:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a76:	464b      	mov	r3, r9
 8009a78:	0a59      	lsrs	r1, r3, #9
 8009a7a:	6a33      	ldr	r3, [r6, #32]
 8009a7c:	469c      	mov	ip, r3
 8009a7e:	4461      	add	r1, ip
 8009a80:	0030      	movs	r0, r6
 8009a82:	f7ff fdb8 	bl	80095f6 <move_window>
 8009a86:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8009a88:	d1c6      	bne.n	8009a18 <put_fat+0x30>
			p = fs->win + bc % SS(fs);
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	05db      	lsls	r3, r3, #23
 8009a8e:	0ddb      	lsrs	r3, r3, #23
 8009a90:	4453      	add	r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009a92:	4642      	mov	r2, r8
 8009a94:	2a00      	cmp	r2, #0
 8009a96:	d007      	beq.n	8009aa8 <put_fat+0xc0>
 8009a98:	093a      	lsrs	r2, r7, #4
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	70f3      	strb	r3, [r6, #3]
			break;
 8009aa2:	e7b9      	b.n	8009a18 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009aa4:	b2fa      	uxtb	r2, r7
 8009aa6:	e7e3      	b.n	8009a70 <put_fat+0x88>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	569a      	ldrsb	r2, [r3, r2]
 8009aac:	210f      	movs	r1, #15
 8009aae:	438a      	bics	r2, r1
 8009ab0:	0a3f      	lsrs	r7, r7, #8
 8009ab2:	b279      	sxtb	r1, r7
 8009ab4:	270f      	movs	r7, #15
 8009ab6:	400f      	ands	r7, r1
 8009ab8:	433a      	orrs	r2, r7
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	e7ee      	b.n	8009a9c <put_fat+0xb4>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009abe:	0a09      	lsrs	r1, r1, #8
 8009ac0:	6a03      	ldr	r3, [r0, #32]
 8009ac2:	469c      	mov	ip, r3
 8009ac4:	4461      	add	r1, ip
 8009ac6:	f7ff fd96 	bl	80095f6 <move_window>
 8009aca:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8009acc:	d1a4      	bne.n	8009a18 <put_fat+0x30>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009ace:	0030      	movs	r0, r6
 8009ad0:	3030      	adds	r0, #48	; 0x30
 8009ad2:	0064      	lsls	r4, r4, #1
 8009ad4:	21ff      	movs	r1, #255	; 0xff
 8009ad6:	0049      	lsls	r1, r1, #1
 8009ad8:	400c      	ands	r4, r1
 8009ada:	b2b9      	uxth	r1, r7
 8009adc:	1900      	adds	r0, r0, r4
 8009ade:	f7ff fb66 	bl	80091ae <st_word>
			fs->wflag = 1;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	70f3      	strb	r3, [r6, #3]
			break;
 8009ae6:	e797      	b.n	8009a18 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009ae8:	09c9      	lsrs	r1, r1, #7
 8009aea:	6a03      	ldr	r3, [r0, #32]
 8009aec:	469c      	mov	ip, r3
 8009aee:	4461      	add	r1, ip
 8009af0:	f7ff fd81 	bl	80095f6 <move_window>
 8009af4:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
 8009af6:	d000      	beq.n	8009afa <put_fat+0x112>
 8009af8:	e78e      	b.n	8009a18 <put_fat+0x30>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009afa:	013f      	lsls	r7, r7, #4
 8009afc:	093f      	lsrs	r7, r7, #4
 8009afe:	0033      	movs	r3, r6
 8009b00:	3330      	adds	r3, #48	; 0x30
 8009b02:	00a4      	lsls	r4, r4, #2
 8009b04:	21fe      	movs	r1, #254	; 0xfe
 8009b06:	0049      	lsls	r1, r1, #1
 8009b08:	400c      	ands	r4, r1
 8009b0a:	191c      	adds	r4, r3, r4
 8009b0c:	0020      	movs	r0, r4
 8009b0e:	f7ff fb42 	bl	8009196 <ld_dword>
 8009b12:	0f01      	lsrs	r1, r0, #28
 8009b14:	0709      	lsls	r1, r1, #28
 8009b16:	4339      	orrs	r1, r7
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009b18:	0020      	movs	r0, r4
 8009b1a:	f7ff fb4c 	bl	80091b6 <st_dword>
			fs->wflag = 1;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	70f3      	strb	r3, [r6, #3]
			break;
 8009b22:	e779      	b.n	8009a18 <put_fat+0x30>
	FRESULT res = FR_INT_ERR;
 8009b24:	2502      	movs	r5, #2
 8009b26:	e777      	b.n	8009a18 <put_fat+0x30>
 8009b28:	2502      	movs	r5, #2
 8009b2a:	e775      	b.n	8009a18 <put_fat+0x30>

08009b2c <get_fat>:
{
 8009b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2e:	000c      	movs	r4, r1
	FATFS *fs = obj->fs;
 8009b30:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009b32:	2901      	cmp	r1, #1
 8009b34:	d95e      	bls.n	8009bf4 <get_fat+0xc8>
 8009b36:	696b      	ldr	r3, [r5, #20]
 8009b38:	428b      	cmp	r3, r1
 8009b3a:	d95d      	bls.n	8009bf8 <get_fat+0xcc>
		switch (fs->fs_type) {
 8009b3c:	782b      	ldrb	r3, [r5, #0]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d030      	beq.n	8009ba4 <get_fat+0x78>
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d041      	beq.n	8009bca <get_fat+0x9e>
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d001      	beq.n	8009b4e <get_fat+0x22>
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	e053      	b.n	8009bf6 <get_fat+0xca>
			bc = (UINT)clst; bc += bc / 2;
 8009b4e:	084e      	lsrs	r6, r1, #1
 8009b50:	1876      	adds	r6, r6, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b52:	0a71      	lsrs	r1, r6, #9
 8009b54:	6a2b      	ldr	r3, [r5, #32]
 8009b56:	469c      	mov	ip, r3
 8009b58:	4461      	add	r1, ip
 8009b5a:	0028      	movs	r0, r5
 8009b5c:	f7ff fd4b 	bl	80095f6 <move_window>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d002      	beq.n	8009b6a <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009b64:	2001      	movs	r0, #1
 8009b66:	4240      	negs	r0, r0
 8009b68:	e045      	b.n	8009bf6 <get_fat+0xca>
			wc = fs->win[bc++ % SS(fs)];
 8009b6a:	1c77      	adds	r7, r6, #1
 8009b6c:	05f3      	lsls	r3, r6, #23
 8009b6e:	0ddb      	lsrs	r3, r3, #23
 8009b70:	18eb      	adds	r3, r5, r3
 8009b72:	3330      	adds	r3, #48	; 0x30
 8009b74:	781e      	ldrb	r6, [r3, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009b76:	0a79      	lsrs	r1, r7, #9
 8009b78:	6a2b      	ldr	r3, [r5, #32]
 8009b7a:	469c      	mov	ip, r3
 8009b7c:	4461      	add	r1, ip
 8009b7e:	0028      	movs	r0, r5
 8009b80:	f7ff fd39 	bl	80095f6 <move_window>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d139      	bne.n	8009bfc <get_fat+0xd0>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009b88:	05ff      	lsls	r7, r7, #23
 8009b8a:	0dff      	lsrs	r7, r7, #23
 8009b8c:	19ed      	adds	r5, r5, r7
 8009b8e:	3530      	adds	r5, #48	; 0x30
 8009b90:	7828      	ldrb	r0, [r5, #0]
 8009b92:	0200      	lsls	r0, r0, #8
 8009b94:	4330      	orrs	r0, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009b96:	07e3      	lsls	r3, r4, #31
 8009b98:	d501      	bpl.n	8009b9e <get_fat+0x72>
 8009b9a:	0900      	lsrs	r0, r0, #4
 8009b9c:	e02b      	b.n	8009bf6 <get_fat+0xca>
 8009b9e:	0500      	lsls	r0, r0, #20
 8009ba0:	0d00      	lsrs	r0, r0, #20
 8009ba2:	e028      	b.n	8009bf6 <get_fat+0xca>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ba4:	0a09      	lsrs	r1, r1, #8
 8009ba6:	6a2b      	ldr	r3, [r5, #32]
 8009ba8:	469c      	mov	ip, r3
 8009baa:	4461      	add	r1, ip
 8009bac:	0028      	movs	r0, r5
 8009bae:	f7ff fd22 	bl	80095f6 <move_window>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d125      	bne.n	8009c02 <get_fat+0xd6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009bb6:	0028      	movs	r0, r5
 8009bb8:	3030      	adds	r0, #48	; 0x30
 8009bba:	0064      	lsls	r4, r4, #1
 8009bbc:	25ff      	movs	r5, #255	; 0xff
 8009bbe:	006d      	lsls	r5, r5, #1
 8009bc0:	402c      	ands	r4, r5
 8009bc2:	1900      	adds	r0, r0, r4
 8009bc4:	f7ff fae2 	bl	800918c <ld_word>
			break;
 8009bc8:	e015      	b.n	8009bf6 <get_fat+0xca>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009bca:	09c9      	lsrs	r1, r1, #7
 8009bcc:	6a2b      	ldr	r3, [r5, #32]
 8009bce:	469c      	mov	ip, r3
 8009bd0:	4461      	add	r1, ip
 8009bd2:	0028      	movs	r0, r5
 8009bd4:	f7ff fd0f 	bl	80095f6 <move_window>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d115      	bne.n	8009c08 <get_fat+0xdc>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009bdc:	0028      	movs	r0, r5
 8009bde:	3030      	adds	r0, #48	; 0x30
 8009be0:	00a4      	lsls	r4, r4, #2
 8009be2:	21fe      	movs	r1, #254	; 0xfe
 8009be4:	0049      	lsls	r1, r1, #1
 8009be6:	400c      	ands	r4, r1
 8009be8:	1900      	adds	r0, r0, r4
 8009bea:	f7ff fad4 	bl	8009196 <ld_dword>
 8009bee:	0100      	lsls	r0, r0, #4
 8009bf0:	0900      	lsrs	r0, r0, #4
			break;
 8009bf2:	e000      	b.n	8009bf6 <get_fat+0xca>
		val = 1;	/* Internal error */
 8009bf4:	2001      	movs	r0, #1
}
 8009bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e7fc      	b.n	8009bf6 <get_fat+0xca>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	4240      	negs	r0, r0
 8009c00:	e7f9      	b.n	8009bf6 <get_fat+0xca>
 8009c02:	2001      	movs	r0, #1
 8009c04:	4240      	negs	r0, r0
 8009c06:	e7f6      	b.n	8009bf6 <get_fat+0xca>
 8009c08:	2001      	movs	r0, #1
 8009c0a:	4240      	negs	r0, r0
	return val;
 8009c0c:	e7f3      	b.n	8009bf6 <get_fat+0xca>

08009c0e <dir_sdi>:
{
 8009c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c10:	46c6      	mov	lr, r8
 8009c12:	b500      	push	{lr}
 8009c14:	0005      	movs	r5, r0
 8009c16:	000f      	movs	r7, r1
	FATFS *fs = dp->obj.fs;
 8009c18:	6803      	ldr	r3, [r0, #0]
 8009c1a:	4698      	mov	r8, r3
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	039b      	lsls	r3, r3, #14
 8009c20:	4299      	cmp	r1, r3
 8009c22:	d240      	bcs.n	8009ca6 <dir_sdi+0x98>
 8009c24:	06cb      	lsls	r3, r1, #27
 8009c26:	d140      	bne.n	8009caa <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
 8009c28:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009c2a:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009c2c:	2c00      	cmp	r4, #0
 8009c2e:	d105      	bne.n	8009c3c <dir_sdi+0x2e>
 8009c30:	4643      	mov	r3, r8
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d901      	bls.n	8009c3c <dir_sdi+0x2e>
		clst = fs->dirbase;
 8009c38:	4643      	mov	r3, r8
 8009c3a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009c3c:	2c00      	cmp	r4, #0
 8009c3e:	d118      	bne.n	8009c72 <dir_sdi+0x64>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009c40:	097b      	lsrs	r3, r7, #5
 8009c42:	4642      	mov	r2, r8
 8009c44:	8912      	ldrh	r2, [r2, #8]
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d231      	bcs.n	8009cae <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
 8009c4a:	4643      	mov	r3, r8
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c4e:	61eb      	str	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8009c50:	61ac      	str	r4, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009c52:	69eb      	ldr	r3, [r5, #28]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d032      	beq.n	8009cbe <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009c58:	0a7a      	lsrs	r2, r7, #9
 8009c5a:	189b      	adds	r3, r3, r2
 8009c5c:	61eb      	str	r3, [r5, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009c5e:	4642      	mov	r2, r8
 8009c60:	3230      	adds	r2, #48	; 0x30
 8009c62:	05fb      	lsls	r3, r7, #23
 8009c64:	0ddb      	lsrs	r3, r3, #23
 8009c66:	18d3      	adds	r3, r2, r3
 8009c68:	622b      	str	r3, [r5, #32]
	return FR_OK;
 8009c6a:	2000      	movs	r0, #0
}
 8009c6c:	bc80      	pop	{r7}
 8009c6e:	46b8      	mov	r8, r7
 8009c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009c72:	4643      	mov	r3, r8
 8009c74:	895e      	ldrh	r6, [r3, #10]
 8009c76:	0276      	lsls	r6, r6, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c78:	42b7      	cmp	r7, r6
 8009c7a:	d30e      	bcc.n	8009c9a <dir_sdi+0x8c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009c7c:	0021      	movs	r1, r4
 8009c7e:	0028      	movs	r0, r5
 8009c80:	f7ff ff54 	bl	8009b2c <get_fat>
 8009c84:	0004      	movs	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	d013      	beq.n	8009cb2 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009c8a:	2801      	cmp	r0, #1
 8009c8c:	d913      	bls.n	8009cb6 <dir_sdi+0xa8>
 8009c8e:	4643      	mov	r3, r8
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	4283      	cmp	r3, r0
 8009c94:	d911      	bls.n	8009cba <dir_sdi+0xac>
			ofs -= csz;
 8009c96:	1bbf      	subs	r7, r7, r6
 8009c98:	e7ee      	b.n	8009c78 <dir_sdi+0x6a>
		dp->sect = clust2sect(fs, clst);
 8009c9a:	0021      	movs	r1, r4
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	f7ff fb6b 	bl	8009378 <clust2sect>
 8009ca2:	61e8      	str	r0, [r5, #28]
 8009ca4:	e7d4      	b.n	8009c50 <dir_sdi+0x42>
		return FR_INT_ERR;
 8009ca6:	2002      	movs	r0, #2
 8009ca8:	e7e0      	b.n	8009c6c <dir_sdi+0x5e>
 8009caa:	2002      	movs	r0, #2
 8009cac:	e7de      	b.n	8009c6c <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009cae:	2002      	movs	r0, #2
 8009cb0:	e7dc      	b.n	8009c6c <dir_sdi+0x5e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	e7da      	b.n	8009c6c <dir_sdi+0x5e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009cb6:	2002      	movs	r0, #2
 8009cb8:	e7d8      	b.n	8009c6c <dir_sdi+0x5e>
 8009cba:	2002      	movs	r0, #2
 8009cbc:	e7d6      	b.n	8009c6c <dir_sdi+0x5e>
	if (!dp->sect) return FR_INT_ERR;
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	e7d4      	b.n	8009c6c <dir_sdi+0x5e>

08009cc2 <create_chain>:
{
 8009cc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc4:	46c6      	mov	lr, r8
 8009cc6:	b500      	push	{lr}
 8009cc8:	0006      	movs	r6, r0
 8009cca:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 8009ccc:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d107      	bne.n	8009ce2 <create_chain+0x20>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009cd2:	68fd      	ldr	r5, [r7, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009cd4:	2d00      	cmp	r5, #0
 8009cd6:	d00f      	beq.n	8009cf8 <create_chain+0x36>
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	42ab      	cmp	r3, r5
 8009cdc:	d80d      	bhi.n	8009cfa <create_chain+0x38>
 8009cde:	2501      	movs	r5, #1
 8009ce0:	e00b      	b.n	8009cfa <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009ce2:	f7ff ff23 	bl	8009b2c <get_fat>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009ce6:	2801      	cmp	r0, #1
 8009ce8:	d944      	bls.n	8009d74 <create_chain+0xb2>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	d047      	beq.n	8009d7e <create_chain+0xbc>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	4283      	cmp	r3, r0
 8009cf2:	d844      	bhi.n	8009d7e <create_chain+0xbc>
		scl = clst;
 8009cf4:	4645      	mov	r5, r8
 8009cf6:	e000      	b.n	8009cfa <create_chain+0x38>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009cf8:	2501      	movs	r5, #1
		ncl = scl;	/* Start cluster */
 8009cfa:	002c      	movs	r4, r5
 8009cfc:	e00b      	b.n	8009d16 <create_chain+0x54>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009cfe:	0021      	movs	r1, r4
 8009d00:	0030      	movs	r0, r6
 8009d02:	f7ff ff13 	bl	8009b2c <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d00d      	beq.n	8009d26 <create_chain+0x64>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009d0a:	2801      	cmp	r0, #1
 8009d0c:	d037      	beq.n	8009d7e <create_chain+0xbc>
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	d035      	beq.n	8009d7e <create_chain+0xbc>
			if (ncl == scl) return 0;		/* No free cluster */
 8009d12:	42ac      	cmp	r4, r5
 8009d14:	d032      	beq.n	8009d7c <create_chain+0xba>
			ncl++;							/* Next cluster */
 8009d16:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	d8ef      	bhi.n	8009cfe <create_chain+0x3c>
				if (ncl > scl) return 0;	/* No free cluster */
 8009d1e:	2d01      	cmp	r5, #1
 8009d20:	d92a      	bls.n	8009d78 <create_chain+0xb6>
				ncl = 2;
 8009d22:	2402      	movs	r4, #2
 8009d24:	e7eb      	b.n	8009cfe <create_chain+0x3c>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009d26:	2201      	movs	r2, #1
 8009d28:	4252      	negs	r2, r2
 8009d2a:	0021      	movs	r1, r4
 8009d2c:	0038      	movs	r0, r7
 8009d2e:	f7ff fe5b 	bl	80099e8 <put_fat>
		if (res == FR_OK && clst != 0) {
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d102      	bne.n	8009d3c <create_chain+0x7a>
 8009d36:	4643      	mov	r3, r8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10f      	bne.n	8009d5c <create_chain+0x9a>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d113      	bne.n	8009d68 <create_chain+0xa6>
		fs->last_clst = ncl;
 8009d40:	60fc      	str	r4, [r7, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	3b02      	subs	r3, #2
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d801      	bhi.n	8009d50 <create_chain+0x8e>
 8009d4c:	3a01      	subs	r2, #1
 8009d4e:	613a      	str	r2, [r7, #16]
		fs->fsi_flag |= 1;
 8009d50:	793b      	ldrb	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	4313      	orrs	r3, r2
 8009d56:	713b      	strb	r3, [r7, #4]
 8009d58:	0020      	movs	r0, r4
 8009d5a:	e010      	b.n	8009d7e <create_chain+0xbc>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d5c:	0022      	movs	r2, r4
 8009d5e:	4641      	mov	r1, r8
 8009d60:	0038      	movs	r0, r7
 8009d62:	f7ff fe41 	bl	80099e8 <put_fat>
 8009d66:	e7e9      	b.n	8009d3c <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009d68:	2801      	cmp	r0, #1
 8009d6a:	d001      	beq.n	8009d70 <create_chain+0xae>
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	e006      	b.n	8009d7e <create_chain+0xbc>
 8009d70:	3802      	subs	r0, #2
 8009d72:	e004      	b.n	8009d7e <create_chain+0xbc>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009d74:	2001      	movs	r0, #1
 8009d76:	e002      	b.n	8009d7e <create_chain+0xbc>
				if (ncl > scl) return 0;	/* No free cluster */
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e000      	b.n	8009d7e <create_chain+0xbc>
			if (ncl == scl) return 0;		/* No free cluster */
 8009d7c:	2000      	movs	r0, #0
}
 8009d7e:	bc80      	pop	{r7}
 8009d80:	46b8      	mov	r8, r7
 8009d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d84 <remove_chain>:
{
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	0006      	movs	r6, r0
 8009d88:	000c      	movs	r4, r1
 8009d8a:	0011      	movs	r1, r2
	FATFS *fs = obj->fs;
 8009d8c:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d8e:	2c01      	cmp	r4, #1
 8009d90:	d92c      	bls.n	8009dec <remove_chain+0x68>
 8009d92:	696b      	ldr	r3, [r5, #20]
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	d92b      	bls.n	8009df0 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009d98:	2a00      	cmp	r2, #0
 8009d9a:	d009      	beq.n	8009db0 <remove_chain+0x2c>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	4252      	negs	r2, r2
 8009da0:	0028      	movs	r0, r5
 8009da2:	f7ff fe21 	bl	80099e8 <put_fat>
		if (res != FR_OK) return res;
 8009da6:	2800      	cmp	r0, #0
 8009da8:	d002      	beq.n	8009db0 <remove_chain+0x2c>
 8009daa:	e022      	b.n	8009df2 <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009dac:	42a2      	cmp	r2, r4
 8009dae:	d920      	bls.n	8009df2 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009db0:	0027      	movs	r7, r4
 8009db2:	0021      	movs	r1, r4
 8009db4:	0030      	movs	r0, r6
 8009db6:	f7ff feb9 	bl	8009b2c <get_fat>
 8009dba:	1e04      	subs	r4, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
 8009dbc:	d01a      	beq.n	8009df4 <remove_chain+0x70>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009dbe:	2801      	cmp	r0, #1
 8009dc0:	d01a      	beq.n	8009df8 <remove_chain+0x74>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d01a      	beq.n	8009dfc <remove_chain+0x78>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	0039      	movs	r1, r7
 8009dca:	0028      	movs	r0, r5
 8009dcc:	f7ff fe0c 	bl	80099e8 <put_fat>
			if (res != FR_OK) return res;
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d10e      	bne.n	8009df2 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009dd4:	692b      	ldr	r3, [r5, #16]
 8009dd6:	696a      	ldr	r2, [r5, #20]
 8009dd8:	1e91      	subs	r1, r2, #2
 8009dda:	428b      	cmp	r3, r1
 8009ddc:	d2e6      	bcs.n	8009dac <remove_chain+0x28>
			fs->free_clst++;
 8009dde:	3301      	adds	r3, #1
 8009de0:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8009de2:	792b      	ldrb	r3, [r5, #4]
 8009de4:	2101      	movs	r1, #1
 8009de6:	430b      	orrs	r3, r1
 8009de8:	712b      	strb	r3, [r5, #4]
 8009dea:	e7df      	b.n	8009dac <remove_chain+0x28>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009dec:	2002      	movs	r0, #2
 8009dee:	e000      	b.n	8009df2 <remove_chain+0x6e>
 8009df0:	2002      	movs	r0, #2
}
 8009df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 8009df4:	2000      	movs	r0, #0
 8009df6:	e7fc      	b.n	8009df2 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009df8:	2002      	movs	r0, #2
 8009dfa:	e7fa      	b.n	8009df2 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009dfc:	2001      	movs	r0, #1
 8009dfe:	e7f8      	b.n	8009df2 <remove_chain+0x6e>

08009e00 <dir_next>:
{
 8009e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e02:	46d6      	mov	lr, sl
 8009e04:	464f      	mov	r7, r9
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	0004      	movs	r4, r0
 8009e0c:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
 8009e0e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009e10:	6945      	ldr	r5, [r0, #20]
 8009e12:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009e14:	69c3      	ldr	r3, [r0, #28]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d100      	bne.n	8009e1c <dir_next+0x1c>
 8009e1a:	e074      	b.n	8009f06 <dir_next+0x106>
 8009e1c:	2280      	movs	r2, #128	; 0x80
 8009e1e:	0392      	lsls	r2, r2, #14
 8009e20:	4295      	cmp	r5, r2
 8009e22:	d300      	bcc.n	8009e26 <dir_next+0x26>
 8009e24:	e071      	b.n	8009f0a <dir_next+0x10a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009e26:	05ea      	lsls	r2, r5, #23
 8009e28:	0dd7      	lsrs	r7, r2, #23
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	d108      	bne.n	8009e40 <dir_next+0x40>
		dp->sect++;				/* Next sector */
 8009e2e:	3301      	adds	r3, #1
 8009e30:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8009e32:	6981      	ldr	r1, [r0, #24]
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d111      	bne.n	8009e5c <dir_next+0x5c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009e38:	096b      	lsrs	r3, r5, #5
 8009e3a:	8932      	ldrh	r2, [r6, #8]
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d209      	bcs.n	8009e54 <dir_next+0x54>
	dp->dptr = ofs;						/* Current entry */
 8009e40:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009e42:	3630      	adds	r6, #48	; 0x30
 8009e44:	19f6      	adds	r6, r6, r7
 8009e46:	6226      	str	r6, [r4, #32]
	return FR_OK;
 8009e48:	2000      	movs	r0, #0
}
 8009e4a:	b003      	add	sp, #12
 8009e4c:	bcc0      	pop	{r6, r7}
 8009e4e:	46ba      	mov	sl, r7
 8009e50:	46b1      	mov	r9, r6
 8009e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
				dp->sect = 0; return FR_NO_FILE;
 8009e54:	2300      	movs	r3, #0
 8009e56:	61c3      	str	r3, [r0, #28]
 8009e58:	2004      	movs	r0, #4
 8009e5a:	e7f6      	b.n	8009e4a <dir_next+0x4a>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009e5c:	0a6b      	lsrs	r3, r5, #9
 8009e5e:	8972      	ldrh	r2, [r6, #10]
 8009e60:	3a01      	subs	r2, #1
 8009e62:	0010      	movs	r0, r2
 8009e64:	4018      	ands	r0, r3
 8009e66:	4681      	mov	r9, r0
 8009e68:	421a      	tst	r2, r3
 8009e6a:	d1e9      	bne.n	8009e40 <dir_next+0x40>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009e6c:	0020      	movs	r0, r4
 8009e6e:	f7ff fe5d 	bl	8009b2c <get_fat>
 8009e72:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009e74:	0003      	movs	r3, r0
 8009e76:	2801      	cmp	r0, #1
 8009e78:	d949      	bls.n	8009f0e <dir_next+0x10e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	d049      	beq.n	8009f12 <dir_next+0x112>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009e7e:	6973      	ldr	r3, [r6, #20]
 8009e80:	4283      	cmp	r3, r0
 8009e82:	d838      	bhi.n	8009ef6 <dir_next+0xf6>
					if (!stretch) {								/* If no stretch, report EOT */
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <dir_next+0xae>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009e8a:	69a1      	ldr	r1, [r4, #24]
 8009e8c:	0020      	movs	r0, r4
 8009e8e:	f7ff ff18 	bl	8009cc2 <create_chain>
 8009e92:	4682      	mov	sl, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009e94:	1e03      	subs	r3, r0, #0
 8009e96:	d03e      	beq.n	8009f16 <dir_next+0x116>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009e98:	2801      	cmp	r0, #1
 8009e9a:	d03e      	beq.n	8009f1a <dir_next+0x11a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	d03e      	beq.n	8009f1e <dir_next+0x11e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009ea0:	0030      	movs	r0, r6
 8009ea2:	f7ff fb79 	bl	8009598 <sync_window>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d004      	beq.n	8009eb4 <dir_next+0xb4>
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e7cd      	b.n	8009e4a <dir_next+0x4a>
						dp->sect = 0; return FR_NO_FILE;
 8009eae:	61e3      	str	r3, [r4, #28]
 8009eb0:	2004      	movs	r0, #4
 8009eb2:	e7ca      	b.n	8009e4a <dir_next+0x4a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009eb4:	0030      	movs	r0, r6
 8009eb6:	3030      	adds	r0, #48	; 0x30
 8009eb8:	2280      	movs	r2, #128	; 0x80
 8009eba:	0092      	lsls	r2, r2, #2
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	f7ff f98d 	bl	80091dc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ec2:	4651      	mov	r1, sl
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	f7ff fa57 	bl	8009378 <clust2sect>
 8009eca:	62f0      	str	r0, [r6, #44]	; 0x2c
 8009ecc:	8973      	ldrh	r3, [r6, #10]
 8009ece:	4599      	cmp	r9, r3
 8009ed0:	d20d      	bcs.n	8009eee <dir_next+0xee>
						fs->wflag = 1;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009ed6:	0030      	movs	r0, r6
 8009ed8:	f7ff fb5e 	bl	8009598 <sync_window>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d120      	bne.n	8009f22 <dir_next+0x122>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	469c      	mov	ip, r3
 8009ee4:	44e1      	add	r9, ip
 8009ee6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009ee8:	3301      	adds	r3, #1
 8009eea:	62f3      	str	r3, [r6, #44]	; 0x2c
 8009eec:	e7ee      	b.n	8009ecc <dir_next+0xcc>
					fs->winsect -= n;							/* Restore window offset */
 8009eee:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009ef0:	464a      	mov	r2, r9
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	62f3      	str	r3, [r6, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8009ef6:	4653      	mov	r3, sl
 8009ef8:	61a3      	str	r3, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 8009efa:	4651      	mov	r1, sl
 8009efc:	0030      	movs	r0, r6
 8009efe:	f7ff fa3b 	bl	8009378 <clust2sect>
 8009f02:	61e0      	str	r0, [r4, #28]
 8009f04:	e79c      	b.n	8009e40 <dir_next+0x40>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009f06:	2004      	movs	r0, #4
 8009f08:	e79f      	b.n	8009e4a <dir_next+0x4a>
 8009f0a:	2004      	movs	r0, #4
 8009f0c:	e79d      	b.n	8009e4a <dir_next+0x4a>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f0e:	2002      	movs	r0, #2
 8009f10:	e79b      	b.n	8009e4a <dir_next+0x4a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f12:	2001      	movs	r0, #1
 8009f14:	e799      	b.n	8009e4a <dir_next+0x4a>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f16:	2007      	movs	r0, #7
 8009f18:	e797      	b.n	8009e4a <dir_next+0x4a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009f1a:	2002      	movs	r0, #2
 8009f1c:	e795      	b.n	8009e4a <dir_next+0x4a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f1e:	2001      	movs	r0, #1
 8009f20:	e793      	b.n	8009e4a <dir_next+0x4a>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009f22:	2001      	movs	r0, #1
 8009f24:	e791      	b.n	8009e4a <dir_next+0x4a>

08009f26 <dir_find>:
{
 8009f26:	b570      	push	{r4, r5, r6, lr}
 8009f28:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
 8009f2a:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f7ff fe6e 	bl	8009c0e <dir_sdi>
 8009f32:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
 8009f34:	d007      	beq.n	8009f46 <dir_find+0x20>
}
 8009f36:	0020      	movs	r0, r4
 8009f38:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	0028      	movs	r0, r5
 8009f3e:	f7ff ff5f 	bl	8009e00 <dir_next>
 8009f42:	1e04      	subs	r4, r0, #0
	} while (res == FR_OK);
 8009f44:	d1f7      	bne.n	8009f36 <dir_find+0x10>
		res = move_window(fs, dp->sect);
 8009f46:	69e9      	ldr	r1, [r5, #28]
 8009f48:	0030      	movs	r0, r6
 8009f4a:	f7ff fb54 	bl	80095f6 <move_window>
 8009f4e:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
 8009f50:	d1f1      	bne.n	8009f36 <dir_find+0x10>
		c = dp->dir[DIR_Name];
 8009f52:	6a28      	ldr	r0, [r5, #32]
 8009f54:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00e      	beq.n	8009f78 <dir_find+0x52>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009f5a:	7ac2      	ldrb	r2, [r0, #11]
 8009f5c:	233f      	movs	r3, #63	; 0x3f
 8009f5e:	4013      	ands	r3, r2
 8009f60:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009f62:	7ac3      	ldrb	r3, [r0, #11]
 8009f64:	071b      	lsls	r3, r3, #28
 8009f66:	d4e8      	bmi.n	8009f3a <dir_find+0x14>
 8009f68:	0029      	movs	r1, r5
 8009f6a:	3124      	adds	r1, #36	; 0x24
 8009f6c:	220b      	movs	r2, #11
 8009f6e:	f7ff f93b 	bl	80091e8 <mem_cmp>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d1e1      	bne.n	8009f3a <dir_find+0x14>
 8009f76:	e7de      	b.n	8009f36 <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009f78:	2404      	movs	r4, #4
 8009f7a:	e7dc      	b.n	8009f36 <dir_find+0x10>

08009f7c <follow_path>:
{
 8009f7c:	b530      	push	{r4, r5, lr}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	0004      	movs	r4, r0
 8009f82:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 8009f84:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f86:	e001      	b.n	8009f8c <follow_path+0x10>
 8009f88:	3301      	adds	r3, #1
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	9b01      	ldr	r3, [sp, #4]
 8009f8e:	781a      	ldrb	r2, [r3, #0]
 8009f90:	2a2f      	cmp	r2, #47	; 0x2f
 8009f92:	d0f9      	beq.n	8009f88 <follow_path+0xc>
 8009f94:	2a5c      	cmp	r2, #92	; 0x5c
 8009f96:	d0f7      	beq.n	8009f88 <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 8009f98:	2200      	movs	r2, #0
 8009f9a:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b1f      	cmp	r3, #31
 8009fa0:	d91c      	bls.n	8009fdc <follow_path+0x60>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fa2:	a901      	add	r1, sp, #4
 8009fa4:	0020      	movs	r0, r4
 8009fa6:	f7ff fa2d 	bl	8009404 <create_name>
			if (res != FR_OK) break;
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d11d      	bne.n	8009fea <follow_path+0x6e>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009fae:	0020      	movs	r0, r4
 8009fb0:	f7ff ffb9 	bl	8009f26 <dir_find>
			ns = dp->fn[NSFLAG];
 8009fb4:	232f      	movs	r3, #47	; 0x2f
 8009fb6:	5ce3      	ldrb	r3, [r4, r3]
			if (res != FR_OK) {				/* Failed to find the object */
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d118      	bne.n	8009fee <follow_path+0x72>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fbc:	075b      	lsls	r3, r3, #29
 8009fbe:	d414      	bmi.n	8009fea <follow_path+0x6e>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009fc0:	79a3      	ldrb	r3, [r4, #6]
 8009fc2:	06db      	lsls	r3, r3, #27
 8009fc4:	d519      	bpl.n	8009ffa <follow_path+0x7e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009fc6:	002b      	movs	r3, r5
 8009fc8:	3330      	adds	r3, #48	; 0x30
 8009fca:	6962      	ldr	r2, [r4, #20]
 8009fcc:	05d1      	lsls	r1, r2, #23
 8009fce:	0dc9      	lsrs	r1, r1, #23
 8009fd0:	1859      	adds	r1, r3, r1
 8009fd2:	0028      	movs	r0, r5
 8009fd4:	f7ff f9f0 	bl	80093b8 <ld_clust>
 8009fd8:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fda:	e7e2      	b.n	8009fa2 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 8009fdc:	232f      	movs	r3, #47	; 0x2f
 8009fde:	3280      	adds	r2, #128	; 0x80
 8009fe0:	54e2      	strb	r2, [r4, r3]
		res = dir_sdi(dp, 0);
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	0020      	movs	r0, r4
 8009fe6:	f7ff fe12 	bl	8009c0e <dir_sdi>
}
 8009fea:	b003      	add	sp, #12
 8009fec:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fee:	2804      	cmp	r0, #4
 8009ff0:	d1fb      	bne.n	8009fea <follow_path+0x6e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009ff2:	075b      	lsls	r3, r3, #29
 8009ff4:	d4f9      	bmi.n	8009fea <follow_path+0x6e>
 8009ff6:	2005      	movs	r0, #5
 8009ff8:	e7f7      	b.n	8009fea <follow_path+0x6e>
				res = FR_NO_PATH; break;
 8009ffa:	2005      	movs	r0, #5
 8009ffc:	e7f5      	b.n	8009fea <follow_path+0x6e>

08009ffe <dir_alloc>:
{
 8009ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a000:	0004      	movs	r4, r0
 800a002:	000d      	movs	r5, r1
	FATFS *fs = dp->obj.fs;
 800a004:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800a006:	2100      	movs	r1, #0
 800a008:	f7ff fe01 	bl	8009c0e <dir_sdi>
	if (res == FR_OK) {
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d118      	bne.n	800a042 <dir_alloc+0x44>
		n = 0;
 800a010:	2700      	movs	r7, #0
 800a012:	e008      	b.n	800a026 <dir_alloc+0x28>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a014:	3701      	adds	r7, #1
 800a016:	42af      	cmp	r7, r5
 800a018:	d013      	beq.n	800a042 <dir_alloc+0x44>
			res = dir_next(dp, 1);
 800a01a:	2101      	movs	r1, #1
 800a01c:	0020      	movs	r0, r4
 800a01e:	f7ff feef 	bl	8009e00 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a022:	2800      	cmp	r0, #0
 800a024:	d10d      	bne.n	800a042 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
 800a026:	69e1      	ldr	r1, [r4, #28]
 800a028:	0030      	movs	r0, r6
 800a02a:	f7ff fae4 	bl	80095f6 <move_window>
			if (res != FR_OK) break;
 800a02e:	2800      	cmp	r0, #0
 800a030:	d107      	bne.n	800a042 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a032:	6a23      	ldr	r3, [r4, #32]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2be5      	cmp	r3, #229	; 0xe5
 800a038:	d0ec      	beq.n	800a014 <dir_alloc+0x16>
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0ea      	beq.n	800a014 <dir_alloc+0x16>
				n = 0;					/* Not a blank entry. Restart to search */
 800a03e:	2700      	movs	r7, #0
 800a040:	e7eb      	b.n	800a01a <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a042:	2804      	cmp	r0, #4
 800a044:	d000      	beq.n	800a048 <dir_alloc+0x4a>
}
 800a046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a048:	3003      	adds	r0, #3
 800a04a:	e7fc      	b.n	800a046 <dir_alloc+0x48>

0800a04c <dir_register>:
{
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
 800a050:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a052:	2101      	movs	r1, #1
 800a054:	f7ff ffd3 	bl	8009ffe <dir_alloc>
 800a058:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 800a05a:	d001      	beq.n	800a060 <dir_register+0x14>
}
 800a05c:	0020      	movs	r0, r4
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
 800a060:	69e9      	ldr	r1, [r5, #28]
 800a062:	0030      	movs	r0, r6
 800a064:	f7ff fac7 	bl	80095f6 <move_window>
 800a068:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 800a06a:	d1f7      	bne.n	800a05c <dir_register+0x10>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a06c:	2220      	movs	r2, #32
 800a06e:	2100      	movs	r1, #0
 800a070:	6a28      	ldr	r0, [r5, #32]
 800a072:	f7ff f8b3 	bl	80091dc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a076:	6a28      	ldr	r0, [r5, #32]
 800a078:	0029      	movs	r1, r5
 800a07a:	3124      	adds	r1, #36	; 0x24
 800a07c:	220b      	movs	r2, #11
 800a07e:	f7ff f8a2 	bl	80091c6 <mem_cpy>
			fs->wflag = 1;
 800a082:	2301      	movs	r3, #1
 800a084:	70f3      	strb	r3, [r6, #3]
 800a086:	e7e9      	b.n	800a05c <dir_register+0x10>

0800a088 <sync_fs>:
{
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	0004      	movs	r4, r0
	res = sync_window(fs);
 800a08c:	f7ff fa84 	bl	8009598 <sync_window>
 800a090:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 800a092:	d10a      	bne.n	800a0aa <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a094:	7823      	ldrb	r3, [r4, #0]
 800a096:	2b03      	cmp	r3, #3
 800a098:	d009      	beq.n	800a0ae <sync_fs+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a09a:	7860      	ldrb	r0, [r4, #1]
 800a09c:	2200      	movs	r2, #0
 800a09e:	2100      	movs	r1, #0
 800a0a0:	f7ff f868 	bl	8009174 <disk_ioctl>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d000      	beq.n	800a0aa <sync_fs+0x22>
 800a0a8:	2501      	movs	r5, #1
}
 800a0aa:	0028      	movs	r0, r5
 800a0ac:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a0ae:	7923      	ldrb	r3, [r4, #4]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d1f2      	bne.n	800a09a <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800a0b4:	0026      	movs	r6, r4
 800a0b6:	3630      	adds	r6, #48	; 0x30
 800a0b8:	2280      	movs	r2, #128	; 0x80
 800a0ba:	0092      	lsls	r2, r2, #2
 800a0bc:	2100      	movs	r1, #0
 800a0be:	0030      	movs	r0, r6
 800a0c0:	f7ff f88c 	bl	80091dc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a0c4:	4912      	ldr	r1, [pc, #72]	; (800a110 <sync_fs+0x88>)
 800a0c6:	4b13      	ldr	r3, [pc, #76]	; (800a114 <sync_fs+0x8c>)
 800a0c8:	18e0      	adds	r0, r4, r3
 800a0ca:	f7ff f870 	bl	80091ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a0ce:	4912      	ldr	r1, [pc, #72]	; (800a118 <sync_fs+0x90>)
 800a0d0:	0030      	movs	r0, r6
 800a0d2:	f7ff f870 	bl	80091b6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a0d6:	2385      	movs	r3, #133	; 0x85
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	18e0      	adds	r0, r4, r3
 800a0dc:	490f      	ldr	r1, [pc, #60]	; (800a11c <sync_fs+0x94>)
 800a0de:	f7ff f86a 	bl	80091b6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0e2:	2386      	movs	r3, #134	; 0x86
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	18e0      	adds	r0, r4, r3
 800a0e8:	6921      	ldr	r1, [r4, #16]
 800a0ea:	f7ff f864 	bl	80091b6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0ee:	2387      	movs	r3, #135	; 0x87
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	18e0      	adds	r0, r4, r3
 800a0f4:	68e1      	ldr	r1, [r4, #12]
 800a0f6:	f7ff f85e 	bl	80091b6 <st_dword>
			fs->winsect = fs->volbase + 1;
 800a0fa:	69e3      	ldr	r3, [r4, #28]
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a100:	7860      	ldrb	r0, [r4, #1]
 800a102:	2301      	movs	r3, #1
 800a104:	0031      	movs	r1, r6
 800a106:	f7ff f829 	bl	800915c <disk_write>
			fs->fsi_flag = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	7123      	strb	r3, [r4, #4]
 800a10e:	e7c4      	b.n	800a09a <sync_fs+0x12>
 800a110:	0000aa55 	.word	0x0000aa55
 800a114:	0000022e 	.word	0x0000022e
 800a118:	41615252 	.word	0x41615252
 800a11c:	61417272 	.word	0x61417272

0800a120 <f_mount>:
{
 800a120:	b570      	push	{r4, r5, r6, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	9001      	str	r0, [sp, #4]
 800a126:	9100      	str	r1, [sp, #0]
 800a128:	0015      	movs	r5, r2
	const TCHAR *rp = path;
 800a12a:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800a12c:	a803      	add	r0, sp, #12
 800a12e:	f7ff f9dd 	bl	80094ec <get_ldnumber>
 800a132:	1e04      	subs	r4, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 800a134:	db1f      	blt.n	800a176 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a136:	0083      	lsls	r3, r0, #2
 800a138:	4a11      	ldr	r2, [pc, #68]	; (800a180 <f_mount+0x60>)
 800a13a:	589e      	ldr	r6, [r3, r2]
	if (cfs) {
 800a13c:	2e00      	cmp	r6, #0
 800a13e:	d004      	beq.n	800a14a <f_mount+0x2a>
		clear_lock(cfs);
 800a140:	0030      	movs	r0, r6
 800a142:	f7ff f907 	bl	8009354 <clear_lock>
		cfs->fs_type = 0;				/* Clear old fs object */
 800a146:	2300      	movs	r3, #0
 800a148:	7033      	strb	r3, [r6, #0]
	if (fs) {
 800a14a:	9b01      	ldr	r3, [sp, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <f_mount+0x34>
		fs->fs_type = 0;				/* Clear new fs object */
 800a150:	2200      	movs	r2, #0
 800a152:	701a      	strb	r2, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 800a154:	9b01      	ldr	r3, [sp, #4]
 800a156:	00a4      	lsls	r4, r4, #2
 800a158:	4a09      	ldr	r2, [pc, #36]	; (800a180 <f_mount+0x60>)
 800a15a:	50a3      	str	r3, [r4, r2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00c      	beq.n	800a17a <f_mount+0x5a>
 800a160:	2d01      	cmp	r5, #1
 800a162:	d002      	beq.n	800a16a <f_mount+0x4a>
 800a164:	2000      	movs	r0, #0
}
 800a166:	b004      	add	sp, #16
 800a168:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a16a:	2200      	movs	r2, #0
 800a16c:	a901      	add	r1, sp, #4
 800a16e:	4668      	mov	r0, sp
 800a170:	f7ff fa9c 	bl	80096ac <find_volume>
	LEAVE_FF(fs, res);
 800a174:	e7f7      	b.n	800a166 <f_mount+0x46>
	if (vol < 0) return FR_INVALID_DRIVE;
 800a176:	200b      	movs	r0, #11
 800a178:	e7f5      	b.n	800a166 <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a17a:	2000      	movs	r0, #0
 800a17c:	e7f3      	b.n	800a166 <f_mount+0x46>
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	2000112c 	.word	0x2000112c

0800a184 <f_open>:
{
 800a184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a186:	46ce      	mov	lr, r9
 800a188:	4647      	mov	r7, r8
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b091      	sub	sp, #68	; 0x44
 800a18e:	0007      	movs	r7, r0
 800a190:	9101      	str	r1, [sp, #4]
 800a192:	0015      	movs	r5, r2
	if (!fp) return FR_INVALID_OBJECT;
 800a194:	2800      	cmp	r0, #0
 800a196:	d100      	bne.n	800a19a <f_open+0x16>
 800a198:	e113      	b.n	800a3c2 <f_open+0x23e>
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a19a:	263f      	movs	r6, #63	; 0x3f
 800a19c:	4016      	ands	r6, r2
	res = find_volume(&path, &fs, mode);
 800a19e:	0032      	movs	r2, r6
 800a1a0:	a903      	add	r1, sp, #12
 800a1a2:	a801      	add	r0, sp, #4
 800a1a4:	f7ff fa82 	bl	80096ac <find_volume>
 800a1a8:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
 800a1aa:	d009      	beq.n	800a1c0 <f_open+0x3c>
	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a1ac:	2c00      	cmp	r4, #0
 800a1ae:	d001      	beq.n	800a1b4 <f_open+0x30>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	603b      	str	r3, [r7, #0]
}
 800a1b4:	0020      	movs	r0, r4
 800a1b6:	b011      	add	sp, #68	; 0x44
 800a1b8:	bcc0      	pop	{r6, r7}
 800a1ba:	46b9      	mov	r9, r7
 800a1bc:	46b0      	mov	r8, r6
 800a1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dj.obj.fs = fs;
 800a1c0:	9b03      	ldr	r3, [sp, #12]
 800a1c2:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800a1c4:	9901      	ldr	r1, [sp, #4]
 800a1c6:	a804      	add	r0, sp, #16
 800a1c8:	f7ff fed8 	bl	8009f7c <follow_path>
 800a1cc:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
 800a1ce:	d10d      	bne.n	800a1ec <f_open+0x68>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a1d0:	aa04      	add	r2, sp, #16
 800a1d2:	232f      	movs	r3, #47	; 0x2f
 800a1d4:	56d3      	ldrsb	r3, [r2, r3]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	db57      	blt.n	800a28a <f_open+0x106>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a1da:	2301      	movs	r3, #1
 800a1dc:	0031      	movs	r1, r6
 800a1de:	4399      	bics	r1, r3
 800a1e0:	1e4b      	subs	r3, r1, #1
 800a1e2:	4199      	sbcs	r1, r3
 800a1e4:	0010      	movs	r0, r2
 800a1e6:	f7ff f815 	bl	8009214 <chk_lock>
 800a1ea:	0004      	movs	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a1ec:	231c      	movs	r3, #28
 800a1ee:	422b      	tst	r3, r5
 800a1f0:	d061      	beq.n	800a2b6 <f_open+0x132>
			if (res != FR_OK) {					/* No file, create new */
 800a1f2:	2c00      	cmp	r4, #0
 800a1f4:	d056      	beq.n	800a2a4 <f_open+0x120>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a1f6:	2c04      	cmp	r4, #4
 800a1f8:	d049      	beq.n	800a28e <f_open+0x10a>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a1fa:	2308      	movs	r3, #8
 800a1fc:	431e      	orrs	r6, r3
 800a1fe:	b2f6      	uxtb	r6, r6
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a200:	2c00      	cmp	r4, #0
 800a202:	d165      	bne.n	800a2d0 <f_open+0x14c>
 800a204:	0733      	lsls	r3, r6, #28
 800a206:	d563      	bpl.n	800a2d0 <f_open+0x14c>
				dw = GET_FATTIME();
 800a208:	f7fe ff64 	bl	80090d4 <get_fattime>
 800a20c:	0005      	movs	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a20e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	0018      	movs	r0, r3
 800a214:	300e      	adds	r0, #14
 800a216:	0029      	movs	r1, r5
 800a218:	f7fe ffcd 	bl	80091b6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	0018      	movs	r0, r3
 800a222:	3016      	adds	r0, #22
 800a224:	0029      	movs	r1, r5
 800a226:	f7fe ffc6 	bl	80091b6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a22a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	2320      	movs	r3, #32
 800a230:	9a00      	ldr	r2, [sp, #0]
 800a232:	72d3      	strb	r3, [r2, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a234:	9b03      	ldr	r3, [sp, #12]
 800a236:	4698      	mov	r8, r3
 800a238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a23a:	4699      	mov	r9, r3
 800a23c:	0019      	movs	r1, r3
 800a23e:	4640      	mov	r0, r8
 800a240:	f7ff f8ba 	bl	80093b8 <ld_clust>
 800a244:	0005      	movs	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a246:	2200      	movs	r2, #0
 800a248:	4649      	mov	r1, r9
 800a24a:	4640      	mov	r0, r8
 800a24c:	f7ff f8c7 	bl	80093de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a250:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a252:	301c      	adds	r0, #28
 800a254:	2100      	movs	r1, #0
 800a256:	f7fe ffae 	bl	80091b6 <st_dword>
					fs->wflag = 1;
 800a25a:	2301      	movs	r3, #1
 800a25c:	9a03      	ldr	r2, [sp, #12]
 800a25e:	70d3      	strb	r3, [r2, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800a260:	2d00      	cmp	r5, #0
 800a262:	d035      	beq.n	800a2d0 <f_open+0x14c>
						dw = fs->winsect;
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	4698      	mov	r8, r3
						res = remove_chain(&dj.obj, cl, 0);
 800a26a:	2200      	movs	r2, #0
 800a26c:	0029      	movs	r1, r5
 800a26e:	a804      	add	r0, sp, #16
 800a270:	f7ff fd88 	bl	8009d84 <remove_chain>
 800a274:	1e04      	subs	r4, r0, #0
						if (res == FR_OK) {
 800a276:	d12b      	bne.n	800a2d0 <f_open+0x14c>
							res = move_window(fs, dw);
 800a278:	4641      	mov	r1, r8
 800a27a:	9803      	ldr	r0, [sp, #12]
 800a27c:	f7ff f9bb 	bl	80095f6 <move_window>
 800a280:	0004      	movs	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a282:	3d01      	subs	r5, #1
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	60dd      	str	r5, [r3, #12]
 800a288:	e022      	b.n	800a2d0 <f_open+0x14c>
				res = FR_INVALID_NAME;
 800a28a:	2406      	movs	r4, #6
 800a28c:	e7ae      	b.n	800a1ec <f_open+0x68>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a28e:	f7fe fffd 	bl	800928c <enq_lock>
 800a292:	2800      	cmp	r0, #0
 800a294:	d101      	bne.n	800a29a <f_open+0x116>
 800a296:	2412      	movs	r4, #18
 800a298:	e7af      	b.n	800a1fa <f_open+0x76>
 800a29a:	a804      	add	r0, sp, #16
 800a29c:	f7ff fed6 	bl	800a04c <dir_register>
 800a2a0:	0004      	movs	r4, r0
 800a2a2:	e7aa      	b.n	800a1fa <f_open+0x76>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a2a4:	ab04      	add	r3, sp, #16
 800a2a6:	799b      	ldrb	r3, [r3, #6]
 800a2a8:	2211      	movs	r2, #17
 800a2aa:	421a      	tst	r2, r3
 800a2ac:	d10f      	bne.n	800a2ce <f_open+0x14a>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a2ae:	076b      	lsls	r3, r5, #29
 800a2b0:	d5a6      	bpl.n	800a200 <f_open+0x7c>
 800a2b2:	2408      	movs	r4, #8
 800a2b4:	e00c      	b.n	800a2d0 <f_open+0x14c>
			if (res == FR_OK) {					/* Following succeeded */
 800a2b6:	2c00      	cmp	r4, #0
 800a2b8:	d10a      	bne.n	800a2d0 <f_open+0x14c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a2ba:	ab04      	add	r3, sp, #16
 800a2bc:	799b      	ldrb	r3, [r3, #6]
 800a2be:	06da      	lsls	r2, r3, #27
 800a2c0:	d44e      	bmi.n	800a360 <f_open+0x1dc>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a2c2:	07aa      	lsls	r2, r5, #30
 800a2c4:	d504      	bpl.n	800a2d0 <f_open+0x14c>
 800a2c6:	07db      	lsls	r3, r3, #31
 800a2c8:	d502      	bpl.n	800a2d0 <f_open+0x14c>
						res = FR_DENIED;
 800a2ca:	2407      	movs	r4, #7
 800a2cc:	e018      	b.n	800a300 <f_open+0x17c>
					res = FR_DENIED;
 800a2ce:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800a2d0:	2c00      	cmp	r4, #0
 800a2d2:	d115      	bne.n	800a300 <f_open+0x17c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a2d4:	0733      	lsls	r3, r6, #28
 800a2d6:	d502      	bpl.n	800a2de <f_open+0x15a>
				mode |= FA_MODIFIED;
 800a2d8:	2340      	movs	r3, #64	; 0x40
 800a2da:	431e      	orrs	r6, r3
 800a2dc:	b2f6      	uxtb	r6, r6
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a2e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	62bb      	str	r3, [r7, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	0031      	movs	r1, r6
 800a2ee:	4399      	bics	r1, r3
 800a2f0:	1e4b      	subs	r3, r1, #1
 800a2f2:	4199      	sbcs	r1, r3
 800a2f4:	a804      	add	r0, sp, #16
 800a2f6:	f7fe ffd9 	bl	80092ac <inc_lock>
 800a2fa:	6138      	str	r0, [r7, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d05e      	beq.n	800a3be <f_open+0x23a>
		if (res == FR_OK) {
 800a300:	2c00      	cmp	r4, #0
 800a302:	d000      	beq.n	800a306 <f_open+0x182>
 800a304:	e752      	b.n	800a1ac <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a306:	9b03      	ldr	r3, [sp, #12]
 800a308:	4698      	mov	r8, r3
 800a30a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a30c:	0029      	movs	r1, r5
 800a30e:	0018      	movs	r0, r3
 800a310:	f7ff f852 	bl	80093b8 <ld_clust>
 800a314:	60b8      	str	r0, [r7, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a316:	0028      	movs	r0, r5
 800a318:	301c      	adds	r0, #28
 800a31a:	f7fe ff3c 	bl	8009196 <ld_dword>
 800a31e:	60f8      	str	r0, [r7, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a320:	2300      	movs	r3, #0
 800a322:	62fb      	str	r3, [r7, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a324:	4642      	mov	r2, r8
 800a326:	603a      	str	r2, [r7, #0]
			fp->obj.id = fs->id;
 800a328:	88d2      	ldrh	r2, [r2, #6]
 800a32a:	80ba      	strh	r2, [r7, #4]
			fp->flag = mode;		/* Set file access mode */
 800a32c:	753e      	strb	r6, [r7, #20]
			fp->err = 0;			/* Clear error flag */
 800a32e:	757b      	strb	r3, [r7, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a330:	623b      	str	r3, [r7, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a332:	61bb      	str	r3, [r7, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a334:	3330      	adds	r3, #48	; 0x30
 800a336:	4698      	mov	r8, r3
 800a338:	44b8      	add	r8, r7
 800a33a:	2280      	movs	r2, #128	; 0x80
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	2100      	movs	r1, #0
 800a340:	4640      	mov	r0, r8
 800a342:	f7fe ff4b 	bl	80091dc <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a346:	06b3      	lsls	r3, r6, #26
 800a348:	d400      	bmi.n	800a34c <f_open+0x1c8>
 800a34a:	e72f      	b.n	800a1ac <f_open+0x28>
 800a34c:	68fd      	ldr	r5, [r7, #12]
 800a34e:	2d00      	cmp	r5, #0
 800a350:	d100      	bne.n	800a354 <f_open+0x1d0>
 800a352:	e72b      	b.n	800a1ac <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a354:	61bd      	str	r5, [r7, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a356:	9b03      	ldr	r3, [sp, #12]
 800a358:	895e      	ldrh	r6, [r3, #10]
 800a35a:	0276      	lsls	r6, r6, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a35c:	68b9      	ldr	r1, [r7, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a35e:	e004      	b.n	800a36a <f_open+0x1e6>
					res = FR_NO_FILE;
 800a360:	2404      	movs	r4, #4
 800a362:	e7cd      	b.n	800a300 <f_open+0x17c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a364:	1c4b      	adds	r3, r1, #1
 800a366:	d00c      	beq.n	800a382 <f_open+0x1fe>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a368:	1bad      	subs	r5, r5, r6
 800a36a:	2c00      	cmp	r4, #0
 800a36c:	d10b      	bne.n	800a386 <f_open+0x202>
 800a36e:	42b5      	cmp	r5, r6
 800a370:	d909      	bls.n	800a386 <f_open+0x202>
					clst = get_fat(&fp->obj, clst);
 800a372:	0038      	movs	r0, r7
 800a374:	f7ff fbda 	bl	8009b2c <get_fat>
 800a378:	0001      	movs	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800a37a:	2801      	cmp	r0, #1
 800a37c:	d8f2      	bhi.n	800a364 <f_open+0x1e0>
 800a37e:	2402      	movs	r4, #2
 800a380:	e7f0      	b.n	800a364 <f_open+0x1e0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a382:	2401      	movs	r4, #1
 800a384:	e7f0      	b.n	800a368 <f_open+0x1e4>
				fp->clust = clst;
 800a386:	61f9      	str	r1, [r7, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a388:	2c00      	cmp	r4, #0
 800a38a:	d000      	beq.n	800a38e <f_open+0x20a>
 800a38c:	e70e      	b.n	800a1ac <f_open+0x28>
 800a38e:	05eb      	lsls	r3, r5, #23
 800a390:	d100      	bne.n	800a394 <f_open+0x210>
 800a392:	e70b      	b.n	800a1ac <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a394:	9e03      	ldr	r6, [sp, #12]
 800a396:	0030      	movs	r0, r6
 800a398:	f7fe ffee 	bl	8009378 <clust2sect>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d101      	bne.n	800a3a4 <f_open+0x220>
						res = FR_INT_ERR;
 800a3a0:	2402      	movs	r4, #2
 800a3a2:	e705      	b.n	800a1b0 <f_open+0x2c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a3a4:	0a6d      	lsrs	r5, r5, #9
 800a3a6:	182a      	adds	r2, r5, r0
 800a3a8:	623a      	str	r2, [r7, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a3aa:	7870      	ldrb	r0, [r6, #1]
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	f7fe fec8 	bl	8009144 <disk_read>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d100      	bne.n	800a3ba <f_open+0x236>
 800a3b8:	e6f8      	b.n	800a1ac <f_open+0x28>
 800a3ba:	2401      	movs	r4, #1
 800a3bc:	e6f8      	b.n	800a1b0 <f_open+0x2c>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a3be:	2402      	movs	r4, #2
 800a3c0:	e6f4      	b.n	800a1ac <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
 800a3c2:	2409      	movs	r4, #9
 800a3c4:	e6f6      	b.n	800a1b4 <f_open+0x30>

0800a3c6 <f_write>:
{
 800a3c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3c8:	46de      	mov	lr, fp
 800a3ca:	4657      	mov	r7, sl
 800a3cc:	464e      	mov	r6, r9
 800a3ce:	4645      	mov	r5, r8
 800a3d0:	b5e0      	push	{r5, r6, r7, lr}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	0004      	movs	r4, r0
 800a3d6:	000e      	movs	r6, r1
 800a3d8:	0015      	movs	r5, r2
 800a3da:	4698      	mov	r8, r3
	*bw = 0;	/* Clear write byte counter */
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4642      	mov	r2, r8
 800a3e0:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a3e2:	a903      	add	r1, sp, #12
 800a3e4:	f7ff f8af 	bl	8009546 <validate>
 800a3e8:	4681      	mov	r9, r0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	d149      	bne.n	800a482 <f_write+0xbc>
 800a3ee:	7d63      	ldrb	r3, [r4, #21]
 800a3f0:	4699      	mov	r9, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d145      	bne.n	800a482 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a3f6:	7d23      	ldrb	r3, [r4, #20]
 800a3f8:	079b      	lsls	r3, r3, #30
 800a3fa:	d400      	bmi.n	800a3fe <f_write+0x38>
 800a3fc:	e0db      	b.n	800a5b6 <f_write+0x1f0>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a3fe:	69a3      	ldr	r3, [r4, #24]
 800a400:	195a      	adds	r2, r3, r5
 800a402:	4293      	cmp	r3, r2
 800a404:	d800      	bhi.n	800a408 <f_write+0x42>
 800a406:	e0a9      	b.n	800a55c <f_write+0x196>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a408:	43dd      	mvns	r5, r3
 800a40a:	e0a7      	b.n	800a55c <f_write+0x196>
					if (fp->cltbl) {
 800a40c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d03f      	beq.n	800a492 <f_write+0xcc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a412:	0020      	movs	r0, r4
 800a414:	f7fe ffbc 	bl	8009390 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a418:	2800      	cmp	r0, #0
 800a41a:	d100      	bne.n	800a41e <f_write+0x58>
 800a41c:	e0c6      	b.n	800a5ac <f_write+0x1e6>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a41e:	2801      	cmp	r0, #1
 800a420:	d03c      	beq.n	800a49c <f_write+0xd6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	d03e      	beq.n	800a4a4 <f_write+0xde>
				fp->clust = clst;			/* Update current cluster */
 800a426:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a428:	68a3      	ldr	r3, [r4, #8]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d100      	bne.n	800a430 <f_write+0x6a>
 800a42e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a430:	2314      	movs	r3, #20
 800a432:	56e3      	ldrsb	r3, [r4, r3]
 800a434:	2b00      	cmp	r3, #0
 800a436:	db39      	blt.n	800a4ac <f_write+0xe6>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a438:	9b03      	ldr	r3, [sp, #12]
 800a43a:	469a      	mov	sl, r3
 800a43c:	69e1      	ldr	r1, [r4, #28]
 800a43e:	0018      	movs	r0, r3
 800a440:	f7fe ff9a 	bl	8009378 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a444:	2800      	cmp	r0, #0
 800a446:	d044      	beq.n	800a4d2 <f_write+0x10c>
			sect += csect;
 800a448:	4458      	add	r0, fp
 800a44a:	0007      	movs	r7, r0
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a44c:	0a6a      	lsrs	r2, r5, #9
 800a44e:	9201      	str	r2, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a450:	2380      	movs	r3, #128	; 0x80
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	429d      	cmp	r5, r3
 800a456:	d355      	bcc.n	800a504 <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a458:	0013      	movs	r3, r2
 800a45a:	445b      	add	r3, fp
 800a45c:	4652      	mov	r2, sl
 800a45e:	8952      	ldrh	r2, [r2, #10]
 800a460:	4293      	cmp	r3, r2
 800a462:	d902      	bls.n	800a46a <f_write+0xa4>
					cc = fs->csize - csect;
 800a464:	465b      	mov	r3, fp
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	9301      	str	r3, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a46a:	4653      	mov	r3, sl
 800a46c:	7858      	ldrb	r0, [r3, #1]
 800a46e:	9b01      	ldr	r3, [sp, #4]
 800a470:	003a      	movs	r2, r7
 800a472:	0031      	movs	r1, r6
 800a474:	f7fe fe72 	bl	800915c <disk_write>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d02e      	beq.n	800a4da <f_write+0x114>
 800a47c:	2301      	movs	r3, #1
 800a47e:	7563      	strb	r3, [r4, #21]
 800a480:	4699      	mov	r9, r3
}
 800a482:	4648      	mov	r0, r9
 800a484:	b005      	add	sp, #20
 800a486:	bcf0      	pop	{r4, r5, r6, r7}
 800a488:	46bb      	mov	fp, r7
 800a48a:	46b2      	mov	sl, r6
 800a48c:	46a9      	mov	r9, r5
 800a48e:	46a0      	mov	r8, r4
 800a490:	bdf0      	pop	{r4, r5, r6, r7, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a492:	69e1      	ldr	r1, [r4, #28]
 800a494:	0020      	movs	r0, r4
 800a496:	f7ff fc14 	bl	8009cc2 <create_chain>
 800a49a:	e7bd      	b.n	800a418 <f_write+0x52>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a49c:	2302      	movs	r3, #2
 800a49e:	7563      	strb	r3, [r4, #21]
 800a4a0:	4699      	mov	r9, r3
 800a4a2:	e7ee      	b.n	800a482 <f_write+0xbc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	7563      	strb	r3, [r4, #21]
 800a4a8:	4699      	mov	r9, r3
 800a4aa:	e7ea      	b.n	800a482 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4ac:	0021      	movs	r1, r4
 800a4ae:	3130      	adds	r1, #48	; 0x30
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	7858      	ldrb	r0, [r3, #1]
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	6a22      	ldr	r2, [r4, #32]
 800a4b8:	f7fe fe50 	bl	800915c <disk_write>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d104      	bne.n	800a4ca <f_write+0x104>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a4c0:	7d22      	ldrb	r2, [r4, #20]
 800a4c2:	237f      	movs	r3, #127	; 0x7f
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	7523      	strb	r3, [r4, #20]
 800a4c8:	e7b6      	b.n	800a438 <f_write+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	7563      	strb	r3, [r4, #21]
 800a4ce:	4699      	mov	r9, r3
 800a4d0:	e7d7      	b.n	800a482 <f_write+0xbc>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	7563      	strb	r3, [r4, #21]
 800a4d6:	4699      	mov	r9, r3
 800a4d8:	e7d3      	b.n	800a482 <f_write+0xbc>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a4da:	6a23      	ldr	r3, [r4, #32]
 800a4dc:	1bdf      	subs	r7, r3, r7
 800a4de:	9b01      	ldr	r3, [sp, #4]
 800a4e0:	429f      	cmp	r7, r3
 800a4e2:	d302      	bcc.n	800a4ea <f_write+0x124>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a4e4:	9b01      	ldr	r3, [sp, #4]
 800a4e6:	025f      	lsls	r7, r3, #9
				continue;
 800a4e8:	e029      	b.n	800a53e <f_write+0x178>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a4ea:	0020      	movs	r0, r4
 800a4ec:	3030      	adds	r0, #48	; 0x30
 800a4ee:	0279      	lsls	r1, r7, #9
 800a4f0:	1871      	adds	r1, r6, r1
 800a4f2:	2280      	movs	r2, #128	; 0x80
 800a4f4:	0092      	lsls	r2, r2, #2
 800a4f6:	f7fe fe66 	bl	80091c6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a4fa:	7d22      	ldrb	r2, [r4, #20]
 800a4fc:	237f      	movs	r3, #127	; 0x7f
 800a4fe:	4013      	ands	r3, r2
 800a500:	7523      	strb	r3, [r4, #20]
 800a502:	e7ef      	b.n	800a4e4 <f_write+0x11e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a504:	6a23      	ldr	r3, [r4, #32]
 800a506:	4283      	cmp	r3, r0
 800a508:	d003      	beq.n	800a512 <f_write+0x14c>
 800a50a:	69a3      	ldr	r3, [r4, #24]
 800a50c:	68e2      	ldr	r2, [r4, #12]
 800a50e:	4293      	cmp	r3, r2
 800a510:	d33e      	bcc.n	800a590 <f_write+0x1ca>
			fp->sect = sect;
 800a512:	6227      	str	r7, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a514:	69a3      	ldr	r3, [r4, #24]
 800a516:	05d8      	lsls	r0, r3, #23
 800a518:	0dc0      	lsrs	r0, r0, #23
 800a51a:	2780      	movs	r7, #128	; 0x80
 800a51c:	00bf      	lsls	r7, r7, #2
 800a51e:	1a3f      	subs	r7, r7, r0
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a520:	42bd      	cmp	r5, r7
 800a522:	d200      	bcs.n	800a526 <f_write+0x160>
 800a524:	002f      	movs	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a526:	0023      	movs	r3, r4
 800a528:	3330      	adds	r3, #48	; 0x30
 800a52a:	1818      	adds	r0, r3, r0
 800a52c:	003a      	movs	r2, r7
 800a52e:	0031      	movs	r1, r6
 800a530:	f7fe fe49 	bl	80091c6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a534:	7d22      	ldrb	r2, [r4, #20]
 800a536:	2380      	movs	r3, #128	; 0x80
 800a538:	425b      	negs	r3, r3
 800a53a:	4313      	orrs	r3, r2
 800a53c:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a53e:	19f6      	adds	r6, r6, r7
 800a540:	69a3      	ldr	r3, [r4, #24]
 800a542:	18fb      	adds	r3, r7, r3
 800a544:	61a3      	str	r3, [r4, #24]
 800a546:	68e2      	ldr	r2, [r4, #12]
 800a548:	4293      	cmp	r3, r2
 800a54a:	d200      	bcs.n	800a54e <f_write+0x188>
 800a54c:	0013      	movs	r3, r2
 800a54e:	60e3      	str	r3, [r4, #12]
 800a550:	4643      	mov	r3, r8
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	19db      	adds	r3, r3, r7
 800a556:	4642      	mov	r2, r8
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 800a55c:	2d00      	cmp	r5, #0
 800a55e:	d025      	beq.n	800a5ac <f_write+0x1e6>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a560:	69a1      	ldr	r1, [r4, #24]
 800a562:	05cb      	lsls	r3, r1, #23
 800a564:	d1d6      	bne.n	800a514 <f_write+0x14e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a566:	0a4b      	lsrs	r3, r1, #9
 800a568:	9a03      	ldr	r2, [sp, #12]
 800a56a:	8952      	ldrh	r2, [r2, #10]
 800a56c:	3a01      	subs	r2, #1
 800a56e:	0010      	movs	r0, r2
 800a570:	4018      	ands	r0, r3
 800a572:	4683      	mov	fp, r0
			if (csect == 0) {				/* On the cluster boundary? */
 800a574:	421a      	tst	r2, r3
 800a576:	d000      	beq.n	800a57a <f_write+0x1b4>
 800a578:	e75a      	b.n	800a430 <f_write+0x6a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a57a:	2900      	cmp	r1, #0
 800a57c:	d000      	beq.n	800a580 <f_write+0x1ba>
 800a57e:	e745      	b.n	800a40c <f_write+0x46>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a580:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800a582:	2800      	cmp	r0, #0
 800a584:	d000      	beq.n	800a588 <f_write+0x1c2>
 800a586:	e747      	b.n	800a418 <f_write+0x52>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a588:	0020      	movs	r0, r4
 800a58a:	f7ff fb9a 	bl	8009cc2 <create_chain>
 800a58e:	e743      	b.n	800a418 <f_write+0x52>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a590:	0021      	movs	r1, r4
 800a592:	3130      	adds	r1, #48	; 0x30
 800a594:	4653      	mov	r3, sl
 800a596:	7858      	ldrb	r0, [r3, #1]
 800a598:	2301      	movs	r3, #1
 800a59a:	003a      	movs	r2, r7
 800a59c:	f7fe fdd2 	bl	8009144 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d0b6      	beq.n	800a512 <f_write+0x14c>
					ABORT(fs, FR_DISK_ERR);
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	7563      	strb	r3, [r4, #21]
 800a5a8:	4699      	mov	r9, r3
 800a5aa:	e76a      	b.n	800a482 <f_write+0xbc>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a5ac:	7d23      	ldrb	r3, [r4, #20]
 800a5ae:	2240      	movs	r2, #64	; 0x40
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800a5b4:	e765      	b.n	800a482 <f_write+0xbc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a5b6:	2307      	movs	r3, #7
 800a5b8:	4699      	mov	r9, r3
 800a5ba:	e762      	b.n	800a482 <f_write+0xbc>

0800a5bc <putc_bfd>:
{
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	0004      	movs	r4, r0
 800a5c2:	000d      	movs	r5, r1
	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800a5c4:	290a      	cmp	r1, #10
 800a5c6:	d00d      	beq.n	800a5e4 <putc_bfd+0x28>
	i = pb->idx;		/* Write index of pb->buf[] */
 800a5c8:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	db08      	blt.n	800a5e0 <putc_bfd+0x24>
	pb->buf[i++] = (BYTE)c;
 800a5ce:	1c5e      	adds	r6, r3, #1
 800a5d0:	18e3      	adds	r3, r4, r3
 800a5d2:	731d      	strb	r5, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800a5d4:	2e3c      	cmp	r6, #60	; 0x3c
 800a5d6:	dc09      	bgt.n	800a5ec <putc_bfd+0x30>
	pb->idx = i;
 800a5d8:	6066      	str	r6, [r4, #4]
	pb->nchr++;
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	60a3      	str	r3, [r4, #8]
}
 800a5e0:	b002      	add	sp, #8
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
		putc_bfd(pb, '\r');
 800a5e4:	210d      	movs	r1, #13
 800a5e6:	f7ff ffe9 	bl	800a5bc <putc_bfd>
 800a5ea:	e7ed      	b.n	800a5c8 <putc_bfd+0xc>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800a5ec:	0021      	movs	r1, r4
 800a5ee:	310c      	adds	r1, #12
 800a5f0:	ab01      	add	r3, sp, #4
 800a5f2:	0032      	movs	r2, r6
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	f7ff fee6 	bl	800a3c6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800a5fa:	9b01      	ldr	r3, [sp, #4]
 800a5fc:	429e      	cmp	r6, r3
 800a5fe:	d002      	beq.n	800a606 <putc_bfd+0x4a>
 800a600:	2601      	movs	r6, #1
 800a602:	4276      	negs	r6, r6
 800a604:	e7e8      	b.n	800a5d8 <putc_bfd+0x1c>
 800a606:	2600      	movs	r6, #0
 800a608:	e7e6      	b.n	800a5d8 <putc_bfd+0x1c>

0800a60a <putc_flush>:
{
 800a60a:	b510      	push	{r4, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	0004      	movs	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800a610:	6842      	ldr	r2, [r0, #4]
 800a612:	2a00      	cmp	r2, #0
 800a614:	db0e      	blt.n	800a634 <putc_flush+0x2a>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800a616:	0001      	movs	r1, r0
 800a618:	310c      	adds	r1, #12
 800a61a:	ab01      	add	r3, sp, #4
 800a61c:	6800      	ldr	r0, [r0, #0]
 800a61e:	f7ff fed2 	bl	800a3c6 <f_write>
 800a622:	2800      	cmp	r0, #0
 800a624:	d109      	bne.n	800a63a <putc_flush+0x30>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800a626:	6863      	ldr	r3, [r4, #4]
 800a628:	9a01      	ldr	r2, [sp, #4]
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d108      	bne.n	800a640 <putc_flush+0x36>
 800a62e:	68a0      	ldr	r0, [r4, #8]
}
 800a630:	b002      	add	sp, #8
 800a632:	bd10      	pop	{r4, pc}
	return EOF;
 800a634:	2001      	movs	r0, #1
 800a636:	4240      	negs	r0, r0
 800a638:	e7fa      	b.n	800a630 <putc_flush+0x26>
 800a63a:	2001      	movs	r0, #1
 800a63c:	4240      	negs	r0, r0
 800a63e:	e7f7      	b.n	800a630 <putc_flush+0x26>
 800a640:	2001      	movs	r0, #1
 800a642:	4240      	negs	r0, r0
 800a644:	e7f4      	b.n	800a630 <putc_flush+0x26>

0800a646 <f_sync>:
{
 800a646:	b570      	push	{r4, r5, r6, lr}
 800a648:	b082      	sub	sp, #8
 800a64a:	0004      	movs	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a64c:	a901      	add	r1, sp, #4
 800a64e:	f7fe ff7a 	bl	8009546 <validate>
	if (res == FR_OK) {
 800a652:	2800      	cmp	r0, #0
 800a654:	d10e      	bne.n	800a674 <f_sync+0x2e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a656:	7d23      	ldrb	r3, [r4, #20]
 800a658:	065a      	lsls	r2, r3, #25
 800a65a:	d50b      	bpl.n	800a674 <f_sync+0x2e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a65c:	b25b      	sxtb	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	db0a      	blt.n	800a678 <f_sync+0x32>
			tm = GET_FATTIME();				/* Modified time */
 800a662:	f7fe fd37 	bl	80090d4 <get_fattime>
 800a666:	0005      	movs	r5, r0
				res = move_window(fs, fp->dir_sect);
 800a668:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a66a:	9801      	ldr	r0, [sp, #4]
 800a66c:	f7fe ffc3 	bl	80095f6 <move_window>
				if (res == FR_OK) {
 800a670:	2800      	cmp	r0, #0
 800a672:	d010      	beq.n	800a696 <f_sync+0x50>
}
 800a674:	b002      	add	sp, #8
 800a676:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a678:	0021      	movs	r1, r4
 800a67a:	3130      	adds	r1, #48	; 0x30
 800a67c:	9b01      	ldr	r3, [sp, #4]
 800a67e:	7858      	ldrb	r0, [r3, #1]
 800a680:	2301      	movs	r3, #1
 800a682:	6a22      	ldr	r2, [r4, #32]
 800a684:	f7fe fd6a 	bl	800915c <disk_write>
 800a688:	2800      	cmp	r0, #0
 800a68a:	d128      	bne.n	800a6de <f_sync+0x98>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a68c:	7d22      	ldrb	r2, [r4, #20]
 800a68e:	237f      	movs	r3, #127	; 0x7f
 800a690:	4013      	ands	r3, r2
 800a692:	7523      	strb	r3, [r4, #20]
 800a694:	e7e5      	b.n	800a662 <f_sync+0x1c>
					dir = fp->dir_ptr;
 800a696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a698:	7af3      	ldrb	r3, [r6, #11]
 800a69a:	2220      	movs	r2, #32
 800a69c:	4313      	orrs	r3, r2
 800a69e:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a6a0:	68a2      	ldr	r2, [r4, #8]
 800a6a2:	0031      	movs	r1, r6
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	f7fe fe9a 	bl	80093de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a6aa:	0030      	movs	r0, r6
 800a6ac:	301c      	adds	r0, #28
 800a6ae:	68e1      	ldr	r1, [r4, #12]
 800a6b0:	f7fe fd81 	bl	80091b6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a6b4:	0030      	movs	r0, r6
 800a6b6:	3016      	adds	r0, #22
 800a6b8:	0029      	movs	r1, r5
 800a6ba:	f7fe fd7c 	bl	80091b6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a6be:	0030      	movs	r0, r6
 800a6c0:	3012      	adds	r0, #18
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	f7fe fd73 	bl	80091ae <st_word>
					fs->wflag = 1;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	9a01      	ldr	r2, [sp, #4]
 800a6cc:	70d3      	strb	r3, [r2, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a6ce:	9801      	ldr	r0, [sp, #4]
 800a6d0:	f7ff fcda 	bl	800a088 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a6d4:	7d23      	ldrb	r3, [r4, #20]
 800a6d6:	2240      	movs	r2, #64	; 0x40
 800a6d8:	4393      	bics	r3, r2
 800a6da:	7523      	strb	r3, [r4, #20]
 800a6dc:	e7ca      	b.n	800a674 <f_sync+0x2e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e7c8      	b.n	800a674 <f_sync+0x2e>

0800a6e2 <f_getfree>:
{
 800a6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e4:	46d6      	mov	lr, sl
 800a6e6:	464f      	mov	r7, r9
 800a6e8:	4646      	mov	r6, r8
 800a6ea:	b5c0      	push	{r6, r7, lr}
 800a6ec:	b088      	sub	sp, #32
 800a6ee:	9001      	str	r0, [sp, #4]
 800a6f0:	4689      	mov	r9, r1
 800a6f2:	0014      	movs	r4, r2
	res = find_volume(&path, &fs, 0);
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	a907      	add	r1, sp, #28
 800a6f8:	a801      	add	r0, sp, #4
 800a6fa:	f7fe ffd7 	bl	80096ac <find_volume>
 800a6fe:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
 800a700:	d162      	bne.n	800a7c8 <f_getfree+0xe6>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a702:	9b07      	ldr	r3, [sp, #28]
 800a704:	6023      	str	r3, [r4, #0]
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a706:	691a      	ldr	r2, [r3, #16]
 800a708:	695e      	ldr	r6, [r3, #20]
 800a70a:	1eb1      	subs	r1, r6, #2
 800a70c:	428a      	cmp	r2, r1
 800a70e:	d802      	bhi.n	800a716 <f_getfree+0x34>
			*nclst = fs->free_clst;
 800a710:	464b      	mov	r3, r9
 800a712:	601a      	str	r2, [r3, #0]
 800a714:	e058      	b.n	800a7c8 <f_getfree+0xe6>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a716:	781f      	ldrb	r7, [r3, #0]
 800a718:	2f01      	cmp	r7, #1
 800a71a:	d006      	beq.n	800a72a <f_getfree+0x48>
					clst = fs->n_fatent; sect = fs->fatbase;
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	469a      	mov	sl, r3
					i = 0; p = 0;
 800a720:	2400      	movs	r4, #0
 800a722:	2700      	movs	r7, #0
			nfree = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	4698      	mov	r8, r3
 800a728:	e035      	b.n	800a796 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 800a72a:	9302      	str	r3, [sp, #8]
 800a72c:	2402      	movs	r4, #2
			nfree = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	4698      	mov	r8, r3
 800a732:	e004      	b.n	800a73e <f_getfree+0x5c>
				} while (++clst < fs->n_fatent);
 800a734:	3401      	adds	r4, #1
 800a736:	9b07      	ldr	r3, [sp, #28]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	42a3      	cmp	r3, r4
 800a73c:	d93b      	bls.n	800a7b6 <f_getfree+0xd4>
					stat = get_fat(&obj, clst);
 800a73e:	0021      	movs	r1, r4
 800a740:	a802      	add	r0, sp, #8
 800a742:	f7ff f9f3 	bl	8009b2c <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a746:	1c43      	adds	r3, r0, #1
 800a748:	d034      	beq.n	800a7b4 <f_getfree+0xd2>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a74a:	2801      	cmp	r0, #1
 800a74c:	d043      	beq.n	800a7d6 <f_getfree+0xf4>
					if (stat == 0) nfree++;
 800a74e:	2800      	cmp	r0, #0
 800a750:	d1f0      	bne.n	800a734 <f_getfree+0x52>
 800a752:	2301      	movs	r3, #1
 800a754:	469c      	mov	ip, r3
 800a756:	44e0      	add	r8, ip
 800a758:	e7ec      	b.n	800a734 <f_getfree+0x52>
							res = move_window(fs, sect++);
 800a75a:	4653      	mov	r3, sl
 800a75c:	1c5f      	adds	r7, r3, #1
 800a75e:	4651      	mov	r1, sl
 800a760:	9807      	ldr	r0, [sp, #28]
 800a762:	f7fe ff48 	bl	80095f6 <move_window>
 800a766:	1e05      	subs	r5, r0, #0
							if (res != FR_OK) break;
 800a768:	d125      	bne.n	800a7b6 <f_getfree+0xd4>
							p = fs->win;
 800a76a:	9c07      	ldr	r4, [sp, #28]
 800a76c:	3430      	adds	r4, #48	; 0x30
							res = move_window(fs, sect++);
 800a76e:	46ba      	mov	sl, r7
							i = SS(fs);
 800a770:	2780      	movs	r7, #128	; 0x80
 800a772:	00bf      	lsls	r7, r7, #2
 800a774:	e011      	b.n	800a79a <f_getfree+0xb8>
							if (ld_word(p) == 0) nfree++;
 800a776:	0020      	movs	r0, r4
 800a778:	f7fe fd08 	bl	800918c <ld_word>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d102      	bne.n	800a786 <f_getfree+0xa4>
 800a780:	2301      	movs	r3, #1
 800a782:	469c      	mov	ip, r3
 800a784:	44e0      	add	r8, ip
							p += 2; i -= 2;
 800a786:	3402      	adds	r4, #2
 800a788:	3f02      	subs	r7, #2
 800a78a:	e001      	b.n	800a790 <f_getfree+0xae>
							p += 4; i -= 4;
 800a78c:	3404      	adds	r4, #4
 800a78e:	3f04      	subs	r7, #4
					} while (--clst);
 800a790:	3e01      	subs	r6, #1
 800a792:	2e00      	cmp	r6, #0
 800a794:	d00f      	beq.n	800a7b6 <f_getfree+0xd4>
						if (i == 0) {
 800a796:	2f00      	cmp	r7, #0
 800a798:	d0df      	beq.n	800a75a <f_getfree+0x78>
						if (fs->fs_type == FS_FAT16) {
 800a79a:	9b07      	ldr	r3, [sp, #28]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d0e9      	beq.n	800a776 <f_getfree+0x94>
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a7a2:	0020      	movs	r0, r4
 800a7a4:	f7fe fcf7 	bl	8009196 <ld_dword>
 800a7a8:	0100      	lsls	r0, r0, #4
 800a7aa:	d1ef      	bne.n	800a78c <f_getfree+0xaa>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	469c      	mov	ip, r3
 800a7b0:	44e0      	add	r8, ip
 800a7b2:	e7eb      	b.n	800a78c <f_getfree+0xaa>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a7b4:	003d      	movs	r5, r7
			*nclst = nfree;			/* Return the free clusters */
 800a7b6:	464b      	mov	r3, r9
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a7bc:	9b07      	ldr	r3, [sp, #28]
 800a7be:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a7c0:	791a      	ldrb	r2, [r3, #4]
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	711a      	strb	r2, [r3, #4]
}
 800a7c8:	0028      	movs	r0, r5
 800a7ca:	b008      	add	sp, #32
 800a7cc:	bce0      	pop	{r5, r6, r7}
 800a7ce:	46ba      	mov	sl, r7
 800a7d0:	46b1      	mov	r9, r6
 800a7d2:	46a8      	mov	r8, r5
 800a7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a7d6:	2502      	movs	r5, #2
 800a7d8:	e7ed      	b.n	800a7b6 <f_getfree+0xd4>
	...

0800a7dc <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800a7dc:	b40e      	push	{r1, r2, r3}
 800a7de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7e0:	46de      	mov	lr, fp
 800a7e2:	4657      	mov	r7, sl
 800a7e4:	464e      	mov	r6, r9
 800a7e6:	4645      	mov	r5, r8
 800a7e8:	b5e0      	push	{r5, r6, r7, lr}
 800a7ea:	b0a0      	sub	sp, #128	; 0x80
 800a7ec:	0001      	movs	r1, r0
 800a7ee:	ac29      	add	r4, sp, #164	; 0xa4
 800a7f0:	cc08      	ldmia	r4!, {r3}
 800a7f2:	4699      	mov	r9, r3
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800a7f4:	a80c      	add	r0, sp, #48	; 0x30
 800a7f6:	f7fe fea1 	bl	800953c <putc_init>

	va_start(arp, fmt);
 800a7fa:	941f      	str	r4, [sp, #124]	; 0x7c

	for (;;) {
		c = *fmt++;
 800a7fc:	464b      	mov	r3, r9
 800a7fe:	1c5c      	adds	r4, r3, #1
 800a800:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 800a802:	2900      	cmp	r1, #0
 800a804:	d100      	bne.n	800a808 <f_printf+0x2c>
 800a806:	e109      	b.n	800aa1c <f_printf+0x240>
		if (c != '%') {				/* Non escape character */
 800a808:	2925      	cmp	r1, #37	; 0x25
 800a80a:	d004      	beq.n	800a816 <f_printf+0x3a>
			putc_bfd(&pb, c);
 800a80c:	a80c      	add	r0, sp, #48	; 0x30
 800a80e:	f7ff fed5 	bl	800a5bc <putc_bfd>
		c = *fmt++;
 800a812:	46a1      	mov	r9, r4
			continue;
 800a814:	e7f2      	b.n	800a7fc <f_printf+0x20>
		}
		w = f = 0;
		c = *fmt++;
 800a816:	2302      	movs	r3, #2
 800a818:	469c      	mov	ip, r3
 800a81a:	44e1      	add	r9, ip
 800a81c:	7827      	ldrb	r7, [r4, #0]
		if (c == '0') {				/* Flag: '0' padding */
 800a81e:	2f30      	cmp	r7, #48	; 0x30
 800a820:	d006      	beq.n	800a830 <f_printf+0x54>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 800a822:	2f2d      	cmp	r7, #45	; 0x2d
 800a824:	d00a      	beq.n	800a83c <f_printf+0x60>
		w = f = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	469a      	mov	sl, r3
 800a82a:	2300      	movs	r3, #0
 800a82c:	4698      	mov	r8, r3
 800a82e:	e019      	b.n	800a864 <f_printf+0x88>
			f = 1; c = *fmt++;
 800a830:	1ca3      	adds	r3, r4, #2
 800a832:	4699      	mov	r9, r3
 800a834:	7867      	ldrb	r7, [r4, #1]
 800a836:	2301      	movs	r3, #1
 800a838:	469a      	mov	sl, r3
 800a83a:	e7f6      	b.n	800a82a <f_printf+0x4e>
				f = 2; c = *fmt++;
 800a83c:	1ca3      	adds	r3, r4, #2
 800a83e:	4699      	mov	r9, r3
 800a840:	7867      	ldrb	r7, [r4, #1]
 800a842:	2302      	movs	r3, #2
 800a844:	469a      	mov	sl, r3
 800a846:	e7f0      	b.n	800a82a <f_printf+0x4e>
			}
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
 800a848:	4643      	mov	r3, r8
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4443      	add	r3, r8
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	18ff      	adds	r7, r7, r3
 800a852:	2330      	movs	r3, #48	; 0x30
 800a854:	425b      	negs	r3, r3
 800a856:	4698      	mov	r8, r3
 800a858:	44b8      	add	r8, r7
			c = *fmt++;
 800a85a:	464b      	mov	r3, r9
 800a85c:	781f      	ldrb	r7, [r3, #0]
 800a85e:	2301      	movs	r3, #1
 800a860:	469c      	mov	ip, r3
 800a862:	44e1      	add	r9, ip
		while (IsDigit(c)) {		/* Precision */
 800a864:	003b      	movs	r3, r7
 800a866:	3b30      	subs	r3, #48	; 0x30
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b09      	cmp	r3, #9
 800a86c:	d9ec      	bls.n	800a848 <f_printf+0x6c>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800a86e:	2f6c      	cmp	r7, #108	; 0x6c
 800a870:	d001      	beq.n	800a876 <f_printf+0x9a>
 800a872:	2f4c      	cmp	r7, #76	; 0x4c
 800a874:	d109      	bne.n	800a88a <f_printf+0xae>
			f |= 4; c = *fmt++;
 800a876:	2304      	movs	r3, #4
 800a878:	4652      	mov	r2, sl
 800a87a:	431a      	orrs	r2, r3
 800a87c:	b2d3      	uxtb	r3, r2
 800a87e:	469a      	mov	sl, r3
 800a880:	464b      	mov	r3, r9
 800a882:	781f      	ldrb	r7, [r3, #0]
 800a884:	2301      	movs	r3, #1
 800a886:	469c      	mov	ip, r3
 800a888:	44e1      	add	r9, ip
		}
		if (!c) break;
 800a88a:	2f00      	cmp	r7, #0
 800a88c:	d100      	bne.n	800a890 <f_printf+0xb4>
 800a88e:	e0c5      	b.n	800aa1c <f_printf+0x240>
		d = c;
		if (IsLower(d)) d -= 0x20;
 800a890:	003b      	movs	r3, r7
 800a892:	3b61      	subs	r3, #97	; 0x61
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b19      	cmp	r3, #25
 800a898:	d80b      	bhi.n	800a8b2 <f_printf+0xd6>
 800a89a:	003a      	movs	r2, r7
 800a89c:	3a20      	subs	r2, #32
 800a89e:	b2d2      	uxtb	r2, r2
		switch (d) {				/* Type is... */
 800a8a0:	0013      	movs	r3, r2
 800a8a2:	3b42      	subs	r3, #66	; 0x42
 800a8a4:	b2d9      	uxtb	r1, r3
 800a8a6:	2916      	cmp	r1, #22
 800a8a8:	d847      	bhi.n	800a93a <f_printf+0x15e>
 800a8aa:	008b      	lsls	r3, r1, #2
 800a8ac:	4962      	ldr	r1, [pc, #392]	; (800aa38 <f_printf+0x25c>)
 800a8ae:	58cb      	ldr	r3, [r1, r3]
 800a8b0:	469f      	mov	pc, r3
		d = c;
 800a8b2:	003a      	movs	r2, r7
 800a8b4:	e7f4      	b.n	800a8a0 <f_printf+0xc4>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800a8b6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a8b8:	1d1a      	adds	r2, r3, #4
 800a8ba:	921f      	str	r2, [sp, #124]	; 0x7c
 800a8bc:	681d      	ldr	r5, [r3, #0]
			for (j = 0; p[j]; j++) ;
 800a8be:	2400      	movs	r4, #0
 800a8c0:	e000      	b.n	800a8c4 <f_printf+0xe8>
 800a8c2:	3401      	adds	r4, #1
 800a8c4:	5d2b      	ldrb	r3, [r5, r4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1fb      	bne.n	800a8c2 <f_printf+0xe6>
			if (!(f & 2)) {
 800a8ca:	4653      	mov	r3, sl
 800a8cc:	079b      	lsls	r3, r3, #30
 800a8ce:	d40e      	bmi.n	800a8ee <f_printf+0x112>
 800a8d0:	e004      	b.n	800a8dc <f_printf+0x100>
				while (j++ < w) putc_bfd(&pb, ' ');
 800a8d2:	2120      	movs	r1, #32
 800a8d4:	a80c      	add	r0, sp, #48	; 0x30
 800a8d6:	f7ff fe71 	bl	800a5bc <putc_bfd>
 800a8da:	0034      	movs	r4, r6
 800a8dc:	1c66      	adds	r6, r4, #1
 800a8de:	4544      	cmp	r4, r8
 800a8e0:	d3f7      	bcc.n	800a8d2 <f_printf+0xf6>
 800a8e2:	0034      	movs	r4, r6
 800a8e4:	e003      	b.n	800a8ee <f_printf+0x112>
			}
			while (*p) putc_bfd(&pb, *p++);
 800a8e6:	3501      	adds	r5, #1
 800a8e8:	a80c      	add	r0, sp, #48	; 0x30
 800a8ea:	f7ff fe67 	bl	800a5bc <putc_bfd>
 800a8ee:	7829      	ldrb	r1, [r5, #0]
 800a8f0:	2900      	cmp	r1, #0
 800a8f2:	d1f8      	bne.n	800a8e6 <f_printf+0x10a>
 800a8f4:	e004      	b.n	800a900 <f_printf+0x124>
			while (j++ < w) putc_bfd(&pb, ' ');
 800a8f6:	2120      	movs	r1, #32
 800a8f8:	a80c      	add	r0, sp, #48	; 0x30
 800a8fa:	f7ff fe5f 	bl	800a5bc <putc_bfd>
 800a8fe:	002c      	movs	r4, r5
 800a900:	1c65      	adds	r5, r4, #1
 800a902:	4544      	cmp	r4, r8
 800a904:	d3f7      	bcc.n	800a8f6 <f_printf+0x11a>
 800a906:	e779      	b.n	800a7fc <f_printf+0x20>
			continue;

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800a908:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a90a:	1d1a      	adds	r2, r3, #4
 800a90c:	921f      	str	r2, [sp, #124]	; 0x7c
 800a90e:	7819      	ldrb	r1, [r3, #0]
 800a910:	a80c      	add	r0, sp, #48	; 0x30
 800a912:	f7ff fe53 	bl	800a5bc <putc_bfd>
 800a916:	e771      	b.n	800a7fc <f_printf+0x20>
		case 'O' :					/* Octal */
			r = 8; break;

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800a918:	230a      	movs	r3, #10
 800a91a:	9303      	str	r3, [sp, #12]
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a91c:	4653      	mov	r3, sl
 800a91e:	075b      	lsls	r3, r3, #29
 800a920:	d516      	bpl.n	800a950 <f_printf+0x174>
 800a922:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a924:	1d19      	adds	r1, r3, #4
 800a926:	911f      	str	r1, [sp, #124]	; 0x7c
 800a928:	681d      	ldr	r5, [r3, #0]
		if (d == 'D' && (v & 0x80000000)) {
 800a92a:	2a44      	cmp	r2, #68	; 0x44
 800a92c:	d01c      	beq.n	800a968 <f_printf+0x18c>
			v = 0 - v;
			f |= 8;
		}
		i = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	469b      	mov	fp, r3
 800a932:	e032      	b.n	800a99a <f_printf+0x1be>
			r = 16; break;
 800a934:	2310      	movs	r3, #16
 800a936:	9303      	str	r3, [sp, #12]
 800a938:	e7f0      	b.n	800a91c <f_printf+0x140>
			putc_bfd(&pb, c); continue;
 800a93a:	0039      	movs	r1, r7
 800a93c:	a80c      	add	r0, sp, #48	; 0x30
 800a93e:	f7ff fe3d 	bl	800a5bc <putc_bfd>
 800a942:	e75b      	b.n	800a7fc <f_printf+0x20>
		switch (d) {				/* Type is... */
 800a944:	2302      	movs	r3, #2
 800a946:	9303      	str	r3, [sp, #12]
 800a948:	e7e8      	b.n	800a91c <f_printf+0x140>
			r = 8; break;
 800a94a:	2308      	movs	r3, #8
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	e7e5      	b.n	800a91c <f_printf+0x140>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800a950:	2a44      	cmp	r2, #68	; 0x44
 800a952:	d004      	beq.n	800a95e <f_printf+0x182>
 800a954:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a956:	1d19      	adds	r1, r3, #4
 800a958:	911f      	str	r1, [sp, #124]	; 0x7c
 800a95a:	681d      	ldr	r5, [r3, #0]
 800a95c:	e7e5      	b.n	800a92a <f_printf+0x14e>
 800a95e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a960:	1d19      	adds	r1, r3, #4
 800a962:	911f      	str	r1, [sp, #124]	; 0x7c
 800a964:	681d      	ldr	r5, [r3, #0]
 800a966:	e7e0      	b.n	800a92a <f_printf+0x14e>
		if (d == 'D' && (v & 0x80000000)) {
 800a968:	2d00      	cmp	r5, #0
 800a96a:	dae0      	bge.n	800a92e <f_printf+0x152>
			v = 0 - v;
 800a96c:	426d      	negs	r5, r5
			f |= 8;
 800a96e:	2308      	movs	r3, #8
 800a970:	4652      	mov	r2, sl
 800a972:	431a      	orrs	r2, r3
 800a974:	b2d3      	uxtb	r3, r2
 800a976:	469a      	mov	sl, r3
 800a978:	e7d9      	b.n	800a92e <f_printf+0x152>
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a97a:	2127      	movs	r1, #39	; 0x27
 800a97c:	190c      	adds	r4, r1, r4
 800a97e:	b2e4      	uxtb	r4, r4
			str[i++] = d + '0';
 800a980:	465b      	mov	r3, fp
 800a982:	1c5e      	adds	r6, r3, #1
 800a984:	3430      	adds	r4, #48	; 0x30
 800a986:	ab04      	add	r3, sp, #16
 800a988:	465a      	mov	r2, fp
 800a98a:	549c      	strb	r4, [r3, r2]
		} while (v && i < sizeof str / sizeof str[0]);
 800a98c:	9b01      	ldr	r3, [sp, #4]
 800a98e:	9a02      	ldr	r2, [sp, #8]
 800a990:	4293      	cmp	r3, r2
 800a992:	d815      	bhi.n	800a9c0 <f_printf+0x1e4>
 800a994:	2e1f      	cmp	r6, #31
 800a996:	d813      	bhi.n	800a9c0 <f_printf+0x1e4>
			str[i++] = d + '0';
 800a998:	46b3      	mov	fp, r6
			d = (TCHAR)(v % r); v /= r;
 800a99a:	9e03      	ldr	r6, [sp, #12]
 800a99c:	9601      	str	r6, [sp, #4]
 800a99e:	0031      	movs	r1, r6
 800a9a0:	0028      	movs	r0, r5
 800a9a2:	f7f5 fc5b 	bl	800025c <__aeabi_uidivmod>
 800a9a6:	b2cc      	uxtb	r4, r1
 800a9a8:	9502      	str	r5, [sp, #8]
 800a9aa:	0031      	movs	r1, r6
 800a9ac:	0028      	movs	r0, r5
 800a9ae:	f7f5 fbcf 	bl	8000150 <__udivsi3>
 800a9b2:	0005      	movs	r5, r0
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800a9b4:	2c09      	cmp	r4, #9
 800a9b6:	d9e3      	bls.n	800a980 <f_printf+0x1a4>
 800a9b8:	2f78      	cmp	r7, #120	; 0x78
 800a9ba:	d0de      	beq.n	800a97a <f_printf+0x19e>
 800a9bc:	2107      	movs	r1, #7
 800a9be:	e7dd      	b.n	800a97c <f_printf+0x1a0>
		if (f & 8) str[i++] = '-';
 800a9c0:	4653      	mov	r3, sl
 800a9c2:	071b      	lsls	r3, r3, #28
 800a9c4:	d504      	bpl.n	800a9d0 <f_printf+0x1f4>
 800a9c6:	232d      	movs	r3, #45	; 0x2d
 800a9c8:	aa04      	add	r2, sp, #16
 800a9ca:	5593      	strb	r3, [r2, r6]
 800a9cc:	465e      	mov	r6, fp
 800a9ce:	3602      	adds	r6, #2
		j = i; d = (f & 1) ? '0' : ' ';
 800a9d0:	4653      	mov	r3, sl
 800a9d2:	07db      	lsls	r3, r3, #31
 800a9d4:	d502      	bpl.n	800a9dc <f_printf+0x200>
 800a9d6:	2730      	movs	r7, #48	; 0x30
 800a9d8:	0034      	movs	r4, r6
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a9da:	e006      	b.n	800a9ea <f_printf+0x20e>
		j = i; d = (f & 1) ? '0' : ' ';
 800a9dc:	2720      	movs	r7, #32
 800a9de:	e7fb      	b.n	800a9d8 <f_printf+0x1fc>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800a9e0:	0039      	movs	r1, r7
 800a9e2:	a80c      	add	r0, sp, #48	; 0x30
 800a9e4:	f7ff fdea 	bl	800a5bc <putc_bfd>
 800a9e8:	002c      	movs	r4, r5
 800a9ea:	4653      	mov	r3, sl
 800a9ec:	079b      	lsls	r3, r3, #30
 800a9ee:	d403      	bmi.n	800a9f8 <f_printf+0x21c>
 800a9f0:	1c65      	adds	r5, r4, #1
 800a9f2:	4544      	cmp	r4, r8
 800a9f4:	d3f4      	bcc.n	800a9e0 <f_printf+0x204>
 800a9f6:	002c      	movs	r4, r5
		do {
			putc_bfd(&pb, str[--i]);
 800a9f8:	3e01      	subs	r6, #1
 800a9fa:	ab04      	add	r3, sp, #16
 800a9fc:	5d99      	ldrb	r1, [r3, r6]
 800a9fe:	a80c      	add	r0, sp, #48	; 0x30
 800aa00:	f7ff fddc 	bl	800a5bc <putc_bfd>
		} while (i);
 800aa04:	2e00      	cmp	r6, #0
 800aa06:	d1f7      	bne.n	800a9f8 <f_printf+0x21c>
		while (j++ < w) putc_bfd(&pb, d);
 800aa08:	1c65      	adds	r5, r4, #1
 800aa0a:	4544      	cmp	r4, r8
 800aa0c:	d300      	bcc.n	800aa10 <f_printf+0x234>
 800aa0e:	e6f5      	b.n	800a7fc <f_printf+0x20>
 800aa10:	0039      	movs	r1, r7
 800aa12:	a80c      	add	r0, sp, #48	; 0x30
 800aa14:	f7ff fdd2 	bl	800a5bc <putc_bfd>
 800aa18:	002c      	movs	r4, r5
 800aa1a:	e7f5      	b.n	800aa08 <f_printf+0x22c>
	}

	va_end(arp);

	return putc_flush(&pb);
 800aa1c:	a80c      	add	r0, sp, #48	; 0x30
 800aa1e:	f7ff fdf4 	bl	800a60a <putc_flush>
}
 800aa22:	b020      	add	sp, #128	; 0x80
 800aa24:	bcf0      	pop	{r4, r5, r6, r7}
 800aa26:	46bb      	mov	fp, r7
 800aa28:	46b2      	mov	sl, r6
 800aa2a:	46a9      	mov	r9, r5
 800aa2c:	46a0      	mov	r8, r4
 800aa2e:	bcf0      	pop	{r4, r5, r6, r7}
 800aa30:	bc08      	pop	{r3}
 800aa32:	b003      	add	sp, #12
 800aa34:	4718      	bx	r3
 800aa36:	46c0      	nop			; (mov r8, r8)
 800aa38:	0800e058 	.word	0x0800e058

0800aa3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800aa3c:	b570      	push	{r4, r5, r6, lr}
 800aa3e:	0004      	movs	r4, r0
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800aa40:	4b0f      	ldr	r3, [pc, #60]	; (800aa80 <FATFS_LinkDriverEx+0x44>)
 800aa42:	7a5b      	ldrb	r3, [r3, #9]
 800aa44:	b2d8      	uxtb	r0, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d117      	bne.n	800aa7a <FATFS_LinkDriverEx+0x3e>
  {
    disk.is_initialized[disk.nbr] = 0;
 800aa4a:	4b0d      	ldr	r3, [pc, #52]	; (800aa80 <FATFS_LinkDriverEx+0x44>)
 800aa4c:	7a5d      	ldrb	r5, [r3, #9]
 800aa4e:	b2ed      	uxtb	r5, r5
 800aa50:	2600      	movs	r6, #0
 800aa52:	555e      	strb	r6, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800aa54:	7a5d      	ldrb	r5, [r3, #9]
 800aa56:	00ad      	lsls	r5, r5, #2
 800aa58:	195d      	adds	r5, r3, r5
 800aa5a:	606c      	str	r4, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800aa5c:	7a5c      	ldrb	r4, [r3, #9]
 800aa5e:	191c      	adds	r4, r3, r4
 800aa60:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800aa62:	7a5a      	ldrb	r2, [r3, #9]
 800aa64:	1c54      	adds	r4, r2, #1
 800aa66:	b2e4      	uxtb	r4, r4
 800aa68:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800aa6a:	3230      	adds	r2, #48	; 0x30
 800aa6c:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800aa6e:	233a      	movs	r3, #58	; 0x3a
 800aa70:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800aa72:	3b0b      	subs	r3, #11
 800aa74:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800aa76:	70ce      	strb	r6, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800aa78:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t ret = 1;
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	e7fc      	b.n	800aa78 <FATFS_LinkDriverEx+0x3c>
 800aa7e:	46c0      	nop			; (mov r8, r8)
 800aa80:	20001154 	.word	0x20001154

0800aa84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800aa84:	b510      	push	{r4, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800aa86:	2200      	movs	r2, #0
 800aa88:	f7ff ffd8 	bl	800aa3c <FATFS_LinkDriverEx>
}
 800aa8c:	bd10      	pop	{r4, pc}
	...

0800aa90 <__errno>:
 800aa90:	4b01      	ldr	r3, [pc, #4]	; (800aa98 <__errno+0x8>)
 800aa92:	6818      	ldr	r0, [r3, #0]
 800aa94:	4770      	bx	lr
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	20000024 	.word	0x20000024

0800aa9c <__libc_init_array>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	2600      	movs	r6, #0
 800aaa0:	4d0c      	ldr	r5, [pc, #48]	; (800aad4 <__libc_init_array+0x38>)
 800aaa2:	4c0d      	ldr	r4, [pc, #52]	; (800aad8 <__libc_init_array+0x3c>)
 800aaa4:	1b64      	subs	r4, r4, r5
 800aaa6:	10a4      	asrs	r4, r4, #2
 800aaa8:	42a6      	cmp	r6, r4
 800aaaa:	d109      	bne.n	800aac0 <__libc_init_array+0x24>
 800aaac:	2600      	movs	r6, #0
 800aaae:	f002 fe85 	bl	800d7bc <_init>
 800aab2:	4d0a      	ldr	r5, [pc, #40]	; (800aadc <__libc_init_array+0x40>)
 800aab4:	4c0a      	ldr	r4, [pc, #40]	; (800aae0 <__libc_init_array+0x44>)
 800aab6:	1b64      	subs	r4, r4, r5
 800aab8:	10a4      	asrs	r4, r4, #2
 800aaba:	42a6      	cmp	r6, r4
 800aabc:	d105      	bne.n	800aaca <__libc_init_array+0x2e>
 800aabe:	bd70      	pop	{r4, r5, r6, pc}
 800aac0:	00b3      	lsls	r3, r6, #2
 800aac2:	58eb      	ldr	r3, [r5, r3]
 800aac4:	4798      	blx	r3
 800aac6:	3601      	adds	r6, #1
 800aac8:	e7ee      	b.n	800aaa8 <__libc_init_array+0xc>
 800aaca:	00b3      	lsls	r3, r6, #2
 800aacc:	58eb      	ldr	r3, [r5, r3]
 800aace:	4798      	blx	r3
 800aad0:	3601      	adds	r6, #1
 800aad2:	e7f2      	b.n	800aaba <__libc_init_array+0x1e>
 800aad4:	0800e514 	.word	0x0800e514
 800aad8:	0800e514 	.word	0x0800e514
 800aadc:	0800e514 	.word	0x0800e514
 800aae0:	0800e518 	.word	0x0800e518

0800aae4 <memcpy>:
 800aae4:	2300      	movs	r3, #0
 800aae6:	b510      	push	{r4, lr}
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d100      	bne.n	800aaee <memcpy+0xa>
 800aaec:	bd10      	pop	{r4, pc}
 800aaee:	5ccc      	ldrb	r4, [r1, r3]
 800aaf0:	54c4      	strb	r4, [r0, r3]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	e7f8      	b.n	800aae8 <memcpy+0x4>

0800aaf6 <memset>:
 800aaf6:	0003      	movs	r3, r0
 800aaf8:	1882      	adds	r2, r0, r2
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d100      	bne.n	800ab00 <memset+0xa>
 800aafe:	4770      	bx	lr
 800ab00:	7019      	strb	r1, [r3, #0]
 800ab02:	3301      	adds	r3, #1
 800ab04:	e7f9      	b.n	800aafa <memset+0x4>

0800ab06 <__cvt>:
 800ab06:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab08:	001e      	movs	r6, r3
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	0014      	movs	r4, r2
 800ab0e:	b08b      	sub	sp, #44	; 0x2c
 800ab10:	429e      	cmp	r6, r3
 800ab12:	da04      	bge.n	800ab1e <__cvt+0x18>
 800ab14:	2180      	movs	r1, #128	; 0x80
 800ab16:	0609      	lsls	r1, r1, #24
 800ab18:	1873      	adds	r3, r6, r1
 800ab1a:	001e      	movs	r6, r3
 800ab1c:	232d      	movs	r3, #45	; 0x2d
 800ab1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ab20:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ab22:	7013      	strb	r3, [r2, #0]
 800ab24:	2320      	movs	r3, #32
 800ab26:	2203      	movs	r2, #3
 800ab28:	439f      	bics	r7, r3
 800ab2a:	2f46      	cmp	r7, #70	; 0x46
 800ab2c:	d007      	beq.n	800ab3e <__cvt+0x38>
 800ab2e:	003b      	movs	r3, r7
 800ab30:	3b45      	subs	r3, #69	; 0x45
 800ab32:	4259      	negs	r1, r3
 800ab34:	414b      	adcs	r3, r1
 800ab36:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ab38:	3a01      	subs	r2, #1
 800ab3a:	18cb      	adds	r3, r1, r3
 800ab3c:	9310      	str	r3, [sp, #64]	; 0x40
 800ab3e:	ab09      	add	r3, sp, #36	; 0x24
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	ab08      	add	r3, sp, #32
 800ab44:	9303      	str	r3, [sp, #12]
 800ab46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab48:	9200      	str	r2, [sp, #0]
 800ab4a:	9302      	str	r3, [sp, #8]
 800ab4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab4e:	0022      	movs	r2, r4
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	0033      	movs	r3, r6
 800ab54:	f000 fe36 	bl	800b7c4 <_dtoa_r>
 800ab58:	0005      	movs	r5, r0
 800ab5a:	2f47      	cmp	r7, #71	; 0x47
 800ab5c:	d102      	bne.n	800ab64 <__cvt+0x5e>
 800ab5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab60:	07db      	lsls	r3, r3, #31
 800ab62:	d528      	bpl.n	800abb6 <__cvt+0xb0>
 800ab64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab66:	18eb      	adds	r3, r5, r3
 800ab68:	9307      	str	r3, [sp, #28]
 800ab6a:	2f46      	cmp	r7, #70	; 0x46
 800ab6c:	d114      	bne.n	800ab98 <__cvt+0x92>
 800ab6e:	782b      	ldrb	r3, [r5, #0]
 800ab70:	2b30      	cmp	r3, #48	; 0x30
 800ab72:	d10c      	bne.n	800ab8e <__cvt+0x88>
 800ab74:	2200      	movs	r2, #0
 800ab76:	2300      	movs	r3, #0
 800ab78:	0020      	movs	r0, r4
 800ab7a:	0031      	movs	r1, r6
 800ab7c:	f7f5 fc6e 	bl	800045c <__aeabi_dcmpeq>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d104      	bne.n	800ab8e <__cvt+0x88>
 800ab84:	2301      	movs	r3, #1
 800ab86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab88:	1a9b      	subs	r3, r3, r2
 800ab8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab90:	9a07      	ldr	r2, [sp, #28]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	18d3      	adds	r3, r2, r3
 800ab96:	9307      	str	r3, [sp, #28]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	0020      	movs	r0, r4
 800ab9e:	0031      	movs	r1, r6
 800aba0:	f7f5 fc5c 	bl	800045c <__aeabi_dcmpeq>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	d001      	beq.n	800abac <__cvt+0xa6>
 800aba8:	9b07      	ldr	r3, [sp, #28]
 800abaa:	9309      	str	r3, [sp, #36]	; 0x24
 800abac:	2230      	movs	r2, #48	; 0x30
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	9907      	ldr	r1, [sp, #28]
 800abb2:	428b      	cmp	r3, r1
 800abb4:	d306      	bcc.n	800abc4 <__cvt+0xbe>
 800abb6:	0028      	movs	r0, r5
 800abb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800abbc:	1b5b      	subs	r3, r3, r5
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	b00b      	add	sp, #44	; 0x2c
 800abc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc4:	1c59      	adds	r1, r3, #1
 800abc6:	9109      	str	r1, [sp, #36]	; 0x24
 800abc8:	701a      	strb	r2, [r3, #0]
 800abca:	e7f0      	b.n	800abae <__cvt+0xa8>

0800abcc <__exponent>:
 800abcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abce:	1c83      	adds	r3, r0, #2
 800abd0:	b087      	sub	sp, #28
 800abd2:	9303      	str	r3, [sp, #12]
 800abd4:	0005      	movs	r5, r0
 800abd6:	000c      	movs	r4, r1
 800abd8:	232b      	movs	r3, #43	; 0x2b
 800abda:	7002      	strb	r2, [r0, #0]
 800abdc:	2900      	cmp	r1, #0
 800abde:	da01      	bge.n	800abe4 <__exponent+0x18>
 800abe0:	424c      	negs	r4, r1
 800abe2:	3302      	adds	r3, #2
 800abe4:	706b      	strb	r3, [r5, #1]
 800abe6:	2c09      	cmp	r4, #9
 800abe8:	dd31      	ble.n	800ac4e <__exponent+0x82>
 800abea:	270a      	movs	r7, #10
 800abec:	ab04      	add	r3, sp, #16
 800abee:	1dde      	adds	r6, r3, #7
 800abf0:	0020      	movs	r0, r4
 800abf2:	0039      	movs	r1, r7
 800abf4:	9601      	str	r6, [sp, #4]
 800abf6:	f7f5 fc1b 	bl	8000430 <__aeabi_idivmod>
 800abfa:	3e01      	subs	r6, #1
 800abfc:	3130      	adds	r1, #48	; 0x30
 800abfe:	0020      	movs	r0, r4
 800ac00:	7031      	strb	r1, [r6, #0]
 800ac02:	0039      	movs	r1, r7
 800ac04:	9402      	str	r4, [sp, #8]
 800ac06:	f7f5 fb2d 	bl	8000264 <__divsi3>
 800ac0a:	9b02      	ldr	r3, [sp, #8]
 800ac0c:	0004      	movs	r4, r0
 800ac0e:	2b63      	cmp	r3, #99	; 0x63
 800ac10:	dcee      	bgt.n	800abf0 <__exponent+0x24>
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	3430      	adds	r4, #48	; 0x30
 800ac16:	1e9a      	subs	r2, r3, #2
 800ac18:	0013      	movs	r3, r2
 800ac1a:	9903      	ldr	r1, [sp, #12]
 800ac1c:	7014      	strb	r4, [r2, #0]
 800ac1e:	a804      	add	r0, sp, #16
 800ac20:	3007      	adds	r0, #7
 800ac22:	4298      	cmp	r0, r3
 800ac24:	d80e      	bhi.n	800ac44 <__exponent+0x78>
 800ac26:	ab04      	add	r3, sp, #16
 800ac28:	3307      	adds	r3, #7
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d804      	bhi.n	800ac3a <__exponent+0x6e>
 800ac30:	ab04      	add	r3, sp, #16
 800ac32:	3009      	adds	r0, #9
 800ac34:	18c0      	adds	r0, r0, r3
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	1ac0      	subs	r0, r0, r3
 800ac3a:	9b03      	ldr	r3, [sp, #12]
 800ac3c:	1818      	adds	r0, r3, r0
 800ac3e:	1b40      	subs	r0, r0, r5
 800ac40:	b007      	add	sp, #28
 800ac42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac44:	7818      	ldrb	r0, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	7008      	strb	r0, [r1, #0]
 800ac4a:	3101      	adds	r1, #1
 800ac4c:	e7e7      	b.n	800ac1e <__exponent+0x52>
 800ac4e:	2330      	movs	r3, #48	; 0x30
 800ac50:	18e4      	adds	r4, r4, r3
 800ac52:	70ab      	strb	r3, [r5, #2]
 800ac54:	1d28      	adds	r0, r5, #4
 800ac56:	70ec      	strb	r4, [r5, #3]
 800ac58:	e7f1      	b.n	800ac3e <__exponent+0x72>
	...

0800ac5c <_printf_float>:
 800ac5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac5e:	b095      	sub	sp, #84	; 0x54
 800ac60:	000c      	movs	r4, r1
 800ac62:	9209      	str	r2, [sp, #36]	; 0x24
 800ac64:	001e      	movs	r6, r3
 800ac66:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800ac68:	0007      	movs	r7, r0
 800ac6a:	f001 fd93 	bl	800c794 <_localeconv_r>
 800ac6e:	6803      	ldr	r3, [r0, #0]
 800ac70:	0018      	movs	r0, r3
 800ac72:	930c      	str	r3, [sp, #48]	; 0x30
 800ac74:	f7f5 fa50 	bl	8000118 <strlen>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	9312      	str	r3, [sp, #72]	; 0x48
 800ac7c:	7e23      	ldrb	r3, [r4, #24]
 800ac7e:	2207      	movs	r2, #7
 800ac80:	930a      	str	r3, [sp, #40]	; 0x28
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	900e      	str	r0, [sp, #56]	; 0x38
 800ac86:	930d      	str	r3, [sp, #52]	; 0x34
 800ac88:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ac8a:	682b      	ldr	r3, [r5, #0]
 800ac8c:	05c9      	lsls	r1, r1, #23
 800ac8e:	d547      	bpl.n	800ad20 <_printf_float+0xc4>
 800ac90:	189b      	adds	r3, r3, r2
 800ac92:	4393      	bics	r3, r2
 800ac94:	001a      	movs	r2, r3
 800ac96:	3208      	adds	r2, #8
 800ac98:	602a      	str	r2, [r5, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	64a2      	str	r2, [r4, #72]	; 0x48
 800aca0:	64e3      	str	r3, [r4, #76]	; 0x4c
 800aca2:	2201      	movs	r2, #1
 800aca4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800aca6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800aca8:	930b      	str	r3, [sp, #44]	; 0x2c
 800acaa:	006b      	lsls	r3, r5, #1
 800acac:	085b      	lsrs	r3, r3, #1
 800acae:	930f      	str	r3, [sp, #60]	; 0x3c
 800acb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acb2:	4ba7      	ldr	r3, [pc, #668]	; (800af50 <_printf_float+0x2f4>)
 800acb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acb6:	4252      	negs	r2, r2
 800acb8:	f7f8 f8ce 	bl	8002e58 <__aeabi_dcmpun>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d131      	bne.n	800ad24 <_printf_float+0xc8>
 800acc0:	2201      	movs	r2, #1
 800acc2:	4ba3      	ldr	r3, [pc, #652]	; (800af50 <_printf_float+0x2f4>)
 800acc4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acc8:	4252      	negs	r2, r2
 800acca:	f7f5 fbd7 	bl	800047c <__aeabi_dcmple>
 800acce:	2800      	cmp	r0, #0
 800acd0:	d128      	bne.n	800ad24 <_printf_float+0xc8>
 800acd2:	2200      	movs	r2, #0
 800acd4:	2300      	movs	r3, #0
 800acd6:	0029      	movs	r1, r5
 800acd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800acda:	f7f5 fbc5 	bl	8000468 <__aeabi_dcmplt>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d003      	beq.n	800acea <_printf_float+0x8e>
 800ace2:	0023      	movs	r3, r4
 800ace4:	222d      	movs	r2, #45	; 0x2d
 800ace6:	3343      	adds	r3, #67	; 0x43
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acec:	4d99      	ldr	r5, [pc, #612]	; (800af54 <_printf_float+0x2f8>)
 800acee:	2b47      	cmp	r3, #71	; 0x47
 800acf0:	d900      	bls.n	800acf4 <_printf_float+0x98>
 800acf2:	4d99      	ldr	r5, [pc, #612]	; (800af58 <_printf_float+0x2fc>)
 800acf4:	2303      	movs	r3, #3
 800acf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acf8:	6123      	str	r3, [r4, #16]
 800acfa:	3301      	adds	r3, #1
 800acfc:	439a      	bics	r2, r3
 800acfe:	2300      	movs	r3, #0
 800ad00:	6022      	str	r2, [r4, #0]
 800ad02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad06:	0021      	movs	r1, r4
 800ad08:	0038      	movs	r0, r7
 800ad0a:	9600      	str	r6, [sp, #0]
 800ad0c:	aa13      	add	r2, sp, #76	; 0x4c
 800ad0e:	f000 f9e7 	bl	800b0e0 <_printf_common>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	d000      	beq.n	800ad18 <_printf_float+0xbc>
 800ad16:	e0a2      	b.n	800ae5e <_printf_float+0x202>
 800ad18:	2001      	movs	r0, #1
 800ad1a:	4240      	negs	r0, r0
 800ad1c:	b015      	add	sp, #84	; 0x54
 800ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad20:	3307      	adds	r3, #7
 800ad22:	e7b6      	b.n	800ac92 <_printf_float+0x36>
 800ad24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad26:	002b      	movs	r3, r5
 800ad28:	0010      	movs	r0, r2
 800ad2a:	0029      	movs	r1, r5
 800ad2c:	f7f8 f894 	bl	8002e58 <__aeabi_dcmpun>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d00b      	beq.n	800ad4c <_printf_float+0xf0>
 800ad34:	2d00      	cmp	r5, #0
 800ad36:	da03      	bge.n	800ad40 <_printf_float+0xe4>
 800ad38:	0023      	movs	r3, r4
 800ad3a:	222d      	movs	r2, #45	; 0x2d
 800ad3c:	3343      	adds	r3, #67	; 0x43
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad42:	4d86      	ldr	r5, [pc, #536]	; (800af5c <_printf_float+0x300>)
 800ad44:	2b47      	cmp	r3, #71	; 0x47
 800ad46:	d9d5      	bls.n	800acf4 <_printf_float+0x98>
 800ad48:	4d85      	ldr	r5, [pc, #532]	; (800af60 <_printf_float+0x304>)
 800ad4a:	e7d3      	b.n	800acf4 <_printf_float+0x98>
 800ad4c:	2220      	movs	r2, #32
 800ad4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad50:	6863      	ldr	r3, [r4, #4]
 800ad52:	4391      	bics	r1, r2
 800ad54:	910f      	str	r1, [sp, #60]	; 0x3c
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	d149      	bne.n	800adee <_printf_float+0x192>
 800ad5a:	3307      	adds	r3, #7
 800ad5c:	6063      	str	r3, [r4, #4]
 800ad5e:	2380      	movs	r3, #128	; 0x80
 800ad60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	4313      	orrs	r3, r2
 800ad66:	2200      	movs	r2, #0
 800ad68:	9206      	str	r2, [sp, #24]
 800ad6a:	aa12      	add	r2, sp, #72	; 0x48
 800ad6c:	9205      	str	r2, [sp, #20]
 800ad6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad70:	a908      	add	r1, sp, #32
 800ad72:	9204      	str	r2, [sp, #16]
 800ad74:	aa11      	add	r2, sp, #68	; 0x44
 800ad76:	9203      	str	r2, [sp, #12]
 800ad78:	2223      	movs	r2, #35	; 0x23
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	6863      	ldr	r3, [r4, #4]
 800ad80:	1852      	adds	r2, r2, r1
 800ad82:	9202      	str	r2, [sp, #8]
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	0038      	movs	r0, r7
 800ad88:	002b      	movs	r3, r5
 800ad8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad8c:	f7ff febb 	bl	800ab06 <__cvt>
 800ad90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad92:	0005      	movs	r5, r0
 800ad94:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad96:	2b47      	cmp	r3, #71	; 0x47
 800ad98:	d108      	bne.n	800adac <_printf_float+0x150>
 800ad9a:	1ccb      	adds	r3, r1, #3
 800ad9c:	db02      	blt.n	800ada4 <_printf_float+0x148>
 800ad9e:	6863      	ldr	r3, [r4, #4]
 800ada0:	4299      	cmp	r1, r3
 800ada2:	dd48      	ble.n	800ae36 <_printf_float+0x1da>
 800ada4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada6:	3b02      	subs	r3, #2
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	930a      	str	r3, [sp, #40]	; 0x28
 800adac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adae:	2b65      	cmp	r3, #101	; 0x65
 800adb0:	d824      	bhi.n	800adfc <_printf_float+0x1a0>
 800adb2:	0020      	movs	r0, r4
 800adb4:	001a      	movs	r2, r3
 800adb6:	3901      	subs	r1, #1
 800adb8:	3050      	adds	r0, #80	; 0x50
 800adba:	9111      	str	r1, [sp, #68]	; 0x44
 800adbc:	f7ff ff06 	bl	800abcc <__exponent>
 800adc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adc2:	900b      	str	r0, [sp, #44]	; 0x2c
 800adc4:	1813      	adds	r3, r2, r0
 800adc6:	6123      	str	r3, [r4, #16]
 800adc8:	2a01      	cmp	r2, #1
 800adca:	dc02      	bgt.n	800add2 <_printf_float+0x176>
 800adcc:	6822      	ldr	r2, [r4, #0]
 800adce:	07d2      	lsls	r2, r2, #31
 800add0:	d501      	bpl.n	800add6 <_printf_float+0x17a>
 800add2:	3301      	adds	r3, #1
 800add4:	6123      	str	r3, [r4, #16]
 800add6:	2323      	movs	r3, #35	; 0x23
 800add8:	aa08      	add	r2, sp, #32
 800adda:	189b      	adds	r3, r3, r2
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d100      	bne.n	800ade4 <_printf_float+0x188>
 800ade2:	e78f      	b.n	800ad04 <_printf_float+0xa8>
 800ade4:	0023      	movs	r3, r4
 800ade6:	222d      	movs	r2, #45	; 0x2d
 800ade8:	3343      	adds	r3, #67	; 0x43
 800adea:	701a      	strb	r2, [r3, #0]
 800adec:	e78a      	b.n	800ad04 <_printf_float+0xa8>
 800adee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adf0:	2a47      	cmp	r2, #71	; 0x47
 800adf2:	d1b4      	bne.n	800ad5e <_printf_float+0x102>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d1b2      	bne.n	800ad5e <_printf_float+0x102>
 800adf8:	3301      	adds	r3, #1
 800adfa:	e7af      	b.n	800ad5c <_printf_float+0x100>
 800adfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adfe:	2b66      	cmp	r3, #102	; 0x66
 800ae00:	d11b      	bne.n	800ae3a <_printf_float+0x1de>
 800ae02:	6863      	ldr	r3, [r4, #4]
 800ae04:	2900      	cmp	r1, #0
 800ae06:	dd0d      	ble.n	800ae24 <_printf_float+0x1c8>
 800ae08:	6121      	str	r1, [r4, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <_printf_float+0x1b8>
 800ae0e:	6822      	ldr	r2, [r4, #0]
 800ae10:	07d2      	lsls	r2, r2, #31
 800ae12:	d502      	bpl.n	800ae1a <_printf_float+0x1be>
 800ae14:	3301      	adds	r3, #1
 800ae16:	1859      	adds	r1, r3, r1
 800ae18:	6121      	str	r1, [r4, #16]
 800ae1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae1c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ae1e:	2300      	movs	r3, #0
 800ae20:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae22:	e7d8      	b.n	800add6 <_printf_float+0x17a>
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d103      	bne.n	800ae30 <_printf_float+0x1d4>
 800ae28:	2201      	movs	r2, #1
 800ae2a:	6821      	ldr	r1, [r4, #0]
 800ae2c:	4211      	tst	r1, r2
 800ae2e:	d000      	beq.n	800ae32 <_printf_float+0x1d6>
 800ae30:	1c9a      	adds	r2, r3, #2
 800ae32:	6122      	str	r2, [r4, #16]
 800ae34:	e7f1      	b.n	800ae1a <_printf_float+0x1be>
 800ae36:	2367      	movs	r3, #103	; 0x67
 800ae38:	930a      	str	r3, [sp, #40]	; 0x28
 800ae3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	db06      	blt.n	800ae50 <_printf_float+0x1f4>
 800ae42:	6822      	ldr	r2, [r4, #0]
 800ae44:	6123      	str	r3, [r4, #16]
 800ae46:	07d2      	lsls	r2, r2, #31
 800ae48:	d5e7      	bpl.n	800ae1a <_printf_float+0x1be>
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	6123      	str	r3, [r4, #16]
 800ae4e:	e7e4      	b.n	800ae1a <_printf_float+0x1be>
 800ae50:	2101      	movs	r1, #1
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dc01      	bgt.n	800ae5a <_printf_float+0x1fe>
 800ae56:	1849      	adds	r1, r1, r1
 800ae58:	1ac9      	subs	r1, r1, r3
 800ae5a:	1852      	adds	r2, r2, r1
 800ae5c:	e7e9      	b.n	800ae32 <_printf_float+0x1d6>
 800ae5e:	6822      	ldr	r2, [r4, #0]
 800ae60:	0553      	lsls	r3, r2, #21
 800ae62:	d407      	bmi.n	800ae74 <_printf_float+0x218>
 800ae64:	6923      	ldr	r3, [r4, #16]
 800ae66:	002a      	movs	r2, r5
 800ae68:	0038      	movs	r0, r7
 800ae6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae6c:	47b0      	blx	r6
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d128      	bne.n	800aec4 <_printf_float+0x268>
 800ae72:	e751      	b.n	800ad18 <_printf_float+0xbc>
 800ae74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae76:	2b65      	cmp	r3, #101	; 0x65
 800ae78:	d800      	bhi.n	800ae7c <_printf_float+0x220>
 800ae7a:	e0e1      	b.n	800b040 <_printf_float+0x3e4>
 800ae7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800ae7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ae80:	2200      	movs	r2, #0
 800ae82:	2300      	movs	r3, #0
 800ae84:	f7f5 faea 	bl	800045c <__aeabi_dcmpeq>
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d031      	beq.n	800aef0 <_printf_float+0x294>
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	0038      	movs	r0, r7
 800ae90:	4a34      	ldr	r2, [pc, #208]	; (800af64 <_printf_float+0x308>)
 800ae92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae94:	47b0      	blx	r6
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	d100      	bne.n	800ae9c <_printf_float+0x240>
 800ae9a:	e73d      	b.n	800ad18 <_printf_float+0xbc>
 800ae9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aea0:	4293      	cmp	r3, r2
 800aea2:	db02      	blt.n	800aeaa <_printf_float+0x24e>
 800aea4:	6823      	ldr	r3, [r4, #0]
 800aea6:	07db      	lsls	r3, r3, #31
 800aea8:	d50c      	bpl.n	800aec4 <_printf_float+0x268>
 800aeaa:	0038      	movs	r0, r7
 800aeac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeb2:	47b0      	blx	r6
 800aeb4:	2500      	movs	r5, #0
 800aeb6:	1c43      	adds	r3, r0, #1
 800aeb8:	d100      	bne.n	800aebc <_printf_float+0x260>
 800aeba:	e72d      	b.n	800ad18 <_printf_float+0xbc>
 800aebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aebe:	3b01      	subs	r3, #1
 800aec0:	42ab      	cmp	r3, r5
 800aec2:	dc0a      	bgt.n	800aeda <_printf_float+0x27e>
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	079b      	lsls	r3, r3, #30
 800aec8:	d500      	bpl.n	800aecc <_printf_float+0x270>
 800aeca:	e106      	b.n	800b0da <_printf_float+0x47e>
 800aecc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aece:	68e0      	ldr	r0, [r4, #12]
 800aed0:	4298      	cmp	r0, r3
 800aed2:	db00      	blt.n	800aed6 <_printf_float+0x27a>
 800aed4:	e722      	b.n	800ad1c <_printf_float+0xc0>
 800aed6:	0018      	movs	r0, r3
 800aed8:	e720      	b.n	800ad1c <_printf_float+0xc0>
 800aeda:	0022      	movs	r2, r4
 800aedc:	2301      	movs	r3, #1
 800aede:	0038      	movs	r0, r7
 800aee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aee2:	321a      	adds	r2, #26
 800aee4:	47b0      	blx	r6
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	d100      	bne.n	800aeec <_printf_float+0x290>
 800aeea:	e715      	b.n	800ad18 <_printf_float+0xbc>
 800aeec:	3501      	adds	r5, #1
 800aeee:	e7e5      	b.n	800aebc <_printf_float+0x260>
 800aef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	dc38      	bgt.n	800af68 <_printf_float+0x30c>
 800aef6:	2301      	movs	r3, #1
 800aef8:	0038      	movs	r0, r7
 800aefa:	4a1a      	ldr	r2, [pc, #104]	; (800af64 <_printf_float+0x308>)
 800aefc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aefe:	47b0      	blx	r6
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d100      	bne.n	800af06 <_printf_float+0x2aa>
 800af04:	e708      	b.n	800ad18 <_printf_float+0xbc>
 800af06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af0a:	4313      	orrs	r3, r2
 800af0c:	d102      	bne.n	800af14 <_printf_float+0x2b8>
 800af0e:	6823      	ldr	r3, [r4, #0]
 800af10:	07db      	lsls	r3, r3, #31
 800af12:	d5d7      	bpl.n	800aec4 <_printf_float+0x268>
 800af14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af16:	0038      	movs	r0, r7
 800af18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af1c:	47b0      	blx	r6
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	d100      	bne.n	800af24 <_printf_float+0x2c8>
 800af22:	e6f9      	b.n	800ad18 <_printf_float+0xbc>
 800af24:	2300      	movs	r3, #0
 800af26:	930a      	str	r3, [sp, #40]	; 0x28
 800af28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2c:	425b      	negs	r3, r3
 800af2e:	4293      	cmp	r3, r2
 800af30:	dc01      	bgt.n	800af36 <_printf_float+0x2da>
 800af32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af34:	e797      	b.n	800ae66 <_printf_float+0x20a>
 800af36:	0022      	movs	r2, r4
 800af38:	2301      	movs	r3, #1
 800af3a:	0038      	movs	r0, r7
 800af3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af3e:	321a      	adds	r2, #26
 800af40:	47b0      	blx	r6
 800af42:	1c43      	adds	r3, r0, #1
 800af44:	d100      	bne.n	800af48 <_printf_float+0x2ec>
 800af46:	e6e7      	b.n	800ad18 <_printf_float+0xbc>
 800af48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af4a:	3301      	adds	r3, #1
 800af4c:	e7eb      	b.n	800af26 <_printf_float+0x2ca>
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	7fefffff 	.word	0x7fefffff
 800af54:	0800e138 	.word	0x0800e138
 800af58:	0800e13c 	.word	0x0800e13c
 800af5c:	0800e140 	.word	0x0800e140
 800af60:	0800e144 	.word	0x0800e144
 800af64:	0800e148 	.word	0x0800e148
 800af68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af6c:	920a      	str	r2, [sp, #40]	; 0x28
 800af6e:	429a      	cmp	r2, r3
 800af70:	dd00      	ble.n	800af74 <_printf_float+0x318>
 800af72:	930a      	str	r3, [sp, #40]	; 0x28
 800af74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af76:	2b00      	cmp	r3, #0
 800af78:	dc3c      	bgt.n	800aff4 <_printf_float+0x398>
 800af7a:	2300      	movs	r3, #0
 800af7c:	930d      	str	r3, [sp, #52]	; 0x34
 800af7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af80:	43db      	mvns	r3, r3
 800af82:	17db      	asrs	r3, r3, #31
 800af84:	930f      	str	r3, [sp, #60]	; 0x3c
 800af86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800af8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8e:	4013      	ands	r3, r2
 800af90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af96:	4293      	cmp	r3, r2
 800af98:	dc34      	bgt.n	800b004 <_printf_float+0x3a8>
 800af9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800af9e:	4293      	cmp	r3, r2
 800afa0:	db3d      	blt.n	800b01e <_printf_float+0x3c2>
 800afa2:	6823      	ldr	r3, [r4, #0]
 800afa4:	07db      	lsls	r3, r3, #31
 800afa6:	d43a      	bmi.n	800b01e <_printf_float+0x3c2>
 800afa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afae:	1ad3      	subs	r3, r2, r3
 800afb0:	1a52      	subs	r2, r2, r1
 800afb2:	920a      	str	r2, [sp, #40]	; 0x28
 800afb4:	429a      	cmp	r2, r3
 800afb6:	dd00      	ble.n	800afba <_printf_float+0x35e>
 800afb8:	930a      	str	r3, [sp, #40]	; 0x28
 800afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dc36      	bgt.n	800b02e <_printf_float+0x3d2>
 800afc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc2:	2500      	movs	r5, #0
 800afc4:	43db      	mvns	r3, r3
 800afc6:	17db      	asrs	r3, r3, #31
 800afc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800afca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800afcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afd0:	1a9b      	subs	r3, r3, r2
 800afd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afd4:	400a      	ands	r2, r1
 800afd6:	1a9b      	subs	r3, r3, r2
 800afd8:	42ab      	cmp	r3, r5
 800afda:	dc00      	bgt.n	800afde <_printf_float+0x382>
 800afdc:	e772      	b.n	800aec4 <_printf_float+0x268>
 800afde:	0022      	movs	r2, r4
 800afe0:	2301      	movs	r3, #1
 800afe2:	0038      	movs	r0, r7
 800afe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afe6:	321a      	adds	r2, #26
 800afe8:	47b0      	blx	r6
 800afea:	1c43      	adds	r3, r0, #1
 800afec:	d100      	bne.n	800aff0 <_printf_float+0x394>
 800afee:	e693      	b.n	800ad18 <_printf_float+0xbc>
 800aff0:	3501      	adds	r5, #1
 800aff2:	e7ea      	b.n	800afca <_printf_float+0x36e>
 800aff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff6:	002a      	movs	r2, r5
 800aff8:	0038      	movs	r0, r7
 800affa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800affc:	47b0      	blx	r6
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d1bb      	bne.n	800af7a <_printf_float+0x31e>
 800b002:	e689      	b.n	800ad18 <_printf_float+0xbc>
 800b004:	0022      	movs	r2, r4
 800b006:	2301      	movs	r3, #1
 800b008:	0038      	movs	r0, r7
 800b00a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b00c:	321a      	adds	r2, #26
 800b00e:	47b0      	blx	r6
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d100      	bne.n	800b016 <_printf_float+0x3ba>
 800b014:	e680      	b.n	800ad18 <_printf_float+0xbc>
 800b016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b018:	3301      	adds	r3, #1
 800b01a:	930d      	str	r3, [sp, #52]	; 0x34
 800b01c:	e7b3      	b.n	800af86 <_printf_float+0x32a>
 800b01e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b020:	0038      	movs	r0, r7
 800b022:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b024:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b026:	47b0      	blx	r6
 800b028:	1c43      	adds	r3, r0, #1
 800b02a:	d1bd      	bne.n	800afa8 <_printf_float+0x34c>
 800b02c:	e674      	b.n	800ad18 <_printf_float+0xbc>
 800b02e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b030:	0038      	movs	r0, r7
 800b032:	18ea      	adds	r2, r5, r3
 800b034:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b038:	47b0      	blx	r6
 800b03a:	1c43      	adds	r3, r0, #1
 800b03c:	d1c0      	bne.n	800afc0 <_printf_float+0x364>
 800b03e:	e66b      	b.n	800ad18 <_printf_float+0xbc>
 800b040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b042:	2b01      	cmp	r3, #1
 800b044:	dc02      	bgt.n	800b04c <_printf_float+0x3f0>
 800b046:	2301      	movs	r3, #1
 800b048:	421a      	tst	r2, r3
 800b04a:	d034      	beq.n	800b0b6 <_printf_float+0x45a>
 800b04c:	2301      	movs	r3, #1
 800b04e:	002a      	movs	r2, r5
 800b050:	0038      	movs	r0, r7
 800b052:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b054:	47b0      	blx	r6
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d100      	bne.n	800b05c <_printf_float+0x400>
 800b05a:	e65d      	b.n	800ad18 <_printf_float+0xbc>
 800b05c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b05e:	0038      	movs	r0, r7
 800b060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b062:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b064:	47b0      	blx	r6
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	d100      	bne.n	800b06c <_printf_float+0x410>
 800b06a:	e655      	b.n	800ad18 <_printf_float+0xbc>
 800b06c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800b06e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b070:	2200      	movs	r2, #0
 800b072:	2300      	movs	r3, #0
 800b074:	f7f5 f9f2 	bl	800045c <__aeabi_dcmpeq>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d11a      	bne.n	800b0b2 <_printf_float+0x456>
 800b07c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b07e:	1c6a      	adds	r2, r5, #1
 800b080:	3b01      	subs	r3, #1
 800b082:	0038      	movs	r0, r7
 800b084:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b086:	47b0      	blx	r6
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d10e      	bne.n	800b0aa <_printf_float+0x44e>
 800b08c:	e644      	b.n	800ad18 <_printf_float+0xbc>
 800b08e:	0022      	movs	r2, r4
 800b090:	2301      	movs	r3, #1
 800b092:	0038      	movs	r0, r7
 800b094:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b096:	321a      	adds	r2, #26
 800b098:	47b0      	blx	r6
 800b09a:	1c43      	adds	r3, r0, #1
 800b09c:	d100      	bne.n	800b0a0 <_printf_float+0x444>
 800b09e:	e63b      	b.n	800ad18 <_printf_float+0xbc>
 800b0a0:	3501      	adds	r5, #1
 800b0a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	42ab      	cmp	r3, r5
 800b0a8:	dcf1      	bgt.n	800b08e <_printf_float+0x432>
 800b0aa:	0022      	movs	r2, r4
 800b0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ae:	3250      	adds	r2, #80	; 0x50
 800b0b0:	e6da      	b.n	800ae68 <_printf_float+0x20c>
 800b0b2:	2500      	movs	r5, #0
 800b0b4:	e7f5      	b.n	800b0a2 <_printf_float+0x446>
 800b0b6:	002a      	movs	r2, r5
 800b0b8:	e7e3      	b.n	800b082 <_printf_float+0x426>
 800b0ba:	0022      	movs	r2, r4
 800b0bc:	2301      	movs	r3, #1
 800b0be:	0038      	movs	r0, r7
 800b0c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0c2:	3219      	adds	r2, #25
 800b0c4:	47b0      	blx	r6
 800b0c6:	1c43      	adds	r3, r0, #1
 800b0c8:	d100      	bne.n	800b0cc <_printf_float+0x470>
 800b0ca:	e625      	b.n	800ad18 <_printf_float+0xbc>
 800b0cc:	3501      	adds	r5, #1
 800b0ce:	68e3      	ldr	r3, [r4, #12]
 800b0d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	42ab      	cmp	r3, r5
 800b0d6:	dcf0      	bgt.n	800b0ba <_printf_float+0x45e>
 800b0d8:	e6f8      	b.n	800aecc <_printf_float+0x270>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	e7f7      	b.n	800b0ce <_printf_float+0x472>
 800b0de:	46c0      	nop			; (mov r8, r8)

0800b0e0 <_printf_common>:
 800b0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0e2:	0015      	movs	r5, r2
 800b0e4:	9301      	str	r3, [sp, #4]
 800b0e6:	688a      	ldr	r2, [r1, #8]
 800b0e8:	690b      	ldr	r3, [r1, #16]
 800b0ea:	000c      	movs	r4, r1
 800b0ec:	9000      	str	r0, [sp, #0]
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	da00      	bge.n	800b0f4 <_printf_common+0x14>
 800b0f2:	0013      	movs	r3, r2
 800b0f4:	0022      	movs	r2, r4
 800b0f6:	602b      	str	r3, [r5, #0]
 800b0f8:	3243      	adds	r2, #67	; 0x43
 800b0fa:	7812      	ldrb	r2, [r2, #0]
 800b0fc:	2a00      	cmp	r2, #0
 800b0fe:	d001      	beq.n	800b104 <_printf_common+0x24>
 800b100:	3301      	adds	r3, #1
 800b102:	602b      	str	r3, [r5, #0]
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	069b      	lsls	r3, r3, #26
 800b108:	d502      	bpl.n	800b110 <_printf_common+0x30>
 800b10a:	682b      	ldr	r3, [r5, #0]
 800b10c:	3302      	adds	r3, #2
 800b10e:	602b      	str	r3, [r5, #0]
 800b110:	6822      	ldr	r2, [r4, #0]
 800b112:	2306      	movs	r3, #6
 800b114:	0017      	movs	r7, r2
 800b116:	401f      	ands	r7, r3
 800b118:	421a      	tst	r2, r3
 800b11a:	d027      	beq.n	800b16c <_printf_common+0x8c>
 800b11c:	0023      	movs	r3, r4
 800b11e:	3343      	adds	r3, #67	; 0x43
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	1e5a      	subs	r2, r3, #1
 800b124:	4193      	sbcs	r3, r2
 800b126:	6822      	ldr	r2, [r4, #0]
 800b128:	0692      	lsls	r2, r2, #26
 800b12a:	d430      	bmi.n	800b18e <_printf_common+0xae>
 800b12c:	0022      	movs	r2, r4
 800b12e:	9901      	ldr	r1, [sp, #4]
 800b130:	9800      	ldr	r0, [sp, #0]
 800b132:	9e08      	ldr	r6, [sp, #32]
 800b134:	3243      	adds	r2, #67	; 0x43
 800b136:	47b0      	blx	r6
 800b138:	1c43      	adds	r3, r0, #1
 800b13a:	d025      	beq.n	800b188 <_printf_common+0xa8>
 800b13c:	2306      	movs	r3, #6
 800b13e:	6820      	ldr	r0, [r4, #0]
 800b140:	682a      	ldr	r2, [r5, #0]
 800b142:	68e1      	ldr	r1, [r4, #12]
 800b144:	2500      	movs	r5, #0
 800b146:	4003      	ands	r3, r0
 800b148:	2b04      	cmp	r3, #4
 800b14a:	d103      	bne.n	800b154 <_printf_common+0x74>
 800b14c:	1a8d      	subs	r5, r1, r2
 800b14e:	43eb      	mvns	r3, r5
 800b150:	17db      	asrs	r3, r3, #31
 800b152:	401d      	ands	r5, r3
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	6922      	ldr	r2, [r4, #16]
 800b158:	4293      	cmp	r3, r2
 800b15a:	dd01      	ble.n	800b160 <_printf_common+0x80>
 800b15c:	1a9b      	subs	r3, r3, r2
 800b15e:	18ed      	adds	r5, r5, r3
 800b160:	2700      	movs	r7, #0
 800b162:	42bd      	cmp	r5, r7
 800b164:	d120      	bne.n	800b1a8 <_printf_common+0xc8>
 800b166:	2000      	movs	r0, #0
 800b168:	e010      	b.n	800b18c <_printf_common+0xac>
 800b16a:	3701      	adds	r7, #1
 800b16c:	68e3      	ldr	r3, [r4, #12]
 800b16e:	682a      	ldr	r2, [r5, #0]
 800b170:	1a9b      	subs	r3, r3, r2
 800b172:	42bb      	cmp	r3, r7
 800b174:	ddd2      	ble.n	800b11c <_printf_common+0x3c>
 800b176:	0022      	movs	r2, r4
 800b178:	2301      	movs	r3, #1
 800b17a:	9901      	ldr	r1, [sp, #4]
 800b17c:	9800      	ldr	r0, [sp, #0]
 800b17e:	9e08      	ldr	r6, [sp, #32]
 800b180:	3219      	adds	r2, #25
 800b182:	47b0      	blx	r6
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d1f0      	bne.n	800b16a <_printf_common+0x8a>
 800b188:	2001      	movs	r0, #1
 800b18a:	4240      	negs	r0, r0
 800b18c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b18e:	2030      	movs	r0, #48	; 0x30
 800b190:	18e1      	adds	r1, r4, r3
 800b192:	3143      	adds	r1, #67	; 0x43
 800b194:	7008      	strb	r0, [r1, #0]
 800b196:	0021      	movs	r1, r4
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	3145      	adds	r1, #69	; 0x45
 800b19c:	7809      	ldrb	r1, [r1, #0]
 800b19e:	18a2      	adds	r2, r4, r2
 800b1a0:	3243      	adds	r2, #67	; 0x43
 800b1a2:	3302      	adds	r3, #2
 800b1a4:	7011      	strb	r1, [r2, #0]
 800b1a6:	e7c1      	b.n	800b12c <_printf_common+0x4c>
 800b1a8:	0022      	movs	r2, r4
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	9800      	ldr	r0, [sp, #0]
 800b1b0:	9e08      	ldr	r6, [sp, #32]
 800b1b2:	321a      	adds	r2, #26
 800b1b4:	47b0      	blx	r6
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	d0e6      	beq.n	800b188 <_printf_common+0xa8>
 800b1ba:	3701      	adds	r7, #1
 800b1bc:	e7d1      	b.n	800b162 <_printf_common+0x82>
	...

0800b1c0 <_printf_i>:
 800b1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1c2:	b08b      	sub	sp, #44	; 0x2c
 800b1c4:	9206      	str	r2, [sp, #24]
 800b1c6:	000a      	movs	r2, r1
 800b1c8:	3243      	adds	r2, #67	; 0x43
 800b1ca:	9307      	str	r3, [sp, #28]
 800b1cc:	9005      	str	r0, [sp, #20]
 800b1ce:	9204      	str	r2, [sp, #16]
 800b1d0:	7e0a      	ldrb	r2, [r1, #24]
 800b1d2:	000c      	movs	r4, r1
 800b1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1d6:	2a78      	cmp	r2, #120	; 0x78
 800b1d8:	d807      	bhi.n	800b1ea <_printf_i+0x2a>
 800b1da:	2a62      	cmp	r2, #98	; 0x62
 800b1dc:	d809      	bhi.n	800b1f2 <_printf_i+0x32>
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	d100      	bne.n	800b1e4 <_printf_i+0x24>
 800b1e2:	e0c1      	b.n	800b368 <_printf_i+0x1a8>
 800b1e4:	2a58      	cmp	r2, #88	; 0x58
 800b1e6:	d100      	bne.n	800b1ea <_printf_i+0x2a>
 800b1e8:	e08c      	b.n	800b304 <_printf_i+0x144>
 800b1ea:	0026      	movs	r6, r4
 800b1ec:	3642      	adds	r6, #66	; 0x42
 800b1ee:	7032      	strb	r2, [r6, #0]
 800b1f0:	e022      	b.n	800b238 <_printf_i+0x78>
 800b1f2:	0010      	movs	r0, r2
 800b1f4:	3863      	subs	r0, #99	; 0x63
 800b1f6:	2815      	cmp	r0, #21
 800b1f8:	d8f7      	bhi.n	800b1ea <_printf_i+0x2a>
 800b1fa:	f7f4 ff9f 	bl	800013c <__gnu_thumb1_case_shi>
 800b1fe:	0016      	.short	0x0016
 800b200:	fff6001f 	.word	0xfff6001f
 800b204:	fff6fff6 	.word	0xfff6fff6
 800b208:	001ffff6 	.word	0x001ffff6
 800b20c:	fff6fff6 	.word	0xfff6fff6
 800b210:	fff6fff6 	.word	0xfff6fff6
 800b214:	003600a8 	.word	0x003600a8
 800b218:	fff6009a 	.word	0xfff6009a
 800b21c:	00b9fff6 	.word	0x00b9fff6
 800b220:	0036fff6 	.word	0x0036fff6
 800b224:	fff6fff6 	.word	0xfff6fff6
 800b228:	009e      	.short	0x009e
 800b22a:	0026      	movs	r6, r4
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	3642      	adds	r6, #66	; 0x42
 800b230:	1d11      	adds	r1, r2, #4
 800b232:	6019      	str	r1, [r3, #0]
 800b234:	6813      	ldr	r3, [r2, #0]
 800b236:	7033      	strb	r3, [r6, #0]
 800b238:	2301      	movs	r3, #1
 800b23a:	e0a7      	b.n	800b38c <_printf_i+0x1cc>
 800b23c:	6808      	ldr	r0, [r1, #0]
 800b23e:	6819      	ldr	r1, [r3, #0]
 800b240:	1d0a      	adds	r2, r1, #4
 800b242:	0605      	lsls	r5, r0, #24
 800b244:	d50b      	bpl.n	800b25e <_printf_i+0x9e>
 800b246:	680d      	ldr	r5, [r1, #0]
 800b248:	601a      	str	r2, [r3, #0]
 800b24a:	2d00      	cmp	r5, #0
 800b24c:	da03      	bge.n	800b256 <_printf_i+0x96>
 800b24e:	232d      	movs	r3, #45	; 0x2d
 800b250:	9a04      	ldr	r2, [sp, #16]
 800b252:	426d      	negs	r5, r5
 800b254:	7013      	strb	r3, [r2, #0]
 800b256:	4b61      	ldr	r3, [pc, #388]	; (800b3dc <_printf_i+0x21c>)
 800b258:	270a      	movs	r7, #10
 800b25a:	9303      	str	r3, [sp, #12]
 800b25c:	e01b      	b.n	800b296 <_printf_i+0xd6>
 800b25e:	680d      	ldr	r5, [r1, #0]
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	0641      	lsls	r1, r0, #25
 800b264:	d5f1      	bpl.n	800b24a <_printf_i+0x8a>
 800b266:	b22d      	sxth	r5, r5
 800b268:	e7ef      	b.n	800b24a <_printf_i+0x8a>
 800b26a:	680d      	ldr	r5, [r1, #0]
 800b26c:	6819      	ldr	r1, [r3, #0]
 800b26e:	1d08      	adds	r0, r1, #4
 800b270:	6018      	str	r0, [r3, #0]
 800b272:	062e      	lsls	r6, r5, #24
 800b274:	d501      	bpl.n	800b27a <_printf_i+0xba>
 800b276:	680d      	ldr	r5, [r1, #0]
 800b278:	e003      	b.n	800b282 <_printf_i+0xc2>
 800b27a:	066d      	lsls	r5, r5, #25
 800b27c:	d5fb      	bpl.n	800b276 <_printf_i+0xb6>
 800b27e:	680d      	ldr	r5, [r1, #0]
 800b280:	b2ad      	uxth	r5, r5
 800b282:	4b56      	ldr	r3, [pc, #344]	; (800b3dc <_printf_i+0x21c>)
 800b284:	2708      	movs	r7, #8
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	2a6f      	cmp	r2, #111	; 0x6f
 800b28a:	d000      	beq.n	800b28e <_printf_i+0xce>
 800b28c:	3702      	adds	r7, #2
 800b28e:	0023      	movs	r3, r4
 800b290:	2200      	movs	r2, #0
 800b292:	3343      	adds	r3, #67	; 0x43
 800b294:	701a      	strb	r2, [r3, #0]
 800b296:	6863      	ldr	r3, [r4, #4]
 800b298:	60a3      	str	r3, [r4, #8]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	db03      	blt.n	800b2a6 <_printf_i+0xe6>
 800b29e:	2204      	movs	r2, #4
 800b2a0:	6821      	ldr	r1, [r4, #0]
 800b2a2:	4391      	bics	r1, r2
 800b2a4:	6021      	str	r1, [r4, #0]
 800b2a6:	2d00      	cmp	r5, #0
 800b2a8:	d102      	bne.n	800b2b0 <_printf_i+0xf0>
 800b2aa:	9e04      	ldr	r6, [sp, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00c      	beq.n	800b2ca <_printf_i+0x10a>
 800b2b0:	9e04      	ldr	r6, [sp, #16]
 800b2b2:	0028      	movs	r0, r5
 800b2b4:	0039      	movs	r1, r7
 800b2b6:	f7f4 ffd1 	bl	800025c <__aeabi_uidivmod>
 800b2ba:	9b03      	ldr	r3, [sp, #12]
 800b2bc:	3e01      	subs	r6, #1
 800b2be:	5c5b      	ldrb	r3, [r3, r1]
 800b2c0:	7033      	strb	r3, [r6, #0]
 800b2c2:	002b      	movs	r3, r5
 800b2c4:	0005      	movs	r5, r0
 800b2c6:	429f      	cmp	r7, r3
 800b2c8:	d9f3      	bls.n	800b2b2 <_printf_i+0xf2>
 800b2ca:	2f08      	cmp	r7, #8
 800b2cc:	d109      	bne.n	800b2e2 <_printf_i+0x122>
 800b2ce:	6823      	ldr	r3, [r4, #0]
 800b2d0:	07db      	lsls	r3, r3, #31
 800b2d2:	d506      	bpl.n	800b2e2 <_printf_i+0x122>
 800b2d4:	6863      	ldr	r3, [r4, #4]
 800b2d6:	6922      	ldr	r2, [r4, #16]
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	dc02      	bgt.n	800b2e2 <_printf_i+0x122>
 800b2dc:	2330      	movs	r3, #48	; 0x30
 800b2de:	3e01      	subs	r6, #1
 800b2e0:	7033      	strb	r3, [r6, #0]
 800b2e2:	9b04      	ldr	r3, [sp, #16]
 800b2e4:	1b9b      	subs	r3, r3, r6
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	9b07      	ldr	r3, [sp, #28]
 800b2ea:	0021      	movs	r1, r4
 800b2ec:	9300      	str	r3, [sp, #0]
 800b2ee:	9805      	ldr	r0, [sp, #20]
 800b2f0:	9b06      	ldr	r3, [sp, #24]
 800b2f2:	aa09      	add	r2, sp, #36	; 0x24
 800b2f4:	f7ff fef4 	bl	800b0e0 <_printf_common>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d14c      	bne.n	800b396 <_printf_i+0x1d6>
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	4240      	negs	r0, r0
 800b300:	b00b      	add	sp, #44	; 0x2c
 800b302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b304:	3145      	adds	r1, #69	; 0x45
 800b306:	700a      	strb	r2, [r1, #0]
 800b308:	4a34      	ldr	r2, [pc, #208]	; (800b3dc <_printf_i+0x21c>)
 800b30a:	9203      	str	r2, [sp, #12]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	6821      	ldr	r1, [r4, #0]
 800b310:	ca20      	ldmia	r2!, {r5}
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	0608      	lsls	r0, r1, #24
 800b316:	d516      	bpl.n	800b346 <_printf_i+0x186>
 800b318:	07cb      	lsls	r3, r1, #31
 800b31a:	d502      	bpl.n	800b322 <_printf_i+0x162>
 800b31c:	2320      	movs	r3, #32
 800b31e:	4319      	orrs	r1, r3
 800b320:	6021      	str	r1, [r4, #0]
 800b322:	2710      	movs	r7, #16
 800b324:	2d00      	cmp	r5, #0
 800b326:	d1b2      	bne.n	800b28e <_printf_i+0xce>
 800b328:	2320      	movs	r3, #32
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	439a      	bics	r2, r3
 800b32e:	6022      	str	r2, [r4, #0]
 800b330:	e7ad      	b.n	800b28e <_printf_i+0xce>
 800b332:	2220      	movs	r2, #32
 800b334:	6809      	ldr	r1, [r1, #0]
 800b336:	430a      	orrs	r2, r1
 800b338:	6022      	str	r2, [r4, #0]
 800b33a:	0022      	movs	r2, r4
 800b33c:	2178      	movs	r1, #120	; 0x78
 800b33e:	3245      	adds	r2, #69	; 0x45
 800b340:	7011      	strb	r1, [r2, #0]
 800b342:	4a27      	ldr	r2, [pc, #156]	; (800b3e0 <_printf_i+0x220>)
 800b344:	e7e1      	b.n	800b30a <_printf_i+0x14a>
 800b346:	0648      	lsls	r0, r1, #25
 800b348:	d5e6      	bpl.n	800b318 <_printf_i+0x158>
 800b34a:	b2ad      	uxth	r5, r5
 800b34c:	e7e4      	b.n	800b318 <_printf_i+0x158>
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	680d      	ldr	r5, [r1, #0]
 800b352:	1d10      	adds	r0, r2, #4
 800b354:	6949      	ldr	r1, [r1, #20]
 800b356:	6018      	str	r0, [r3, #0]
 800b358:	6813      	ldr	r3, [r2, #0]
 800b35a:	062e      	lsls	r6, r5, #24
 800b35c:	d501      	bpl.n	800b362 <_printf_i+0x1a2>
 800b35e:	6019      	str	r1, [r3, #0]
 800b360:	e002      	b.n	800b368 <_printf_i+0x1a8>
 800b362:	066d      	lsls	r5, r5, #25
 800b364:	d5fb      	bpl.n	800b35e <_printf_i+0x19e>
 800b366:	8019      	strh	r1, [r3, #0]
 800b368:	2300      	movs	r3, #0
 800b36a:	9e04      	ldr	r6, [sp, #16]
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	e7bb      	b.n	800b2e8 <_printf_i+0x128>
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	1d11      	adds	r1, r2, #4
 800b374:	6019      	str	r1, [r3, #0]
 800b376:	6816      	ldr	r6, [r2, #0]
 800b378:	2100      	movs	r1, #0
 800b37a:	0030      	movs	r0, r6
 800b37c:	6862      	ldr	r2, [r4, #4]
 800b37e:	f001 fa87 	bl	800c890 <memchr>
 800b382:	2800      	cmp	r0, #0
 800b384:	d001      	beq.n	800b38a <_printf_i+0x1ca>
 800b386:	1b80      	subs	r0, r0, r6
 800b388:	6060      	str	r0, [r4, #4]
 800b38a:	6863      	ldr	r3, [r4, #4]
 800b38c:	6123      	str	r3, [r4, #16]
 800b38e:	2300      	movs	r3, #0
 800b390:	9a04      	ldr	r2, [sp, #16]
 800b392:	7013      	strb	r3, [r2, #0]
 800b394:	e7a8      	b.n	800b2e8 <_printf_i+0x128>
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	0032      	movs	r2, r6
 800b39a:	9906      	ldr	r1, [sp, #24]
 800b39c:	9805      	ldr	r0, [sp, #20]
 800b39e:	9d07      	ldr	r5, [sp, #28]
 800b3a0:	47a8      	blx	r5
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d0aa      	beq.n	800b2fc <_printf_i+0x13c>
 800b3a6:	6823      	ldr	r3, [r4, #0]
 800b3a8:	079b      	lsls	r3, r3, #30
 800b3aa:	d415      	bmi.n	800b3d8 <_printf_i+0x218>
 800b3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ae:	68e0      	ldr	r0, [r4, #12]
 800b3b0:	4298      	cmp	r0, r3
 800b3b2:	daa5      	bge.n	800b300 <_printf_i+0x140>
 800b3b4:	0018      	movs	r0, r3
 800b3b6:	e7a3      	b.n	800b300 <_printf_i+0x140>
 800b3b8:	0022      	movs	r2, r4
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	9906      	ldr	r1, [sp, #24]
 800b3be:	9805      	ldr	r0, [sp, #20]
 800b3c0:	9e07      	ldr	r6, [sp, #28]
 800b3c2:	3219      	adds	r2, #25
 800b3c4:	47b0      	blx	r6
 800b3c6:	1c43      	adds	r3, r0, #1
 800b3c8:	d098      	beq.n	800b2fc <_printf_i+0x13c>
 800b3ca:	3501      	adds	r5, #1
 800b3cc:	68e3      	ldr	r3, [r4, #12]
 800b3ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d0:	1a9b      	subs	r3, r3, r2
 800b3d2:	42ab      	cmp	r3, r5
 800b3d4:	dcf0      	bgt.n	800b3b8 <_printf_i+0x1f8>
 800b3d6:	e7e9      	b.n	800b3ac <_printf_i+0x1ec>
 800b3d8:	2500      	movs	r5, #0
 800b3da:	e7f7      	b.n	800b3cc <_printf_i+0x20c>
 800b3dc:	0800e14a 	.word	0x0800e14a
 800b3e0:	0800e15b 	.word	0x0800e15b

0800b3e4 <iprintf>:
 800b3e4:	b40f      	push	{r0, r1, r2, r3}
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	; (800b414 <iprintf+0x30>)
 800b3e8:	b513      	push	{r0, r1, r4, lr}
 800b3ea:	681c      	ldr	r4, [r3, #0]
 800b3ec:	2c00      	cmp	r4, #0
 800b3ee:	d005      	beq.n	800b3fc <iprintf+0x18>
 800b3f0:	69a3      	ldr	r3, [r4, #24]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d102      	bne.n	800b3fc <iprintf+0x18>
 800b3f6:	0020      	movs	r0, r4
 800b3f8:	f001 f92c 	bl	800c654 <__sinit>
 800b3fc:	ab05      	add	r3, sp, #20
 800b3fe:	0020      	movs	r0, r4
 800b400:	9a04      	ldr	r2, [sp, #16]
 800b402:	68a1      	ldr	r1, [r4, #8]
 800b404:	9301      	str	r3, [sp, #4]
 800b406:	f001 ff21 	bl	800d24c <_vfiprintf_r>
 800b40a:	bc16      	pop	{r1, r2, r4}
 800b40c:	bc08      	pop	{r3}
 800b40e:	b004      	add	sp, #16
 800b410:	4718      	bx	r3
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	20000024 	.word	0x20000024

0800b418 <_puts_r>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	0005      	movs	r5, r0
 800b41c:	000e      	movs	r6, r1
 800b41e:	2800      	cmp	r0, #0
 800b420:	d004      	beq.n	800b42c <_puts_r+0x14>
 800b422:	6983      	ldr	r3, [r0, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <_puts_r+0x14>
 800b428:	f001 f914 	bl	800c654 <__sinit>
 800b42c:	69ab      	ldr	r3, [r5, #24]
 800b42e:	68ac      	ldr	r4, [r5, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d102      	bne.n	800b43a <_puts_r+0x22>
 800b434:	0028      	movs	r0, r5
 800b436:	f001 f90d 	bl	800c654 <__sinit>
 800b43a:	4b2d      	ldr	r3, [pc, #180]	; (800b4f0 <_puts_r+0xd8>)
 800b43c:	429c      	cmp	r4, r3
 800b43e:	d122      	bne.n	800b486 <_puts_r+0x6e>
 800b440:	686c      	ldr	r4, [r5, #4]
 800b442:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b444:	07db      	lsls	r3, r3, #31
 800b446:	d405      	bmi.n	800b454 <_puts_r+0x3c>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	059b      	lsls	r3, r3, #22
 800b44c:	d402      	bmi.n	800b454 <_puts_r+0x3c>
 800b44e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b450:	f001 f9a5 	bl	800c79e <__retarget_lock_acquire_recursive>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	071b      	lsls	r3, r3, #28
 800b458:	d502      	bpl.n	800b460 <_puts_r+0x48>
 800b45a:	6923      	ldr	r3, [r4, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d129      	bne.n	800b4b4 <_puts_r+0x9c>
 800b460:	0021      	movs	r1, r4
 800b462:	0028      	movs	r0, r5
 800b464:	f000 f8aa 	bl	800b5bc <__swsetup_r>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d023      	beq.n	800b4b4 <_puts_r+0x9c>
 800b46c:	2501      	movs	r5, #1
 800b46e:	426d      	negs	r5, r5
 800b470:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b472:	07db      	lsls	r3, r3, #31
 800b474:	d405      	bmi.n	800b482 <_puts_r+0x6a>
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	059b      	lsls	r3, r3, #22
 800b47a:	d402      	bmi.n	800b482 <_puts_r+0x6a>
 800b47c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b47e:	f001 f98f 	bl	800c7a0 <__retarget_lock_release_recursive>
 800b482:	0028      	movs	r0, r5
 800b484:	bd70      	pop	{r4, r5, r6, pc}
 800b486:	4b1b      	ldr	r3, [pc, #108]	; (800b4f4 <_puts_r+0xdc>)
 800b488:	429c      	cmp	r4, r3
 800b48a:	d101      	bne.n	800b490 <_puts_r+0x78>
 800b48c:	68ac      	ldr	r4, [r5, #8]
 800b48e:	e7d8      	b.n	800b442 <_puts_r+0x2a>
 800b490:	4b19      	ldr	r3, [pc, #100]	; (800b4f8 <_puts_r+0xe0>)
 800b492:	429c      	cmp	r4, r3
 800b494:	d1d5      	bne.n	800b442 <_puts_r+0x2a>
 800b496:	68ec      	ldr	r4, [r5, #12]
 800b498:	e7d3      	b.n	800b442 <_puts_r+0x2a>
 800b49a:	3601      	adds	r6, #1
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	da04      	bge.n	800b4ac <_puts_r+0x94>
 800b4a2:	69a2      	ldr	r2, [r4, #24]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	dc16      	bgt.n	800b4d6 <_puts_r+0xbe>
 800b4a8:	290a      	cmp	r1, #10
 800b4aa:	d014      	beq.n	800b4d6 <_puts_r+0xbe>
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	6022      	str	r2, [r4, #0]
 800b4b2:	7019      	strb	r1, [r3, #0]
 800b4b4:	68a3      	ldr	r3, [r4, #8]
 800b4b6:	7831      	ldrb	r1, [r6, #0]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	2900      	cmp	r1, #0
 800b4bc:	d1ed      	bne.n	800b49a <_puts_r+0x82>
 800b4be:	60a3      	str	r3, [r4, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	da0f      	bge.n	800b4e4 <_puts_r+0xcc>
 800b4c4:	0028      	movs	r0, r5
 800b4c6:	0022      	movs	r2, r4
 800b4c8:	310a      	adds	r1, #10
 800b4ca:	f000 f821 	bl	800b510 <__swbuf_r>
 800b4ce:	250a      	movs	r5, #10
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d1cd      	bne.n	800b470 <_puts_r+0x58>
 800b4d4:	e7ca      	b.n	800b46c <_puts_r+0x54>
 800b4d6:	0022      	movs	r2, r4
 800b4d8:	0028      	movs	r0, r5
 800b4da:	f000 f819 	bl	800b510 <__swbuf_r>
 800b4de:	1c43      	adds	r3, r0, #1
 800b4e0:	d1e8      	bne.n	800b4b4 <_puts_r+0x9c>
 800b4e2:	e7c3      	b.n	800b46c <_puts_r+0x54>
 800b4e4:	250a      	movs	r5, #10
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	6022      	str	r2, [r4, #0]
 800b4ec:	701d      	strb	r5, [r3, #0]
 800b4ee:	e7bf      	b.n	800b470 <_puts_r+0x58>
 800b4f0:	0800e21c 	.word	0x0800e21c
 800b4f4:	0800e23c 	.word	0x0800e23c
 800b4f8:	0800e1fc 	.word	0x0800e1fc

0800b4fc <puts>:
 800b4fc:	b510      	push	{r4, lr}
 800b4fe:	4b03      	ldr	r3, [pc, #12]	; (800b50c <puts+0x10>)
 800b500:	0001      	movs	r1, r0
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	f7ff ff88 	bl	800b418 <_puts_r>
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	46c0      	nop			; (mov r8, r8)
 800b50c:	20000024 	.word	0x20000024

0800b510 <__swbuf_r>:
 800b510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b512:	0005      	movs	r5, r0
 800b514:	000e      	movs	r6, r1
 800b516:	0014      	movs	r4, r2
 800b518:	2800      	cmp	r0, #0
 800b51a:	d004      	beq.n	800b526 <__swbuf_r+0x16>
 800b51c:	6983      	ldr	r3, [r0, #24]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <__swbuf_r+0x16>
 800b522:	f001 f897 	bl	800c654 <__sinit>
 800b526:	4b22      	ldr	r3, [pc, #136]	; (800b5b0 <__swbuf_r+0xa0>)
 800b528:	429c      	cmp	r4, r3
 800b52a:	d12e      	bne.n	800b58a <__swbuf_r+0x7a>
 800b52c:	686c      	ldr	r4, [r5, #4]
 800b52e:	69a3      	ldr	r3, [r4, #24]
 800b530:	60a3      	str	r3, [r4, #8]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	071b      	lsls	r3, r3, #28
 800b536:	d532      	bpl.n	800b59e <__swbuf_r+0x8e>
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d02f      	beq.n	800b59e <__swbuf_r+0x8e>
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	6922      	ldr	r2, [r4, #16]
 800b542:	b2f7      	uxtb	r7, r6
 800b544:	1a98      	subs	r0, r3, r2
 800b546:	6963      	ldr	r3, [r4, #20]
 800b548:	b2f6      	uxtb	r6, r6
 800b54a:	4283      	cmp	r3, r0
 800b54c:	dc05      	bgt.n	800b55a <__swbuf_r+0x4a>
 800b54e:	0021      	movs	r1, r4
 800b550:	0028      	movs	r0, r5
 800b552:	f000 ffdd 	bl	800c510 <_fflush_r>
 800b556:	2800      	cmp	r0, #0
 800b558:	d127      	bne.n	800b5aa <__swbuf_r+0x9a>
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	3001      	adds	r0, #1
 800b55e:	3b01      	subs	r3, #1
 800b560:	60a3      	str	r3, [r4, #8]
 800b562:	6823      	ldr	r3, [r4, #0]
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	6022      	str	r2, [r4, #0]
 800b568:	701f      	strb	r7, [r3, #0]
 800b56a:	6963      	ldr	r3, [r4, #20]
 800b56c:	4283      	cmp	r3, r0
 800b56e:	d004      	beq.n	800b57a <__swbuf_r+0x6a>
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	07db      	lsls	r3, r3, #31
 800b574:	d507      	bpl.n	800b586 <__swbuf_r+0x76>
 800b576:	2e0a      	cmp	r6, #10
 800b578:	d105      	bne.n	800b586 <__swbuf_r+0x76>
 800b57a:	0021      	movs	r1, r4
 800b57c:	0028      	movs	r0, r5
 800b57e:	f000 ffc7 	bl	800c510 <_fflush_r>
 800b582:	2800      	cmp	r0, #0
 800b584:	d111      	bne.n	800b5aa <__swbuf_r+0x9a>
 800b586:	0030      	movs	r0, r6
 800b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b58a:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <__swbuf_r+0xa4>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d101      	bne.n	800b594 <__swbuf_r+0x84>
 800b590:	68ac      	ldr	r4, [r5, #8]
 800b592:	e7cc      	b.n	800b52e <__swbuf_r+0x1e>
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <__swbuf_r+0xa8>)
 800b596:	429c      	cmp	r4, r3
 800b598:	d1c9      	bne.n	800b52e <__swbuf_r+0x1e>
 800b59a:	68ec      	ldr	r4, [r5, #12]
 800b59c:	e7c7      	b.n	800b52e <__swbuf_r+0x1e>
 800b59e:	0021      	movs	r1, r4
 800b5a0:	0028      	movs	r0, r5
 800b5a2:	f000 f80b 	bl	800b5bc <__swsetup_r>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d0c9      	beq.n	800b53e <__swbuf_r+0x2e>
 800b5aa:	2601      	movs	r6, #1
 800b5ac:	4276      	negs	r6, r6
 800b5ae:	e7ea      	b.n	800b586 <__swbuf_r+0x76>
 800b5b0:	0800e21c 	.word	0x0800e21c
 800b5b4:	0800e23c 	.word	0x0800e23c
 800b5b8:	0800e1fc 	.word	0x0800e1fc

0800b5bc <__swsetup_r>:
 800b5bc:	4b37      	ldr	r3, [pc, #220]	; (800b69c <__swsetup_r+0xe0>)
 800b5be:	b570      	push	{r4, r5, r6, lr}
 800b5c0:	681d      	ldr	r5, [r3, #0]
 800b5c2:	0006      	movs	r6, r0
 800b5c4:	000c      	movs	r4, r1
 800b5c6:	2d00      	cmp	r5, #0
 800b5c8:	d005      	beq.n	800b5d6 <__swsetup_r+0x1a>
 800b5ca:	69ab      	ldr	r3, [r5, #24]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d102      	bne.n	800b5d6 <__swsetup_r+0x1a>
 800b5d0:	0028      	movs	r0, r5
 800b5d2:	f001 f83f 	bl	800c654 <__sinit>
 800b5d6:	4b32      	ldr	r3, [pc, #200]	; (800b6a0 <__swsetup_r+0xe4>)
 800b5d8:	429c      	cmp	r4, r3
 800b5da:	d10f      	bne.n	800b5fc <__swsetup_r+0x40>
 800b5dc:	686c      	ldr	r4, [r5, #4]
 800b5de:	230c      	movs	r3, #12
 800b5e0:	5ee2      	ldrsh	r2, [r4, r3]
 800b5e2:	b293      	uxth	r3, r2
 800b5e4:	0711      	lsls	r1, r2, #28
 800b5e6:	d42d      	bmi.n	800b644 <__swsetup_r+0x88>
 800b5e8:	06d9      	lsls	r1, r3, #27
 800b5ea:	d411      	bmi.n	800b610 <__swsetup_r+0x54>
 800b5ec:	2309      	movs	r3, #9
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	6033      	str	r3, [r6, #0]
 800b5f2:	3337      	adds	r3, #55	; 0x37
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	81a3      	strh	r3, [r4, #12]
 800b5f8:	4240      	negs	r0, r0
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	4b29      	ldr	r3, [pc, #164]	; (800b6a4 <__swsetup_r+0xe8>)
 800b5fe:	429c      	cmp	r4, r3
 800b600:	d101      	bne.n	800b606 <__swsetup_r+0x4a>
 800b602:	68ac      	ldr	r4, [r5, #8]
 800b604:	e7eb      	b.n	800b5de <__swsetup_r+0x22>
 800b606:	4b28      	ldr	r3, [pc, #160]	; (800b6a8 <__swsetup_r+0xec>)
 800b608:	429c      	cmp	r4, r3
 800b60a:	d1e8      	bne.n	800b5de <__swsetup_r+0x22>
 800b60c:	68ec      	ldr	r4, [r5, #12]
 800b60e:	e7e6      	b.n	800b5de <__swsetup_r+0x22>
 800b610:	075b      	lsls	r3, r3, #29
 800b612:	d513      	bpl.n	800b63c <__swsetup_r+0x80>
 800b614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b616:	2900      	cmp	r1, #0
 800b618:	d008      	beq.n	800b62c <__swsetup_r+0x70>
 800b61a:	0023      	movs	r3, r4
 800b61c:	3344      	adds	r3, #68	; 0x44
 800b61e:	4299      	cmp	r1, r3
 800b620:	d002      	beq.n	800b628 <__swsetup_r+0x6c>
 800b622:	0030      	movs	r0, r6
 800b624:	f001 fd08 	bl	800d038 <_free_r>
 800b628:	2300      	movs	r3, #0
 800b62a:	6363      	str	r3, [r4, #52]	; 0x34
 800b62c:	2224      	movs	r2, #36	; 0x24
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	4393      	bics	r3, r2
 800b632:	81a3      	strh	r3, [r4, #12]
 800b634:	2300      	movs	r3, #0
 800b636:	6063      	str	r3, [r4, #4]
 800b638:	6923      	ldr	r3, [r4, #16]
 800b63a:	6023      	str	r3, [r4, #0]
 800b63c:	2308      	movs	r3, #8
 800b63e:	89a2      	ldrh	r2, [r4, #12]
 800b640:	4313      	orrs	r3, r2
 800b642:	81a3      	strh	r3, [r4, #12]
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10b      	bne.n	800b662 <__swsetup_r+0xa6>
 800b64a:	21a0      	movs	r1, #160	; 0xa0
 800b64c:	2280      	movs	r2, #128	; 0x80
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	0089      	lsls	r1, r1, #2
 800b652:	0092      	lsls	r2, r2, #2
 800b654:	400b      	ands	r3, r1
 800b656:	4293      	cmp	r3, r2
 800b658:	d003      	beq.n	800b662 <__swsetup_r+0xa6>
 800b65a:	0021      	movs	r1, r4
 800b65c:	0030      	movs	r0, r6
 800b65e:	f001 f8c9 	bl	800c7f4 <__smakebuf_r>
 800b662:	220c      	movs	r2, #12
 800b664:	5ea3      	ldrsh	r3, [r4, r2]
 800b666:	2001      	movs	r0, #1
 800b668:	001a      	movs	r2, r3
 800b66a:	b299      	uxth	r1, r3
 800b66c:	4002      	ands	r2, r0
 800b66e:	4203      	tst	r3, r0
 800b670:	d00f      	beq.n	800b692 <__swsetup_r+0xd6>
 800b672:	2200      	movs	r2, #0
 800b674:	60a2      	str	r2, [r4, #8]
 800b676:	6962      	ldr	r2, [r4, #20]
 800b678:	4252      	negs	r2, r2
 800b67a:	61a2      	str	r2, [r4, #24]
 800b67c:	2000      	movs	r0, #0
 800b67e:	6922      	ldr	r2, [r4, #16]
 800b680:	4282      	cmp	r2, r0
 800b682:	d1ba      	bne.n	800b5fa <__swsetup_r+0x3e>
 800b684:	060a      	lsls	r2, r1, #24
 800b686:	d5b8      	bpl.n	800b5fa <__swsetup_r+0x3e>
 800b688:	2240      	movs	r2, #64	; 0x40
 800b68a:	4313      	orrs	r3, r2
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	3801      	subs	r0, #1
 800b690:	e7b3      	b.n	800b5fa <__swsetup_r+0x3e>
 800b692:	0788      	lsls	r0, r1, #30
 800b694:	d400      	bmi.n	800b698 <__swsetup_r+0xdc>
 800b696:	6962      	ldr	r2, [r4, #20]
 800b698:	60a2      	str	r2, [r4, #8]
 800b69a:	e7ef      	b.n	800b67c <__swsetup_r+0xc0>
 800b69c:	20000024 	.word	0x20000024
 800b6a0:	0800e21c 	.word	0x0800e21c
 800b6a4:	0800e23c 	.word	0x0800e23c
 800b6a8:	0800e1fc 	.word	0x0800e1fc

0800b6ac <quorem>:
 800b6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ae:	0006      	movs	r6, r0
 800b6b0:	690b      	ldr	r3, [r1, #16]
 800b6b2:	6932      	ldr	r2, [r6, #16]
 800b6b4:	b087      	sub	sp, #28
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	9103      	str	r1, [sp, #12]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	db65      	blt.n	800b78a <quorem+0xde>
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	009c      	lsls	r4, r3, #2
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	000b      	movs	r3, r1
 800b6c6:	3314      	adds	r3, #20
 800b6c8:	9305      	str	r3, [sp, #20]
 800b6ca:	191b      	adds	r3, r3, r4
 800b6cc:	9304      	str	r3, [sp, #16]
 800b6ce:	0033      	movs	r3, r6
 800b6d0:	3314      	adds	r3, #20
 800b6d2:	9302      	str	r3, [sp, #8]
 800b6d4:	191c      	adds	r4, r3, r4
 800b6d6:	9b04      	ldr	r3, [sp, #16]
 800b6d8:	6827      	ldr	r7, [r4, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	0038      	movs	r0, r7
 800b6de:	1c5d      	adds	r5, r3, #1
 800b6e0:	0029      	movs	r1, r5
 800b6e2:	9301      	str	r3, [sp, #4]
 800b6e4:	f7f4 fd34 	bl	8000150 <__udivsi3>
 800b6e8:	9001      	str	r0, [sp, #4]
 800b6ea:	42af      	cmp	r7, r5
 800b6ec:	d324      	bcc.n	800b738 <quorem+0x8c>
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	46ac      	mov	ip, r5
 800b6f2:	9802      	ldr	r0, [sp, #8]
 800b6f4:	9f05      	ldr	r7, [sp, #20]
 800b6f6:	cf08      	ldmia	r7!, {r3}
 800b6f8:	9a01      	ldr	r2, [sp, #4]
 800b6fa:	b299      	uxth	r1, r3
 800b6fc:	4351      	muls	r1, r2
 800b6fe:	0c1b      	lsrs	r3, r3, #16
 800b700:	4353      	muls	r3, r2
 800b702:	1949      	adds	r1, r1, r5
 800b704:	0c0a      	lsrs	r2, r1, #16
 800b706:	189b      	adds	r3, r3, r2
 800b708:	6802      	ldr	r2, [r0, #0]
 800b70a:	b289      	uxth	r1, r1
 800b70c:	b292      	uxth	r2, r2
 800b70e:	4462      	add	r2, ip
 800b710:	1a52      	subs	r2, r2, r1
 800b712:	6801      	ldr	r1, [r0, #0]
 800b714:	0c1d      	lsrs	r5, r3, #16
 800b716:	0c09      	lsrs	r1, r1, #16
 800b718:	b29b      	uxth	r3, r3
 800b71a:	1acb      	subs	r3, r1, r3
 800b71c:	1411      	asrs	r1, r2, #16
 800b71e:	185b      	adds	r3, r3, r1
 800b720:	1419      	asrs	r1, r3, #16
 800b722:	b292      	uxth	r2, r2
 800b724:	041b      	lsls	r3, r3, #16
 800b726:	431a      	orrs	r2, r3
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	468c      	mov	ip, r1
 800b72c:	c004      	stmia	r0!, {r2}
 800b72e:	42bb      	cmp	r3, r7
 800b730:	d2e1      	bcs.n	800b6f6 <quorem+0x4a>
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d030      	beq.n	800b79a <quorem+0xee>
 800b738:	0030      	movs	r0, r6
 800b73a:	9903      	ldr	r1, [sp, #12]
 800b73c:	f001 fb38 	bl	800cdb0 <__mcmp>
 800b740:	2800      	cmp	r0, #0
 800b742:	db21      	blt.n	800b788 <quorem+0xdc>
 800b744:	0030      	movs	r0, r6
 800b746:	2400      	movs	r4, #0
 800b748:	9b01      	ldr	r3, [sp, #4]
 800b74a:	9903      	ldr	r1, [sp, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	3014      	adds	r0, #20
 800b752:	3114      	adds	r1, #20
 800b754:	6803      	ldr	r3, [r0, #0]
 800b756:	c920      	ldmia	r1!, {r5}
 800b758:	b29a      	uxth	r2, r3
 800b75a:	1914      	adds	r4, r2, r4
 800b75c:	b2aa      	uxth	r2, r5
 800b75e:	1aa2      	subs	r2, r4, r2
 800b760:	0c1b      	lsrs	r3, r3, #16
 800b762:	0c2d      	lsrs	r5, r5, #16
 800b764:	1414      	asrs	r4, r2, #16
 800b766:	1b5b      	subs	r3, r3, r5
 800b768:	191b      	adds	r3, r3, r4
 800b76a:	141c      	asrs	r4, r3, #16
 800b76c:	b292      	uxth	r2, r2
 800b76e:	041b      	lsls	r3, r3, #16
 800b770:	4313      	orrs	r3, r2
 800b772:	c008      	stmia	r0!, {r3}
 800b774:	9b04      	ldr	r3, [sp, #16]
 800b776:	428b      	cmp	r3, r1
 800b778:	d2ec      	bcs.n	800b754 <quorem+0xa8>
 800b77a:	9b00      	ldr	r3, [sp, #0]
 800b77c:	9a02      	ldr	r2, [sp, #8]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	18d3      	adds	r3, r2, r3
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	2a00      	cmp	r2, #0
 800b786:	d015      	beq.n	800b7b4 <quorem+0x108>
 800b788:	9801      	ldr	r0, [sp, #4]
 800b78a:	b007      	add	sp, #28
 800b78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d106      	bne.n	800b7a2 <quorem+0xf6>
 800b794:	9b00      	ldr	r3, [sp, #0]
 800b796:	3b01      	subs	r3, #1
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	9b02      	ldr	r3, [sp, #8]
 800b79c:	3c04      	subs	r4, #4
 800b79e:	42a3      	cmp	r3, r4
 800b7a0:	d3f5      	bcc.n	800b78e <quorem+0xe2>
 800b7a2:	9b00      	ldr	r3, [sp, #0]
 800b7a4:	6133      	str	r3, [r6, #16]
 800b7a6:	e7c7      	b.n	800b738 <quorem+0x8c>
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	2a00      	cmp	r2, #0
 800b7ac:	d106      	bne.n	800b7bc <quorem+0x110>
 800b7ae:	9a00      	ldr	r2, [sp, #0]
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	9200      	str	r2, [sp, #0]
 800b7b4:	9a02      	ldr	r2, [sp, #8]
 800b7b6:	3b04      	subs	r3, #4
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d3f5      	bcc.n	800b7a8 <quorem+0xfc>
 800b7bc:	9b00      	ldr	r3, [sp, #0]
 800b7be:	6133      	str	r3, [r6, #16]
 800b7c0:	e7e2      	b.n	800b788 <quorem+0xdc>
	...

0800b7c4 <_dtoa_r>:
 800b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c6:	b09d      	sub	sp, #116	; 0x74
 800b7c8:	9202      	str	r2, [sp, #8]
 800b7ca:	9303      	str	r3, [sp, #12]
 800b7cc:	9b02      	ldr	r3, [sp, #8]
 800b7ce:	9c03      	ldr	r4, [sp, #12]
 800b7d0:	9308      	str	r3, [sp, #32]
 800b7d2:	9409      	str	r4, [sp, #36]	; 0x24
 800b7d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b7d6:	0007      	movs	r7, r0
 800b7d8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b7da:	2c00      	cmp	r4, #0
 800b7dc:	d10e      	bne.n	800b7fc <_dtoa_r+0x38>
 800b7de:	2010      	movs	r0, #16
 800b7e0:	f001 f84c 	bl	800c87c <malloc>
 800b7e4:	1e02      	subs	r2, r0, #0
 800b7e6:	6278      	str	r0, [r7, #36]	; 0x24
 800b7e8:	d104      	bne.n	800b7f4 <_dtoa_r+0x30>
 800b7ea:	21ea      	movs	r1, #234	; 0xea
 800b7ec:	4bc7      	ldr	r3, [pc, #796]	; (800bb0c <_dtoa_r+0x348>)
 800b7ee:	48c8      	ldr	r0, [pc, #800]	; (800bb10 <_dtoa_r+0x34c>)
 800b7f0:	f001 fed8 	bl	800d5a4 <__assert_func>
 800b7f4:	6044      	str	r4, [r0, #4]
 800b7f6:	6084      	str	r4, [r0, #8]
 800b7f8:	6004      	str	r4, [r0, #0]
 800b7fa:	60c4      	str	r4, [r0, #12]
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	6819      	ldr	r1, [r3, #0]
 800b800:	2900      	cmp	r1, #0
 800b802:	d00a      	beq.n	800b81a <_dtoa_r+0x56>
 800b804:	685a      	ldr	r2, [r3, #4]
 800b806:	2301      	movs	r3, #1
 800b808:	4093      	lsls	r3, r2
 800b80a:	604a      	str	r2, [r1, #4]
 800b80c:	608b      	str	r3, [r1, #8]
 800b80e:	0038      	movs	r0, r7
 800b810:	f001 f88e 	bl	800c930 <_Bfree>
 800b814:	2200      	movs	r2, #0
 800b816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	da20      	bge.n	800b862 <_dtoa_r+0x9e>
 800b820:	2301      	movs	r3, #1
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	9b03      	ldr	r3, [sp, #12]
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	085b      	lsrs	r3, r3, #1
 800b82a:	9309      	str	r3, [sp, #36]	; 0x24
 800b82c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b82e:	4bb9      	ldr	r3, [pc, #740]	; (800bb14 <_dtoa_r+0x350>)
 800b830:	4ab8      	ldr	r2, [pc, #736]	; (800bb14 <_dtoa_r+0x350>)
 800b832:	402b      	ands	r3, r5
 800b834:	4293      	cmp	r3, r2
 800b836:	d117      	bne.n	800b868 <_dtoa_r+0xa4>
 800b838:	4bb7      	ldr	r3, [pc, #732]	; (800bb18 <_dtoa_r+0x354>)
 800b83a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b83c:	0328      	lsls	r0, r5, #12
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	9b02      	ldr	r3, [sp, #8]
 800b842:	0b00      	lsrs	r0, r0, #12
 800b844:	4318      	orrs	r0, r3
 800b846:	d101      	bne.n	800b84c <_dtoa_r+0x88>
 800b848:	f000 fdbf 	bl	800c3ca <_dtoa_r+0xc06>
 800b84c:	48b3      	ldr	r0, [pc, #716]	; (800bb1c <_dtoa_r+0x358>)
 800b84e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b850:	9006      	str	r0, [sp, #24]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d002      	beq.n	800b85c <_dtoa_r+0x98>
 800b856:	4bb2      	ldr	r3, [pc, #712]	; (800bb20 <_dtoa_r+0x35c>)
 800b858:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b85a:	6013      	str	r3, [r2, #0]
 800b85c:	9806      	ldr	r0, [sp, #24]
 800b85e:	b01d      	add	sp, #116	; 0x74
 800b860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b862:	2300      	movs	r3, #0
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	e7e1      	b.n	800b82c <_dtoa_r+0x68>
 800b868:	9b08      	ldr	r3, [sp, #32]
 800b86a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b86c:	9312      	str	r3, [sp, #72]	; 0x48
 800b86e:	9413      	str	r4, [sp, #76]	; 0x4c
 800b870:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b872:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b874:	2200      	movs	r2, #0
 800b876:	2300      	movs	r3, #0
 800b878:	f7f4 fdf0 	bl	800045c <__aeabi_dcmpeq>
 800b87c:	1e04      	subs	r4, r0, #0
 800b87e:	d009      	beq.n	800b894 <_dtoa_r+0xd0>
 800b880:	2301      	movs	r3, #1
 800b882:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b884:	6013      	str	r3, [r2, #0]
 800b886:	4ba7      	ldr	r3, [pc, #668]	; (800bb24 <_dtoa_r+0x360>)
 800b888:	9306      	str	r3, [sp, #24]
 800b88a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d0e5      	beq.n	800b85c <_dtoa_r+0x98>
 800b890:	4ba5      	ldr	r3, [pc, #660]	; (800bb28 <_dtoa_r+0x364>)
 800b892:	e7e1      	b.n	800b858 <_dtoa_r+0x94>
 800b894:	ab1a      	add	r3, sp, #104	; 0x68
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	ab1b      	add	r3, sp, #108	; 0x6c
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	0038      	movs	r0, r7
 800b89e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8a2:	f001 fb39 	bl	800cf18 <__d2b>
 800b8a6:	006e      	lsls	r6, r5, #1
 800b8a8:	9005      	str	r0, [sp, #20]
 800b8aa:	0d76      	lsrs	r6, r6, #21
 800b8ac:	d100      	bne.n	800b8b0 <_dtoa_r+0xec>
 800b8ae:	e07c      	b.n	800b9aa <_dtoa_r+0x1e6>
 800b8b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b8b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b8b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8b6:	4a9d      	ldr	r2, [pc, #628]	; (800bb2c <_dtoa_r+0x368>)
 800b8b8:	031b      	lsls	r3, r3, #12
 800b8ba:	0b1b      	lsrs	r3, r3, #12
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	0011      	movs	r1, r2
 800b8c0:	4b9b      	ldr	r3, [pc, #620]	; (800bb30 <_dtoa_r+0x36c>)
 800b8c2:	9418      	str	r4, [sp, #96]	; 0x60
 800b8c4:	18f6      	adds	r6, r6, r3
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	4b9a      	ldr	r3, [pc, #616]	; (800bb34 <_dtoa_r+0x370>)
 800b8ca:	f7f6 ff33 	bl	8002734 <__aeabi_dsub>
 800b8ce:	4a9a      	ldr	r2, [pc, #616]	; (800bb38 <_dtoa_r+0x374>)
 800b8d0:	4b9a      	ldr	r3, [pc, #616]	; (800bb3c <_dtoa_r+0x378>)
 800b8d2:	f7f6 fcc3 	bl	800225c <__aeabi_dmul>
 800b8d6:	4a9a      	ldr	r2, [pc, #616]	; (800bb40 <_dtoa_r+0x37c>)
 800b8d8:	4b9a      	ldr	r3, [pc, #616]	; (800bb44 <_dtoa_r+0x380>)
 800b8da:	f7f5 fd81 	bl	80013e0 <__aeabi_dadd>
 800b8de:	0004      	movs	r4, r0
 800b8e0:	0030      	movs	r0, r6
 800b8e2:	000d      	movs	r5, r1
 800b8e4:	f7f7 fb0c 	bl	8002f00 <__aeabi_i2d>
 800b8e8:	4a97      	ldr	r2, [pc, #604]	; (800bb48 <_dtoa_r+0x384>)
 800b8ea:	4b98      	ldr	r3, [pc, #608]	; (800bb4c <_dtoa_r+0x388>)
 800b8ec:	f7f6 fcb6 	bl	800225c <__aeabi_dmul>
 800b8f0:	0002      	movs	r2, r0
 800b8f2:	000b      	movs	r3, r1
 800b8f4:	0020      	movs	r0, r4
 800b8f6:	0029      	movs	r1, r5
 800b8f8:	f7f5 fd72 	bl	80013e0 <__aeabi_dadd>
 800b8fc:	0004      	movs	r4, r0
 800b8fe:	000d      	movs	r5, r1
 800b900:	f7f7 fac8 	bl	8002e94 <__aeabi_d2iz>
 800b904:	2200      	movs	r2, #0
 800b906:	9002      	str	r0, [sp, #8]
 800b908:	2300      	movs	r3, #0
 800b90a:	0020      	movs	r0, r4
 800b90c:	0029      	movs	r1, r5
 800b90e:	f7f4 fdab 	bl	8000468 <__aeabi_dcmplt>
 800b912:	2800      	cmp	r0, #0
 800b914:	d00b      	beq.n	800b92e <_dtoa_r+0x16a>
 800b916:	9802      	ldr	r0, [sp, #8]
 800b918:	f7f7 faf2 	bl	8002f00 <__aeabi_i2d>
 800b91c:	002b      	movs	r3, r5
 800b91e:	0022      	movs	r2, r4
 800b920:	f7f4 fd9c 	bl	800045c <__aeabi_dcmpeq>
 800b924:	4243      	negs	r3, r0
 800b926:	4158      	adcs	r0, r3
 800b928:	9b02      	ldr	r3, [sp, #8]
 800b92a:	1a1b      	subs	r3, r3, r0
 800b92c:	9302      	str	r3, [sp, #8]
 800b92e:	2301      	movs	r3, #1
 800b930:	9316      	str	r3, [sp, #88]	; 0x58
 800b932:	9b02      	ldr	r3, [sp, #8]
 800b934:	2b16      	cmp	r3, #22
 800b936:	d80f      	bhi.n	800b958 <_dtoa_r+0x194>
 800b938:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b93a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b93c:	00da      	lsls	r2, r3, #3
 800b93e:	4b84      	ldr	r3, [pc, #528]	; (800bb50 <_dtoa_r+0x38c>)
 800b940:	189b      	adds	r3, r3, r2
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	f7f4 fd8f 	bl	8000468 <__aeabi_dcmplt>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d049      	beq.n	800b9e2 <_dtoa_r+0x21e>
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	3b01      	subs	r3, #1
 800b952:	9302      	str	r3, [sp, #8]
 800b954:	2300      	movs	r3, #0
 800b956:	9316      	str	r3, [sp, #88]	; 0x58
 800b958:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b95a:	1b9e      	subs	r6, r3, r6
 800b95c:	2300      	movs	r3, #0
 800b95e:	930a      	str	r3, [sp, #40]	; 0x28
 800b960:	0033      	movs	r3, r6
 800b962:	3b01      	subs	r3, #1
 800b964:	930d      	str	r3, [sp, #52]	; 0x34
 800b966:	d504      	bpl.n	800b972 <_dtoa_r+0x1ae>
 800b968:	2301      	movs	r3, #1
 800b96a:	1b9b      	subs	r3, r3, r6
 800b96c:	930a      	str	r3, [sp, #40]	; 0x28
 800b96e:	2300      	movs	r3, #0
 800b970:	930d      	str	r3, [sp, #52]	; 0x34
 800b972:	9b02      	ldr	r3, [sp, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	db36      	blt.n	800b9e6 <_dtoa_r+0x222>
 800b978:	9a02      	ldr	r2, [sp, #8]
 800b97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b97c:	4694      	mov	ip, r2
 800b97e:	4463      	add	r3, ip
 800b980:	930d      	str	r3, [sp, #52]	; 0x34
 800b982:	2300      	movs	r3, #0
 800b984:	9215      	str	r2, [sp, #84]	; 0x54
 800b986:	930e      	str	r3, [sp, #56]	; 0x38
 800b988:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b98a:	2401      	movs	r4, #1
 800b98c:	2b09      	cmp	r3, #9
 800b98e:	d864      	bhi.n	800ba5a <_dtoa_r+0x296>
 800b990:	2b05      	cmp	r3, #5
 800b992:	dd02      	ble.n	800b99a <_dtoa_r+0x1d6>
 800b994:	2400      	movs	r4, #0
 800b996:	3b04      	subs	r3, #4
 800b998:	9322      	str	r3, [sp, #136]	; 0x88
 800b99a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b99c:	1e98      	subs	r0, r3, #2
 800b99e:	2803      	cmp	r0, #3
 800b9a0:	d864      	bhi.n	800ba6c <_dtoa_r+0x2a8>
 800b9a2:	f7f4 fbc1 	bl	8000128 <__gnu_thumb1_case_uqi>
 800b9a6:	3829      	.short	0x3829
 800b9a8:	5836      	.short	0x5836
 800b9aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b9ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b9ae:	189e      	adds	r6, r3, r2
 800b9b0:	4b68      	ldr	r3, [pc, #416]	; (800bb54 <_dtoa_r+0x390>)
 800b9b2:	18f2      	adds	r2, r6, r3
 800b9b4:	2a20      	cmp	r2, #32
 800b9b6:	dd0f      	ble.n	800b9d8 <_dtoa_r+0x214>
 800b9b8:	2340      	movs	r3, #64	; 0x40
 800b9ba:	1a9b      	subs	r3, r3, r2
 800b9bc:	409d      	lsls	r5, r3
 800b9be:	4b66      	ldr	r3, [pc, #408]	; (800bb58 <_dtoa_r+0x394>)
 800b9c0:	9802      	ldr	r0, [sp, #8]
 800b9c2:	18f3      	adds	r3, r6, r3
 800b9c4:	40d8      	lsrs	r0, r3
 800b9c6:	4328      	orrs	r0, r5
 800b9c8:	f7f7 faca 	bl	8002f60 <__aeabi_ui2d>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	4c63      	ldr	r4, [pc, #396]	; (800bb5c <_dtoa_r+0x398>)
 800b9d0:	3e01      	subs	r6, #1
 800b9d2:	1909      	adds	r1, r1, r4
 800b9d4:	9318      	str	r3, [sp, #96]	; 0x60
 800b9d6:	e776      	b.n	800b8c6 <_dtoa_r+0x102>
 800b9d8:	2320      	movs	r3, #32
 800b9da:	9802      	ldr	r0, [sp, #8]
 800b9dc:	1a9b      	subs	r3, r3, r2
 800b9de:	4098      	lsls	r0, r3
 800b9e0:	e7f2      	b.n	800b9c8 <_dtoa_r+0x204>
 800b9e2:	9016      	str	r0, [sp, #88]	; 0x58
 800b9e4:	e7b8      	b.n	800b958 <_dtoa_r+0x194>
 800b9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9e8:	9a02      	ldr	r2, [sp, #8]
 800b9ea:	1a9b      	subs	r3, r3, r2
 800b9ec:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ee:	4253      	negs	r3, r2
 800b9f0:	930e      	str	r3, [sp, #56]	; 0x38
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b9f6:	e7c7      	b.n	800b988 <_dtoa_r+0x1c4>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9fe:	930c      	str	r3, [sp, #48]	; 0x30
 800ba00:	9307      	str	r3, [sp, #28]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	dc13      	bgt.n	800ba2e <_dtoa_r+0x26a>
 800ba06:	2301      	movs	r3, #1
 800ba08:	001a      	movs	r2, r3
 800ba0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba0c:	9307      	str	r3, [sp, #28]
 800ba0e:	9223      	str	r2, [sp, #140]	; 0x8c
 800ba10:	e00d      	b.n	800ba2e <_dtoa_r+0x26a>
 800ba12:	2301      	movs	r3, #1
 800ba14:	e7f1      	b.n	800b9fa <_dtoa_r+0x236>
 800ba16:	2300      	movs	r3, #0
 800ba18:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ba1a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba1c:	4694      	mov	ip, r2
 800ba1e:	9b02      	ldr	r3, [sp, #8]
 800ba20:	4463      	add	r3, ip
 800ba22:	930c      	str	r3, [sp, #48]	; 0x30
 800ba24:	3301      	adds	r3, #1
 800ba26:	9307      	str	r3, [sp, #28]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	dc00      	bgt.n	800ba2e <_dtoa_r+0x26a>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	2200      	movs	r2, #0
 800ba30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba32:	6042      	str	r2, [r0, #4]
 800ba34:	3204      	adds	r2, #4
 800ba36:	0015      	movs	r5, r2
 800ba38:	3514      	adds	r5, #20
 800ba3a:	6841      	ldr	r1, [r0, #4]
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d919      	bls.n	800ba74 <_dtoa_r+0x2b0>
 800ba40:	0038      	movs	r0, r7
 800ba42:	f000 ff31 	bl	800c8a8 <_Balloc>
 800ba46:	9006      	str	r0, [sp, #24]
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d117      	bne.n	800ba7c <_dtoa_r+0x2b8>
 800ba4c:	21d5      	movs	r1, #213	; 0xd5
 800ba4e:	0002      	movs	r2, r0
 800ba50:	4b43      	ldr	r3, [pc, #268]	; (800bb60 <_dtoa_r+0x39c>)
 800ba52:	0049      	lsls	r1, r1, #1
 800ba54:	e6cb      	b.n	800b7ee <_dtoa_r+0x2a>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e7de      	b.n	800ba18 <_dtoa_r+0x254>
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	940f      	str	r4, [sp, #60]	; 0x3c
 800ba5e:	9322      	str	r3, [sp, #136]	; 0x88
 800ba60:	3b01      	subs	r3, #1
 800ba62:	930c      	str	r3, [sp, #48]	; 0x30
 800ba64:	9307      	str	r3, [sp, #28]
 800ba66:	2200      	movs	r2, #0
 800ba68:	3313      	adds	r3, #19
 800ba6a:	e7d0      	b.n	800ba0e <_dtoa_r+0x24a>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba70:	3b02      	subs	r3, #2
 800ba72:	e7f6      	b.n	800ba62 <_dtoa_r+0x29e>
 800ba74:	3101      	adds	r1, #1
 800ba76:	6041      	str	r1, [r0, #4]
 800ba78:	0052      	lsls	r2, r2, #1
 800ba7a:	e7dc      	b.n	800ba36 <_dtoa_r+0x272>
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	9a06      	ldr	r2, [sp, #24]
 800ba80:	601a      	str	r2, [r3, #0]
 800ba82:	9b07      	ldr	r3, [sp, #28]
 800ba84:	2b0e      	cmp	r3, #14
 800ba86:	d900      	bls.n	800ba8a <_dtoa_r+0x2c6>
 800ba88:	e0eb      	b.n	800bc62 <_dtoa_r+0x49e>
 800ba8a:	2c00      	cmp	r4, #0
 800ba8c:	d100      	bne.n	800ba90 <_dtoa_r+0x2cc>
 800ba8e:	e0e8      	b.n	800bc62 <_dtoa_r+0x49e>
 800ba90:	9b02      	ldr	r3, [sp, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dd68      	ble.n	800bb68 <_dtoa_r+0x3a4>
 800ba96:	001a      	movs	r2, r3
 800ba98:	210f      	movs	r1, #15
 800ba9a:	4b2d      	ldr	r3, [pc, #180]	; (800bb50 <_dtoa_r+0x38c>)
 800ba9c:	400a      	ands	r2, r1
 800ba9e:	00d2      	lsls	r2, r2, #3
 800baa0:	189b      	adds	r3, r3, r2
 800baa2:	681d      	ldr	r5, [r3, #0]
 800baa4:	685e      	ldr	r6, [r3, #4]
 800baa6:	9b02      	ldr	r3, [sp, #8]
 800baa8:	111c      	asrs	r4, r3, #4
 800baaa:	2302      	movs	r3, #2
 800baac:	9310      	str	r3, [sp, #64]	; 0x40
 800baae:	9b02      	ldr	r3, [sp, #8]
 800bab0:	05db      	lsls	r3, r3, #23
 800bab2:	d50b      	bpl.n	800bacc <_dtoa_r+0x308>
 800bab4:	4b2b      	ldr	r3, [pc, #172]	; (800bb64 <_dtoa_r+0x3a0>)
 800bab6:	400c      	ands	r4, r1
 800bab8:	6a1a      	ldr	r2, [r3, #32]
 800baba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800babe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bac0:	f7f5 ffca 	bl	8001a58 <__aeabi_ddiv>
 800bac4:	2303      	movs	r3, #3
 800bac6:	9008      	str	r0, [sp, #32]
 800bac8:	9109      	str	r1, [sp, #36]	; 0x24
 800baca:	9310      	str	r3, [sp, #64]	; 0x40
 800bacc:	4b25      	ldr	r3, [pc, #148]	; (800bb64 <_dtoa_r+0x3a0>)
 800bace:	9314      	str	r3, [sp, #80]	; 0x50
 800bad0:	2c00      	cmp	r4, #0
 800bad2:	d108      	bne.n	800bae6 <_dtoa_r+0x322>
 800bad4:	9808      	ldr	r0, [sp, #32]
 800bad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bad8:	002a      	movs	r2, r5
 800bada:	0033      	movs	r3, r6
 800badc:	f7f5 ffbc 	bl	8001a58 <__aeabi_ddiv>
 800bae0:	9008      	str	r0, [sp, #32]
 800bae2:	9109      	str	r1, [sp, #36]	; 0x24
 800bae4:	e05c      	b.n	800bba0 <_dtoa_r+0x3dc>
 800bae6:	2301      	movs	r3, #1
 800bae8:	421c      	tst	r4, r3
 800baea:	d00b      	beq.n	800bb04 <_dtoa_r+0x340>
 800baec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800baee:	0028      	movs	r0, r5
 800baf0:	3301      	adds	r3, #1
 800baf2:	9310      	str	r3, [sp, #64]	; 0x40
 800baf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800baf6:	0031      	movs	r1, r6
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	f7f6 fbae 	bl	800225c <__aeabi_dmul>
 800bb00:	0005      	movs	r5, r0
 800bb02:	000e      	movs	r6, r1
 800bb04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb06:	1064      	asrs	r4, r4, #1
 800bb08:	3308      	adds	r3, #8
 800bb0a:	e7e0      	b.n	800bace <_dtoa_r+0x30a>
 800bb0c:	0800e179 	.word	0x0800e179
 800bb10:	0800e190 	.word	0x0800e190
 800bb14:	7ff00000 	.word	0x7ff00000
 800bb18:	0000270f 	.word	0x0000270f
 800bb1c:	0800e175 	.word	0x0800e175
 800bb20:	0800e178 	.word	0x0800e178
 800bb24:	0800e148 	.word	0x0800e148
 800bb28:	0800e149 	.word	0x0800e149
 800bb2c:	3ff00000 	.word	0x3ff00000
 800bb30:	fffffc01 	.word	0xfffffc01
 800bb34:	3ff80000 	.word	0x3ff80000
 800bb38:	636f4361 	.word	0x636f4361
 800bb3c:	3fd287a7 	.word	0x3fd287a7
 800bb40:	8b60c8b3 	.word	0x8b60c8b3
 800bb44:	3fc68a28 	.word	0x3fc68a28
 800bb48:	509f79fb 	.word	0x509f79fb
 800bb4c:	3fd34413 	.word	0x3fd34413
 800bb50:	0800e2e0 	.word	0x0800e2e0
 800bb54:	00000432 	.word	0x00000432
 800bb58:	00000412 	.word	0x00000412
 800bb5c:	fe100000 	.word	0xfe100000
 800bb60:	0800e1eb 	.word	0x0800e1eb
 800bb64:	0800e2b8 	.word	0x0800e2b8
 800bb68:	2302      	movs	r3, #2
 800bb6a:	9310      	str	r3, [sp, #64]	; 0x40
 800bb6c:	9b02      	ldr	r3, [sp, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d016      	beq.n	800bba0 <_dtoa_r+0x3dc>
 800bb72:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bb74:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bb76:	425c      	negs	r4, r3
 800bb78:	230f      	movs	r3, #15
 800bb7a:	4ab6      	ldr	r2, [pc, #728]	; (800be54 <_dtoa_r+0x690>)
 800bb7c:	4023      	ands	r3, r4
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	18d3      	adds	r3, r2, r3
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f7f6 fb69 	bl	800225c <__aeabi_dmul>
 800bb8a:	2601      	movs	r6, #1
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9008      	str	r0, [sp, #32]
 800bb90:	9109      	str	r1, [sp, #36]	; 0x24
 800bb92:	4db1      	ldr	r5, [pc, #708]	; (800be58 <_dtoa_r+0x694>)
 800bb94:	1124      	asrs	r4, r4, #4
 800bb96:	2c00      	cmp	r4, #0
 800bb98:	d000      	beq.n	800bb9c <_dtoa_r+0x3d8>
 800bb9a:	e094      	b.n	800bcc6 <_dtoa_r+0x502>
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d19f      	bne.n	800bae0 <_dtoa_r+0x31c>
 800bba0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d100      	bne.n	800bba8 <_dtoa_r+0x3e4>
 800bba6:	e09b      	b.n	800bce0 <_dtoa_r+0x51c>
 800bba8:	9c08      	ldr	r4, [sp, #32]
 800bbaa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bbac:	2200      	movs	r2, #0
 800bbae:	0020      	movs	r0, r4
 800bbb0:	0029      	movs	r1, r5
 800bbb2:	4baa      	ldr	r3, [pc, #680]	; (800be5c <_dtoa_r+0x698>)
 800bbb4:	f7f4 fc58 	bl	8000468 <__aeabi_dcmplt>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d100      	bne.n	800bbbe <_dtoa_r+0x3fa>
 800bbbc:	e090      	b.n	800bce0 <_dtoa_r+0x51c>
 800bbbe:	9b07      	ldr	r3, [sp, #28]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d100      	bne.n	800bbc6 <_dtoa_r+0x402>
 800bbc4:	e08c      	b.n	800bce0 <_dtoa_r+0x51c>
 800bbc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	dd46      	ble.n	800bc5a <_dtoa_r+0x496>
 800bbcc:	9b02      	ldr	r3, [sp, #8]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	0020      	movs	r0, r4
 800bbd2:	0029      	movs	r1, r5
 800bbd4:	1e5e      	subs	r6, r3, #1
 800bbd6:	4ba2      	ldr	r3, [pc, #648]	; (800be60 <_dtoa_r+0x69c>)
 800bbd8:	f7f6 fb40 	bl	800225c <__aeabi_dmul>
 800bbdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbde:	9008      	str	r0, [sp, #32]
 800bbe0:	9109      	str	r1, [sp, #36]	; 0x24
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	9310      	str	r3, [sp, #64]	; 0x40
 800bbe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbe8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bbea:	9c08      	ldr	r4, [sp, #32]
 800bbec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800bbee:	9314      	str	r3, [sp, #80]	; 0x50
 800bbf0:	f7f7 f986 	bl	8002f00 <__aeabi_i2d>
 800bbf4:	0022      	movs	r2, r4
 800bbf6:	002b      	movs	r3, r5
 800bbf8:	f7f6 fb30 	bl	800225c <__aeabi_dmul>
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4b99      	ldr	r3, [pc, #612]	; (800be64 <_dtoa_r+0x6a0>)
 800bc00:	f7f5 fbee 	bl	80013e0 <__aeabi_dadd>
 800bc04:	9010      	str	r0, [sp, #64]	; 0x40
 800bc06:	9111      	str	r1, [sp, #68]	; 0x44
 800bc08:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bc0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc0c:	9208      	str	r2, [sp, #32]
 800bc0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc10:	4a95      	ldr	r2, [pc, #596]	; (800be68 <_dtoa_r+0x6a4>)
 800bc12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc14:	4694      	mov	ip, r2
 800bc16:	4463      	add	r3, ip
 800bc18:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d161      	bne.n	800bce6 <_dtoa_r+0x522>
 800bc22:	2200      	movs	r2, #0
 800bc24:	0020      	movs	r0, r4
 800bc26:	0029      	movs	r1, r5
 800bc28:	4b90      	ldr	r3, [pc, #576]	; (800be6c <_dtoa_r+0x6a8>)
 800bc2a:	f7f6 fd83 	bl	8002734 <__aeabi_dsub>
 800bc2e:	9a08      	ldr	r2, [sp, #32]
 800bc30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc32:	0004      	movs	r4, r0
 800bc34:	000d      	movs	r5, r1
 800bc36:	f7f4 fc2b 	bl	8000490 <__aeabi_dcmpgt>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d000      	beq.n	800bc40 <_dtoa_r+0x47c>
 800bc3e:	e2af      	b.n	800c1a0 <_dtoa_r+0x9dc>
 800bc40:	488b      	ldr	r0, [pc, #556]	; (800be70 <_dtoa_r+0x6ac>)
 800bc42:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc44:	4684      	mov	ip, r0
 800bc46:	4461      	add	r1, ip
 800bc48:	000b      	movs	r3, r1
 800bc4a:	0020      	movs	r0, r4
 800bc4c:	0029      	movs	r1, r5
 800bc4e:	9a08      	ldr	r2, [sp, #32]
 800bc50:	f7f4 fc0a 	bl	8000468 <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d000      	beq.n	800bc5a <_dtoa_r+0x496>
 800bc58:	e29f      	b.n	800c19a <_dtoa_r+0x9d6>
 800bc5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc5c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800bc5e:	9308      	str	r3, [sp, #32]
 800bc60:	9409      	str	r4, [sp, #36]	; 0x24
 800bc62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	da00      	bge.n	800bc6a <_dtoa_r+0x4a6>
 800bc68:	e172      	b.n	800bf50 <_dtoa_r+0x78c>
 800bc6a:	9a02      	ldr	r2, [sp, #8]
 800bc6c:	2a0e      	cmp	r2, #14
 800bc6e:	dd00      	ble.n	800bc72 <_dtoa_r+0x4ae>
 800bc70:	e16e      	b.n	800bf50 <_dtoa_r+0x78c>
 800bc72:	4b78      	ldr	r3, [pc, #480]	; (800be54 <_dtoa_r+0x690>)
 800bc74:	00d2      	lsls	r2, r2, #3
 800bc76:	189b      	adds	r3, r3, r2
 800bc78:	685c      	ldr	r4, [r3, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	930a      	str	r3, [sp, #40]	; 0x28
 800bc7e:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	db00      	blt.n	800bc88 <_dtoa_r+0x4c4>
 800bc86:	e0f7      	b.n	800be78 <_dtoa_r+0x6b4>
 800bc88:	9b07      	ldr	r3, [sp, #28]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	dd00      	ble.n	800bc90 <_dtoa_r+0x4cc>
 800bc8e:	e0f3      	b.n	800be78 <_dtoa_r+0x6b4>
 800bc90:	d000      	beq.n	800bc94 <_dtoa_r+0x4d0>
 800bc92:	e282      	b.n	800c19a <_dtoa_r+0x9d6>
 800bc94:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc98:	2200      	movs	r2, #0
 800bc9a:	4b74      	ldr	r3, [pc, #464]	; (800be6c <_dtoa_r+0x6a8>)
 800bc9c:	f7f6 fade 	bl	800225c <__aeabi_dmul>
 800bca0:	9a08      	ldr	r2, [sp, #32]
 800bca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bca4:	f7f4 fbfe 	bl	80004a4 <__aeabi_dcmpge>
 800bca8:	9e07      	ldr	r6, [sp, #28]
 800bcaa:	0035      	movs	r5, r6
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d000      	beq.n	800bcb2 <_dtoa_r+0x4ee>
 800bcb0:	e259      	b.n	800c166 <_dtoa_r+0x9a2>
 800bcb2:	9b06      	ldr	r3, [sp, #24]
 800bcb4:	9a06      	ldr	r2, [sp, #24]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	9308      	str	r3, [sp, #32]
 800bcba:	2331      	movs	r3, #49	; 0x31
 800bcbc:	7013      	strb	r3, [r2, #0]
 800bcbe:	9b02      	ldr	r3, [sp, #8]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	9302      	str	r3, [sp, #8]
 800bcc4:	e254      	b.n	800c170 <_dtoa_r+0x9ac>
 800bcc6:	4234      	tst	r4, r6
 800bcc8:	d007      	beq.n	800bcda <_dtoa_r+0x516>
 800bcca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bccc:	3301      	adds	r3, #1
 800bcce:	9310      	str	r3, [sp, #64]	; 0x40
 800bcd0:	682a      	ldr	r2, [r5, #0]
 800bcd2:	686b      	ldr	r3, [r5, #4]
 800bcd4:	f7f6 fac2 	bl	800225c <__aeabi_dmul>
 800bcd8:	0033      	movs	r3, r6
 800bcda:	1064      	asrs	r4, r4, #1
 800bcdc:	3508      	adds	r5, #8
 800bcde:	e75a      	b.n	800bb96 <_dtoa_r+0x3d2>
 800bce0:	9e02      	ldr	r6, [sp, #8]
 800bce2:	9b07      	ldr	r3, [sp, #28]
 800bce4:	e780      	b.n	800bbe8 <_dtoa_r+0x424>
 800bce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bce8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bcea:	1e5a      	subs	r2, r3, #1
 800bcec:	4b59      	ldr	r3, [pc, #356]	; (800be54 <_dtoa_r+0x690>)
 800bcee:	00d2      	lsls	r2, r2, #3
 800bcf0:	189b      	adds	r3, r3, r2
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	2900      	cmp	r1, #0
 800bcf8:	d051      	beq.n	800bd9e <_dtoa_r+0x5da>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	495d      	ldr	r1, [pc, #372]	; (800be74 <_dtoa_r+0x6b0>)
 800bcfe:	f7f5 feab 	bl	8001a58 <__aeabi_ddiv>
 800bd02:	9a08      	ldr	r2, [sp, #32]
 800bd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd06:	f7f6 fd15 	bl	8002734 <__aeabi_dsub>
 800bd0a:	9a06      	ldr	r2, [sp, #24]
 800bd0c:	9b06      	ldr	r3, [sp, #24]
 800bd0e:	4694      	mov	ip, r2
 800bd10:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd14:	9010      	str	r0, [sp, #64]	; 0x40
 800bd16:	9111      	str	r1, [sp, #68]	; 0x44
 800bd18:	4463      	add	r3, ip
 800bd1a:	9319      	str	r3, [sp, #100]	; 0x64
 800bd1c:	0029      	movs	r1, r5
 800bd1e:	0020      	movs	r0, r4
 800bd20:	f7f7 f8b8 	bl	8002e94 <__aeabi_d2iz>
 800bd24:	9014      	str	r0, [sp, #80]	; 0x50
 800bd26:	f7f7 f8eb 	bl	8002f00 <__aeabi_i2d>
 800bd2a:	0002      	movs	r2, r0
 800bd2c:	000b      	movs	r3, r1
 800bd2e:	0020      	movs	r0, r4
 800bd30:	0029      	movs	r1, r5
 800bd32:	f7f6 fcff 	bl	8002734 <__aeabi_dsub>
 800bd36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	9308      	str	r3, [sp, #32]
 800bd3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd40:	0004      	movs	r4, r0
 800bd42:	3330      	adds	r3, #48	; 0x30
 800bd44:	7013      	strb	r3, [r2, #0]
 800bd46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd4a:	000d      	movs	r5, r1
 800bd4c:	f7f4 fb8c 	bl	8000468 <__aeabi_dcmplt>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d175      	bne.n	800be40 <_dtoa_r+0x67c>
 800bd54:	0022      	movs	r2, r4
 800bd56:	002b      	movs	r3, r5
 800bd58:	2000      	movs	r0, #0
 800bd5a:	4940      	ldr	r1, [pc, #256]	; (800be5c <_dtoa_r+0x698>)
 800bd5c:	f7f6 fcea 	bl	8002734 <__aeabi_dsub>
 800bd60:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd64:	f7f4 fb80 	bl	8000468 <__aeabi_dcmplt>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d000      	beq.n	800bd6e <_dtoa_r+0x5aa>
 800bd6c:	e0d2      	b.n	800bf14 <_dtoa_r+0x750>
 800bd6e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd70:	9a08      	ldr	r2, [sp, #32]
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d100      	bne.n	800bd78 <_dtoa_r+0x5b4>
 800bd76:	e770      	b.n	800bc5a <_dtoa_r+0x496>
 800bd78:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4b38      	ldr	r3, [pc, #224]	; (800be60 <_dtoa_r+0x69c>)
 800bd80:	f7f6 fa6c 	bl	800225c <__aeabi_dmul>
 800bd84:	4b36      	ldr	r3, [pc, #216]	; (800be60 <_dtoa_r+0x69c>)
 800bd86:	9010      	str	r0, [sp, #64]	; 0x40
 800bd88:	9111      	str	r1, [sp, #68]	; 0x44
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	0020      	movs	r0, r4
 800bd8e:	0029      	movs	r1, r5
 800bd90:	f7f6 fa64 	bl	800225c <__aeabi_dmul>
 800bd94:	9b08      	ldr	r3, [sp, #32]
 800bd96:	0004      	movs	r4, r0
 800bd98:	000d      	movs	r5, r1
 800bd9a:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd9c:	e7be      	b.n	800bd1c <_dtoa_r+0x558>
 800bd9e:	9808      	ldr	r0, [sp, #32]
 800bda0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bda2:	f7f6 fa5b 	bl	800225c <__aeabi_dmul>
 800bda6:	9a06      	ldr	r2, [sp, #24]
 800bda8:	9b06      	ldr	r3, [sp, #24]
 800bdaa:	4694      	mov	ip, r2
 800bdac:	9308      	str	r3, [sp, #32]
 800bdae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdb0:	9010      	str	r0, [sp, #64]	; 0x40
 800bdb2:	9111      	str	r1, [sp, #68]	; 0x44
 800bdb4:	4463      	add	r3, ip
 800bdb6:	9319      	str	r3, [sp, #100]	; 0x64
 800bdb8:	0029      	movs	r1, r5
 800bdba:	0020      	movs	r0, r4
 800bdbc:	f7f7 f86a 	bl	8002e94 <__aeabi_d2iz>
 800bdc0:	9017      	str	r0, [sp, #92]	; 0x5c
 800bdc2:	f7f7 f89d 	bl	8002f00 <__aeabi_i2d>
 800bdc6:	0002      	movs	r2, r0
 800bdc8:	000b      	movs	r3, r1
 800bdca:	0020      	movs	r0, r4
 800bdcc:	0029      	movs	r1, r5
 800bdce:	f7f6 fcb1 	bl	8002734 <__aeabi_dsub>
 800bdd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdd4:	9a08      	ldr	r2, [sp, #32]
 800bdd6:	3330      	adds	r3, #48	; 0x30
 800bdd8:	7013      	strb	r3, [r2, #0]
 800bdda:	0013      	movs	r3, r2
 800bddc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bdde:	3301      	adds	r3, #1
 800bde0:	0004      	movs	r4, r0
 800bde2:	000d      	movs	r5, r1
 800bde4:	9308      	str	r3, [sp, #32]
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d12c      	bne.n	800be44 <_dtoa_r+0x680>
 800bdea:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bdec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bdee:	9a06      	ldr	r2, [sp, #24]
 800bdf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdf2:	4694      	mov	ip, r2
 800bdf4:	4463      	add	r3, ip
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	9308      	str	r3, [sp, #32]
 800bdfa:	4b1e      	ldr	r3, [pc, #120]	; (800be74 <_dtoa_r+0x6b0>)
 800bdfc:	f7f5 faf0 	bl	80013e0 <__aeabi_dadd>
 800be00:	0002      	movs	r2, r0
 800be02:	000b      	movs	r3, r1
 800be04:	0020      	movs	r0, r4
 800be06:	0029      	movs	r1, r5
 800be08:	f7f4 fb42 	bl	8000490 <__aeabi_dcmpgt>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	d000      	beq.n	800be12 <_dtoa_r+0x64e>
 800be10:	e080      	b.n	800bf14 <_dtoa_r+0x750>
 800be12:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800be14:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be16:	2000      	movs	r0, #0
 800be18:	4916      	ldr	r1, [pc, #88]	; (800be74 <_dtoa_r+0x6b0>)
 800be1a:	f7f6 fc8b 	bl	8002734 <__aeabi_dsub>
 800be1e:	0002      	movs	r2, r0
 800be20:	000b      	movs	r3, r1
 800be22:	0020      	movs	r0, r4
 800be24:	0029      	movs	r1, r5
 800be26:	f7f4 fb1f 	bl	8000468 <__aeabi_dcmplt>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d100      	bne.n	800be30 <_dtoa_r+0x66c>
 800be2e:	e714      	b.n	800bc5a <_dtoa_r+0x496>
 800be30:	9b08      	ldr	r3, [sp, #32]
 800be32:	001a      	movs	r2, r3
 800be34:	3a01      	subs	r2, #1
 800be36:	9208      	str	r2, [sp, #32]
 800be38:	7812      	ldrb	r2, [r2, #0]
 800be3a:	2a30      	cmp	r2, #48	; 0x30
 800be3c:	d0f8      	beq.n	800be30 <_dtoa_r+0x66c>
 800be3e:	9308      	str	r3, [sp, #32]
 800be40:	9602      	str	r6, [sp, #8]
 800be42:	e055      	b.n	800bef0 <_dtoa_r+0x72c>
 800be44:	2200      	movs	r2, #0
 800be46:	4b06      	ldr	r3, [pc, #24]	; (800be60 <_dtoa_r+0x69c>)
 800be48:	f7f6 fa08 	bl	800225c <__aeabi_dmul>
 800be4c:	0004      	movs	r4, r0
 800be4e:	000d      	movs	r5, r1
 800be50:	e7b2      	b.n	800bdb8 <_dtoa_r+0x5f4>
 800be52:	46c0      	nop			; (mov r8, r8)
 800be54:	0800e2e0 	.word	0x0800e2e0
 800be58:	0800e2b8 	.word	0x0800e2b8
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	40240000 	.word	0x40240000
 800be64:	401c0000 	.word	0x401c0000
 800be68:	fcc00000 	.word	0xfcc00000
 800be6c:	40140000 	.word	0x40140000
 800be70:	7cc00000 	.word	0x7cc00000
 800be74:	3fe00000 	.word	0x3fe00000
 800be78:	9b07      	ldr	r3, [sp, #28]
 800be7a:	9e06      	ldr	r6, [sp, #24]
 800be7c:	3b01      	subs	r3, #1
 800be7e:	199b      	adds	r3, r3, r6
 800be80:	930c      	str	r3, [sp, #48]	; 0x30
 800be82:	9c08      	ldr	r4, [sp, #32]
 800be84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800be86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be8a:	0020      	movs	r0, r4
 800be8c:	0029      	movs	r1, r5
 800be8e:	f7f5 fde3 	bl	8001a58 <__aeabi_ddiv>
 800be92:	f7f6 ffff 	bl	8002e94 <__aeabi_d2iz>
 800be96:	9007      	str	r0, [sp, #28]
 800be98:	f7f7 f832 	bl	8002f00 <__aeabi_i2d>
 800be9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea0:	f7f6 f9dc 	bl	800225c <__aeabi_dmul>
 800bea4:	0002      	movs	r2, r0
 800bea6:	000b      	movs	r3, r1
 800bea8:	0020      	movs	r0, r4
 800beaa:	0029      	movs	r1, r5
 800beac:	f7f6 fc42 	bl	8002734 <__aeabi_dsub>
 800beb0:	0033      	movs	r3, r6
 800beb2:	9a07      	ldr	r2, [sp, #28]
 800beb4:	3601      	adds	r6, #1
 800beb6:	3230      	adds	r2, #48	; 0x30
 800beb8:	701a      	strb	r2, [r3, #0]
 800beba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bebc:	9608      	str	r6, [sp, #32]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d139      	bne.n	800bf36 <_dtoa_r+0x772>
 800bec2:	0002      	movs	r2, r0
 800bec4:	000b      	movs	r3, r1
 800bec6:	f7f5 fa8b 	bl	80013e0 <__aeabi_dadd>
 800beca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800becc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bece:	0004      	movs	r4, r0
 800bed0:	000d      	movs	r5, r1
 800bed2:	f7f4 fadd 	bl	8000490 <__aeabi_dcmpgt>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d11b      	bne.n	800bf12 <_dtoa_r+0x74e>
 800beda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bede:	0020      	movs	r0, r4
 800bee0:	0029      	movs	r1, r5
 800bee2:	f7f4 fabb 	bl	800045c <__aeabi_dcmpeq>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d002      	beq.n	800bef0 <_dtoa_r+0x72c>
 800beea:	9b07      	ldr	r3, [sp, #28]
 800beec:	07db      	lsls	r3, r3, #31
 800beee:	d410      	bmi.n	800bf12 <_dtoa_r+0x74e>
 800bef0:	0038      	movs	r0, r7
 800bef2:	9905      	ldr	r1, [sp, #20]
 800bef4:	f000 fd1c 	bl	800c930 <_Bfree>
 800bef8:	2300      	movs	r3, #0
 800befa:	9a08      	ldr	r2, [sp, #32]
 800befc:	9802      	ldr	r0, [sp, #8]
 800befe:	7013      	strb	r3, [r2, #0]
 800bf00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf02:	3001      	adds	r0, #1
 800bf04:	6018      	str	r0, [r3, #0]
 800bf06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d100      	bne.n	800bf0e <_dtoa_r+0x74a>
 800bf0c:	e4a6      	b.n	800b85c <_dtoa_r+0x98>
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	e4a4      	b.n	800b85c <_dtoa_r+0x98>
 800bf12:	9e02      	ldr	r6, [sp, #8]
 800bf14:	9b08      	ldr	r3, [sp, #32]
 800bf16:	9308      	str	r3, [sp, #32]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	781a      	ldrb	r2, [r3, #0]
 800bf1c:	2a39      	cmp	r2, #57	; 0x39
 800bf1e:	d106      	bne.n	800bf2e <_dtoa_r+0x76a>
 800bf20:	9a06      	ldr	r2, [sp, #24]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d1f7      	bne.n	800bf16 <_dtoa_r+0x752>
 800bf26:	2230      	movs	r2, #48	; 0x30
 800bf28:	9906      	ldr	r1, [sp, #24]
 800bf2a:	3601      	adds	r6, #1
 800bf2c:	700a      	strb	r2, [r1, #0]
 800bf2e:	781a      	ldrb	r2, [r3, #0]
 800bf30:	3201      	adds	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
 800bf34:	e784      	b.n	800be40 <_dtoa_r+0x67c>
 800bf36:	2200      	movs	r2, #0
 800bf38:	4baa      	ldr	r3, [pc, #680]	; (800c1e4 <_dtoa_r+0xa20>)
 800bf3a:	f7f6 f98f 	bl	800225c <__aeabi_dmul>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	2300      	movs	r3, #0
 800bf42:	0004      	movs	r4, r0
 800bf44:	000d      	movs	r5, r1
 800bf46:	f7f4 fa89 	bl	800045c <__aeabi_dcmpeq>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d09b      	beq.n	800be86 <_dtoa_r+0x6c2>
 800bf4e:	e7cf      	b.n	800bef0 <_dtoa_r+0x72c>
 800bf50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf52:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800bf54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf56:	2d00      	cmp	r5, #0
 800bf58:	d012      	beq.n	800bf80 <_dtoa_r+0x7bc>
 800bf5a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bf5c:	2a01      	cmp	r2, #1
 800bf5e:	dc66      	bgt.n	800c02e <_dtoa_r+0x86a>
 800bf60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	d05d      	beq.n	800c022 <_dtoa_r+0x85e>
 800bf66:	4aa0      	ldr	r2, [pc, #640]	; (800c1e8 <_dtoa_r+0xa24>)
 800bf68:	189b      	adds	r3, r3, r2
 800bf6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf6c:	2101      	movs	r1, #1
 800bf6e:	18d2      	adds	r2, r2, r3
 800bf70:	920a      	str	r2, [sp, #40]	; 0x28
 800bf72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf74:	0038      	movs	r0, r7
 800bf76:	18d3      	adds	r3, r2, r3
 800bf78:	930d      	str	r3, [sp, #52]	; 0x34
 800bf7a:	f000 fd89 	bl	800ca90 <__i2b>
 800bf7e:	0005      	movs	r5, r0
 800bf80:	2c00      	cmp	r4, #0
 800bf82:	dd0e      	ble.n	800bfa2 <_dtoa_r+0x7de>
 800bf84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	dd0b      	ble.n	800bfa2 <_dtoa_r+0x7de>
 800bf8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf8c:	0023      	movs	r3, r4
 800bf8e:	4294      	cmp	r4, r2
 800bf90:	dd00      	ble.n	800bf94 <_dtoa_r+0x7d0>
 800bf92:	0013      	movs	r3, r2
 800bf94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf96:	1ae4      	subs	r4, r4, r3
 800bf98:	1ad2      	subs	r2, r2, r3
 800bf9a:	920a      	str	r2, [sp, #40]	; 0x28
 800bf9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf9e:	1ad3      	subs	r3, r2, r3
 800bfa0:	930d      	str	r3, [sp, #52]	; 0x34
 800bfa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01f      	beq.n	800bfe8 <_dtoa_r+0x824>
 800bfa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d054      	beq.n	800c058 <_dtoa_r+0x894>
 800bfae:	2e00      	cmp	r6, #0
 800bfb0:	dd11      	ble.n	800bfd6 <_dtoa_r+0x812>
 800bfb2:	0029      	movs	r1, r5
 800bfb4:	0032      	movs	r2, r6
 800bfb6:	0038      	movs	r0, r7
 800bfb8:	f000 fe30 	bl	800cc1c <__pow5mult>
 800bfbc:	9a05      	ldr	r2, [sp, #20]
 800bfbe:	0001      	movs	r1, r0
 800bfc0:	0005      	movs	r5, r0
 800bfc2:	0038      	movs	r0, r7
 800bfc4:	f000 fd7a 	bl	800cabc <__multiply>
 800bfc8:	9905      	ldr	r1, [sp, #20]
 800bfca:	9014      	str	r0, [sp, #80]	; 0x50
 800bfcc:	0038      	movs	r0, r7
 800bfce:	f000 fcaf 	bl	800c930 <_Bfree>
 800bfd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfd8:	1b9a      	subs	r2, r3, r6
 800bfda:	42b3      	cmp	r3, r6
 800bfdc:	d004      	beq.n	800bfe8 <_dtoa_r+0x824>
 800bfde:	0038      	movs	r0, r7
 800bfe0:	9905      	ldr	r1, [sp, #20]
 800bfe2:	f000 fe1b 	bl	800cc1c <__pow5mult>
 800bfe6:	9005      	str	r0, [sp, #20]
 800bfe8:	2101      	movs	r1, #1
 800bfea:	0038      	movs	r0, r7
 800bfec:	f000 fd50 	bl	800ca90 <__i2b>
 800bff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bff2:	0006      	movs	r6, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd31      	ble.n	800c05c <_dtoa_r+0x898>
 800bff8:	001a      	movs	r2, r3
 800bffa:	0001      	movs	r1, r0
 800bffc:	0038      	movs	r0, r7
 800bffe:	f000 fe0d 	bl	800cc1c <__pow5mult>
 800c002:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c004:	0006      	movs	r6, r0
 800c006:	2b01      	cmp	r3, #1
 800c008:	dd2d      	ble.n	800c066 <_dtoa_r+0x8a2>
 800c00a:	2300      	movs	r3, #0
 800c00c:	930e      	str	r3, [sp, #56]	; 0x38
 800c00e:	6933      	ldr	r3, [r6, #16]
 800c010:	3303      	adds	r3, #3
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	18f3      	adds	r3, r6, r3
 800c016:	6858      	ldr	r0, [r3, #4]
 800c018:	f000 fcf2 	bl	800ca00 <__hi0bits>
 800c01c:	2320      	movs	r3, #32
 800c01e:	1a18      	subs	r0, r3, r0
 800c020:	e039      	b.n	800c096 <_dtoa_r+0x8d2>
 800c022:	2336      	movs	r3, #54	; 0x36
 800c024:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c026:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c028:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c02a:	1a9b      	subs	r3, r3, r2
 800c02c:	e79d      	b.n	800bf6a <_dtoa_r+0x7a6>
 800c02e:	9b07      	ldr	r3, [sp, #28]
 800c030:	1e5e      	subs	r6, r3, #1
 800c032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c034:	42b3      	cmp	r3, r6
 800c036:	db07      	blt.n	800c048 <_dtoa_r+0x884>
 800c038:	1b9e      	subs	r6, r3, r6
 800c03a:	9b07      	ldr	r3, [sp, #28]
 800c03c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c03e:	2b00      	cmp	r3, #0
 800c040:	da93      	bge.n	800bf6a <_dtoa_r+0x7a6>
 800c042:	1ae4      	subs	r4, r4, r3
 800c044:	2300      	movs	r3, #0
 800c046:	e790      	b.n	800bf6a <_dtoa_r+0x7a6>
 800c048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c04a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c04c:	1af3      	subs	r3, r6, r3
 800c04e:	18d3      	adds	r3, r2, r3
 800c050:	960e      	str	r6, [sp, #56]	; 0x38
 800c052:	9315      	str	r3, [sp, #84]	; 0x54
 800c054:	2600      	movs	r6, #0
 800c056:	e7f0      	b.n	800c03a <_dtoa_r+0x876>
 800c058:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c05a:	e7c0      	b.n	800bfde <_dtoa_r+0x81a>
 800c05c:	2300      	movs	r3, #0
 800c05e:	930e      	str	r3, [sp, #56]	; 0x38
 800c060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c062:	2b01      	cmp	r3, #1
 800c064:	dc13      	bgt.n	800c08e <_dtoa_r+0x8ca>
 800c066:	2300      	movs	r3, #0
 800c068:	930e      	str	r3, [sp, #56]	; 0x38
 800c06a:	9b08      	ldr	r3, [sp, #32]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10e      	bne.n	800c08e <_dtoa_r+0x8ca>
 800c070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c072:	031b      	lsls	r3, r3, #12
 800c074:	d10b      	bne.n	800c08e <_dtoa_r+0x8ca>
 800c076:	4b5d      	ldr	r3, [pc, #372]	; (800c1ec <_dtoa_r+0xa28>)
 800c078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c07a:	4213      	tst	r3, r2
 800c07c:	d007      	beq.n	800c08e <_dtoa_r+0x8ca>
 800c07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c080:	3301      	adds	r3, #1
 800c082:	930a      	str	r3, [sp, #40]	; 0x28
 800c084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c086:	3301      	adds	r3, #1
 800c088:	930d      	str	r3, [sp, #52]	; 0x34
 800c08a:	2301      	movs	r3, #1
 800c08c:	930e      	str	r3, [sp, #56]	; 0x38
 800c08e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c090:	2001      	movs	r0, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1bb      	bne.n	800c00e <_dtoa_r+0x84a>
 800c096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c098:	221f      	movs	r2, #31
 800c09a:	1818      	adds	r0, r3, r0
 800c09c:	0003      	movs	r3, r0
 800c09e:	4013      	ands	r3, r2
 800c0a0:	4210      	tst	r0, r2
 800c0a2:	d046      	beq.n	800c132 <_dtoa_r+0x96e>
 800c0a4:	3201      	adds	r2, #1
 800c0a6:	1ad2      	subs	r2, r2, r3
 800c0a8:	2a04      	cmp	r2, #4
 800c0aa:	dd3f      	ble.n	800c12c <_dtoa_r+0x968>
 800c0ac:	221c      	movs	r2, #28
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0b2:	18e4      	adds	r4, r4, r3
 800c0b4:	18d2      	adds	r2, r2, r3
 800c0b6:	920a      	str	r2, [sp, #40]	; 0x28
 800c0b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0ba:	18d3      	adds	r3, r2, r3
 800c0bc:	930d      	str	r3, [sp, #52]	; 0x34
 800c0be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	dd05      	ble.n	800c0d0 <_dtoa_r+0x90c>
 800c0c4:	001a      	movs	r2, r3
 800c0c6:	0038      	movs	r0, r7
 800c0c8:	9905      	ldr	r1, [sp, #20]
 800c0ca:	f000 fe03 	bl	800ccd4 <__lshift>
 800c0ce:	9005      	str	r0, [sp, #20]
 800c0d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	dd05      	ble.n	800c0e2 <_dtoa_r+0x91e>
 800c0d6:	0031      	movs	r1, r6
 800c0d8:	001a      	movs	r2, r3
 800c0da:	0038      	movs	r0, r7
 800c0dc:	f000 fdfa 	bl	800ccd4 <__lshift>
 800c0e0:	0006      	movs	r6, r0
 800c0e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d026      	beq.n	800c136 <_dtoa_r+0x972>
 800c0e8:	0031      	movs	r1, r6
 800c0ea:	9805      	ldr	r0, [sp, #20]
 800c0ec:	f000 fe60 	bl	800cdb0 <__mcmp>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	da20      	bge.n	800c136 <_dtoa_r+0x972>
 800c0f4:	9b02      	ldr	r3, [sp, #8]
 800c0f6:	220a      	movs	r2, #10
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	0038      	movs	r0, r7
 800c0fe:	2300      	movs	r3, #0
 800c100:	9905      	ldr	r1, [sp, #20]
 800c102:	f000 fc39 	bl	800c978 <__multadd>
 800c106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c108:	9005      	str	r0, [sp, #20]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d100      	bne.n	800c110 <_dtoa_r+0x94c>
 800c10e:	e166      	b.n	800c3de <_dtoa_r+0xc1a>
 800c110:	2300      	movs	r3, #0
 800c112:	0029      	movs	r1, r5
 800c114:	220a      	movs	r2, #10
 800c116:	0038      	movs	r0, r7
 800c118:	f000 fc2e 	bl	800c978 <__multadd>
 800c11c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c11e:	0005      	movs	r5, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	dc47      	bgt.n	800c1b4 <_dtoa_r+0x9f0>
 800c124:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c126:	2b02      	cmp	r3, #2
 800c128:	dc0d      	bgt.n	800c146 <_dtoa_r+0x982>
 800c12a:	e043      	b.n	800c1b4 <_dtoa_r+0x9f0>
 800c12c:	2a04      	cmp	r2, #4
 800c12e:	d0c6      	beq.n	800c0be <_dtoa_r+0x8fa>
 800c130:	0013      	movs	r3, r2
 800c132:	331c      	adds	r3, #28
 800c134:	e7bc      	b.n	800c0b0 <_dtoa_r+0x8ec>
 800c136:	9b07      	ldr	r3, [sp, #28]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dc35      	bgt.n	800c1a8 <_dtoa_r+0x9e4>
 800c13c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c13e:	2b02      	cmp	r3, #2
 800c140:	dd32      	ble.n	800c1a8 <_dtoa_r+0x9e4>
 800c142:	9b07      	ldr	r3, [sp, #28]
 800c144:	930c      	str	r3, [sp, #48]	; 0x30
 800c146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10c      	bne.n	800c166 <_dtoa_r+0x9a2>
 800c14c:	0031      	movs	r1, r6
 800c14e:	2205      	movs	r2, #5
 800c150:	0038      	movs	r0, r7
 800c152:	f000 fc11 	bl	800c978 <__multadd>
 800c156:	0006      	movs	r6, r0
 800c158:	0001      	movs	r1, r0
 800c15a:	9805      	ldr	r0, [sp, #20]
 800c15c:	f000 fe28 	bl	800cdb0 <__mcmp>
 800c160:	2800      	cmp	r0, #0
 800c162:	dd00      	ble.n	800c166 <_dtoa_r+0x9a2>
 800c164:	e5a5      	b.n	800bcb2 <_dtoa_r+0x4ee>
 800c166:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c168:	43db      	mvns	r3, r3
 800c16a:	9302      	str	r3, [sp, #8]
 800c16c:	9b06      	ldr	r3, [sp, #24]
 800c16e:	9308      	str	r3, [sp, #32]
 800c170:	2400      	movs	r4, #0
 800c172:	0031      	movs	r1, r6
 800c174:	0038      	movs	r0, r7
 800c176:	f000 fbdb 	bl	800c930 <_Bfree>
 800c17a:	2d00      	cmp	r5, #0
 800c17c:	d100      	bne.n	800c180 <_dtoa_r+0x9bc>
 800c17e:	e6b7      	b.n	800bef0 <_dtoa_r+0x72c>
 800c180:	2c00      	cmp	r4, #0
 800c182:	d005      	beq.n	800c190 <_dtoa_r+0x9cc>
 800c184:	42ac      	cmp	r4, r5
 800c186:	d003      	beq.n	800c190 <_dtoa_r+0x9cc>
 800c188:	0021      	movs	r1, r4
 800c18a:	0038      	movs	r0, r7
 800c18c:	f000 fbd0 	bl	800c930 <_Bfree>
 800c190:	0029      	movs	r1, r5
 800c192:	0038      	movs	r0, r7
 800c194:	f000 fbcc 	bl	800c930 <_Bfree>
 800c198:	e6aa      	b.n	800bef0 <_dtoa_r+0x72c>
 800c19a:	2600      	movs	r6, #0
 800c19c:	0035      	movs	r5, r6
 800c19e:	e7e2      	b.n	800c166 <_dtoa_r+0x9a2>
 800c1a0:	9602      	str	r6, [sp, #8]
 800c1a2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c1a4:	0035      	movs	r5, r6
 800c1a6:	e584      	b.n	800bcb2 <_dtoa_r+0x4ee>
 800c1a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d100      	bne.n	800c1b0 <_dtoa_r+0x9ec>
 800c1ae:	e0ce      	b.n	800c34e <_dtoa_r+0xb8a>
 800c1b0:	9b07      	ldr	r3, [sp, #28]
 800c1b2:	930c      	str	r3, [sp, #48]	; 0x30
 800c1b4:	2c00      	cmp	r4, #0
 800c1b6:	dd05      	ble.n	800c1c4 <_dtoa_r+0xa00>
 800c1b8:	0029      	movs	r1, r5
 800c1ba:	0022      	movs	r2, r4
 800c1bc:	0038      	movs	r0, r7
 800c1be:	f000 fd89 	bl	800ccd4 <__lshift>
 800c1c2:	0005      	movs	r5, r0
 800c1c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1c6:	0028      	movs	r0, r5
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d022      	beq.n	800c212 <_dtoa_r+0xa4e>
 800c1cc:	0038      	movs	r0, r7
 800c1ce:	6869      	ldr	r1, [r5, #4]
 800c1d0:	f000 fb6a 	bl	800c8a8 <_Balloc>
 800c1d4:	1e04      	subs	r4, r0, #0
 800c1d6:	d10f      	bne.n	800c1f8 <_dtoa_r+0xa34>
 800c1d8:	0002      	movs	r2, r0
 800c1da:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <_dtoa_r+0xa2c>)
 800c1dc:	4905      	ldr	r1, [pc, #20]	; (800c1f4 <_dtoa_r+0xa30>)
 800c1de:	f7ff fb06 	bl	800b7ee <_dtoa_r+0x2a>
 800c1e2:	46c0      	nop			; (mov r8, r8)
 800c1e4:	40240000 	.word	0x40240000
 800c1e8:	00000433 	.word	0x00000433
 800c1ec:	7ff00000 	.word	0x7ff00000
 800c1f0:	0800e1eb 	.word	0x0800e1eb
 800c1f4:	000002ea 	.word	0x000002ea
 800c1f8:	0029      	movs	r1, r5
 800c1fa:	692b      	ldr	r3, [r5, #16]
 800c1fc:	310c      	adds	r1, #12
 800c1fe:	1c9a      	adds	r2, r3, #2
 800c200:	0092      	lsls	r2, r2, #2
 800c202:	300c      	adds	r0, #12
 800c204:	f7fe fc6e 	bl	800aae4 <memcpy>
 800c208:	2201      	movs	r2, #1
 800c20a:	0021      	movs	r1, r4
 800c20c:	0038      	movs	r0, r7
 800c20e:	f000 fd61 	bl	800ccd4 <__lshift>
 800c212:	9b06      	ldr	r3, [sp, #24]
 800c214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c216:	930a      	str	r3, [sp, #40]	; 0x28
 800c218:	3b01      	subs	r3, #1
 800c21a:	189b      	adds	r3, r3, r2
 800c21c:	2201      	movs	r2, #1
 800c21e:	002c      	movs	r4, r5
 800c220:	0005      	movs	r5, r0
 800c222:	9314      	str	r3, [sp, #80]	; 0x50
 800c224:	9b08      	ldr	r3, [sp, #32]
 800c226:	4013      	ands	r3, r2
 800c228:	930f      	str	r3, [sp, #60]	; 0x3c
 800c22a:	0031      	movs	r1, r6
 800c22c:	9805      	ldr	r0, [sp, #20]
 800c22e:	f7ff fa3d 	bl	800b6ac <quorem>
 800c232:	0003      	movs	r3, r0
 800c234:	0021      	movs	r1, r4
 800c236:	3330      	adds	r3, #48	; 0x30
 800c238:	900d      	str	r0, [sp, #52]	; 0x34
 800c23a:	9805      	ldr	r0, [sp, #20]
 800c23c:	9307      	str	r3, [sp, #28]
 800c23e:	f000 fdb7 	bl	800cdb0 <__mcmp>
 800c242:	002a      	movs	r2, r5
 800c244:	900e      	str	r0, [sp, #56]	; 0x38
 800c246:	0031      	movs	r1, r6
 800c248:	0038      	movs	r0, r7
 800c24a:	f000 fdcd 	bl	800cde8 <__mdiff>
 800c24e:	68c3      	ldr	r3, [r0, #12]
 800c250:	9008      	str	r0, [sp, #32]
 800c252:	9310      	str	r3, [sp, #64]	; 0x40
 800c254:	2301      	movs	r3, #1
 800c256:	930c      	str	r3, [sp, #48]	; 0x30
 800c258:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d104      	bne.n	800c268 <_dtoa_r+0xaa4>
 800c25e:	0001      	movs	r1, r0
 800c260:	9805      	ldr	r0, [sp, #20]
 800c262:	f000 fda5 	bl	800cdb0 <__mcmp>
 800c266:	900c      	str	r0, [sp, #48]	; 0x30
 800c268:	0038      	movs	r0, r7
 800c26a:	9908      	ldr	r1, [sp, #32]
 800c26c:	f000 fb60 	bl	800c930 <_Bfree>
 800c270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c272:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c274:	3301      	adds	r3, #1
 800c276:	9308      	str	r3, [sp, #32]
 800c278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c27a:	4313      	orrs	r3, r2
 800c27c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c27e:	4313      	orrs	r3, r2
 800c280:	d10c      	bne.n	800c29c <_dtoa_r+0xad8>
 800c282:	9b07      	ldr	r3, [sp, #28]
 800c284:	2b39      	cmp	r3, #57	; 0x39
 800c286:	d026      	beq.n	800c2d6 <_dtoa_r+0xb12>
 800c288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	dd02      	ble.n	800c294 <_dtoa_r+0xad0>
 800c28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c290:	3331      	adds	r3, #49	; 0x31
 800c292:	9307      	str	r3, [sp, #28]
 800c294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c296:	9a07      	ldr	r2, [sp, #28]
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	e76a      	b.n	800c172 <_dtoa_r+0x9ae>
 800c29c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	db04      	blt.n	800c2ac <_dtoa_r+0xae8>
 800c2a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	d11f      	bne.n	800c2ec <_dtoa_r+0xb28>
 800c2ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	ddf0      	ble.n	800c294 <_dtoa_r+0xad0>
 800c2b2:	9905      	ldr	r1, [sp, #20]
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	0038      	movs	r0, r7
 800c2b8:	f000 fd0c 	bl	800ccd4 <__lshift>
 800c2bc:	0031      	movs	r1, r6
 800c2be:	9005      	str	r0, [sp, #20]
 800c2c0:	f000 fd76 	bl	800cdb0 <__mcmp>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	dc03      	bgt.n	800c2d0 <_dtoa_r+0xb0c>
 800c2c8:	d1e4      	bne.n	800c294 <_dtoa_r+0xad0>
 800c2ca:	9b07      	ldr	r3, [sp, #28]
 800c2cc:	07db      	lsls	r3, r3, #31
 800c2ce:	d5e1      	bpl.n	800c294 <_dtoa_r+0xad0>
 800c2d0:	9b07      	ldr	r3, [sp, #28]
 800c2d2:	2b39      	cmp	r3, #57	; 0x39
 800c2d4:	d1db      	bne.n	800c28e <_dtoa_r+0xaca>
 800c2d6:	2339      	movs	r3, #57	; 0x39
 800c2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2da:	7013      	strb	r3, [r2, #0]
 800c2dc:	9b08      	ldr	r3, [sp, #32]
 800c2de:	9308      	str	r3, [sp, #32]
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	781a      	ldrb	r2, [r3, #0]
 800c2e4:	2a39      	cmp	r2, #57	; 0x39
 800c2e6:	d068      	beq.n	800c3ba <_dtoa_r+0xbf6>
 800c2e8:	3201      	adds	r2, #1
 800c2ea:	e7d5      	b.n	800c298 <_dtoa_r+0xad4>
 800c2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	dd07      	ble.n	800c302 <_dtoa_r+0xb3e>
 800c2f2:	9b07      	ldr	r3, [sp, #28]
 800c2f4:	2b39      	cmp	r3, #57	; 0x39
 800c2f6:	d0ee      	beq.n	800c2d6 <_dtoa_r+0xb12>
 800c2f8:	9b07      	ldr	r3, [sp, #28]
 800c2fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	7013      	strb	r3, [r2, #0]
 800c300:	e737      	b.n	800c172 <_dtoa_r+0x9ae>
 800c302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c304:	9a07      	ldr	r2, [sp, #28]
 800c306:	701a      	strb	r2, [r3, #0]
 800c308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d03e      	beq.n	800c38e <_dtoa_r+0xbca>
 800c310:	2300      	movs	r3, #0
 800c312:	220a      	movs	r2, #10
 800c314:	9905      	ldr	r1, [sp, #20]
 800c316:	0038      	movs	r0, r7
 800c318:	f000 fb2e 	bl	800c978 <__multadd>
 800c31c:	2300      	movs	r3, #0
 800c31e:	9005      	str	r0, [sp, #20]
 800c320:	220a      	movs	r2, #10
 800c322:	0021      	movs	r1, r4
 800c324:	0038      	movs	r0, r7
 800c326:	42ac      	cmp	r4, r5
 800c328:	d106      	bne.n	800c338 <_dtoa_r+0xb74>
 800c32a:	f000 fb25 	bl	800c978 <__multadd>
 800c32e:	0004      	movs	r4, r0
 800c330:	0005      	movs	r5, r0
 800c332:	9b08      	ldr	r3, [sp, #32]
 800c334:	930a      	str	r3, [sp, #40]	; 0x28
 800c336:	e778      	b.n	800c22a <_dtoa_r+0xa66>
 800c338:	f000 fb1e 	bl	800c978 <__multadd>
 800c33c:	0029      	movs	r1, r5
 800c33e:	0004      	movs	r4, r0
 800c340:	2300      	movs	r3, #0
 800c342:	220a      	movs	r2, #10
 800c344:	0038      	movs	r0, r7
 800c346:	f000 fb17 	bl	800c978 <__multadd>
 800c34a:	0005      	movs	r5, r0
 800c34c:	e7f1      	b.n	800c332 <_dtoa_r+0xb6e>
 800c34e:	9b07      	ldr	r3, [sp, #28]
 800c350:	930c      	str	r3, [sp, #48]	; 0x30
 800c352:	2400      	movs	r4, #0
 800c354:	0031      	movs	r1, r6
 800c356:	9805      	ldr	r0, [sp, #20]
 800c358:	f7ff f9a8 	bl	800b6ac <quorem>
 800c35c:	9b06      	ldr	r3, [sp, #24]
 800c35e:	3030      	adds	r0, #48	; 0x30
 800c360:	5518      	strb	r0, [r3, r4]
 800c362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c364:	3401      	adds	r4, #1
 800c366:	9007      	str	r0, [sp, #28]
 800c368:	42a3      	cmp	r3, r4
 800c36a:	dd07      	ble.n	800c37c <_dtoa_r+0xbb8>
 800c36c:	2300      	movs	r3, #0
 800c36e:	220a      	movs	r2, #10
 800c370:	0038      	movs	r0, r7
 800c372:	9905      	ldr	r1, [sp, #20]
 800c374:	f000 fb00 	bl	800c978 <__multadd>
 800c378:	9005      	str	r0, [sp, #20]
 800c37a:	e7eb      	b.n	800c354 <_dtoa_r+0xb90>
 800c37c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c37e:	2001      	movs	r0, #1
 800c380:	2b00      	cmp	r3, #0
 800c382:	dd00      	ble.n	800c386 <_dtoa_r+0xbc2>
 800c384:	0018      	movs	r0, r3
 800c386:	2400      	movs	r4, #0
 800c388:	9b06      	ldr	r3, [sp, #24]
 800c38a:	181b      	adds	r3, r3, r0
 800c38c:	9308      	str	r3, [sp, #32]
 800c38e:	9905      	ldr	r1, [sp, #20]
 800c390:	2201      	movs	r2, #1
 800c392:	0038      	movs	r0, r7
 800c394:	f000 fc9e 	bl	800ccd4 <__lshift>
 800c398:	0031      	movs	r1, r6
 800c39a:	9005      	str	r0, [sp, #20]
 800c39c:	f000 fd08 	bl	800cdb0 <__mcmp>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	dc9b      	bgt.n	800c2dc <_dtoa_r+0xb18>
 800c3a4:	d102      	bne.n	800c3ac <_dtoa_r+0xbe8>
 800c3a6:	9b07      	ldr	r3, [sp, #28]
 800c3a8:	07db      	lsls	r3, r3, #31
 800c3aa:	d497      	bmi.n	800c2dc <_dtoa_r+0xb18>
 800c3ac:	9b08      	ldr	r3, [sp, #32]
 800c3ae:	9308      	str	r3, [sp, #32]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	781a      	ldrb	r2, [r3, #0]
 800c3b4:	2a30      	cmp	r2, #48	; 0x30
 800c3b6:	d0fa      	beq.n	800c3ae <_dtoa_r+0xbea>
 800c3b8:	e6db      	b.n	800c172 <_dtoa_r+0x9ae>
 800c3ba:	9a06      	ldr	r2, [sp, #24]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d18e      	bne.n	800c2de <_dtoa_r+0xb1a>
 800c3c0:	9b02      	ldr	r3, [sp, #8]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	2331      	movs	r3, #49	; 0x31
 800c3c8:	e799      	b.n	800c2fe <_dtoa_r+0xb3a>
 800c3ca:	4b09      	ldr	r3, [pc, #36]	; (800c3f0 <_dtoa_r+0xc2c>)
 800c3cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c3ce:	9306      	str	r3, [sp, #24]
 800c3d0:	4b08      	ldr	r3, [pc, #32]	; (800c3f4 <_dtoa_r+0xc30>)
 800c3d2:	2a00      	cmp	r2, #0
 800c3d4:	d001      	beq.n	800c3da <_dtoa_r+0xc16>
 800c3d6:	f7ff fa3f 	bl	800b858 <_dtoa_r+0x94>
 800c3da:	f7ff fa3f 	bl	800b85c <_dtoa_r+0x98>
 800c3de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	dcb6      	bgt.n	800c352 <_dtoa_r+0xb8e>
 800c3e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	dd00      	ble.n	800c3ec <_dtoa_r+0xc28>
 800c3ea:	e6ac      	b.n	800c146 <_dtoa_r+0x982>
 800c3ec:	e7b1      	b.n	800c352 <_dtoa_r+0xb8e>
 800c3ee:	46c0      	nop			; (mov r8, r8)
 800c3f0:	0800e16c 	.word	0x0800e16c
 800c3f4:	0800e174 	.word	0x0800e174

0800c3f8 <__sflush_r>:
 800c3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3fa:	898b      	ldrh	r3, [r1, #12]
 800c3fc:	0005      	movs	r5, r0
 800c3fe:	000c      	movs	r4, r1
 800c400:	071a      	lsls	r2, r3, #28
 800c402:	d45f      	bmi.n	800c4c4 <__sflush_r+0xcc>
 800c404:	684a      	ldr	r2, [r1, #4]
 800c406:	2a00      	cmp	r2, #0
 800c408:	dc04      	bgt.n	800c414 <__sflush_r+0x1c>
 800c40a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c40c:	2a00      	cmp	r2, #0
 800c40e:	dc01      	bgt.n	800c414 <__sflush_r+0x1c>
 800c410:	2000      	movs	r0, #0
 800c412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c414:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c416:	2f00      	cmp	r7, #0
 800c418:	d0fa      	beq.n	800c410 <__sflush_r+0x18>
 800c41a:	2200      	movs	r2, #0
 800c41c:	2180      	movs	r1, #128	; 0x80
 800c41e:	682e      	ldr	r6, [r5, #0]
 800c420:	602a      	str	r2, [r5, #0]
 800c422:	001a      	movs	r2, r3
 800c424:	0149      	lsls	r1, r1, #5
 800c426:	400a      	ands	r2, r1
 800c428:	420b      	tst	r3, r1
 800c42a:	d034      	beq.n	800c496 <__sflush_r+0x9e>
 800c42c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	075b      	lsls	r3, r3, #29
 800c432:	d506      	bpl.n	800c442 <__sflush_r+0x4a>
 800c434:	6863      	ldr	r3, [r4, #4]
 800c436:	1ac0      	subs	r0, r0, r3
 800c438:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <__sflush_r+0x4a>
 800c43e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c440:	1ac0      	subs	r0, r0, r3
 800c442:	0002      	movs	r2, r0
 800c444:	6a21      	ldr	r1, [r4, #32]
 800c446:	2300      	movs	r3, #0
 800c448:	0028      	movs	r0, r5
 800c44a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c44c:	47b8      	blx	r7
 800c44e:	89a1      	ldrh	r1, [r4, #12]
 800c450:	1c43      	adds	r3, r0, #1
 800c452:	d106      	bne.n	800c462 <__sflush_r+0x6a>
 800c454:	682b      	ldr	r3, [r5, #0]
 800c456:	2b1d      	cmp	r3, #29
 800c458:	d831      	bhi.n	800c4be <__sflush_r+0xc6>
 800c45a:	4a2c      	ldr	r2, [pc, #176]	; (800c50c <__sflush_r+0x114>)
 800c45c:	40da      	lsrs	r2, r3
 800c45e:	07d3      	lsls	r3, r2, #31
 800c460:	d52d      	bpl.n	800c4be <__sflush_r+0xc6>
 800c462:	2300      	movs	r3, #0
 800c464:	6063      	str	r3, [r4, #4]
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	04cb      	lsls	r3, r1, #19
 800c46c:	d505      	bpl.n	800c47a <__sflush_r+0x82>
 800c46e:	1c43      	adds	r3, r0, #1
 800c470:	d102      	bne.n	800c478 <__sflush_r+0x80>
 800c472:	682b      	ldr	r3, [r5, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d100      	bne.n	800c47a <__sflush_r+0x82>
 800c478:	6560      	str	r0, [r4, #84]	; 0x54
 800c47a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c47c:	602e      	str	r6, [r5, #0]
 800c47e:	2900      	cmp	r1, #0
 800c480:	d0c6      	beq.n	800c410 <__sflush_r+0x18>
 800c482:	0023      	movs	r3, r4
 800c484:	3344      	adds	r3, #68	; 0x44
 800c486:	4299      	cmp	r1, r3
 800c488:	d002      	beq.n	800c490 <__sflush_r+0x98>
 800c48a:	0028      	movs	r0, r5
 800c48c:	f000 fdd4 	bl	800d038 <_free_r>
 800c490:	2000      	movs	r0, #0
 800c492:	6360      	str	r0, [r4, #52]	; 0x34
 800c494:	e7bd      	b.n	800c412 <__sflush_r+0x1a>
 800c496:	2301      	movs	r3, #1
 800c498:	0028      	movs	r0, r5
 800c49a:	6a21      	ldr	r1, [r4, #32]
 800c49c:	47b8      	blx	r7
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d1c5      	bne.n	800c42e <__sflush_r+0x36>
 800c4a2:	682b      	ldr	r3, [r5, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0c2      	beq.n	800c42e <__sflush_r+0x36>
 800c4a8:	2b1d      	cmp	r3, #29
 800c4aa:	d001      	beq.n	800c4b0 <__sflush_r+0xb8>
 800c4ac:	2b16      	cmp	r3, #22
 800c4ae:	d101      	bne.n	800c4b4 <__sflush_r+0xbc>
 800c4b0:	602e      	str	r6, [r5, #0]
 800c4b2:	e7ad      	b.n	800c410 <__sflush_r+0x18>
 800c4b4:	2340      	movs	r3, #64	; 0x40
 800c4b6:	89a2      	ldrh	r2, [r4, #12]
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	81a3      	strh	r3, [r4, #12]
 800c4bc:	e7a9      	b.n	800c412 <__sflush_r+0x1a>
 800c4be:	2340      	movs	r3, #64	; 0x40
 800c4c0:	430b      	orrs	r3, r1
 800c4c2:	e7fa      	b.n	800c4ba <__sflush_r+0xc2>
 800c4c4:	690f      	ldr	r7, [r1, #16]
 800c4c6:	2f00      	cmp	r7, #0
 800c4c8:	d0a2      	beq.n	800c410 <__sflush_r+0x18>
 800c4ca:	680a      	ldr	r2, [r1, #0]
 800c4cc:	600f      	str	r7, [r1, #0]
 800c4ce:	1bd2      	subs	r2, r2, r7
 800c4d0:	9201      	str	r2, [sp, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	079b      	lsls	r3, r3, #30
 800c4d6:	d100      	bne.n	800c4da <__sflush_r+0xe2>
 800c4d8:	694a      	ldr	r2, [r1, #20]
 800c4da:	60a2      	str	r2, [r4, #8]
 800c4dc:	9b01      	ldr	r3, [sp, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dc00      	bgt.n	800c4e4 <__sflush_r+0xec>
 800c4e2:	e795      	b.n	800c410 <__sflush_r+0x18>
 800c4e4:	003a      	movs	r2, r7
 800c4e6:	0028      	movs	r0, r5
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	6a21      	ldr	r1, [r4, #32]
 800c4ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4ee:	47b0      	blx	r6
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	dc06      	bgt.n	800c502 <__sflush_r+0x10a>
 800c4f4:	2340      	movs	r3, #64	; 0x40
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	89a2      	ldrh	r2, [r4, #12]
 800c4fa:	4240      	negs	r0, r0
 800c4fc:	4313      	orrs	r3, r2
 800c4fe:	81a3      	strh	r3, [r4, #12]
 800c500:	e787      	b.n	800c412 <__sflush_r+0x1a>
 800c502:	9b01      	ldr	r3, [sp, #4]
 800c504:	183f      	adds	r7, r7, r0
 800c506:	1a1b      	subs	r3, r3, r0
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	e7e7      	b.n	800c4dc <__sflush_r+0xe4>
 800c50c:	20400001 	.word	0x20400001

0800c510 <_fflush_r>:
 800c510:	690b      	ldr	r3, [r1, #16]
 800c512:	b570      	push	{r4, r5, r6, lr}
 800c514:	0005      	movs	r5, r0
 800c516:	000c      	movs	r4, r1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d102      	bne.n	800c522 <_fflush_r+0x12>
 800c51c:	2500      	movs	r5, #0
 800c51e:	0028      	movs	r0, r5
 800c520:	bd70      	pop	{r4, r5, r6, pc}
 800c522:	2800      	cmp	r0, #0
 800c524:	d004      	beq.n	800c530 <_fflush_r+0x20>
 800c526:	6983      	ldr	r3, [r0, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <_fflush_r+0x20>
 800c52c:	f000 f892 	bl	800c654 <__sinit>
 800c530:	4b14      	ldr	r3, [pc, #80]	; (800c584 <_fflush_r+0x74>)
 800c532:	429c      	cmp	r4, r3
 800c534:	d11b      	bne.n	800c56e <_fflush_r+0x5e>
 800c536:	686c      	ldr	r4, [r5, #4]
 800c538:	220c      	movs	r2, #12
 800c53a:	5ea3      	ldrsh	r3, [r4, r2]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0ed      	beq.n	800c51c <_fflush_r+0xc>
 800c540:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c542:	07d2      	lsls	r2, r2, #31
 800c544:	d404      	bmi.n	800c550 <_fflush_r+0x40>
 800c546:	059b      	lsls	r3, r3, #22
 800c548:	d402      	bmi.n	800c550 <_fflush_r+0x40>
 800c54a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c54c:	f000 f927 	bl	800c79e <__retarget_lock_acquire_recursive>
 800c550:	0028      	movs	r0, r5
 800c552:	0021      	movs	r1, r4
 800c554:	f7ff ff50 	bl	800c3f8 <__sflush_r>
 800c558:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c55a:	0005      	movs	r5, r0
 800c55c:	07db      	lsls	r3, r3, #31
 800c55e:	d4de      	bmi.n	800c51e <_fflush_r+0xe>
 800c560:	89a3      	ldrh	r3, [r4, #12]
 800c562:	059b      	lsls	r3, r3, #22
 800c564:	d4db      	bmi.n	800c51e <_fflush_r+0xe>
 800c566:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c568:	f000 f91a 	bl	800c7a0 <__retarget_lock_release_recursive>
 800c56c:	e7d7      	b.n	800c51e <_fflush_r+0xe>
 800c56e:	4b06      	ldr	r3, [pc, #24]	; (800c588 <_fflush_r+0x78>)
 800c570:	429c      	cmp	r4, r3
 800c572:	d101      	bne.n	800c578 <_fflush_r+0x68>
 800c574:	68ac      	ldr	r4, [r5, #8]
 800c576:	e7df      	b.n	800c538 <_fflush_r+0x28>
 800c578:	4b04      	ldr	r3, [pc, #16]	; (800c58c <_fflush_r+0x7c>)
 800c57a:	429c      	cmp	r4, r3
 800c57c:	d1dc      	bne.n	800c538 <_fflush_r+0x28>
 800c57e:	68ec      	ldr	r4, [r5, #12]
 800c580:	e7da      	b.n	800c538 <_fflush_r+0x28>
 800c582:	46c0      	nop			; (mov r8, r8)
 800c584:	0800e21c 	.word	0x0800e21c
 800c588:	0800e23c 	.word	0x0800e23c
 800c58c:	0800e1fc 	.word	0x0800e1fc

0800c590 <std>:
 800c590:	2300      	movs	r3, #0
 800c592:	b510      	push	{r4, lr}
 800c594:	0004      	movs	r4, r0
 800c596:	6003      	str	r3, [r0, #0]
 800c598:	6043      	str	r3, [r0, #4]
 800c59a:	6083      	str	r3, [r0, #8]
 800c59c:	8181      	strh	r1, [r0, #12]
 800c59e:	6643      	str	r3, [r0, #100]	; 0x64
 800c5a0:	0019      	movs	r1, r3
 800c5a2:	81c2      	strh	r2, [r0, #14]
 800c5a4:	6103      	str	r3, [r0, #16]
 800c5a6:	6143      	str	r3, [r0, #20]
 800c5a8:	6183      	str	r3, [r0, #24]
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	305c      	adds	r0, #92	; 0x5c
 800c5ae:	f7fe faa2 	bl	800aaf6 <memset>
 800c5b2:	4b05      	ldr	r3, [pc, #20]	; (800c5c8 <std+0x38>)
 800c5b4:	6224      	str	r4, [r4, #32]
 800c5b6:	6263      	str	r3, [r4, #36]	; 0x24
 800c5b8:	4b04      	ldr	r3, [pc, #16]	; (800c5cc <std+0x3c>)
 800c5ba:	62a3      	str	r3, [r4, #40]	; 0x28
 800c5bc:	4b04      	ldr	r3, [pc, #16]	; (800c5d0 <std+0x40>)
 800c5be:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5c0:	4b04      	ldr	r3, [pc, #16]	; (800c5d4 <std+0x44>)
 800c5c2:	6323      	str	r3, [r4, #48]	; 0x30
 800c5c4:	bd10      	pop	{r4, pc}
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	0800d4e5 	.word	0x0800d4e5
 800c5cc:	0800d50d 	.word	0x0800d50d
 800c5d0:	0800d545 	.word	0x0800d545
 800c5d4:	0800d571 	.word	0x0800d571

0800c5d8 <_cleanup_r>:
 800c5d8:	b510      	push	{r4, lr}
 800c5da:	4902      	ldr	r1, [pc, #8]	; (800c5e4 <_cleanup_r+0xc>)
 800c5dc:	f000 f8ba 	bl	800c754 <_fwalk_reent>
 800c5e0:	bd10      	pop	{r4, pc}
 800c5e2:	46c0      	nop			; (mov r8, r8)
 800c5e4:	0800c511 	.word	0x0800c511

0800c5e8 <__sfmoreglue>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	2568      	movs	r5, #104	; 0x68
 800c5ec:	1e4a      	subs	r2, r1, #1
 800c5ee:	4355      	muls	r5, r2
 800c5f0:	000e      	movs	r6, r1
 800c5f2:	0029      	movs	r1, r5
 800c5f4:	3174      	adds	r1, #116	; 0x74
 800c5f6:	f000 fd8b 	bl	800d110 <_malloc_r>
 800c5fa:	1e04      	subs	r4, r0, #0
 800c5fc:	d008      	beq.n	800c610 <__sfmoreglue+0x28>
 800c5fe:	2100      	movs	r1, #0
 800c600:	002a      	movs	r2, r5
 800c602:	6001      	str	r1, [r0, #0]
 800c604:	6046      	str	r6, [r0, #4]
 800c606:	300c      	adds	r0, #12
 800c608:	60a0      	str	r0, [r4, #8]
 800c60a:	3268      	adds	r2, #104	; 0x68
 800c60c:	f7fe fa73 	bl	800aaf6 <memset>
 800c610:	0020      	movs	r0, r4
 800c612:	bd70      	pop	{r4, r5, r6, pc}

0800c614 <__sfp_lock_acquire>:
 800c614:	b510      	push	{r4, lr}
 800c616:	4802      	ldr	r0, [pc, #8]	; (800c620 <__sfp_lock_acquire+0xc>)
 800c618:	f000 f8c1 	bl	800c79e <__retarget_lock_acquire_recursive>
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	20001161 	.word	0x20001161

0800c624 <__sfp_lock_release>:
 800c624:	b510      	push	{r4, lr}
 800c626:	4802      	ldr	r0, [pc, #8]	; (800c630 <__sfp_lock_release+0xc>)
 800c628:	f000 f8ba 	bl	800c7a0 <__retarget_lock_release_recursive>
 800c62c:	bd10      	pop	{r4, pc}
 800c62e:	46c0      	nop			; (mov r8, r8)
 800c630:	20001161 	.word	0x20001161

0800c634 <__sinit_lock_acquire>:
 800c634:	b510      	push	{r4, lr}
 800c636:	4802      	ldr	r0, [pc, #8]	; (800c640 <__sinit_lock_acquire+0xc>)
 800c638:	f000 f8b1 	bl	800c79e <__retarget_lock_acquire_recursive>
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	46c0      	nop			; (mov r8, r8)
 800c640:	20001162 	.word	0x20001162

0800c644 <__sinit_lock_release>:
 800c644:	b510      	push	{r4, lr}
 800c646:	4802      	ldr	r0, [pc, #8]	; (800c650 <__sinit_lock_release+0xc>)
 800c648:	f000 f8aa 	bl	800c7a0 <__retarget_lock_release_recursive>
 800c64c:	bd10      	pop	{r4, pc}
 800c64e:	46c0      	nop			; (mov r8, r8)
 800c650:	20001162 	.word	0x20001162

0800c654 <__sinit>:
 800c654:	b513      	push	{r0, r1, r4, lr}
 800c656:	0004      	movs	r4, r0
 800c658:	f7ff ffec 	bl	800c634 <__sinit_lock_acquire>
 800c65c:	69a3      	ldr	r3, [r4, #24]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d002      	beq.n	800c668 <__sinit+0x14>
 800c662:	f7ff ffef 	bl	800c644 <__sinit_lock_release>
 800c666:	bd13      	pop	{r0, r1, r4, pc}
 800c668:	64a3      	str	r3, [r4, #72]	; 0x48
 800c66a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c66c:	6523      	str	r3, [r4, #80]	; 0x50
 800c66e:	4b13      	ldr	r3, [pc, #76]	; (800c6bc <__sinit+0x68>)
 800c670:	4a13      	ldr	r2, [pc, #76]	; (800c6c0 <__sinit+0x6c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	62a2      	str	r2, [r4, #40]	; 0x28
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	42a3      	cmp	r3, r4
 800c67a:	d101      	bne.n	800c680 <__sinit+0x2c>
 800c67c:	2301      	movs	r3, #1
 800c67e:	61a3      	str	r3, [r4, #24]
 800c680:	0020      	movs	r0, r4
 800c682:	f000 f81f 	bl	800c6c4 <__sfp>
 800c686:	6060      	str	r0, [r4, #4]
 800c688:	0020      	movs	r0, r4
 800c68a:	f000 f81b 	bl	800c6c4 <__sfp>
 800c68e:	60a0      	str	r0, [r4, #8]
 800c690:	0020      	movs	r0, r4
 800c692:	f000 f817 	bl	800c6c4 <__sfp>
 800c696:	2200      	movs	r2, #0
 800c698:	2104      	movs	r1, #4
 800c69a:	60e0      	str	r0, [r4, #12]
 800c69c:	6860      	ldr	r0, [r4, #4]
 800c69e:	f7ff ff77 	bl	800c590 <std>
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	2109      	movs	r1, #9
 800c6a6:	68a0      	ldr	r0, [r4, #8]
 800c6a8:	f7ff ff72 	bl	800c590 <std>
 800c6ac:	2202      	movs	r2, #2
 800c6ae:	2112      	movs	r1, #18
 800c6b0:	68e0      	ldr	r0, [r4, #12]
 800c6b2:	f7ff ff6d 	bl	800c590 <std>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	61a3      	str	r3, [r4, #24]
 800c6ba:	e7d2      	b.n	800c662 <__sinit+0xe>
 800c6bc:	0800e134 	.word	0x0800e134
 800c6c0:	0800c5d9 	.word	0x0800c5d9

0800c6c4 <__sfp>:
 800c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c6:	0007      	movs	r7, r0
 800c6c8:	f7ff ffa4 	bl	800c614 <__sfp_lock_acquire>
 800c6cc:	4b1f      	ldr	r3, [pc, #124]	; (800c74c <__sfp+0x88>)
 800c6ce:	681e      	ldr	r6, [r3, #0]
 800c6d0:	69b3      	ldr	r3, [r6, #24]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d102      	bne.n	800c6dc <__sfp+0x18>
 800c6d6:	0030      	movs	r0, r6
 800c6d8:	f7ff ffbc 	bl	800c654 <__sinit>
 800c6dc:	3648      	adds	r6, #72	; 0x48
 800c6de:	68b4      	ldr	r4, [r6, #8]
 800c6e0:	6873      	ldr	r3, [r6, #4]
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	d504      	bpl.n	800c6f0 <__sfp+0x2c>
 800c6e6:	6833      	ldr	r3, [r6, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d022      	beq.n	800c732 <__sfp+0x6e>
 800c6ec:	6836      	ldr	r6, [r6, #0]
 800c6ee:	e7f6      	b.n	800c6de <__sfp+0x1a>
 800c6f0:	220c      	movs	r2, #12
 800c6f2:	5ea5      	ldrsh	r5, [r4, r2]
 800c6f4:	2d00      	cmp	r5, #0
 800c6f6:	d11a      	bne.n	800c72e <__sfp+0x6a>
 800c6f8:	0020      	movs	r0, r4
 800c6fa:	4b15      	ldr	r3, [pc, #84]	; (800c750 <__sfp+0x8c>)
 800c6fc:	3058      	adds	r0, #88	; 0x58
 800c6fe:	60e3      	str	r3, [r4, #12]
 800c700:	6665      	str	r5, [r4, #100]	; 0x64
 800c702:	f000 f84b 	bl	800c79c <__retarget_lock_init_recursive>
 800c706:	f7ff ff8d 	bl	800c624 <__sfp_lock_release>
 800c70a:	0020      	movs	r0, r4
 800c70c:	2208      	movs	r2, #8
 800c70e:	0029      	movs	r1, r5
 800c710:	6025      	str	r5, [r4, #0]
 800c712:	60a5      	str	r5, [r4, #8]
 800c714:	6065      	str	r5, [r4, #4]
 800c716:	6125      	str	r5, [r4, #16]
 800c718:	6165      	str	r5, [r4, #20]
 800c71a:	61a5      	str	r5, [r4, #24]
 800c71c:	305c      	adds	r0, #92	; 0x5c
 800c71e:	f7fe f9ea 	bl	800aaf6 <memset>
 800c722:	6365      	str	r5, [r4, #52]	; 0x34
 800c724:	63a5      	str	r5, [r4, #56]	; 0x38
 800c726:	64a5      	str	r5, [r4, #72]	; 0x48
 800c728:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c72a:	0020      	movs	r0, r4
 800c72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c72e:	3468      	adds	r4, #104	; 0x68
 800c730:	e7d7      	b.n	800c6e2 <__sfp+0x1e>
 800c732:	2104      	movs	r1, #4
 800c734:	0038      	movs	r0, r7
 800c736:	f7ff ff57 	bl	800c5e8 <__sfmoreglue>
 800c73a:	1e04      	subs	r4, r0, #0
 800c73c:	6030      	str	r0, [r6, #0]
 800c73e:	d1d5      	bne.n	800c6ec <__sfp+0x28>
 800c740:	f7ff ff70 	bl	800c624 <__sfp_lock_release>
 800c744:	230c      	movs	r3, #12
 800c746:	603b      	str	r3, [r7, #0]
 800c748:	e7ef      	b.n	800c72a <__sfp+0x66>
 800c74a:	46c0      	nop			; (mov r8, r8)
 800c74c:	0800e134 	.word	0x0800e134
 800c750:	ffff0001 	.word	0xffff0001

0800c754 <_fwalk_reent>:
 800c754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c756:	0004      	movs	r4, r0
 800c758:	0006      	movs	r6, r0
 800c75a:	2700      	movs	r7, #0
 800c75c:	9101      	str	r1, [sp, #4]
 800c75e:	3448      	adds	r4, #72	; 0x48
 800c760:	6863      	ldr	r3, [r4, #4]
 800c762:	68a5      	ldr	r5, [r4, #8]
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	9b00      	ldr	r3, [sp, #0]
 800c768:	3b01      	subs	r3, #1
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	d504      	bpl.n	800c778 <_fwalk_reent+0x24>
 800c76e:	6824      	ldr	r4, [r4, #0]
 800c770:	2c00      	cmp	r4, #0
 800c772:	d1f5      	bne.n	800c760 <_fwalk_reent+0xc>
 800c774:	0038      	movs	r0, r7
 800c776:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c778:	89ab      	ldrh	r3, [r5, #12]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d908      	bls.n	800c790 <_fwalk_reent+0x3c>
 800c77e:	220e      	movs	r2, #14
 800c780:	5eab      	ldrsh	r3, [r5, r2]
 800c782:	3301      	adds	r3, #1
 800c784:	d004      	beq.n	800c790 <_fwalk_reent+0x3c>
 800c786:	0029      	movs	r1, r5
 800c788:	0030      	movs	r0, r6
 800c78a:	9b01      	ldr	r3, [sp, #4]
 800c78c:	4798      	blx	r3
 800c78e:	4307      	orrs	r7, r0
 800c790:	3568      	adds	r5, #104	; 0x68
 800c792:	e7e8      	b.n	800c766 <_fwalk_reent+0x12>

0800c794 <_localeconv_r>:
 800c794:	4800      	ldr	r0, [pc, #0]	; (800c798 <_localeconv_r+0x4>)
 800c796:	4770      	bx	lr
 800c798:	20000178 	.word	0x20000178

0800c79c <__retarget_lock_init_recursive>:
 800c79c:	4770      	bx	lr

0800c79e <__retarget_lock_acquire_recursive>:
 800c79e:	4770      	bx	lr

0800c7a0 <__retarget_lock_release_recursive>:
 800c7a0:	4770      	bx	lr
	...

0800c7a4 <__swhatbuf_r>:
 800c7a4:	b570      	push	{r4, r5, r6, lr}
 800c7a6:	000e      	movs	r6, r1
 800c7a8:	001d      	movs	r5, r3
 800c7aa:	230e      	movs	r3, #14
 800c7ac:	5ec9      	ldrsh	r1, [r1, r3]
 800c7ae:	0014      	movs	r4, r2
 800c7b0:	b096      	sub	sp, #88	; 0x58
 800c7b2:	2900      	cmp	r1, #0
 800c7b4:	da08      	bge.n	800c7c8 <__swhatbuf_r+0x24>
 800c7b6:	220c      	movs	r2, #12
 800c7b8:	5eb3      	ldrsh	r3, [r6, r2]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	602a      	str	r2, [r5, #0]
 800c7be:	061b      	lsls	r3, r3, #24
 800c7c0:	d411      	bmi.n	800c7e6 <__swhatbuf_r+0x42>
 800c7c2:	2380      	movs	r3, #128	; 0x80
 800c7c4:	00db      	lsls	r3, r3, #3
 800c7c6:	e00f      	b.n	800c7e8 <__swhatbuf_r+0x44>
 800c7c8:	466a      	mov	r2, sp
 800c7ca:	f000 ff2b 	bl	800d624 <_fstat_r>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	dbf1      	blt.n	800c7b6 <__swhatbuf_r+0x12>
 800c7d2:	23f0      	movs	r3, #240	; 0xf0
 800c7d4:	9901      	ldr	r1, [sp, #4]
 800c7d6:	021b      	lsls	r3, r3, #8
 800c7d8:	4019      	ands	r1, r3
 800c7da:	4b05      	ldr	r3, [pc, #20]	; (800c7f0 <__swhatbuf_r+0x4c>)
 800c7dc:	18c9      	adds	r1, r1, r3
 800c7de:	424b      	negs	r3, r1
 800c7e0:	4159      	adcs	r1, r3
 800c7e2:	6029      	str	r1, [r5, #0]
 800c7e4:	e7ed      	b.n	800c7c2 <__swhatbuf_r+0x1e>
 800c7e6:	2340      	movs	r3, #64	; 0x40
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	b016      	add	sp, #88	; 0x58
 800c7ee:	bd70      	pop	{r4, r5, r6, pc}
 800c7f0:	ffffe000 	.word	0xffffe000

0800c7f4 <__smakebuf_r>:
 800c7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7f6:	2602      	movs	r6, #2
 800c7f8:	898b      	ldrh	r3, [r1, #12]
 800c7fa:	0005      	movs	r5, r0
 800c7fc:	000c      	movs	r4, r1
 800c7fe:	4233      	tst	r3, r6
 800c800:	d006      	beq.n	800c810 <__smakebuf_r+0x1c>
 800c802:	0023      	movs	r3, r4
 800c804:	3347      	adds	r3, #71	; 0x47
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	6123      	str	r3, [r4, #16]
 800c80a:	2301      	movs	r3, #1
 800c80c:	6163      	str	r3, [r4, #20]
 800c80e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c810:	466a      	mov	r2, sp
 800c812:	ab01      	add	r3, sp, #4
 800c814:	f7ff ffc6 	bl	800c7a4 <__swhatbuf_r>
 800c818:	9900      	ldr	r1, [sp, #0]
 800c81a:	0007      	movs	r7, r0
 800c81c:	0028      	movs	r0, r5
 800c81e:	f000 fc77 	bl	800d110 <_malloc_r>
 800c822:	2800      	cmp	r0, #0
 800c824:	d108      	bne.n	800c838 <__smakebuf_r+0x44>
 800c826:	220c      	movs	r2, #12
 800c828:	5ea3      	ldrsh	r3, [r4, r2]
 800c82a:	059a      	lsls	r2, r3, #22
 800c82c:	d4ef      	bmi.n	800c80e <__smakebuf_r+0x1a>
 800c82e:	2203      	movs	r2, #3
 800c830:	4393      	bics	r3, r2
 800c832:	431e      	orrs	r6, r3
 800c834:	81a6      	strh	r6, [r4, #12]
 800c836:	e7e4      	b.n	800c802 <__smakebuf_r+0xe>
 800c838:	4b0f      	ldr	r3, [pc, #60]	; (800c878 <__smakebuf_r+0x84>)
 800c83a:	62ab      	str	r3, [r5, #40]	; 0x28
 800c83c:	2380      	movs	r3, #128	; 0x80
 800c83e:	89a2      	ldrh	r2, [r4, #12]
 800c840:	6020      	str	r0, [r4, #0]
 800c842:	4313      	orrs	r3, r2
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	9b00      	ldr	r3, [sp, #0]
 800c848:	6120      	str	r0, [r4, #16]
 800c84a:	6163      	str	r3, [r4, #20]
 800c84c:	9b01      	ldr	r3, [sp, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00d      	beq.n	800c86e <__smakebuf_r+0x7a>
 800c852:	0028      	movs	r0, r5
 800c854:	230e      	movs	r3, #14
 800c856:	5ee1      	ldrsh	r1, [r4, r3]
 800c858:	f000 fef6 	bl	800d648 <_isatty_r>
 800c85c:	2800      	cmp	r0, #0
 800c85e:	d006      	beq.n	800c86e <__smakebuf_r+0x7a>
 800c860:	2203      	movs	r2, #3
 800c862:	89a3      	ldrh	r3, [r4, #12]
 800c864:	4393      	bics	r3, r2
 800c866:	001a      	movs	r2, r3
 800c868:	2301      	movs	r3, #1
 800c86a:	4313      	orrs	r3, r2
 800c86c:	81a3      	strh	r3, [r4, #12]
 800c86e:	89a0      	ldrh	r0, [r4, #12]
 800c870:	4307      	orrs	r7, r0
 800c872:	81a7      	strh	r7, [r4, #12]
 800c874:	e7cb      	b.n	800c80e <__smakebuf_r+0x1a>
 800c876:	46c0      	nop			; (mov r8, r8)
 800c878:	0800c5d9 	.word	0x0800c5d9

0800c87c <malloc>:
 800c87c:	b510      	push	{r4, lr}
 800c87e:	4b03      	ldr	r3, [pc, #12]	; (800c88c <malloc+0x10>)
 800c880:	0001      	movs	r1, r0
 800c882:	6818      	ldr	r0, [r3, #0]
 800c884:	f000 fc44 	bl	800d110 <_malloc_r>
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	46c0      	nop			; (mov r8, r8)
 800c88c:	20000024 	.word	0x20000024

0800c890 <memchr>:
 800c890:	b2c9      	uxtb	r1, r1
 800c892:	1882      	adds	r2, r0, r2
 800c894:	4290      	cmp	r0, r2
 800c896:	d101      	bne.n	800c89c <memchr+0xc>
 800c898:	2000      	movs	r0, #0
 800c89a:	4770      	bx	lr
 800c89c:	7803      	ldrb	r3, [r0, #0]
 800c89e:	428b      	cmp	r3, r1
 800c8a0:	d0fb      	beq.n	800c89a <memchr+0xa>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	e7f6      	b.n	800c894 <memchr+0x4>
	...

0800c8a8 <_Balloc>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c8ac:	0006      	movs	r6, r0
 800c8ae:	000c      	movs	r4, r1
 800c8b0:	2d00      	cmp	r5, #0
 800c8b2:	d10e      	bne.n	800c8d2 <_Balloc+0x2a>
 800c8b4:	2010      	movs	r0, #16
 800c8b6:	f7ff ffe1 	bl	800c87c <malloc>
 800c8ba:	1e02      	subs	r2, r0, #0
 800c8bc:	6270      	str	r0, [r6, #36]	; 0x24
 800c8be:	d104      	bne.n	800c8ca <_Balloc+0x22>
 800c8c0:	2166      	movs	r1, #102	; 0x66
 800c8c2:	4b19      	ldr	r3, [pc, #100]	; (800c928 <_Balloc+0x80>)
 800c8c4:	4819      	ldr	r0, [pc, #100]	; (800c92c <_Balloc+0x84>)
 800c8c6:	f000 fe6d 	bl	800d5a4 <__assert_func>
 800c8ca:	6045      	str	r5, [r0, #4]
 800c8cc:	6085      	str	r5, [r0, #8]
 800c8ce:	6005      	str	r5, [r0, #0]
 800c8d0:	60c5      	str	r5, [r0, #12]
 800c8d2:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800c8d4:	68eb      	ldr	r3, [r5, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d013      	beq.n	800c902 <_Balloc+0x5a>
 800c8da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c8dc:	00a2      	lsls	r2, r4, #2
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	189b      	adds	r3, r3, r2
 800c8e2:	6818      	ldr	r0, [r3, #0]
 800c8e4:	2800      	cmp	r0, #0
 800c8e6:	d118      	bne.n	800c91a <_Balloc+0x72>
 800c8e8:	2101      	movs	r1, #1
 800c8ea:	000d      	movs	r5, r1
 800c8ec:	40a5      	lsls	r5, r4
 800c8ee:	1d6a      	adds	r2, r5, #5
 800c8f0:	0030      	movs	r0, r6
 800c8f2:	0092      	lsls	r2, r2, #2
 800c8f4:	f000 fb74 	bl	800cfe0 <_calloc_r>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d00c      	beq.n	800c916 <_Balloc+0x6e>
 800c8fc:	6044      	str	r4, [r0, #4]
 800c8fe:	6085      	str	r5, [r0, #8]
 800c900:	e00d      	b.n	800c91e <_Balloc+0x76>
 800c902:	2221      	movs	r2, #33	; 0x21
 800c904:	2104      	movs	r1, #4
 800c906:	0030      	movs	r0, r6
 800c908:	f000 fb6a 	bl	800cfe0 <_calloc_r>
 800c90c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c90e:	60e8      	str	r0, [r5, #12]
 800c910:	68db      	ldr	r3, [r3, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1e1      	bne.n	800c8da <_Balloc+0x32>
 800c916:	2000      	movs	r0, #0
 800c918:	bd70      	pop	{r4, r5, r6, pc}
 800c91a:	6802      	ldr	r2, [r0, #0]
 800c91c:	601a      	str	r2, [r3, #0]
 800c91e:	2300      	movs	r3, #0
 800c920:	6103      	str	r3, [r0, #16]
 800c922:	60c3      	str	r3, [r0, #12]
 800c924:	e7f8      	b.n	800c918 <_Balloc+0x70>
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	0800e179 	.word	0x0800e179
 800c92c:	0800e25c 	.word	0x0800e25c

0800c930 <_Bfree>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c934:	0005      	movs	r5, r0
 800c936:	000c      	movs	r4, r1
 800c938:	2e00      	cmp	r6, #0
 800c93a:	d10e      	bne.n	800c95a <_Bfree+0x2a>
 800c93c:	2010      	movs	r0, #16
 800c93e:	f7ff ff9d 	bl	800c87c <malloc>
 800c942:	1e02      	subs	r2, r0, #0
 800c944:	6268      	str	r0, [r5, #36]	; 0x24
 800c946:	d104      	bne.n	800c952 <_Bfree+0x22>
 800c948:	218a      	movs	r1, #138	; 0x8a
 800c94a:	4b09      	ldr	r3, [pc, #36]	; (800c970 <_Bfree+0x40>)
 800c94c:	4809      	ldr	r0, [pc, #36]	; (800c974 <_Bfree+0x44>)
 800c94e:	f000 fe29 	bl	800d5a4 <__assert_func>
 800c952:	6046      	str	r6, [r0, #4]
 800c954:	6086      	str	r6, [r0, #8]
 800c956:	6006      	str	r6, [r0, #0]
 800c958:	60c6      	str	r6, [r0, #12]
 800c95a:	2c00      	cmp	r4, #0
 800c95c:	d007      	beq.n	800c96e <_Bfree+0x3e>
 800c95e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c960:	6862      	ldr	r2, [r4, #4]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	0092      	lsls	r2, r2, #2
 800c966:	189b      	adds	r3, r3, r2
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	6022      	str	r2, [r4, #0]
 800c96c:	601c      	str	r4, [r3, #0]
 800c96e:	bd70      	pop	{r4, r5, r6, pc}
 800c970:	0800e179 	.word	0x0800e179
 800c974:	0800e25c 	.word	0x0800e25c

0800c978 <__multadd>:
 800c978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c97a:	000e      	movs	r6, r1
 800c97c:	9001      	str	r0, [sp, #4]
 800c97e:	000c      	movs	r4, r1
 800c980:	001d      	movs	r5, r3
 800c982:	2000      	movs	r0, #0
 800c984:	690f      	ldr	r7, [r1, #16]
 800c986:	3614      	adds	r6, #20
 800c988:	6833      	ldr	r3, [r6, #0]
 800c98a:	3001      	adds	r0, #1
 800c98c:	b299      	uxth	r1, r3
 800c98e:	4351      	muls	r1, r2
 800c990:	0c1b      	lsrs	r3, r3, #16
 800c992:	4353      	muls	r3, r2
 800c994:	1949      	adds	r1, r1, r5
 800c996:	0c0d      	lsrs	r5, r1, #16
 800c998:	195b      	adds	r3, r3, r5
 800c99a:	0c1d      	lsrs	r5, r3, #16
 800c99c:	b289      	uxth	r1, r1
 800c99e:	041b      	lsls	r3, r3, #16
 800c9a0:	185b      	adds	r3, r3, r1
 800c9a2:	c608      	stmia	r6!, {r3}
 800c9a4:	4287      	cmp	r7, r0
 800c9a6:	dcef      	bgt.n	800c988 <__multadd+0x10>
 800c9a8:	2d00      	cmp	r5, #0
 800c9aa:	d022      	beq.n	800c9f2 <__multadd+0x7a>
 800c9ac:	68a3      	ldr	r3, [r4, #8]
 800c9ae:	42bb      	cmp	r3, r7
 800c9b0:	dc19      	bgt.n	800c9e6 <__multadd+0x6e>
 800c9b2:	6863      	ldr	r3, [r4, #4]
 800c9b4:	9801      	ldr	r0, [sp, #4]
 800c9b6:	1c59      	adds	r1, r3, #1
 800c9b8:	f7ff ff76 	bl	800c8a8 <_Balloc>
 800c9bc:	1e06      	subs	r6, r0, #0
 800c9be:	d105      	bne.n	800c9cc <__multadd+0x54>
 800c9c0:	0002      	movs	r2, r0
 800c9c2:	21b5      	movs	r1, #181	; 0xb5
 800c9c4:	4b0c      	ldr	r3, [pc, #48]	; (800c9f8 <__multadd+0x80>)
 800c9c6:	480d      	ldr	r0, [pc, #52]	; (800c9fc <__multadd+0x84>)
 800c9c8:	f000 fdec 	bl	800d5a4 <__assert_func>
 800c9cc:	0021      	movs	r1, r4
 800c9ce:	6923      	ldr	r3, [r4, #16]
 800c9d0:	310c      	adds	r1, #12
 800c9d2:	1c9a      	adds	r2, r3, #2
 800c9d4:	0092      	lsls	r2, r2, #2
 800c9d6:	300c      	adds	r0, #12
 800c9d8:	f7fe f884 	bl	800aae4 <memcpy>
 800c9dc:	0021      	movs	r1, r4
 800c9de:	9801      	ldr	r0, [sp, #4]
 800c9e0:	f7ff ffa6 	bl	800c930 <_Bfree>
 800c9e4:	0034      	movs	r4, r6
 800c9e6:	1d3b      	adds	r3, r7, #4
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	18e3      	adds	r3, r4, r3
 800c9ec:	605d      	str	r5, [r3, #4]
 800c9ee:	1c7b      	adds	r3, r7, #1
 800c9f0:	6123      	str	r3, [r4, #16]
 800c9f2:	0020      	movs	r0, r4
 800c9f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9f6:	46c0      	nop			; (mov r8, r8)
 800c9f8:	0800e1eb 	.word	0x0800e1eb
 800c9fc:	0800e25c 	.word	0x0800e25c

0800ca00 <__hi0bits>:
 800ca00:	0003      	movs	r3, r0
 800ca02:	0c02      	lsrs	r2, r0, #16
 800ca04:	2000      	movs	r0, #0
 800ca06:	4282      	cmp	r2, r0
 800ca08:	d101      	bne.n	800ca0e <__hi0bits+0xe>
 800ca0a:	041b      	lsls	r3, r3, #16
 800ca0c:	3010      	adds	r0, #16
 800ca0e:	0e1a      	lsrs	r2, r3, #24
 800ca10:	d101      	bne.n	800ca16 <__hi0bits+0x16>
 800ca12:	3008      	adds	r0, #8
 800ca14:	021b      	lsls	r3, r3, #8
 800ca16:	0f1a      	lsrs	r2, r3, #28
 800ca18:	d101      	bne.n	800ca1e <__hi0bits+0x1e>
 800ca1a:	3004      	adds	r0, #4
 800ca1c:	011b      	lsls	r3, r3, #4
 800ca1e:	0f9a      	lsrs	r2, r3, #30
 800ca20:	d101      	bne.n	800ca26 <__hi0bits+0x26>
 800ca22:	3002      	adds	r0, #2
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	db03      	blt.n	800ca32 <__hi0bits+0x32>
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	d400      	bmi.n	800ca32 <__hi0bits+0x32>
 800ca30:	2020      	movs	r0, #32
 800ca32:	4770      	bx	lr

0800ca34 <__lo0bits>:
 800ca34:	6803      	ldr	r3, [r0, #0]
 800ca36:	0002      	movs	r2, r0
 800ca38:	2107      	movs	r1, #7
 800ca3a:	0018      	movs	r0, r3
 800ca3c:	4008      	ands	r0, r1
 800ca3e:	420b      	tst	r3, r1
 800ca40:	d00d      	beq.n	800ca5e <__lo0bits+0x2a>
 800ca42:	3906      	subs	r1, #6
 800ca44:	2000      	movs	r0, #0
 800ca46:	420b      	tst	r3, r1
 800ca48:	d105      	bne.n	800ca56 <__lo0bits+0x22>
 800ca4a:	3002      	adds	r0, #2
 800ca4c:	4203      	tst	r3, r0
 800ca4e:	d003      	beq.n	800ca58 <__lo0bits+0x24>
 800ca50:	40cb      	lsrs	r3, r1
 800ca52:	0008      	movs	r0, r1
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	4770      	bx	lr
 800ca58:	089b      	lsrs	r3, r3, #2
 800ca5a:	6013      	str	r3, [r2, #0]
 800ca5c:	e7fb      	b.n	800ca56 <__lo0bits+0x22>
 800ca5e:	b299      	uxth	r1, r3
 800ca60:	2900      	cmp	r1, #0
 800ca62:	d101      	bne.n	800ca68 <__lo0bits+0x34>
 800ca64:	2010      	movs	r0, #16
 800ca66:	0c1b      	lsrs	r3, r3, #16
 800ca68:	b2d9      	uxtb	r1, r3
 800ca6a:	2900      	cmp	r1, #0
 800ca6c:	d101      	bne.n	800ca72 <__lo0bits+0x3e>
 800ca6e:	3008      	adds	r0, #8
 800ca70:	0a1b      	lsrs	r3, r3, #8
 800ca72:	0719      	lsls	r1, r3, #28
 800ca74:	d101      	bne.n	800ca7a <__lo0bits+0x46>
 800ca76:	3004      	adds	r0, #4
 800ca78:	091b      	lsrs	r3, r3, #4
 800ca7a:	0799      	lsls	r1, r3, #30
 800ca7c:	d101      	bne.n	800ca82 <__lo0bits+0x4e>
 800ca7e:	3002      	adds	r0, #2
 800ca80:	089b      	lsrs	r3, r3, #2
 800ca82:	07d9      	lsls	r1, r3, #31
 800ca84:	d4e9      	bmi.n	800ca5a <__lo0bits+0x26>
 800ca86:	3001      	adds	r0, #1
 800ca88:	085b      	lsrs	r3, r3, #1
 800ca8a:	d1e6      	bne.n	800ca5a <__lo0bits+0x26>
 800ca8c:	2020      	movs	r0, #32
 800ca8e:	e7e2      	b.n	800ca56 <__lo0bits+0x22>

0800ca90 <__i2b>:
 800ca90:	b510      	push	{r4, lr}
 800ca92:	000c      	movs	r4, r1
 800ca94:	2101      	movs	r1, #1
 800ca96:	f7ff ff07 	bl	800c8a8 <_Balloc>
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d106      	bne.n	800caac <__i2b+0x1c>
 800ca9e:	21a0      	movs	r1, #160	; 0xa0
 800caa0:	0002      	movs	r2, r0
 800caa2:	4b04      	ldr	r3, [pc, #16]	; (800cab4 <__i2b+0x24>)
 800caa4:	4804      	ldr	r0, [pc, #16]	; (800cab8 <__i2b+0x28>)
 800caa6:	0049      	lsls	r1, r1, #1
 800caa8:	f000 fd7c 	bl	800d5a4 <__assert_func>
 800caac:	2301      	movs	r3, #1
 800caae:	6144      	str	r4, [r0, #20]
 800cab0:	6103      	str	r3, [r0, #16]
 800cab2:	bd10      	pop	{r4, pc}
 800cab4:	0800e1eb 	.word	0x0800e1eb
 800cab8:	0800e25c 	.word	0x0800e25c

0800cabc <__multiply>:
 800cabc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cabe:	690b      	ldr	r3, [r1, #16]
 800cac0:	0014      	movs	r4, r2
 800cac2:	6912      	ldr	r2, [r2, #16]
 800cac4:	000d      	movs	r5, r1
 800cac6:	b089      	sub	sp, #36	; 0x24
 800cac8:	4293      	cmp	r3, r2
 800caca:	da01      	bge.n	800cad0 <__multiply+0x14>
 800cacc:	0025      	movs	r5, r4
 800cace:	000c      	movs	r4, r1
 800cad0:	692f      	ldr	r7, [r5, #16]
 800cad2:	6926      	ldr	r6, [r4, #16]
 800cad4:	6869      	ldr	r1, [r5, #4]
 800cad6:	19bb      	adds	r3, r7, r6
 800cad8:	9302      	str	r3, [sp, #8]
 800cada:	68ab      	ldr	r3, [r5, #8]
 800cadc:	19ba      	adds	r2, r7, r6
 800cade:	4293      	cmp	r3, r2
 800cae0:	da00      	bge.n	800cae4 <__multiply+0x28>
 800cae2:	3101      	adds	r1, #1
 800cae4:	f7ff fee0 	bl	800c8a8 <_Balloc>
 800cae8:	9001      	str	r0, [sp, #4]
 800caea:	2800      	cmp	r0, #0
 800caec:	d106      	bne.n	800cafc <__multiply+0x40>
 800caee:	215e      	movs	r1, #94	; 0x5e
 800caf0:	0002      	movs	r2, r0
 800caf2:	4b48      	ldr	r3, [pc, #288]	; (800cc14 <__multiply+0x158>)
 800caf4:	4848      	ldr	r0, [pc, #288]	; (800cc18 <__multiply+0x15c>)
 800caf6:	31ff      	adds	r1, #255	; 0xff
 800caf8:	f000 fd54 	bl	800d5a4 <__assert_func>
 800cafc:	9b01      	ldr	r3, [sp, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	3314      	adds	r3, #20
 800cb02:	469c      	mov	ip, r3
 800cb04:	19bb      	adds	r3, r7, r6
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4463      	add	r3, ip
 800cb0a:	9303      	str	r3, [sp, #12]
 800cb0c:	4663      	mov	r3, ip
 800cb0e:	9903      	ldr	r1, [sp, #12]
 800cb10:	428b      	cmp	r3, r1
 800cb12:	d32c      	bcc.n	800cb6e <__multiply+0xb2>
 800cb14:	002b      	movs	r3, r5
 800cb16:	0022      	movs	r2, r4
 800cb18:	3314      	adds	r3, #20
 800cb1a:	00bf      	lsls	r7, r7, #2
 800cb1c:	3214      	adds	r2, #20
 800cb1e:	9306      	str	r3, [sp, #24]
 800cb20:	00b6      	lsls	r6, r6, #2
 800cb22:	19db      	adds	r3, r3, r7
 800cb24:	9304      	str	r3, [sp, #16]
 800cb26:	1993      	adds	r3, r2, r6
 800cb28:	9307      	str	r3, [sp, #28]
 800cb2a:	2304      	movs	r3, #4
 800cb2c:	9305      	str	r3, [sp, #20]
 800cb2e:	002b      	movs	r3, r5
 800cb30:	9904      	ldr	r1, [sp, #16]
 800cb32:	3315      	adds	r3, #21
 800cb34:	9200      	str	r2, [sp, #0]
 800cb36:	4299      	cmp	r1, r3
 800cb38:	d305      	bcc.n	800cb46 <__multiply+0x8a>
 800cb3a:	1b4b      	subs	r3, r1, r5
 800cb3c:	3b15      	subs	r3, #21
 800cb3e:	089b      	lsrs	r3, r3, #2
 800cb40:	3301      	adds	r3, #1
 800cb42:	009b      	lsls	r3, r3, #2
 800cb44:	9305      	str	r3, [sp, #20]
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	9a00      	ldr	r2, [sp, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d311      	bcc.n	800cb72 <__multiply+0xb6>
 800cb4e:	9b02      	ldr	r3, [sp, #8]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	dd06      	ble.n	800cb62 <__multiply+0xa6>
 800cb54:	9b03      	ldr	r3, [sp, #12]
 800cb56:	3b04      	subs	r3, #4
 800cb58:	9303      	str	r3, [sp, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d053      	beq.n	800cc0a <__multiply+0x14e>
 800cb62:	9b01      	ldr	r3, [sp, #4]
 800cb64:	9a02      	ldr	r2, [sp, #8]
 800cb66:	0018      	movs	r0, r3
 800cb68:	611a      	str	r2, [r3, #16]
 800cb6a:	b009      	add	sp, #36	; 0x24
 800cb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb6e:	c304      	stmia	r3!, {r2}
 800cb70:	e7cd      	b.n	800cb0e <__multiply+0x52>
 800cb72:	9b00      	ldr	r3, [sp, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	b298      	uxth	r0, r3
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d01b      	beq.n	800cbb4 <__multiply+0xf8>
 800cb7c:	4667      	mov	r7, ip
 800cb7e:	2400      	movs	r4, #0
 800cb80:	9e06      	ldr	r6, [sp, #24]
 800cb82:	ce02      	ldmia	r6!, {r1}
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	b28b      	uxth	r3, r1
 800cb88:	4343      	muls	r3, r0
 800cb8a:	b292      	uxth	r2, r2
 800cb8c:	189b      	adds	r3, r3, r2
 800cb8e:	191b      	adds	r3, r3, r4
 800cb90:	0c0c      	lsrs	r4, r1, #16
 800cb92:	4344      	muls	r4, r0
 800cb94:	683a      	ldr	r2, [r7, #0]
 800cb96:	0c11      	lsrs	r1, r2, #16
 800cb98:	1861      	adds	r1, r4, r1
 800cb9a:	0c1c      	lsrs	r4, r3, #16
 800cb9c:	1909      	adds	r1, r1, r4
 800cb9e:	0c0c      	lsrs	r4, r1, #16
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	0409      	lsls	r1, r1, #16
 800cba4:	430b      	orrs	r3, r1
 800cba6:	c708      	stmia	r7!, {r3}
 800cba8:	9b04      	ldr	r3, [sp, #16]
 800cbaa:	42b3      	cmp	r3, r6
 800cbac:	d8e9      	bhi.n	800cb82 <__multiply+0xc6>
 800cbae:	4663      	mov	r3, ip
 800cbb0:	9a05      	ldr	r2, [sp, #20]
 800cbb2:	509c      	str	r4, [r3, r2]
 800cbb4:	9b00      	ldr	r3, [sp, #0]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	0c1e      	lsrs	r6, r3, #16
 800cbba:	d020      	beq.n	800cbfe <__multiply+0x142>
 800cbbc:	4663      	mov	r3, ip
 800cbbe:	002c      	movs	r4, r5
 800cbc0:	4660      	mov	r0, ip
 800cbc2:	2700      	movs	r7, #0
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	3414      	adds	r4, #20
 800cbc8:	6822      	ldr	r2, [r4, #0]
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	b291      	uxth	r1, r2
 800cbce:	4371      	muls	r1, r6
 800cbd0:	6802      	ldr	r2, [r0, #0]
 800cbd2:	0c12      	lsrs	r2, r2, #16
 800cbd4:	1889      	adds	r1, r1, r2
 800cbd6:	19cf      	adds	r7, r1, r7
 800cbd8:	0439      	lsls	r1, r7, #16
 800cbda:	430b      	orrs	r3, r1
 800cbdc:	6003      	str	r3, [r0, #0]
 800cbde:	cc02      	ldmia	r4!, {r1}
 800cbe0:	6843      	ldr	r3, [r0, #4]
 800cbe2:	0c09      	lsrs	r1, r1, #16
 800cbe4:	4371      	muls	r1, r6
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	0c3f      	lsrs	r7, r7, #16
 800cbea:	18cb      	adds	r3, r1, r3
 800cbec:	9a04      	ldr	r2, [sp, #16]
 800cbee:	19db      	adds	r3, r3, r7
 800cbf0:	0c1f      	lsrs	r7, r3, #16
 800cbf2:	3004      	adds	r0, #4
 800cbf4:	42a2      	cmp	r2, r4
 800cbf6:	d8e7      	bhi.n	800cbc8 <__multiply+0x10c>
 800cbf8:	4662      	mov	r2, ip
 800cbfa:	9905      	ldr	r1, [sp, #20]
 800cbfc:	5053      	str	r3, [r2, r1]
 800cbfe:	9b00      	ldr	r3, [sp, #0]
 800cc00:	3304      	adds	r3, #4
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	2304      	movs	r3, #4
 800cc06:	449c      	add	ip, r3
 800cc08:	e79d      	b.n	800cb46 <__multiply+0x8a>
 800cc0a:	9b02      	ldr	r3, [sp, #8]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	9302      	str	r3, [sp, #8]
 800cc10:	e79d      	b.n	800cb4e <__multiply+0x92>
 800cc12:	46c0      	nop			; (mov r8, r8)
 800cc14:	0800e1eb 	.word	0x0800e1eb
 800cc18:	0800e25c 	.word	0x0800e25c

0800cc1c <__pow5mult>:
 800cc1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc1e:	2303      	movs	r3, #3
 800cc20:	0015      	movs	r5, r2
 800cc22:	0007      	movs	r7, r0
 800cc24:	000e      	movs	r6, r1
 800cc26:	401a      	ands	r2, r3
 800cc28:	421d      	tst	r5, r3
 800cc2a:	d008      	beq.n	800cc3e <__pow5mult+0x22>
 800cc2c:	4925      	ldr	r1, [pc, #148]	; (800ccc4 <__pow5mult+0xa8>)
 800cc2e:	3a01      	subs	r2, #1
 800cc30:	0092      	lsls	r2, r2, #2
 800cc32:	5852      	ldr	r2, [r2, r1]
 800cc34:	2300      	movs	r3, #0
 800cc36:	0031      	movs	r1, r6
 800cc38:	f7ff fe9e 	bl	800c978 <__multadd>
 800cc3c:	0006      	movs	r6, r0
 800cc3e:	10ad      	asrs	r5, r5, #2
 800cc40:	d03d      	beq.n	800ccbe <__pow5mult+0xa2>
 800cc42:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cc44:	2c00      	cmp	r4, #0
 800cc46:	d10f      	bne.n	800cc68 <__pow5mult+0x4c>
 800cc48:	2010      	movs	r0, #16
 800cc4a:	f7ff fe17 	bl	800c87c <malloc>
 800cc4e:	1e02      	subs	r2, r0, #0
 800cc50:	6278      	str	r0, [r7, #36]	; 0x24
 800cc52:	d105      	bne.n	800cc60 <__pow5mult+0x44>
 800cc54:	21d7      	movs	r1, #215	; 0xd7
 800cc56:	4b1c      	ldr	r3, [pc, #112]	; (800ccc8 <__pow5mult+0xac>)
 800cc58:	481c      	ldr	r0, [pc, #112]	; (800cccc <__pow5mult+0xb0>)
 800cc5a:	0049      	lsls	r1, r1, #1
 800cc5c:	f000 fca2 	bl	800d5a4 <__assert_func>
 800cc60:	6044      	str	r4, [r0, #4]
 800cc62:	6084      	str	r4, [r0, #8]
 800cc64:	6004      	str	r4, [r0, #0]
 800cc66:	60c4      	str	r4, [r0, #12]
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	689c      	ldr	r4, [r3, #8]
 800cc6c:	9301      	str	r3, [sp, #4]
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d108      	bne.n	800cc84 <__pow5mult+0x68>
 800cc72:	0038      	movs	r0, r7
 800cc74:	4916      	ldr	r1, [pc, #88]	; (800ccd0 <__pow5mult+0xb4>)
 800cc76:	f7ff ff0b 	bl	800ca90 <__i2b>
 800cc7a:	9b01      	ldr	r3, [sp, #4]
 800cc7c:	0004      	movs	r4, r0
 800cc7e:	6098      	str	r0, [r3, #8]
 800cc80:	2300      	movs	r3, #0
 800cc82:	6003      	str	r3, [r0, #0]
 800cc84:	2301      	movs	r3, #1
 800cc86:	421d      	tst	r5, r3
 800cc88:	d00a      	beq.n	800cca0 <__pow5mult+0x84>
 800cc8a:	0031      	movs	r1, r6
 800cc8c:	0022      	movs	r2, r4
 800cc8e:	0038      	movs	r0, r7
 800cc90:	f7ff ff14 	bl	800cabc <__multiply>
 800cc94:	0031      	movs	r1, r6
 800cc96:	9001      	str	r0, [sp, #4]
 800cc98:	0038      	movs	r0, r7
 800cc9a:	f7ff fe49 	bl	800c930 <_Bfree>
 800cc9e:	9e01      	ldr	r6, [sp, #4]
 800cca0:	106d      	asrs	r5, r5, #1
 800cca2:	d00c      	beq.n	800ccbe <__pow5mult+0xa2>
 800cca4:	6820      	ldr	r0, [r4, #0]
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d107      	bne.n	800ccba <__pow5mult+0x9e>
 800ccaa:	0022      	movs	r2, r4
 800ccac:	0021      	movs	r1, r4
 800ccae:	0038      	movs	r0, r7
 800ccb0:	f7ff ff04 	bl	800cabc <__multiply>
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	6020      	str	r0, [r4, #0]
 800ccb8:	6003      	str	r3, [r0, #0]
 800ccba:	0004      	movs	r4, r0
 800ccbc:	e7e2      	b.n	800cc84 <__pow5mult+0x68>
 800ccbe:	0030      	movs	r0, r6
 800ccc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccc2:	46c0      	nop			; (mov r8, r8)
 800ccc4:	0800e3a8 	.word	0x0800e3a8
 800ccc8:	0800e179 	.word	0x0800e179
 800cccc:	0800e25c 	.word	0x0800e25c
 800ccd0:	00000271 	.word	0x00000271

0800ccd4 <__lshift>:
 800ccd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccd6:	000c      	movs	r4, r1
 800ccd8:	0017      	movs	r7, r2
 800ccda:	6923      	ldr	r3, [r4, #16]
 800ccdc:	1155      	asrs	r5, r2, #5
 800ccde:	b087      	sub	sp, #28
 800cce0:	18eb      	adds	r3, r5, r3
 800cce2:	9302      	str	r3, [sp, #8]
 800cce4:	3301      	adds	r3, #1
 800cce6:	9301      	str	r3, [sp, #4]
 800cce8:	6849      	ldr	r1, [r1, #4]
 800ccea:	68a3      	ldr	r3, [r4, #8]
 800ccec:	9004      	str	r0, [sp, #16]
 800ccee:	9a01      	ldr	r2, [sp, #4]
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	db10      	blt.n	800cd16 <__lshift+0x42>
 800ccf4:	9804      	ldr	r0, [sp, #16]
 800ccf6:	f7ff fdd7 	bl	800c8a8 <_Balloc>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	0002      	movs	r2, r0
 800ccfe:	0006      	movs	r6, r0
 800cd00:	0019      	movs	r1, r3
 800cd02:	3214      	adds	r2, #20
 800cd04:	4298      	cmp	r0, r3
 800cd06:	d10c      	bne.n	800cd22 <__lshift+0x4e>
 800cd08:	21da      	movs	r1, #218	; 0xda
 800cd0a:	0002      	movs	r2, r0
 800cd0c:	4b26      	ldr	r3, [pc, #152]	; (800cda8 <__lshift+0xd4>)
 800cd0e:	4827      	ldr	r0, [pc, #156]	; (800cdac <__lshift+0xd8>)
 800cd10:	31ff      	adds	r1, #255	; 0xff
 800cd12:	f000 fc47 	bl	800d5a4 <__assert_func>
 800cd16:	3101      	adds	r1, #1
 800cd18:	005b      	lsls	r3, r3, #1
 800cd1a:	e7e8      	b.n	800ccee <__lshift+0x1a>
 800cd1c:	0098      	lsls	r0, r3, #2
 800cd1e:	5011      	str	r1, [r2, r0]
 800cd20:	3301      	adds	r3, #1
 800cd22:	42ab      	cmp	r3, r5
 800cd24:	dbfa      	blt.n	800cd1c <__lshift+0x48>
 800cd26:	43eb      	mvns	r3, r5
 800cd28:	17db      	asrs	r3, r3, #31
 800cd2a:	401d      	ands	r5, r3
 800cd2c:	211f      	movs	r1, #31
 800cd2e:	0023      	movs	r3, r4
 800cd30:	0038      	movs	r0, r7
 800cd32:	00ad      	lsls	r5, r5, #2
 800cd34:	1955      	adds	r5, r2, r5
 800cd36:	6922      	ldr	r2, [r4, #16]
 800cd38:	3314      	adds	r3, #20
 800cd3a:	0092      	lsls	r2, r2, #2
 800cd3c:	4008      	ands	r0, r1
 800cd3e:	4684      	mov	ip, r0
 800cd40:	189a      	adds	r2, r3, r2
 800cd42:	420f      	tst	r7, r1
 800cd44:	d02a      	beq.n	800cd9c <__lshift+0xc8>
 800cd46:	3101      	adds	r1, #1
 800cd48:	1a09      	subs	r1, r1, r0
 800cd4a:	9105      	str	r1, [sp, #20]
 800cd4c:	2100      	movs	r1, #0
 800cd4e:	9503      	str	r5, [sp, #12]
 800cd50:	4667      	mov	r7, ip
 800cd52:	6818      	ldr	r0, [r3, #0]
 800cd54:	40b8      	lsls	r0, r7
 800cd56:	4301      	orrs	r1, r0
 800cd58:	9803      	ldr	r0, [sp, #12]
 800cd5a:	c002      	stmia	r0!, {r1}
 800cd5c:	cb02      	ldmia	r3!, {r1}
 800cd5e:	9003      	str	r0, [sp, #12]
 800cd60:	9805      	ldr	r0, [sp, #20]
 800cd62:	40c1      	lsrs	r1, r0
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d8f3      	bhi.n	800cd50 <__lshift+0x7c>
 800cd68:	0020      	movs	r0, r4
 800cd6a:	3015      	adds	r0, #21
 800cd6c:	2304      	movs	r3, #4
 800cd6e:	4282      	cmp	r2, r0
 800cd70:	d304      	bcc.n	800cd7c <__lshift+0xa8>
 800cd72:	1b13      	subs	r3, r2, r4
 800cd74:	3b15      	subs	r3, #21
 800cd76:	089b      	lsrs	r3, r3, #2
 800cd78:	3301      	adds	r3, #1
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	50e9      	str	r1, [r5, r3]
 800cd7e:	2900      	cmp	r1, #0
 800cd80:	d002      	beq.n	800cd88 <__lshift+0xb4>
 800cd82:	9b02      	ldr	r3, [sp, #8]
 800cd84:	3302      	adds	r3, #2
 800cd86:	9301      	str	r3, [sp, #4]
 800cd88:	9b01      	ldr	r3, [sp, #4]
 800cd8a:	9804      	ldr	r0, [sp, #16]
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	0021      	movs	r1, r4
 800cd90:	6133      	str	r3, [r6, #16]
 800cd92:	f7ff fdcd 	bl	800c930 <_Bfree>
 800cd96:	0030      	movs	r0, r6
 800cd98:	b007      	add	sp, #28
 800cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd9c:	cb02      	ldmia	r3!, {r1}
 800cd9e:	c502      	stmia	r5!, {r1}
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d8fb      	bhi.n	800cd9c <__lshift+0xc8>
 800cda4:	e7f0      	b.n	800cd88 <__lshift+0xb4>
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	0800e1eb 	.word	0x0800e1eb
 800cdac:	0800e25c 	.word	0x0800e25c

0800cdb0 <__mcmp>:
 800cdb0:	6902      	ldr	r2, [r0, #16]
 800cdb2:	690b      	ldr	r3, [r1, #16]
 800cdb4:	b530      	push	{r4, r5, lr}
 800cdb6:	0004      	movs	r4, r0
 800cdb8:	1ad0      	subs	r0, r2, r3
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d10d      	bne.n	800cdda <__mcmp+0x2a>
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	3414      	adds	r4, #20
 800cdc2:	3114      	adds	r1, #20
 800cdc4:	18e2      	adds	r2, r4, r3
 800cdc6:	18c9      	adds	r1, r1, r3
 800cdc8:	3a04      	subs	r2, #4
 800cdca:	3904      	subs	r1, #4
 800cdcc:	6815      	ldr	r5, [r2, #0]
 800cdce:	680b      	ldr	r3, [r1, #0]
 800cdd0:	429d      	cmp	r5, r3
 800cdd2:	d003      	beq.n	800cddc <__mcmp+0x2c>
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	429d      	cmp	r5, r3
 800cdd8:	d303      	bcc.n	800cde2 <__mcmp+0x32>
 800cdda:	bd30      	pop	{r4, r5, pc}
 800cddc:	4294      	cmp	r4, r2
 800cdde:	d3f3      	bcc.n	800cdc8 <__mcmp+0x18>
 800cde0:	e7fb      	b.n	800cdda <__mcmp+0x2a>
 800cde2:	4240      	negs	r0, r0
 800cde4:	e7f9      	b.n	800cdda <__mcmp+0x2a>
	...

0800cde8 <__mdiff>:
 800cde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdea:	000e      	movs	r6, r1
 800cdec:	0007      	movs	r7, r0
 800cdee:	0011      	movs	r1, r2
 800cdf0:	0030      	movs	r0, r6
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	0014      	movs	r4, r2
 800cdf6:	f7ff ffdb 	bl	800cdb0 <__mcmp>
 800cdfa:	1e05      	subs	r5, r0, #0
 800cdfc:	d110      	bne.n	800ce20 <__mdiff+0x38>
 800cdfe:	0001      	movs	r1, r0
 800ce00:	0038      	movs	r0, r7
 800ce02:	f7ff fd51 	bl	800c8a8 <_Balloc>
 800ce06:	1e02      	subs	r2, r0, #0
 800ce08:	d104      	bne.n	800ce14 <__mdiff+0x2c>
 800ce0a:	4b40      	ldr	r3, [pc, #256]	; (800cf0c <__mdiff+0x124>)
 800ce0c:	4940      	ldr	r1, [pc, #256]	; (800cf10 <__mdiff+0x128>)
 800ce0e:	4841      	ldr	r0, [pc, #260]	; (800cf14 <__mdiff+0x12c>)
 800ce10:	f000 fbc8 	bl	800d5a4 <__assert_func>
 800ce14:	2301      	movs	r3, #1
 800ce16:	6145      	str	r5, [r0, #20]
 800ce18:	6103      	str	r3, [r0, #16]
 800ce1a:	0010      	movs	r0, r2
 800ce1c:	b007      	add	sp, #28
 800ce1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce20:	2301      	movs	r3, #1
 800ce22:	9301      	str	r3, [sp, #4]
 800ce24:	2800      	cmp	r0, #0
 800ce26:	db04      	blt.n	800ce32 <__mdiff+0x4a>
 800ce28:	0023      	movs	r3, r4
 800ce2a:	0034      	movs	r4, r6
 800ce2c:	001e      	movs	r6, r3
 800ce2e:	2300      	movs	r3, #0
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	0038      	movs	r0, r7
 800ce34:	6861      	ldr	r1, [r4, #4]
 800ce36:	f7ff fd37 	bl	800c8a8 <_Balloc>
 800ce3a:	1e02      	subs	r2, r0, #0
 800ce3c:	d103      	bne.n	800ce46 <__mdiff+0x5e>
 800ce3e:	2190      	movs	r1, #144	; 0x90
 800ce40:	4b32      	ldr	r3, [pc, #200]	; (800cf0c <__mdiff+0x124>)
 800ce42:	0089      	lsls	r1, r1, #2
 800ce44:	e7e3      	b.n	800ce0e <__mdiff+0x26>
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	2700      	movs	r7, #0
 800ce4a:	60c3      	str	r3, [r0, #12]
 800ce4c:	6920      	ldr	r0, [r4, #16]
 800ce4e:	3414      	adds	r4, #20
 800ce50:	9401      	str	r4, [sp, #4]
 800ce52:	9b01      	ldr	r3, [sp, #4]
 800ce54:	0084      	lsls	r4, r0, #2
 800ce56:	191b      	adds	r3, r3, r4
 800ce58:	0034      	movs	r4, r6
 800ce5a:	9302      	str	r3, [sp, #8]
 800ce5c:	6933      	ldr	r3, [r6, #16]
 800ce5e:	3414      	adds	r4, #20
 800ce60:	0099      	lsls	r1, r3, #2
 800ce62:	1863      	adds	r3, r4, r1
 800ce64:	9303      	str	r3, [sp, #12]
 800ce66:	0013      	movs	r3, r2
 800ce68:	3314      	adds	r3, #20
 800ce6a:	469c      	mov	ip, r3
 800ce6c:	9305      	str	r3, [sp, #20]
 800ce6e:	9b01      	ldr	r3, [sp, #4]
 800ce70:	9304      	str	r3, [sp, #16]
 800ce72:	9b04      	ldr	r3, [sp, #16]
 800ce74:	cc02      	ldmia	r4!, {r1}
 800ce76:	cb20      	ldmia	r3!, {r5}
 800ce78:	9304      	str	r3, [sp, #16]
 800ce7a:	b2ab      	uxth	r3, r5
 800ce7c:	19df      	adds	r7, r3, r7
 800ce7e:	b28b      	uxth	r3, r1
 800ce80:	1afb      	subs	r3, r7, r3
 800ce82:	0c09      	lsrs	r1, r1, #16
 800ce84:	0c2d      	lsrs	r5, r5, #16
 800ce86:	1a6d      	subs	r5, r5, r1
 800ce88:	1419      	asrs	r1, r3, #16
 800ce8a:	186d      	adds	r5, r5, r1
 800ce8c:	4661      	mov	r1, ip
 800ce8e:	142f      	asrs	r7, r5, #16
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	042d      	lsls	r5, r5, #16
 800ce94:	432b      	orrs	r3, r5
 800ce96:	c108      	stmia	r1!, {r3}
 800ce98:	9b03      	ldr	r3, [sp, #12]
 800ce9a:	468c      	mov	ip, r1
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	d8e8      	bhi.n	800ce72 <__mdiff+0x8a>
 800cea0:	0031      	movs	r1, r6
 800cea2:	9c03      	ldr	r4, [sp, #12]
 800cea4:	3115      	adds	r1, #21
 800cea6:	2304      	movs	r3, #4
 800cea8:	428c      	cmp	r4, r1
 800ceaa:	d304      	bcc.n	800ceb6 <__mdiff+0xce>
 800ceac:	1ba3      	subs	r3, r4, r6
 800ceae:	3b15      	subs	r3, #21
 800ceb0:	089b      	lsrs	r3, r3, #2
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	9901      	ldr	r1, [sp, #4]
 800ceb8:	18cc      	adds	r4, r1, r3
 800ceba:	9905      	ldr	r1, [sp, #20]
 800cebc:	0026      	movs	r6, r4
 800cebe:	18cb      	adds	r3, r1, r3
 800cec0:	469c      	mov	ip, r3
 800cec2:	9902      	ldr	r1, [sp, #8]
 800cec4:	428e      	cmp	r6, r1
 800cec6:	d310      	bcc.n	800ceea <__mdiff+0x102>
 800cec8:	9e02      	ldr	r6, [sp, #8]
 800ceca:	1ee1      	subs	r1, r4, #3
 800cecc:	2500      	movs	r5, #0
 800cece:	428e      	cmp	r6, r1
 800ced0:	d304      	bcc.n	800cedc <__mdiff+0xf4>
 800ced2:	0031      	movs	r1, r6
 800ced4:	3103      	adds	r1, #3
 800ced6:	1b0c      	subs	r4, r1, r4
 800ced8:	08a4      	lsrs	r4, r4, #2
 800ceda:	00a5      	lsls	r5, r4, #2
 800cedc:	195b      	adds	r3, r3, r5
 800cede:	3b04      	subs	r3, #4
 800cee0:	6819      	ldr	r1, [r3, #0]
 800cee2:	2900      	cmp	r1, #0
 800cee4:	d00f      	beq.n	800cf06 <__mdiff+0x11e>
 800cee6:	6110      	str	r0, [r2, #16]
 800cee8:	e797      	b.n	800ce1a <__mdiff+0x32>
 800ceea:	ce02      	ldmia	r6!, {r1}
 800ceec:	b28d      	uxth	r5, r1
 800ceee:	19ed      	adds	r5, r5, r7
 800cef0:	0c0f      	lsrs	r7, r1, #16
 800cef2:	1429      	asrs	r1, r5, #16
 800cef4:	1879      	adds	r1, r7, r1
 800cef6:	140f      	asrs	r7, r1, #16
 800cef8:	b2ad      	uxth	r5, r5
 800cefa:	0409      	lsls	r1, r1, #16
 800cefc:	430d      	orrs	r5, r1
 800cefe:	4661      	mov	r1, ip
 800cf00:	c120      	stmia	r1!, {r5}
 800cf02:	468c      	mov	ip, r1
 800cf04:	e7dd      	b.n	800cec2 <__mdiff+0xda>
 800cf06:	3801      	subs	r0, #1
 800cf08:	e7e9      	b.n	800cede <__mdiff+0xf6>
 800cf0a:	46c0      	nop			; (mov r8, r8)
 800cf0c:	0800e1eb 	.word	0x0800e1eb
 800cf10:	00000232 	.word	0x00000232
 800cf14:	0800e25c 	.word	0x0800e25c

0800cf18 <__d2b>:
 800cf18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	0014      	movs	r4, r2
 800cf1e:	001e      	movs	r6, r3
 800cf20:	9f08      	ldr	r7, [sp, #32]
 800cf22:	f7ff fcc1 	bl	800c8a8 <_Balloc>
 800cf26:	1e05      	subs	r5, r0, #0
 800cf28:	d105      	bne.n	800cf36 <__d2b+0x1e>
 800cf2a:	0002      	movs	r2, r0
 800cf2c:	4b26      	ldr	r3, [pc, #152]	; (800cfc8 <__d2b+0xb0>)
 800cf2e:	4927      	ldr	r1, [pc, #156]	; (800cfcc <__d2b+0xb4>)
 800cf30:	4827      	ldr	r0, [pc, #156]	; (800cfd0 <__d2b+0xb8>)
 800cf32:	f000 fb37 	bl	800d5a4 <__assert_func>
 800cf36:	0333      	lsls	r3, r6, #12
 800cf38:	0076      	lsls	r6, r6, #1
 800cf3a:	0b1b      	lsrs	r3, r3, #12
 800cf3c:	0d76      	lsrs	r6, r6, #21
 800cf3e:	d124      	bne.n	800cf8a <__d2b+0x72>
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	2c00      	cmp	r4, #0
 800cf44:	d027      	beq.n	800cf96 <__d2b+0x7e>
 800cf46:	4668      	mov	r0, sp
 800cf48:	9400      	str	r4, [sp, #0]
 800cf4a:	f7ff fd73 	bl	800ca34 <__lo0bits>
 800cf4e:	9c00      	ldr	r4, [sp, #0]
 800cf50:	2800      	cmp	r0, #0
 800cf52:	d01e      	beq.n	800cf92 <__d2b+0x7a>
 800cf54:	9b01      	ldr	r3, [sp, #4]
 800cf56:	2120      	movs	r1, #32
 800cf58:	001a      	movs	r2, r3
 800cf5a:	1a09      	subs	r1, r1, r0
 800cf5c:	408a      	lsls	r2, r1
 800cf5e:	40c3      	lsrs	r3, r0
 800cf60:	4322      	orrs	r2, r4
 800cf62:	616a      	str	r2, [r5, #20]
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	9c01      	ldr	r4, [sp, #4]
 800cf68:	61ac      	str	r4, [r5, #24]
 800cf6a:	1e63      	subs	r3, r4, #1
 800cf6c:	419c      	sbcs	r4, r3
 800cf6e:	3401      	adds	r4, #1
 800cf70:	612c      	str	r4, [r5, #16]
 800cf72:	2e00      	cmp	r6, #0
 800cf74:	d018      	beq.n	800cfa8 <__d2b+0x90>
 800cf76:	4b17      	ldr	r3, [pc, #92]	; (800cfd4 <__d2b+0xbc>)
 800cf78:	18f6      	adds	r6, r6, r3
 800cf7a:	2335      	movs	r3, #53	; 0x35
 800cf7c:	1836      	adds	r6, r6, r0
 800cf7e:	1a18      	subs	r0, r3, r0
 800cf80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf82:	603e      	str	r6, [r7, #0]
 800cf84:	6018      	str	r0, [r3, #0]
 800cf86:	0028      	movs	r0, r5
 800cf88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf8a:	2280      	movs	r2, #128	; 0x80
 800cf8c:	0352      	lsls	r2, r2, #13
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	e7d6      	b.n	800cf40 <__d2b+0x28>
 800cf92:	616c      	str	r4, [r5, #20]
 800cf94:	e7e7      	b.n	800cf66 <__d2b+0x4e>
 800cf96:	a801      	add	r0, sp, #4
 800cf98:	f7ff fd4c 	bl	800ca34 <__lo0bits>
 800cf9c:	2401      	movs	r4, #1
 800cf9e:	9b01      	ldr	r3, [sp, #4]
 800cfa0:	612c      	str	r4, [r5, #16]
 800cfa2:	616b      	str	r3, [r5, #20]
 800cfa4:	3020      	adds	r0, #32
 800cfa6:	e7e4      	b.n	800cf72 <__d2b+0x5a>
 800cfa8:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <__d2b+0xc0>)
 800cfaa:	18c0      	adds	r0, r0, r3
 800cfac:	4b0b      	ldr	r3, [pc, #44]	; (800cfdc <__d2b+0xc4>)
 800cfae:	6038      	str	r0, [r7, #0]
 800cfb0:	18e3      	adds	r3, r4, r3
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	18eb      	adds	r3, r5, r3
 800cfb6:	6958      	ldr	r0, [r3, #20]
 800cfb8:	f7ff fd22 	bl	800ca00 <__hi0bits>
 800cfbc:	0164      	lsls	r4, r4, #5
 800cfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfc0:	1a24      	subs	r4, r4, r0
 800cfc2:	601c      	str	r4, [r3, #0]
 800cfc4:	e7df      	b.n	800cf86 <__d2b+0x6e>
 800cfc6:	46c0      	nop			; (mov r8, r8)
 800cfc8:	0800e1eb 	.word	0x0800e1eb
 800cfcc:	0000030a 	.word	0x0000030a
 800cfd0:	0800e25c 	.word	0x0800e25c
 800cfd4:	fffffbcd 	.word	0xfffffbcd
 800cfd8:	fffffbce 	.word	0xfffffbce
 800cfdc:	3fffffff 	.word	0x3fffffff

0800cfe0 <_calloc_r>:
 800cfe0:	b570      	push	{r4, r5, r6, lr}
 800cfe2:	0c13      	lsrs	r3, r2, #16
 800cfe4:	0c0d      	lsrs	r5, r1, #16
 800cfe6:	d11e      	bne.n	800d026 <_calloc_r+0x46>
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10c      	bne.n	800d006 <_calloc_r+0x26>
 800cfec:	b289      	uxth	r1, r1
 800cfee:	b294      	uxth	r4, r2
 800cff0:	434c      	muls	r4, r1
 800cff2:	0021      	movs	r1, r4
 800cff4:	f000 f88c 	bl	800d110 <_malloc_r>
 800cff8:	1e05      	subs	r5, r0, #0
 800cffa:	d01b      	beq.n	800d034 <_calloc_r+0x54>
 800cffc:	0022      	movs	r2, r4
 800cffe:	2100      	movs	r1, #0
 800d000:	f7fd fd79 	bl	800aaf6 <memset>
 800d004:	e016      	b.n	800d034 <_calloc_r+0x54>
 800d006:	1c1d      	adds	r5, r3, #0
 800d008:	1c0b      	adds	r3, r1, #0
 800d00a:	b292      	uxth	r2, r2
 800d00c:	b289      	uxth	r1, r1
 800d00e:	b29c      	uxth	r4, r3
 800d010:	4351      	muls	r1, r2
 800d012:	b2ab      	uxth	r3, r5
 800d014:	4363      	muls	r3, r4
 800d016:	0c0c      	lsrs	r4, r1, #16
 800d018:	191c      	adds	r4, r3, r4
 800d01a:	0c22      	lsrs	r2, r4, #16
 800d01c:	d107      	bne.n	800d02e <_calloc_r+0x4e>
 800d01e:	0424      	lsls	r4, r4, #16
 800d020:	b289      	uxth	r1, r1
 800d022:	430c      	orrs	r4, r1
 800d024:	e7e5      	b.n	800cff2 <_calloc_r+0x12>
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <_calloc_r+0x4e>
 800d02a:	1c13      	adds	r3, r2, #0
 800d02c:	e7ed      	b.n	800d00a <_calloc_r+0x2a>
 800d02e:	230c      	movs	r3, #12
 800d030:	2500      	movs	r5, #0
 800d032:	6003      	str	r3, [r0, #0]
 800d034:	0028      	movs	r0, r5
 800d036:	bd70      	pop	{r4, r5, r6, pc}

0800d038 <_free_r>:
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	0005      	movs	r5, r0
 800d03c:	2900      	cmp	r1, #0
 800d03e:	d010      	beq.n	800d062 <_free_r+0x2a>
 800d040:	1f0c      	subs	r4, r1, #4
 800d042:	6823      	ldr	r3, [r4, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	da00      	bge.n	800d04a <_free_r+0x12>
 800d048:	18e4      	adds	r4, r4, r3
 800d04a:	0028      	movs	r0, r5
 800d04c:	f000 fb34 	bl	800d6b8 <__malloc_lock>
 800d050:	4a1d      	ldr	r2, [pc, #116]	; (800d0c8 <_free_r+0x90>)
 800d052:	6813      	ldr	r3, [r2, #0]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d105      	bne.n	800d064 <_free_r+0x2c>
 800d058:	6063      	str	r3, [r4, #4]
 800d05a:	6014      	str	r4, [r2, #0]
 800d05c:	0028      	movs	r0, r5
 800d05e:	f000 fb33 	bl	800d6c8 <__malloc_unlock>
 800d062:	bd70      	pop	{r4, r5, r6, pc}
 800d064:	42a3      	cmp	r3, r4
 800d066:	d908      	bls.n	800d07a <_free_r+0x42>
 800d068:	6821      	ldr	r1, [r4, #0]
 800d06a:	1860      	adds	r0, r4, r1
 800d06c:	4283      	cmp	r3, r0
 800d06e:	d1f3      	bne.n	800d058 <_free_r+0x20>
 800d070:	6818      	ldr	r0, [r3, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	1841      	adds	r1, r0, r1
 800d076:	6021      	str	r1, [r4, #0]
 800d078:	e7ee      	b.n	800d058 <_free_r+0x20>
 800d07a:	001a      	movs	r2, r3
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <_free_r+0x4e>
 800d082:	42a3      	cmp	r3, r4
 800d084:	d9f9      	bls.n	800d07a <_free_r+0x42>
 800d086:	6811      	ldr	r1, [r2, #0]
 800d088:	1850      	adds	r0, r2, r1
 800d08a:	42a0      	cmp	r0, r4
 800d08c:	d10b      	bne.n	800d0a6 <_free_r+0x6e>
 800d08e:	6820      	ldr	r0, [r4, #0]
 800d090:	1809      	adds	r1, r1, r0
 800d092:	1850      	adds	r0, r2, r1
 800d094:	6011      	str	r1, [r2, #0]
 800d096:	4283      	cmp	r3, r0
 800d098:	d1e0      	bne.n	800d05c <_free_r+0x24>
 800d09a:	6818      	ldr	r0, [r3, #0]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	1841      	adds	r1, r0, r1
 800d0a0:	6011      	str	r1, [r2, #0]
 800d0a2:	6053      	str	r3, [r2, #4]
 800d0a4:	e7da      	b.n	800d05c <_free_r+0x24>
 800d0a6:	42a0      	cmp	r0, r4
 800d0a8:	d902      	bls.n	800d0b0 <_free_r+0x78>
 800d0aa:	230c      	movs	r3, #12
 800d0ac:	602b      	str	r3, [r5, #0]
 800d0ae:	e7d5      	b.n	800d05c <_free_r+0x24>
 800d0b0:	6821      	ldr	r1, [r4, #0]
 800d0b2:	1860      	adds	r0, r4, r1
 800d0b4:	4283      	cmp	r3, r0
 800d0b6:	d103      	bne.n	800d0c0 <_free_r+0x88>
 800d0b8:	6818      	ldr	r0, [r3, #0]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	1841      	adds	r1, r0, r1
 800d0be:	6021      	str	r1, [r4, #0]
 800d0c0:	6063      	str	r3, [r4, #4]
 800d0c2:	6054      	str	r4, [r2, #4]
 800d0c4:	e7ca      	b.n	800d05c <_free_r+0x24>
 800d0c6:	46c0      	nop			; (mov r8, r8)
 800d0c8:	20001164 	.word	0x20001164

0800d0cc <sbrk_aligned>:
 800d0cc:	b570      	push	{r4, r5, r6, lr}
 800d0ce:	4e0f      	ldr	r6, [pc, #60]	; (800d10c <sbrk_aligned+0x40>)
 800d0d0:	000d      	movs	r5, r1
 800d0d2:	6831      	ldr	r1, [r6, #0]
 800d0d4:	0004      	movs	r4, r0
 800d0d6:	2900      	cmp	r1, #0
 800d0d8:	d102      	bne.n	800d0e0 <sbrk_aligned+0x14>
 800d0da:	f000 f9f1 	bl	800d4c0 <_sbrk_r>
 800d0de:	6030      	str	r0, [r6, #0]
 800d0e0:	0029      	movs	r1, r5
 800d0e2:	0020      	movs	r0, r4
 800d0e4:	f000 f9ec 	bl	800d4c0 <_sbrk_r>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d00a      	beq.n	800d102 <sbrk_aligned+0x36>
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	1cc5      	adds	r5, r0, #3
 800d0f0:	439d      	bics	r5, r3
 800d0f2:	42a8      	cmp	r0, r5
 800d0f4:	d007      	beq.n	800d106 <sbrk_aligned+0x3a>
 800d0f6:	1a29      	subs	r1, r5, r0
 800d0f8:	0020      	movs	r0, r4
 800d0fa:	f000 f9e1 	bl	800d4c0 <_sbrk_r>
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	d101      	bne.n	800d106 <sbrk_aligned+0x3a>
 800d102:	2501      	movs	r5, #1
 800d104:	426d      	negs	r5, r5
 800d106:	0028      	movs	r0, r5
 800d108:	bd70      	pop	{r4, r5, r6, pc}
 800d10a:	46c0      	nop			; (mov r8, r8)
 800d10c:	20001168 	.word	0x20001168

0800d110 <_malloc_r>:
 800d110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d112:	2203      	movs	r2, #3
 800d114:	1ccb      	adds	r3, r1, #3
 800d116:	4393      	bics	r3, r2
 800d118:	3308      	adds	r3, #8
 800d11a:	0006      	movs	r6, r0
 800d11c:	001f      	movs	r7, r3
 800d11e:	2b0c      	cmp	r3, #12
 800d120:	d232      	bcs.n	800d188 <_malloc_r+0x78>
 800d122:	270c      	movs	r7, #12
 800d124:	42b9      	cmp	r1, r7
 800d126:	d831      	bhi.n	800d18c <_malloc_r+0x7c>
 800d128:	0030      	movs	r0, r6
 800d12a:	f000 fac5 	bl	800d6b8 <__malloc_lock>
 800d12e:	4d32      	ldr	r5, [pc, #200]	; (800d1f8 <_malloc_r+0xe8>)
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	001c      	movs	r4, r3
 800d134:	2c00      	cmp	r4, #0
 800d136:	d12e      	bne.n	800d196 <_malloc_r+0x86>
 800d138:	0039      	movs	r1, r7
 800d13a:	0030      	movs	r0, r6
 800d13c:	f7ff ffc6 	bl	800d0cc <sbrk_aligned>
 800d140:	0004      	movs	r4, r0
 800d142:	1c43      	adds	r3, r0, #1
 800d144:	d11e      	bne.n	800d184 <_malloc_r+0x74>
 800d146:	682c      	ldr	r4, [r5, #0]
 800d148:	0025      	movs	r5, r4
 800d14a:	2d00      	cmp	r5, #0
 800d14c:	d14a      	bne.n	800d1e4 <_malloc_r+0xd4>
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	0029      	movs	r1, r5
 800d152:	18e3      	adds	r3, r4, r3
 800d154:	0030      	movs	r0, r6
 800d156:	9301      	str	r3, [sp, #4]
 800d158:	f000 f9b2 	bl	800d4c0 <_sbrk_r>
 800d15c:	9b01      	ldr	r3, [sp, #4]
 800d15e:	4283      	cmp	r3, r0
 800d160:	d143      	bne.n	800d1ea <_malloc_r+0xda>
 800d162:	6823      	ldr	r3, [r4, #0]
 800d164:	3703      	adds	r7, #3
 800d166:	1aff      	subs	r7, r7, r3
 800d168:	2303      	movs	r3, #3
 800d16a:	439f      	bics	r7, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	2f0c      	cmp	r7, #12
 800d170:	d200      	bcs.n	800d174 <_malloc_r+0x64>
 800d172:	270c      	movs	r7, #12
 800d174:	0039      	movs	r1, r7
 800d176:	0030      	movs	r0, r6
 800d178:	f7ff ffa8 	bl	800d0cc <sbrk_aligned>
 800d17c:	1c43      	adds	r3, r0, #1
 800d17e:	d034      	beq.n	800d1ea <_malloc_r+0xda>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	19df      	adds	r7, r3, r7
 800d184:	6027      	str	r7, [r4, #0]
 800d186:	e013      	b.n	800d1b0 <_malloc_r+0xa0>
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dacb      	bge.n	800d124 <_malloc_r+0x14>
 800d18c:	230c      	movs	r3, #12
 800d18e:	2500      	movs	r5, #0
 800d190:	6033      	str	r3, [r6, #0]
 800d192:	0028      	movs	r0, r5
 800d194:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d196:	6822      	ldr	r2, [r4, #0]
 800d198:	1bd1      	subs	r1, r2, r7
 800d19a:	d420      	bmi.n	800d1de <_malloc_r+0xce>
 800d19c:	290b      	cmp	r1, #11
 800d19e:	d917      	bls.n	800d1d0 <_malloc_r+0xc0>
 800d1a0:	19e2      	adds	r2, r4, r7
 800d1a2:	6027      	str	r7, [r4, #0]
 800d1a4:	42a3      	cmp	r3, r4
 800d1a6:	d111      	bne.n	800d1cc <_malloc_r+0xbc>
 800d1a8:	602a      	str	r2, [r5, #0]
 800d1aa:	6863      	ldr	r3, [r4, #4]
 800d1ac:	6011      	str	r1, [r2, #0]
 800d1ae:	6053      	str	r3, [r2, #4]
 800d1b0:	0030      	movs	r0, r6
 800d1b2:	0025      	movs	r5, r4
 800d1b4:	f000 fa88 	bl	800d6c8 <__malloc_unlock>
 800d1b8:	2207      	movs	r2, #7
 800d1ba:	350b      	adds	r5, #11
 800d1bc:	1d23      	adds	r3, r4, #4
 800d1be:	4395      	bics	r5, r2
 800d1c0:	1aea      	subs	r2, r5, r3
 800d1c2:	429d      	cmp	r5, r3
 800d1c4:	d0e5      	beq.n	800d192 <_malloc_r+0x82>
 800d1c6:	1b5b      	subs	r3, r3, r5
 800d1c8:	50a3      	str	r3, [r4, r2]
 800d1ca:	e7e2      	b.n	800d192 <_malloc_r+0x82>
 800d1cc:	605a      	str	r2, [r3, #4]
 800d1ce:	e7ec      	b.n	800d1aa <_malloc_r+0x9a>
 800d1d0:	6862      	ldr	r2, [r4, #4]
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	d101      	bne.n	800d1da <_malloc_r+0xca>
 800d1d6:	602a      	str	r2, [r5, #0]
 800d1d8:	e7ea      	b.n	800d1b0 <_malloc_r+0xa0>
 800d1da:	605a      	str	r2, [r3, #4]
 800d1dc:	e7e8      	b.n	800d1b0 <_malloc_r+0xa0>
 800d1de:	0023      	movs	r3, r4
 800d1e0:	6864      	ldr	r4, [r4, #4]
 800d1e2:	e7a7      	b.n	800d134 <_malloc_r+0x24>
 800d1e4:	002c      	movs	r4, r5
 800d1e6:	686d      	ldr	r5, [r5, #4]
 800d1e8:	e7af      	b.n	800d14a <_malloc_r+0x3a>
 800d1ea:	230c      	movs	r3, #12
 800d1ec:	0030      	movs	r0, r6
 800d1ee:	6033      	str	r3, [r6, #0]
 800d1f0:	f000 fa6a 	bl	800d6c8 <__malloc_unlock>
 800d1f4:	e7cd      	b.n	800d192 <_malloc_r+0x82>
 800d1f6:	46c0      	nop			; (mov r8, r8)
 800d1f8:	20001164 	.word	0x20001164

0800d1fc <__sfputc_r>:
 800d1fc:	6893      	ldr	r3, [r2, #8]
 800d1fe:	b510      	push	{r4, lr}
 800d200:	3b01      	subs	r3, #1
 800d202:	6093      	str	r3, [r2, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	da04      	bge.n	800d212 <__sfputc_r+0x16>
 800d208:	6994      	ldr	r4, [r2, #24]
 800d20a:	42a3      	cmp	r3, r4
 800d20c:	db07      	blt.n	800d21e <__sfputc_r+0x22>
 800d20e:	290a      	cmp	r1, #10
 800d210:	d005      	beq.n	800d21e <__sfputc_r+0x22>
 800d212:	6813      	ldr	r3, [r2, #0]
 800d214:	1c58      	adds	r0, r3, #1
 800d216:	6010      	str	r0, [r2, #0]
 800d218:	7019      	strb	r1, [r3, #0]
 800d21a:	0008      	movs	r0, r1
 800d21c:	bd10      	pop	{r4, pc}
 800d21e:	f7fe f977 	bl	800b510 <__swbuf_r>
 800d222:	0001      	movs	r1, r0
 800d224:	e7f9      	b.n	800d21a <__sfputc_r+0x1e>

0800d226 <__sfputs_r>:
 800d226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d228:	0006      	movs	r6, r0
 800d22a:	000f      	movs	r7, r1
 800d22c:	0014      	movs	r4, r2
 800d22e:	18d5      	adds	r5, r2, r3
 800d230:	42ac      	cmp	r4, r5
 800d232:	d101      	bne.n	800d238 <__sfputs_r+0x12>
 800d234:	2000      	movs	r0, #0
 800d236:	e007      	b.n	800d248 <__sfputs_r+0x22>
 800d238:	7821      	ldrb	r1, [r4, #0]
 800d23a:	003a      	movs	r2, r7
 800d23c:	0030      	movs	r0, r6
 800d23e:	f7ff ffdd 	bl	800d1fc <__sfputc_r>
 800d242:	3401      	adds	r4, #1
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d1f3      	bne.n	800d230 <__sfputs_r+0xa>
 800d248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d24c <_vfiprintf_r>:
 800d24c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d24e:	b0a1      	sub	sp, #132	; 0x84
 800d250:	0006      	movs	r6, r0
 800d252:	000c      	movs	r4, r1
 800d254:	001f      	movs	r7, r3
 800d256:	9203      	str	r2, [sp, #12]
 800d258:	2800      	cmp	r0, #0
 800d25a:	d004      	beq.n	800d266 <_vfiprintf_r+0x1a>
 800d25c:	6983      	ldr	r3, [r0, #24]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <_vfiprintf_r+0x1a>
 800d262:	f7ff f9f7 	bl	800c654 <__sinit>
 800d266:	4b8e      	ldr	r3, [pc, #568]	; (800d4a0 <_vfiprintf_r+0x254>)
 800d268:	429c      	cmp	r4, r3
 800d26a:	d11c      	bne.n	800d2a6 <_vfiprintf_r+0x5a>
 800d26c:	6874      	ldr	r4, [r6, #4]
 800d26e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d270:	07db      	lsls	r3, r3, #31
 800d272:	d405      	bmi.n	800d280 <_vfiprintf_r+0x34>
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	059b      	lsls	r3, r3, #22
 800d278:	d402      	bmi.n	800d280 <_vfiprintf_r+0x34>
 800d27a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d27c:	f7ff fa8f 	bl	800c79e <__retarget_lock_acquire_recursive>
 800d280:	89a3      	ldrh	r3, [r4, #12]
 800d282:	071b      	lsls	r3, r3, #28
 800d284:	d502      	bpl.n	800d28c <_vfiprintf_r+0x40>
 800d286:	6923      	ldr	r3, [r4, #16]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d11d      	bne.n	800d2c8 <_vfiprintf_r+0x7c>
 800d28c:	0021      	movs	r1, r4
 800d28e:	0030      	movs	r0, r6
 800d290:	f7fe f994 	bl	800b5bc <__swsetup_r>
 800d294:	2800      	cmp	r0, #0
 800d296:	d017      	beq.n	800d2c8 <_vfiprintf_r+0x7c>
 800d298:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d29a:	07db      	lsls	r3, r3, #31
 800d29c:	d50d      	bpl.n	800d2ba <_vfiprintf_r+0x6e>
 800d29e:	2001      	movs	r0, #1
 800d2a0:	4240      	negs	r0, r0
 800d2a2:	b021      	add	sp, #132	; 0x84
 800d2a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2a6:	4b7f      	ldr	r3, [pc, #508]	; (800d4a4 <_vfiprintf_r+0x258>)
 800d2a8:	429c      	cmp	r4, r3
 800d2aa:	d101      	bne.n	800d2b0 <_vfiprintf_r+0x64>
 800d2ac:	68b4      	ldr	r4, [r6, #8]
 800d2ae:	e7de      	b.n	800d26e <_vfiprintf_r+0x22>
 800d2b0:	4b7d      	ldr	r3, [pc, #500]	; (800d4a8 <_vfiprintf_r+0x25c>)
 800d2b2:	429c      	cmp	r4, r3
 800d2b4:	d1db      	bne.n	800d26e <_vfiprintf_r+0x22>
 800d2b6:	68f4      	ldr	r4, [r6, #12]
 800d2b8:	e7d9      	b.n	800d26e <_vfiprintf_r+0x22>
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	059b      	lsls	r3, r3, #22
 800d2be:	d4ee      	bmi.n	800d29e <_vfiprintf_r+0x52>
 800d2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2c2:	f7ff fa6d 	bl	800c7a0 <__retarget_lock_release_recursive>
 800d2c6:	e7ea      	b.n	800d29e <_vfiprintf_r+0x52>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	ad08      	add	r5, sp, #32
 800d2cc:	616b      	str	r3, [r5, #20]
 800d2ce:	3320      	adds	r3, #32
 800d2d0:	766b      	strb	r3, [r5, #25]
 800d2d2:	3310      	adds	r3, #16
 800d2d4:	76ab      	strb	r3, [r5, #26]
 800d2d6:	9707      	str	r7, [sp, #28]
 800d2d8:	9f03      	ldr	r7, [sp, #12]
 800d2da:	783b      	ldrb	r3, [r7, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <_vfiprintf_r+0x98>
 800d2e0:	2b25      	cmp	r3, #37	; 0x25
 800d2e2:	d14e      	bne.n	800d382 <_vfiprintf_r+0x136>
 800d2e4:	9b03      	ldr	r3, [sp, #12]
 800d2e6:	1afb      	subs	r3, r7, r3
 800d2e8:	9305      	str	r3, [sp, #20]
 800d2ea:	9b03      	ldr	r3, [sp, #12]
 800d2ec:	429f      	cmp	r7, r3
 800d2ee:	d00d      	beq.n	800d30c <_vfiprintf_r+0xc0>
 800d2f0:	9b05      	ldr	r3, [sp, #20]
 800d2f2:	0021      	movs	r1, r4
 800d2f4:	0030      	movs	r0, r6
 800d2f6:	9a03      	ldr	r2, [sp, #12]
 800d2f8:	f7ff ff95 	bl	800d226 <__sfputs_r>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d100      	bne.n	800d302 <_vfiprintf_r+0xb6>
 800d300:	e0b5      	b.n	800d46e <_vfiprintf_r+0x222>
 800d302:	696a      	ldr	r2, [r5, #20]
 800d304:	9b05      	ldr	r3, [sp, #20]
 800d306:	4694      	mov	ip, r2
 800d308:	4463      	add	r3, ip
 800d30a:	616b      	str	r3, [r5, #20]
 800d30c:	783b      	ldrb	r3, [r7, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d100      	bne.n	800d314 <_vfiprintf_r+0xc8>
 800d312:	e0ac      	b.n	800d46e <_vfiprintf_r+0x222>
 800d314:	2201      	movs	r2, #1
 800d316:	1c7b      	adds	r3, r7, #1
 800d318:	9303      	str	r3, [sp, #12]
 800d31a:	2300      	movs	r3, #0
 800d31c:	4252      	negs	r2, r2
 800d31e:	606a      	str	r2, [r5, #4]
 800d320:	a904      	add	r1, sp, #16
 800d322:	3254      	adds	r2, #84	; 0x54
 800d324:	1852      	adds	r2, r2, r1
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	60eb      	str	r3, [r5, #12]
 800d32a:	60ab      	str	r3, [r5, #8]
 800d32c:	7013      	strb	r3, [r2, #0]
 800d32e:	65ab      	str	r3, [r5, #88]	; 0x58
 800d330:	9b03      	ldr	r3, [sp, #12]
 800d332:	2205      	movs	r2, #5
 800d334:	7819      	ldrb	r1, [r3, #0]
 800d336:	485d      	ldr	r0, [pc, #372]	; (800d4ac <_vfiprintf_r+0x260>)
 800d338:	f7ff faaa 	bl	800c890 <memchr>
 800d33c:	9b03      	ldr	r3, [sp, #12]
 800d33e:	1c5f      	adds	r7, r3, #1
 800d340:	2800      	cmp	r0, #0
 800d342:	d120      	bne.n	800d386 <_vfiprintf_r+0x13a>
 800d344:	682a      	ldr	r2, [r5, #0]
 800d346:	06d3      	lsls	r3, r2, #27
 800d348:	d504      	bpl.n	800d354 <_vfiprintf_r+0x108>
 800d34a:	2353      	movs	r3, #83	; 0x53
 800d34c:	a904      	add	r1, sp, #16
 800d34e:	185b      	adds	r3, r3, r1
 800d350:	2120      	movs	r1, #32
 800d352:	7019      	strb	r1, [r3, #0]
 800d354:	0713      	lsls	r3, r2, #28
 800d356:	d504      	bpl.n	800d362 <_vfiprintf_r+0x116>
 800d358:	2353      	movs	r3, #83	; 0x53
 800d35a:	a904      	add	r1, sp, #16
 800d35c:	185b      	adds	r3, r3, r1
 800d35e:	212b      	movs	r1, #43	; 0x2b
 800d360:	7019      	strb	r1, [r3, #0]
 800d362:	9b03      	ldr	r3, [sp, #12]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	2b2a      	cmp	r3, #42	; 0x2a
 800d368:	d016      	beq.n	800d398 <_vfiprintf_r+0x14c>
 800d36a:	2100      	movs	r1, #0
 800d36c:	68eb      	ldr	r3, [r5, #12]
 800d36e:	9f03      	ldr	r7, [sp, #12]
 800d370:	783a      	ldrb	r2, [r7, #0]
 800d372:	1c78      	adds	r0, r7, #1
 800d374:	3a30      	subs	r2, #48	; 0x30
 800d376:	4684      	mov	ip, r0
 800d378:	2a09      	cmp	r2, #9
 800d37a:	d94f      	bls.n	800d41c <_vfiprintf_r+0x1d0>
 800d37c:	2900      	cmp	r1, #0
 800d37e:	d111      	bne.n	800d3a4 <_vfiprintf_r+0x158>
 800d380:	e017      	b.n	800d3b2 <_vfiprintf_r+0x166>
 800d382:	3701      	adds	r7, #1
 800d384:	e7a9      	b.n	800d2da <_vfiprintf_r+0x8e>
 800d386:	4b49      	ldr	r3, [pc, #292]	; (800d4ac <_vfiprintf_r+0x260>)
 800d388:	682a      	ldr	r2, [r5, #0]
 800d38a:	1ac0      	subs	r0, r0, r3
 800d38c:	2301      	movs	r3, #1
 800d38e:	4083      	lsls	r3, r0
 800d390:	4313      	orrs	r3, r2
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	9703      	str	r7, [sp, #12]
 800d396:	e7cb      	b.n	800d330 <_vfiprintf_r+0xe4>
 800d398:	9b07      	ldr	r3, [sp, #28]
 800d39a:	1d19      	adds	r1, r3, #4
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	9107      	str	r1, [sp, #28]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	db01      	blt.n	800d3a8 <_vfiprintf_r+0x15c>
 800d3a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3a6:	e004      	b.n	800d3b2 <_vfiprintf_r+0x166>
 800d3a8:	425b      	negs	r3, r3
 800d3aa:	60eb      	str	r3, [r5, #12]
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	602b      	str	r3, [r5, #0]
 800d3b2:	783b      	ldrb	r3, [r7, #0]
 800d3b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d3b6:	d10a      	bne.n	800d3ce <_vfiprintf_r+0x182>
 800d3b8:	787b      	ldrb	r3, [r7, #1]
 800d3ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d3bc:	d137      	bne.n	800d42e <_vfiprintf_r+0x1e2>
 800d3be:	9b07      	ldr	r3, [sp, #28]
 800d3c0:	3702      	adds	r7, #2
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	9207      	str	r2, [sp, #28]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	db2d      	blt.n	800d428 <_vfiprintf_r+0x1dc>
 800d3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ce:	2203      	movs	r2, #3
 800d3d0:	7839      	ldrb	r1, [r7, #0]
 800d3d2:	4837      	ldr	r0, [pc, #220]	; (800d4b0 <_vfiprintf_r+0x264>)
 800d3d4:	f7ff fa5c 	bl	800c890 <memchr>
 800d3d8:	2800      	cmp	r0, #0
 800d3da:	d007      	beq.n	800d3ec <_vfiprintf_r+0x1a0>
 800d3dc:	4b34      	ldr	r3, [pc, #208]	; (800d4b0 <_vfiprintf_r+0x264>)
 800d3de:	682a      	ldr	r2, [r5, #0]
 800d3e0:	1ac0      	subs	r0, r0, r3
 800d3e2:	2340      	movs	r3, #64	; 0x40
 800d3e4:	4083      	lsls	r3, r0
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	3701      	adds	r7, #1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	7839      	ldrb	r1, [r7, #0]
 800d3ee:	1c7b      	adds	r3, r7, #1
 800d3f0:	2206      	movs	r2, #6
 800d3f2:	4830      	ldr	r0, [pc, #192]	; (800d4b4 <_vfiprintf_r+0x268>)
 800d3f4:	9303      	str	r3, [sp, #12]
 800d3f6:	7629      	strb	r1, [r5, #24]
 800d3f8:	f7ff fa4a 	bl	800c890 <memchr>
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d045      	beq.n	800d48c <_vfiprintf_r+0x240>
 800d400:	4b2d      	ldr	r3, [pc, #180]	; (800d4b8 <_vfiprintf_r+0x26c>)
 800d402:	2b00      	cmp	r3, #0
 800d404:	d127      	bne.n	800d456 <_vfiprintf_r+0x20a>
 800d406:	2207      	movs	r2, #7
 800d408:	9b07      	ldr	r3, [sp, #28]
 800d40a:	3307      	adds	r3, #7
 800d40c:	4393      	bics	r3, r2
 800d40e:	3308      	adds	r3, #8
 800d410:	9307      	str	r3, [sp, #28]
 800d412:	696b      	ldr	r3, [r5, #20]
 800d414:	9a04      	ldr	r2, [sp, #16]
 800d416:	189b      	adds	r3, r3, r2
 800d418:	616b      	str	r3, [r5, #20]
 800d41a:	e75d      	b.n	800d2d8 <_vfiprintf_r+0x8c>
 800d41c:	210a      	movs	r1, #10
 800d41e:	434b      	muls	r3, r1
 800d420:	4667      	mov	r7, ip
 800d422:	189b      	adds	r3, r3, r2
 800d424:	3909      	subs	r1, #9
 800d426:	e7a3      	b.n	800d370 <_vfiprintf_r+0x124>
 800d428:	2301      	movs	r3, #1
 800d42a:	425b      	negs	r3, r3
 800d42c:	e7ce      	b.n	800d3cc <_vfiprintf_r+0x180>
 800d42e:	2300      	movs	r3, #0
 800d430:	001a      	movs	r2, r3
 800d432:	3701      	adds	r7, #1
 800d434:	606b      	str	r3, [r5, #4]
 800d436:	7839      	ldrb	r1, [r7, #0]
 800d438:	1c78      	adds	r0, r7, #1
 800d43a:	3930      	subs	r1, #48	; 0x30
 800d43c:	4684      	mov	ip, r0
 800d43e:	2909      	cmp	r1, #9
 800d440:	d903      	bls.n	800d44a <_vfiprintf_r+0x1fe>
 800d442:	2b00      	cmp	r3, #0
 800d444:	d0c3      	beq.n	800d3ce <_vfiprintf_r+0x182>
 800d446:	9209      	str	r2, [sp, #36]	; 0x24
 800d448:	e7c1      	b.n	800d3ce <_vfiprintf_r+0x182>
 800d44a:	230a      	movs	r3, #10
 800d44c:	435a      	muls	r2, r3
 800d44e:	4667      	mov	r7, ip
 800d450:	1852      	adds	r2, r2, r1
 800d452:	3b09      	subs	r3, #9
 800d454:	e7ef      	b.n	800d436 <_vfiprintf_r+0x1ea>
 800d456:	ab07      	add	r3, sp, #28
 800d458:	9300      	str	r3, [sp, #0]
 800d45a:	0022      	movs	r2, r4
 800d45c:	0029      	movs	r1, r5
 800d45e:	0030      	movs	r0, r6
 800d460:	4b16      	ldr	r3, [pc, #88]	; (800d4bc <_vfiprintf_r+0x270>)
 800d462:	f7fd fbfb 	bl	800ac5c <_printf_float>
 800d466:	9004      	str	r0, [sp, #16]
 800d468:	9b04      	ldr	r3, [sp, #16]
 800d46a:	3301      	adds	r3, #1
 800d46c:	d1d1      	bne.n	800d412 <_vfiprintf_r+0x1c6>
 800d46e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d470:	07db      	lsls	r3, r3, #31
 800d472:	d405      	bmi.n	800d480 <_vfiprintf_r+0x234>
 800d474:	89a3      	ldrh	r3, [r4, #12]
 800d476:	059b      	lsls	r3, r3, #22
 800d478:	d402      	bmi.n	800d480 <_vfiprintf_r+0x234>
 800d47a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d47c:	f7ff f990 	bl	800c7a0 <__retarget_lock_release_recursive>
 800d480:	89a3      	ldrh	r3, [r4, #12]
 800d482:	065b      	lsls	r3, r3, #25
 800d484:	d500      	bpl.n	800d488 <_vfiprintf_r+0x23c>
 800d486:	e70a      	b.n	800d29e <_vfiprintf_r+0x52>
 800d488:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d48a:	e70a      	b.n	800d2a2 <_vfiprintf_r+0x56>
 800d48c:	ab07      	add	r3, sp, #28
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	0022      	movs	r2, r4
 800d492:	0029      	movs	r1, r5
 800d494:	0030      	movs	r0, r6
 800d496:	4b09      	ldr	r3, [pc, #36]	; (800d4bc <_vfiprintf_r+0x270>)
 800d498:	f7fd fe92 	bl	800b1c0 <_printf_i>
 800d49c:	e7e3      	b.n	800d466 <_vfiprintf_r+0x21a>
 800d49e:	46c0      	nop			; (mov r8, r8)
 800d4a0:	0800e21c 	.word	0x0800e21c
 800d4a4:	0800e23c 	.word	0x0800e23c
 800d4a8:	0800e1fc 	.word	0x0800e1fc
 800d4ac:	0800e3b4 	.word	0x0800e3b4
 800d4b0:	0800e3ba 	.word	0x0800e3ba
 800d4b4:	0800e3be 	.word	0x0800e3be
 800d4b8:	0800ac5d 	.word	0x0800ac5d
 800d4bc:	0800d227 	.word	0x0800d227

0800d4c0 <_sbrk_r>:
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	b570      	push	{r4, r5, r6, lr}
 800d4c4:	4d06      	ldr	r5, [pc, #24]	; (800d4e0 <_sbrk_r+0x20>)
 800d4c6:	0004      	movs	r4, r0
 800d4c8:	0008      	movs	r0, r1
 800d4ca:	602b      	str	r3, [r5, #0]
 800d4cc:	f7f8 fba6 	bl	8005c1c <_sbrk>
 800d4d0:	1c43      	adds	r3, r0, #1
 800d4d2:	d103      	bne.n	800d4dc <_sbrk_r+0x1c>
 800d4d4:	682b      	ldr	r3, [r5, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d000      	beq.n	800d4dc <_sbrk_r+0x1c>
 800d4da:	6023      	str	r3, [r4, #0]
 800d4dc:	bd70      	pop	{r4, r5, r6, pc}
 800d4de:	46c0      	nop			; (mov r8, r8)
 800d4e0:	2000116c 	.word	0x2000116c

0800d4e4 <__sread>:
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	000c      	movs	r4, r1
 800d4e8:	250e      	movs	r5, #14
 800d4ea:	5f49      	ldrsh	r1, [r1, r5]
 800d4ec:	f000 f8f4 	bl	800d6d8 <_read_r>
 800d4f0:	2800      	cmp	r0, #0
 800d4f2:	db03      	blt.n	800d4fc <__sread+0x18>
 800d4f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d4f6:	181b      	adds	r3, r3, r0
 800d4f8:	6563      	str	r3, [r4, #84]	; 0x54
 800d4fa:	bd70      	pop	{r4, r5, r6, pc}
 800d4fc:	89a3      	ldrh	r3, [r4, #12]
 800d4fe:	4a02      	ldr	r2, [pc, #8]	; (800d508 <__sread+0x24>)
 800d500:	4013      	ands	r3, r2
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	e7f9      	b.n	800d4fa <__sread+0x16>
 800d506:	46c0      	nop			; (mov r8, r8)
 800d508:	ffffefff 	.word	0xffffefff

0800d50c <__swrite>:
 800d50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50e:	001f      	movs	r7, r3
 800d510:	898b      	ldrh	r3, [r1, #12]
 800d512:	0005      	movs	r5, r0
 800d514:	000c      	movs	r4, r1
 800d516:	0016      	movs	r6, r2
 800d518:	05db      	lsls	r3, r3, #23
 800d51a:	d505      	bpl.n	800d528 <__swrite+0x1c>
 800d51c:	230e      	movs	r3, #14
 800d51e:	5ec9      	ldrsh	r1, [r1, r3]
 800d520:	2200      	movs	r2, #0
 800d522:	2302      	movs	r3, #2
 800d524:	f000 f8a2 	bl	800d66c <_lseek_r>
 800d528:	89a3      	ldrh	r3, [r4, #12]
 800d52a:	4a05      	ldr	r2, [pc, #20]	; (800d540 <__swrite+0x34>)
 800d52c:	0028      	movs	r0, r5
 800d52e:	4013      	ands	r3, r2
 800d530:	81a3      	strh	r3, [r4, #12]
 800d532:	0032      	movs	r2, r6
 800d534:	230e      	movs	r3, #14
 800d536:	5ee1      	ldrsh	r1, [r4, r3]
 800d538:	003b      	movs	r3, r7
 800d53a:	f000 f81f 	bl	800d57c <_write_r>
 800d53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d540:	ffffefff 	.word	0xffffefff

0800d544 <__sseek>:
 800d544:	b570      	push	{r4, r5, r6, lr}
 800d546:	000c      	movs	r4, r1
 800d548:	250e      	movs	r5, #14
 800d54a:	5f49      	ldrsh	r1, [r1, r5]
 800d54c:	f000 f88e 	bl	800d66c <_lseek_r>
 800d550:	89a3      	ldrh	r3, [r4, #12]
 800d552:	1c42      	adds	r2, r0, #1
 800d554:	d103      	bne.n	800d55e <__sseek+0x1a>
 800d556:	4a05      	ldr	r2, [pc, #20]	; (800d56c <__sseek+0x28>)
 800d558:	4013      	ands	r3, r2
 800d55a:	81a3      	strh	r3, [r4, #12]
 800d55c:	bd70      	pop	{r4, r5, r6, pc}
 800d55e:	2280      	movs	r2, #128	; 0x80
 800d560:	0152      	lsls	r2, r2, #5
 800d562:	4313      	orrs	r3, r2
 800d564:	81a3      	strh	r3, [r4, #12]
 800d566:	6560      	str	r0, [r4, #84]	; 0x54
 800d568:	e7f8      	b.n	800d55c <__sseek+0x18>
 800d56a:	46c0      	nop			; (mov r8, r8)
 800d56c:	ffffefff 	.word	0xffffefff

0800d570 <__sclose>:
 800d570:	b510      	push	{r4, lr}
 800d572:	230e      	movs	r3, #14
 800d574:	5ec9      	ldrsh	r1, [r1, r3]
 800d576:	f000 f833 	bl	800d5e0 <_close_r>
 800d57a:	bd10      	pop	{r4, pc}

0800d57c <_write_r>:
 800d57c:	b570      	push	{r4, r5, r6, lr}
 800d57e:	0004      	movs	r4, r0
 800d580:	0008      	movs	r0, r1
 800d582:	0011      	movs	r1, r2
 800d584:	001a      	movs	r2, r3
 800d586:	2300      	movs	r3, #0
 800d588:	4d05      	ldr	r5, [pc, #20]	; (800d5a0 <_write_r+0x24>)
 800d58a:	602b      	str	r3, [r5, #0]
 800d58c:	f7f8 fb2c 	bl	8005be8 <_write>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d103      	bne.n	800d59c <_write_r+0x20>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d000      	beq.n	800d59c <_write_r+0x20>
 800d59a:	6023      	str	r3, [r4, #0]
 800d59c:	bd70      	pop	{r4, r5, r6, pc}
 800d59e:	46c0      	nop			; (mov r8, r8)
 800d5a0:	2000116c 	.word	0x2000116c

0800d5a4 <__assert_func>:
 800d5a4:	b530      	push	{r4, r5, lr}
 800d5a6:	0014      	movs	r4, r2
 800d5a8:	001a      	movs	r2, r3
 800d5aa:	4b09      	ldr	r3, [pc, #36]	; (800d5d0 <__assert_func+0x2c>)
 800d5ac:	0005      	movs	r5, r0
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	b085      	sub	sp, #20
 800d5b2:	68d8      	ldr	r0, [r3, #12]
 800d5b4:	4b07      	ldr	r3, [pc, #28]	; (800d5d4 <__assert_func+0x30>)
 800d5b6:	2c00      	cmp	r4, #0
 800d5b8:	d101      	bne.n	800d5be <__assert_func+0x1a>
 800d5ba:	4b07      	ldr	r3, [pc, #28]	; (800d5d8 <__assert_func+0x34>)
 800d5bc:	001c      	movs	r4, r3
 800d5be:	9301      	str	r3, [sp, #4]
 800d5c0:	9100      	str	r1, [sp, #0]
 800d5c2:	002b      	movs	r3, r5
 800d5c4:	4905      	ldr	r1, [pc, #20]	; (800d5dc <__assert_func+0x38>)
 800d5c6:	9402      	str	r4, [sp, #8]
 800d5c8:	f000 f81c 	bl	800d604 <fiprintf>
 800d5cc:	f000 f8a5 	bl	800d71a <abort>
 800d5d0:	20000024 	.word	0x20000024
 800d5d4:	0800e3c5 	.word	0x0800e3c5
 800d5d8:	0800e400 	.word	0x0800e400
 800d5dc:	0800e3d2 	.word	0x0800e3d2

0800d5e0 <_close_r>:
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	b570      	push	{r4, r5, r6, lr}
 800d5e4:	4d06      	ldr	r5, [pc, #24]	; (800d600 <_close_r+0x20>)
 800d5e6:	0004      	movs	r4, r0
 800d5e8:	0008      	movs	r0, r1
 800d5ea:	602b      	str	r3, [r5, #0]
 800d5ec:	f7f8 fb0a 	bl	8005c04 <_close>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d103      	bne.n	800d5fc <_close_r+0x1c>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d000      	beq.n	800d5fc <_close_r+0x1c>
 800d5fa:	6023      	str	r3, [r4, #0]
 800d5fc:	bd70      	pop	{r4, r5, r6, pc}
 800d5fe:	46c0      	nop			; (mov r8, r8)
 800d600:	2000116c 	.word	0x2000116c

0800d604 <fiprintf>:
 800d604:	b40e      	push	{r1, r2, r3}
 800d606:	b503      	push	{r0, r1, lr}
 800d608:	0001      	movs	r1, r0
 800d60a:	ab03      	add	r3, sp, #12
 800d60c:	4804      	ldr	r0, [pc, #16]	; (800d620 <fiprintf+0x1c>)
 800d60e:	cb04      	ldmia	r3!, {r2}
 800d610:	6800      	ldr	r0, [r0, #0]
 800d612:	9301      	str	r3, [sp, #4]
 800d614:	f7ff fe1a 	bl	800d24c <_vfiprintf_r>
 800d618:	b002      	add	sp, #8
 800d61a:	bc08      	pop	{r3}
 800d61c:	b003      	add	sp, #12
 800d61e:	4718      	bx	r3
 800d620:	20000024 	.word	0x20000024

0800d624 <_fstat_r>:
 800d624:	2300      	movs	r3, #0
 800d626:	b570      	push	{r4, r5, r6, lr}
 800d628:	4d06      	ldr	r5, [pc, #24]	; (800d644 <_fstat_r+0x20>)
 800d62a:	0004      	movs	r4, r0
 800d62c:	0008      	movs	r0, r1
 800d62e:	0011      	movs	r1, r2
 800d630:	602b      	str	r3, [r5, #0]
 800d632:	f7f8 faea 	bl	8005c0a <_fstat>
 800d636:	1c43      	adds	r3, r0, #1
 800d638:	d103      	bne.n	800d642 <_fstat_r+0x1e>
 800d63a:	682b      	ldr	r3, [r5, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d000      	beq.n	800d642 <_fstat_r+0x1e>
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	bd70      	pop	{r4, r5, r6, pc}
 800d644:	2000116c 	.word	0x2000116c

0800d648 <_isatty_r>:
 800d648:	2300      	movs	r3, #0
 800d64a:	b570      	push	{r4, r5, r6, lr}
 800d64c:	4d06      	ldr	r5, [pc, #24]	; (800d668 <_isatty_r+0x20>)
 800d64e:	0004      	movs	r4, r0
 800d650:	0008      	movs	r0, r1
 800d652:	602b      	str	r3, [r5, #0]
 800d654:	f7f8 fade 	bl	8005c14 <_isatty>
 800d658:	1c43      	adds	r3, r0, #1
 800d65a:	d103      	bne.n	800d664 <_isatty_r+0x1c>
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d000      	beq.n	800d664 <_isatty_r+0x1c>
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	bd70      	pop	{r4, r5, r6, pc}
 800d666:	46c0      	nop			; (mov r8, r8)
 800d668:	2000116c 	.word	0x2000116c

0800d66c <_lseek_r>:
 800d66c:	b570      	push	{r4, r5, r6, lr}
 800d66e:	0004      	movs	r4, r0
 800d670:	0008      	movs	r0, r1
 800d672:	0011      	movs	r1, r2
 800d674:	001a      	movs	r2, r3
 800d676:	2300      	movs	r3, #0
 800d678:	4d05      	ldr	r5, [pc, #20]	; (800d690 <_lseek_r+0x24>)
 800d67a:	602b      	str	r3, [r5, #0]
 800d67c:	f7f8 facc 	bl	8005c18 <_lseek>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	d103      	bne.n	800d68c <_lseek_r+0x20>
 800d684:	682b      	ldr	r3, [r5, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d000      	beq.n	800d68c <_lseek_r+0x20>
 800d68a:	6023      	str	r3, [r4, #0]
 800d68c:	bd70      	pop	{r4, r5, r6, pc}
 800d68e:	46c0      	nop			; (mov r8, r8)
 800d690:	2000116c 	.word	0x2000116c

0800d694 <__ascii_mbtowc>:
 800d694:	b082      	sub	sp, #8
 800d696:	2900      	cmp	r1, #0
 800d698:	d100      	bne.n	800d69c <__ascii_mbtowc+0x8>
 800d69a:	a901      	add	r1, sp, #4
 800d69c:	1e10      	subs	r0, r2, #0
 800d69e:	d006      	beq.n	800d6ae <__ascii_mbtowc+0x1a>
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d006      	beq.n	800d6b2 <__ascii_mbtowc+0x1e>
 800d6a4:	7813      	ldrb	r3, [r2, #0]
 800d6a6:	600b      	str	r3, [r1, #0]
 800d6a8:	7810      	ldrb	r0, [r2, #0]
 800d6aa:	1e43      	subs	r3, r0, #1
 800d6ac:	4198      	sbcs	r0, r3
 800d6ae:	b002      	add	sp, #8
 800d6b0:	4770      	bx	lr
 800d6b2:	2002      	movs	r0, #2
 800d6b4:	4240      	negs	r0, r0
 800d6b6:	e7fa      	b.n	800d6ae <__ascii_mbtowc+0x1a>

0800d6b8 <__malloc_lock>:
 800d6b8:	b510      	push	{r4, lr}
 800d6ba:	4802      	ldr	r0, [pc, #8]	; (800d6c4 <__malloc_lock+0xc>)
 800d6bc:	f7ff f86f 	bl	800c79e <__retarget_lock_acquire_recursive>
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	46c0      	nop			; (mov r8, r8)
 800d6c4:	20001160 	.word	0x20001160

0800d6c8 <__malloc_unlock>:
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	4802      	ldr	r0, [pc, #8]	; (800d6d4 <__malloc_unlock+0xc>)
 800d6cc:	f7ff f868 	bl	800c7a0 <__retarget_lock_release_recursive>
 800d6d0:	bd10      	pop	{r4, pc}
 800d6d2:	46c0      	nop			; (mov r8, r8)
 800d6d4:	20001160 	.word	0x20001160

0800d6d8 <_read_r>:
 800d6d8:	b570      	push	{r4, r5, r6, lr}
 800d6da:	0004      	movs	r4, r0
 800d6dc:	0008      	movs	r0, r1
 800d6de:	0011      	movs	r1, r2
 800d6e0:	001a      	movs	r2, r3
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	4d05      	ldr	r5, [pc, #20]	; (800d6fc <_read_r+0x24>)
 800d6e6:	602b      	str	r3, [r5, #0]
 800d6e8:	f7f8 fa70 	bl	8005bcc <_read>
 800d6ec:	1c43      	adds	r3, r0, #1
 800d6ee:	d103      	bne.n	800d6f8 <_read_r+0x20>
 800d6f0:	682b      	ldr	r3, [r5, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d000      	beq.n	800d6f8 <_read_r+0x20>
 800d6f6:	6023      	str	r3, [r4, #0]
 800d6f8:	bd70      	pop	{r4, r5, r6, pc}
 800d6fa:	46c0      	nop			; (mov r8, r8)
 800d6fc:	2000116c 	.word	0x2000116c

0800d700 <__ascii_wctomb>:
 800d700:	0003      	movs	r3, r0
 800d702:	1e08      	subs	r0, r1, #0
 800d704:	d005      	beq.n	800d712 <__ascii_wctomb+0x12>
 800d706:	2aff      	cmp	r2, #255	; 0xff
 800d708:	d904      	bls.n	800d714 <__ascii_wctomb+0x14>
 800d70a:	228a      	movs	r2, #138	; 0x8a
 800d70c:	2001      	movs	r0, #1
 800d70e:	601a      	str	r2, [r3, #0]
 800d710:	4240      	negs	r0, r0
 800d712:	4770      	bx	lr
 800d714:	2001      	movs	r0, #1
 800d716:	700a      	strb	r2, [r1, #0]
 800d718:	e7fb      	b.n	800d712 <__ascii_wctomb+0x12>

0800d71a <abort>:
 800d71a:	2006      	movs	r0, #6
 800d71c:	b510      	push	{r4, lr}
 800d71e:	f000 f82d 	bl	800d77c <raise>
 800d722:	2001      	movs	r0, #1
 800d724:	f7f8 fa4c 	bl	8005bc0 <_exit>

0800d728 <_raise_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	0004      	movs	r4, r0
 800d72c:	000d      	movs	r5, r1
 800d72e:	291f      	cmp	r1, #31
 800d730:	d904      	bls.n	800d73c <_raise_r+0x14>
 800d732:	2316      	movs	r3, #22
 800d734:	6003      	str	r3, [r0, #0]
 800d736:	2001      	movs	r0, #1
 800d738:	4240      	negs	r0, r0
 800d73a:	bd70      	pop	{r4, r5, r6, pc}
 800d73c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d004      	beq.n	800d74c <_raise_r+0x24>
 800d742:	008a      	lsls	r2, r1, #2
 800d744:	189b      	adds	r3, r3, r2
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	2a00      	cmp	r2, #0
 800d74a:	d108      	bne.n	800d75e <_raise_r+0x36>
 800d74c:	0020      	movs	r0, r4
 800d74e:	f000 f831 	bl	800d7b4 <_getpid_r>
 800d752:	002a      	movs	r2, r5
 800d754:	0001      	movs	r1, r0
 800d756:	0020      	movs	r0, r4
 800d758:	f000 f81a 	bl	800d790 <_kill_r>
 800d75c:	e7ed      	b.n	800d73a <_raise_r+0x12>
 800d75e:	2000      	movs	r0, #0
 800d760:	2a01      	cmp	r2, #1
 800d762:	d0ea      	beq.n	800d73a <_raise_r+0x12>
 800d764:	1c51      	adds	r1, r2, #1
 800d766:	d103      	bne.n	800d770 <_raise_r+0x48>
 800d768:	2316      	movs	r3, #22
 800d76a:	3001      	adds	r0, #1
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	e7e4      	b.n	800d73a <_raise_r+0x12>
 800d770:	2400      	movs	r4, #0
 800d772:	0028      	movs	r0, r5
 800d774:	601c      	str	r4, [r3, #0]
 800d776:	4790      	blx	r2
 800d778:	0020      	movs	r0, r4
 800d77a:	e7de      	b.n	800d73a <_raise_r+0x12>

0800d77c <raise>:
 800d77c:	b510      	push	{r4, lr}
 800d77e:	4b03      	ldr	r3, [pc, #12]	; (800d78c <raise+0x10>)
 800d780:	0001      	movs	r1, r0
 800d782:	6818      	ldr	r0, [r3, #0]
 800d784:	f7ff ffd0 	bl	800d728 <_raise_r>
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	46c0      	nop			; (mov r8, r8)
 800d78c:	20000024 	.word	0x20000024

0800d790 <_kill_r>:
 800d790:	2300      	movs	r3, #0
 800d792:	b570      	push	{r4, r5, r6, lr}
 800d794:	4d06      	ldr	r5, [pc, #24]	; (800d7b0 <_kill_r+0x20>)
 800d796:	0004      	movs	r4, r0
 800d798:	0008      	movs	r0, r1
 800d79a:	0011      	movs	r1, r2
 800d79c:	602b      	str	r3, [r5, #0]
 800d79e:	f7f8 fa07 	bl	8005bb0 <_kill>
 800d7a2:	1c43      	adds	r3, r0, #1
 800d7a4:	d103      	bne.n	800d7ae <_kill_r+0x1e>
 800d7a6:	682b      	ldr	r3, [r5, #0]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d000      	beq.n	800d7ae <_kill_r+0x1e>
 800d7ac:	6023      	str	r3, [r4, #0]
 800d7ae:	bd70      	pop	{r4, r5, r6, pc}
 800d7b0:	2000116c 	.word	0x2000116c

0800d7b4 <_getpid_r>:
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	f7f8 f9f9 	bl	8005bac <_getpid>
 800d7ba:	bd10      	pop	{r4, pc}

0800d7bc <_init>:
 800d7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7be:	46c0      	nop			; (mov r8, r8)
 800d7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c2:	bc08      	pop	{r3}
 800d7c4:	469e      	mov	lr, r3
 800d7c6:	4770      	bx	lr

0800d7c8 <_fini>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	46c0      	nop			; (mov r8, r8)
 800d7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ce:	bc08      	pop	{r3}
 800d7d0:	469e      	mov	lr, r3
 800d7d2:	4770      	bx	lr
